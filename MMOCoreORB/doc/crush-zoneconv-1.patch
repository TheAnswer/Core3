Index: src/main.cpp
===================================================================
--- src/main.cpp	(revision 3034)
+++ src/main.cpp	(working copy)
@@ -158,72 +158,7 @@
 	exit(0);
 }
 
-int main(int argc, char* argv[]) {
-	/*
-	Time time;
-
-	String trePath = "/home/crush/swg/";
-
-	TreeArchive archive;
-	archive.unpackFile(trePath + "bottom.tre");
-	archive.unpackFile(trePath + "default_patch.tre");
-	archive.unpackFile(trePath + "data_animation_00.tre");
-	archive.unpackFile(trePath + "data_music_00.tre");
-	archive.unpackFile(trePath + "data_other_00.tre");
-	archive.unpackFile(trePath + "data_sample_00.tre");
-	archive.unpackFile(trePath + "data_sample_01.tre");
-	archive.unpackFile(trePath + "data_sample_02.tre");
-	archive.unpackFile(trePath + "data_sample_03.tre");
-	archive.unpackFile(trePath + "data_sample_04.tre");
-	archive.unpackFile(trePath + "data_skeletal_mesh_00.tre");
-	archive.unpackFile(trePath + "data_skeletal_mesh_01.tre");
-	archive.unpackFile(trePath + "data_static_mesh_00.tre");
-	archive.unpackFile(trePath + "data_static_mesh_01.tre");
-	archive.unpackFile(trePath + "data_texture_00.tre");
-	archive.unpackFile(trePath + "data_texture_01.tre");
-	archive.unpackFile(trePath + "data_texture_02.tre");
-	archive.unpackFile(trePath + "data_texture_03.tre");
-	archive.unpackFile(trePath + "data_texture_04.tre");
-	archive.unpackFile(trePath + "data_texture_05.tre");
-	archive.unpackFile(trePath + "data_texture_06.tre");
-	archive.unpackFile(trePath + "data_texture_07.tre");
-	archive.unpackFile(trePath + "patch_00.tre");
-	archive.unpackFile(trePath + "patch_01.tre");
-	archive.unpackFile(trePath + "patch_02.tre");
-	archive.unpackFile(trePath + "patch_03.tre");
-	archive.unpackFile(trePath + "patch_04.tre");
-	archive.unpackFile(trePath + "patch_05.tre");
-	archive.unpackFile(trePath + "patch_06.tre");
-	archive.unpackFile(trePath + "patch_07.tre");
-	archive.unpackFile(trePath + "patch_08.tre");
-	archive.unpackFile(trePath + "patch_09.tre");
-	archive.unpackFile(trePath + "patch_10.tre");
-	archive.unpackFile(trePath + "data_sku1_00.tre");
-	archive.unpackFile(trePath + "data_sku1_01.tre");
-	archive.unpackFile(trePath + "data_sku1_02.tre");
-	archive.unpackFile(trePath + "data_sku1_03.tre");
-	archive.unpackFile(trePath + "data_sku1_04.tre");
-	archive.unpackFile(trePath + "data_sku1_05.tre");
-	archive.unpackFile(trePath + "patch_11_00.tre");
-	archive.unpackFile(trePath + "patch_11_01.tre");
-	archive.unpackFile(trePath + "patch_11_02.tre");
-	archive.unpackFile(trePath + "patch_11_03.tre");
-	archive.unpackFile(trePath + "data_sku1_06.tre");
-	archive.unpackFile(trePath + "data_sku1_07.tre");
-	archive.unpackFile(trePath + "patch_12_00.tre");
-	archive.unpackFile(trePath + "patch_sku1_12_00.tre");
-	archive.unpackFile(trePath + "patch_13_00.tre");
-	archive.unpackFile(trePath + "patch_sku1_13_00.tre");
-	archive.unpackFile(trePath + "patch_14_00.tre");
-	archive.unpackFile(trePath + "patch_sku1_14_00.tre");
-
-	archive.printNodesByPath("terrain");
-
-	System::out << "Read in " << time.miliDifference() << endl;
-
-
-	return 0;*/
-
+int main(int argc, char* argv[])
 	try {
 		Vector<String> arguments;
 		for (int i = 1; i < argc; ++i) {
Index: src/server/chat/ChatManagerImplementation.cpp
===================================================================
--- src/server/chat/ChatManagerImplementation.cpp	(revision 3034)
+++ src/server/chat/ChatManagerImplementation.cpp	(working copy)
@@ -106,7 +106,7 @@
 		if (zone == NULL)
 			continue;
 
-		ChatRoom* planetRoom = createRoom(Planet::getPlanetName(i), core3Room);
+		ChatRoom* planetRoom = createRoom(zone->getZoneName(), core3Room);
 		core3Room->addSubRoom(planetRoom);
 
 		ChatRoom* planetaryChat = createRoom("chat", planetRoom);
Index: src/server/zone/Zone.cpp
===================================================================
--- src/server/zone/Zone.cpp	(revision 3034)
+++ src/server/zone/Zone.cpp	(working copy)
@@ -28,10 +28,10 @@
  *	ZoneStub
  */
 
-enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_GETNEARESTCLONINGBUILDING__CREATUREOBJECT_,RPC_GETNEARESTPLANETARYOBJECT__SCENEOBJECT_INT_,RPC_INITIALIZEPRIVATEDATA__,RPC_UPDATEACTIVEAREAS__SCENEOBJECT_,RPC_STARTMANAGERS__,RPC_STOPMANAGERS__,RPC_GETHEIGHT__FLOAT_FLOAT_,RPC_ADDSCENEOBJECT__SCENEOBJECT_,RPC_SENDMAPLOCATIONSTO__STRING_SCENEOBJECT_,RPC_DROPSCENEOBJECT__SCENEOBJECT_,RPC_GETZONEID__,RPC_GETPLANETNAME__,RPC_GETPLANETMANAGER__,RPC_GETCITYMANAGER__,RPC_GETZONESERVER__,RPC_GETCREATUREMANAGER__,RPC_GETGALACTICTIME__,RPC_HASMANAGERSSTARTED__,RPC_GETMINX__,RPC_GETMAXX__,RPC_GETMINY__,RPC_GETMAXY__};
+enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_GETNEARESTCLONINGBUILDING__CREATUREOBJECT_,RPC_GETNEARESTPLANETARYOBJECT__SCENEOBJECT_INT_,RPC_INITIALIZEPRIVATEDATA__,RPC_UPDATEACTIVEAREAS__SCENEOBJECT_,RPC_STARTMANAGERS__,RPC_STOPMANAGERS__,RPC_GETHEIGHT__FLOAT_FLOAT_,RPC_ADDSCENEOBJECT__SCENEOBJECT_,RPC_SENDMAPLOCATIONSTO__STRING_SCENEOBJECT_,RPC_DROPSCENEOBJECT__SCENEOBJECT_,RPC_GETPLANETMANAGER__,RPC_GETCITYMANAGER__,RPC_GETZONESERVER__,RPC_GETCREATUREMANAGER__,RPC_GETGALACTICTIME__,RPC_HASMANAGERSSTARTED__,RPC_GETMINX__,RPC_GETMAXX__,RPC_GETMINY__,RPC_GETMAXY__,RPC_GETZONENAME__};
 
-Zone::Zone(ZoneProcessServer* processor, int zoneid) : ManagedObject(DummyConstructorParameter::instance()) {
-	ZoneImplementation* _implementation = new ZoneImplementation(processor, zoneid);
+Zone::Zone(ZoneProcessServer* processor, const String& zoneName) : ManagedObject(DummyConstructorParameter::instance()) {
+	ZoneImplementation* _implementation = new ZoneImplementation(processor, zoneName);
 	_impl = _implementation;
 	_impl->_setStub(this);
 }
@@ -268,33 +268,6 @@
 		_implementation->dropSceneObject(object);
 }
 
-int Zone::getZoneID() {
-	ZoneImplementation* _implementation = (ZoneImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETZONEID__);
-
-		return method.executeWithSignedIntReturn();
-	} else
-		return _implementation->getZoneID();
-}
-
-String Zone::getPlanetName() {
-	ZoneImplementation* _implementation = (ZoneImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETPLANETNAME__);
-
-		method.executeWithAsciiReturn(_return_getPlanetName);
-		return _return_getPlanetName;
-	} else
-		return _implementation->getPlanetName();
-}
-
 PlanetManager* Zone::getPlanetManager() {
 	ZoneImplementation* _implementation = (ZoneImplementation*) _getImplementation();
 	if (_implementation == NULL) {
@@ -425,6 +398,20 @@
 		return _implementation->getMaxY();
 }
 
+String Zone::getZoneName() {
+	ZoneImplementation* _implementation = (ZoneImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		if (!deployed)
+			throw ObjectNotDeployedException(this);
+
+		DistributedMethod method(this, RPC_GETZONENAME__);
+
+		method.executeWithAsciiReturn(_return_getZoneName);
+		return _return_getZoneName;
+	} else
+		return _implementation->getZoneName();
+}
+
 DistributedObjectServant* Zone::_getImplementation() {
 
 	_updated = true;
@@ -527,8 +514,8 @@
 	if (ManagedObjectImplementation::readObjectMember(stream, _name))
 		return true;
 
-	if (_name == "zoneID") {
-		TypeInfo<int >::parseFromBinaryStream(&zoneID, stream);
+	if (_name == "zoneName") {
+		TypeInfo<String >::parseFromBinaryStream(&zoneName, stream);
 		return true;
 	}
 
@@ -582,11 +569,11 @@
 	String _name;
 	int _offset;
 	uint16 _totalSize;
-	_name = "zoneID";
+	_name = "zoneName";
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
 	stream->writeShort(0);
-	TypeInfo<int >::toBinaryStream(&zoneID, stream);
+	TypeInfo<String >::toBinaryStream(&zoneName, stream);
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
@@ -655,11 +642,6 @@
 	return regionTree;
 }
 
-int ZoneImplementation::getZoneID() {
-	// server/zone/Zone.idl():  		return zoneID;
-	return zoneID;
-}
-
 PlanetManager* ZoneImplementation::getPlanetManager() {
 	// server/zone/Zone.idl():  		return planetManager;
 	return planetManager;
@@ -690,6 +672,11 @@
 	return managersStarted;
 }
 
+String ZoneImplementation::getZoneName() {
+	// server/zone/Zone.idl():  		return zoneName;
+	return zoneName;
+}
+
 /*
  *	ZoneAdapter
  */
@@ -737,12 +724,6 @@
 	case RPC_DROPSCENEOBJECT__SCENEOBJECT_:
 		dropSceneObject((SceneObject*) inv->getObjectParameter());
 		break;
-	case RPC_GETZONEID__:
-		resp->insertSignedInt(getZoneID());
-		break;
-	case RPC_GETPLANETNAME__:
-		resp->insertAscii(getPlanetName());
-		break;
 	case RPC_GETPLANETMANAGER__:
 		resp->insertLong(getPlanetManager()->_getObjectID());
 		break;
@@ -773,6 +754,9 @@
 	case RPC_GETMAXY__:
 		resp->insertFloat(getMaxY());
 		break;
+	case RPC_GETZONENAME__:
+		resp->insertAscii(getZoneName());
+		break;
 	default:
 		return NULL;
 	}
@@ -828,14 +812,6 @@
 	((ZoneImplementation*) impl)->dropSceneObject(object);
 }
 
-int ZoneAdapter::getZoneID() {
-	return ((ZoneImplementation*) impl)->getZoneID();
-}
-
-String ZoneAdapter::getPlanetName() {
-	return ((ZoneImplementation*) impl)->getPlanetName();
-}
-
 PlanetManager* ZoneAdapter::getPlanetManager() {
 	return ((ZoneImplementation*) impl)->getPlanetManager();
 }
@@ -876,6 +852,10 @@
 	return ((ZoneImplementation*) impl)->getMaxY();
 }
 
+String ZoneAdapter::getZoneName() {
+	return ((ZoneImplementation*) impl)->getZoneName();
+}
+
 /*
  *	ZoneHelper
  */
Index: src/server/zone/Zone.h
===================================================================
--- src/server/zone/Zone.h	(revision 3034)
+++ src/server/zone/Zone.h	(working copy)
@@ -180,7 +180,7 @@
 
 class Zone : public ManagedObject {
 public:
-	Zone(ZoneProcessServer* processor, int zoneid);
+	Zone(ZoneProcessServer* processor, const String& zoneName);
 
 	void initializeTransientMembers();
 
@@ -220,10 +220,6 @@
 
 	void dropSceneObject(SceneObject* object);
 
-	int getZoneID();
-
-	String getPlanetName();
-
 	PlanetManager* getPlanetManager();
 
 	CityManager* getCityManager();
@@ -244,6 +240,8 @@
 
 	float getMaxY();
 
+	String getZoneName();
+
 	DistributedObjectServant* _getImplementation();
 
 	void _setImplementation(DistributedObjectServant* servant);
@@ -253,7 +251,7 @@
 
 	virtual ~Zone();
 
-	String _return_getPlanetName;
+	String _return_getZoneName;
 
 	friend class ZoneHelper;
 };
@@ -267,7 +265,7 @@
 namespace zone {
 
 class ZoneImplementation : public ManagedObjectImplementation, public QuadTree {
-	int zoneID;
+	String zoneName;
 
 	ManagedReference<ZoneProcessServer* > processor;
 
@@ -292,7 +290,7 @@
 	bool managersStarted;
 
 public:
-	ZoneImplementation(ZoneProcessServer* processor, int zoneid);
+	ZoneImplementation(ZoneProcessServer* processor, const String& zoneName);
 
 	ZoneImplementation(DummyConstructorParameter* param);
 
@@ -336,10 +334,6 @@
 
 	void dropSceneObject(SceneObject* object);
 
-	int getZoneID();
-
-	String getPlanetName();
-
 	PlanetManager* getPlanetManager();
 
 	CityManager* getCityManager();
@@ -360,6 +354,8 @@
 
 	float getMaxY();
 
+	String getZoneName();
+
 	Zone* _this;
 
 	operator const Zone*();
@@ -425,10 +421,6 @@
 
 	void dropSceneObject(SceneObject* object);
 
-	int getZoneID();
-
-	String getPlanetName();
-
 	PlanetManager* getPlanetManager();
 
 	CityManager* getCityManager();
@@ -449,6 +441,8 @@
 
 	float getMaxY();
 
+	String getZoneName();
+
 protected:
 	String _param0_sendMapLocationsTo__String_SceneObject_;
 };
Index: src/server/zone/Zone.idl
===================================================================
--- src/server/zone/Zone.idl	(revision 3034)
+++ src/server/zone/Zone.idl	(working copy)
@@ -74,15 +74,13 @@
 import server.zone.objects.creature.CreatureObject;
 
 class Zone extends ManagedObject implements QuadTree {
-	private int zoneID;
-
+	private string zoneName;
+	
 	private transient ZoneProcessServer processor;
 
 	@dereferenced
 	private ObjectMap objectMap;
-	
-	//private StructureManager structureManager; // move to planet manager when converted
-	
+
 	private PlanetManager planetManager;
 	
 	private CityManager cityManager;
@@ -104,7 +102,7 @@
 	
 	private boolean managersStarted;
 	
-	public native Zone(ZoneProcessServer processor, int zoneid);
+	public native Zone(ZoneProcessServer processor, final string zoneName);
 	public native void initializeTransientMembers();
 	public native void finalize();
 	
@@ -155,18 +153,6 @@
 	
 	public native void dropSceneObject(SceneObject object);
 	
-	//public native void registerPlanetaryMapObject(SceneObject object);
-	//public native void unregisterPlanetaryMapObject(SceneObject object);
-
-	// setters and getters
-	public int getZoneID() {
-		return zoneID;
-	}
-	
-	public native string getPlanetName();
-	
-	//public native SceneObject lookupObject(unsigned long objectID);
-	
 	public PlanetManager getPlanetManager() {
 		return planetManager;
 	}
@@ -199,4 +185,8 @@
 	public native float getMaxX();
 	public native float getMinY();
 	public native float getMaxY();
+	
+	public string getZoneName() {
+		return zoneName;
+	}
 }
Index: src/server/zone/ZoneImplementation.cpp
===================================================================
--- src/server/zone/ZoneImplementation.cpp	(revision 3034)
+++ src/server/zone/ZoneImplementation.cpp	(working copy)
@@ -108,22 +108,14 @@
 
 	mapLocations.setNoDuplicateInsertPlan();
 
-	if (zoneID <= 9) {
-		String planetName = Planet::getPlanetName(zoneID);
-
-		heightMap->load("planets/" + planetName + "/" + planetName + ".hmap");
-	}
+	//heightMap->load("planets/" + planetName + "/" + planetName + ".hmap");
 }
 
 void ZoneImplementation::startManagers() {
 	//if (zoneID > 45) //TODO: Change back to 9 sometimes. We use Zone 10 (Space Corellia) as a "prison" for the CSRs sending bad players there
 	//	return;
 
-	if (zoneID <= 9) {
-		String planetName = Planet::getPlanetName(zoneID);
-
-		heightMap->load("planets/" + planetName + "/" + planetName + ".hmap");
-	}
+	//heightMap->load("planets/" + planetName + "/" + planetName + ".hmap");
 
 	planetManager->initialize();
 
@@ -460,12 +452,6 @@
 	return retVector;
 }
 
-String ZoneImplementation::getPlanetName() {
-	String planetName = Planet::getPlanetName(getZoneID());
-
-	return planetName;
-}
-
 float ZoneImplementation::getMinX() {
 	return -8192;
 }
Index: src/server/zone/ZoneServer.cpp
===================================================================
--- src/server/zone/ZoneServer.cpp	(revision 3034)
+++ src/server/zone/ZoneServer.cpp	(working copy)
@@ -1015,7 +1015,7 @@
 		return true;
 
 	if (_name == "zones") {
-		TypeInfo<Vector<ManagedReference<Zone* > > >::parseFromBinaryStream(&zones, stream);
+		TypeInfo<VectorMap<String, ManagedReference<Zone* > > >::parseFromBinaryStream(&zones, stream);
 		return true;
 	}
 
@@ -1114,8 +1114,8 @@
 		return true;
 	}
 
-	if (_name == "name") {
-		TypeInfo<String >::parseFromBinaryStream(&name, stream);
+	if (_name == "galaxyName") {
+		TypeInfo<String >::parseFromBinaryStream(&galaxyName, stream);
 		return true;
 	}
 
@@ -1153,7 +1153,7 @@
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
 	stream->writeShort(0);
-	TypeInfo<Vector<ManagedReference<Zone* > > >::toBinaryStream(&zones, stream);
+	TypeInfo<VectorMap<String, ManagedReference<Zone* > > >::toBinaryStream(&zones, stream);
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
@@ -1309,11 +1309,11 @@
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
-	_name = "name";
+	_name = "galaxyName";
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
 	stream->writeShort(0);
-	TypeInfo<String >::toBinaryStream(&name, stream);
+	TypeInfo<String >::toBinaryStream(&galaxyName, stream);
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
Index: src/server/zone/ZoneServer.h
===================================================================
--- src/server/zone/ZoneServer.h	(revision 3034)
+++ src/server/zone/ZoneServer.h	(working copy)
@@ -524,7 +524,7 @@
 
 	ManagedReference<ZoneProcessServer* > processor;
 
-	Vector<ManagedReference<Zone* > > zones;
+	VectorMap<String, ManagedReference<Zone* > > zones;
 
 	ObjectManager* objectManager;
 
@@ -570,7 +570,7 @@
 
 	int serverState;
 
-	String name;
+	String galaxyName;
 
 	String messageoftheDay;
 
Index: src/server/zone/ZoneServer.idl
===================================================================
--- src/server/zone/ZoneServer.idl	(revision 3034)
+++ src/server/zone/ZoneServer.idl	(working copy)
@@ -97,7 +97,7 @@
 	private transient ZoneProcessServer processor;
 
 	@dereferenced
-	private Vector<Zone> zones;
+	private VectorMap<string, Zone> zones;
 	
 	private transient ObjectManager objectManager;
 	private PlayerManager playerManager;
@@ -137,7 +137,7 @@
 	
 	private int serverState;
 
-	private string name;
+	private string galaxyName;
 	private string messageoftheDay;
 
 	private int galaxyID;
Index: src/server/zone/ZoneServerImplementation.cpp
===================================================================
--- src/server/zone/ZoneServerImplementation.cpp	(revision 3034)
+++ src/server/zone/ZoneServerImplementation.cpp	(working copy)
@@ -85,8 +85,7 @@
 ZoneServerImplementation::ZoneServerImplementation(int galaxyid) :
 		ManagedServiceImplementation(), Logger("ZoneServer") {
 	galaxyID = galaxyid;
-
-	name = "Core3";
+	galaxyName = "Core3";
 
 	processor = NULL;
 
@@ -142,10 +141,10 @@
 		Reference<ResultSet*> result = ServerDatabase::instance()->executeQuery(query);
 
 		if (result->next())
-			name = result->getString(0);
+			galaxyName = result->getString(0);
 
 	} catch (DatabaseException& e) {
-		info("Unhandled exception when getting galaxy name from database.");
+		info("Loading galaxy name: " + e.getMessage());
 	}
 
 	processor = new ZoneProcessServer(_this);
@@ -193,54 +192,39 @@
 }
 
 void ZoneServerImplementation::startZones() {
-	info("Initializing zones", true);
+	info("Initializing zones.", true);
 
-	for (int i = 0; i < 45; ++i) {
-		Zone* zone = NULL;
+	TreeDirectory* dir = TemplateManager::instance()->getTreeDirectory("terrain");
 
-#ifndef WITH_STM
-		if (i <= 10 || i == 42) {
-#else
-		if (i <= 0 || i == 42) {
-#endif
-			zone = new Zone(processor, i);
-			zone->initializePrivateData();
-			uint64 zoneObjectID = 0;
-
-			zoneObjectID = ~zoneObjectID;
-			zoneObjectID -= i;
-			zone->_setObjectID(zoneObjectID);
+	for (int i = 0; i < dir->size(); ++i) {
+			Reference<TreeFileRecord*> record = records->elementAt(i);
 
-			zone->deploy("Zone", i);
+			if (record == NULL)
+				continue;
 
-		}
+			String recordName = record->getRecordName();
 
-		zones.add(zone);
-	}
+			if (recordName.indexOf(".trn") == -1)
+				continue;
 
-	for (int i = 0; i < zones.size(); ++i) {
-		Zone* zone = zones.get(i);
+			//Load zones from the .trn file names.
+			String zoneName = recordName.subString(recordName.lastIndexOf('/'), recordName.lastIndexOf('.'));
 
-		if (zone != NULL) {
-			zone->startManagers();
+			info("Loading zone " + zoneName + ".", true);
 
-			/*Reference<Task*> task = new ZoneLoadManagersTask(zone);
-			Core::getTaskManager()->executeTask(task);*/
-		}
-	}
+			Zone* zone = new Zone(processor, zoneName);
+			zone->initializePrivateData();
 
-	/*for (int i = 0; i < zones.size(); ++i) {
-		Zone* zone = zones.get(i);
+			uint64 zoneObjectID = 0;
 
-		if (zone != NULL) {
-			if (!zone->hasManagersStarted()){
-				Thread::sleep(500);
+			zoneObjectID = ~zoneObjectID;
+			zoneObjectID -= i;
+			zone->_setObjectID(zoneObjectID);
 
-				--i;
-			}
-		}
-	}*/
+			zone->deploy("Zone " + zoneName, i);
 
+			zone->startManagers();
+	}
 }
 
 void ZoneServerImplementation::startManagers() {
Index: src/server/zone/managers/auction/AuctionManagerImplementation.cpp
===================================================================
--- src/server/zone/managers/auction/AuctionManagerImplementation.cpp	(revision 3034)
+++ src/server/zone/managers/auction/AuctionManagerImplementation.cpp	(working copy)
@@ -795,7 +795,7 @@
 
 	String playername = player->getFirstName().toLowerCase();
 	String descr = description.toString();
-	String planetStr = Planet::getPlanetName(planet);
+	String planetStr = zone->getZoneName();
 
 	AuctionItem* item  = new AuctionItem(objectToSell->getObjectID());
 
Index: src/server/zone/managers/creature/SpawnAreaMap.h
===================================================================
--- src/server/zone/managers/creature/SpawnAreaMap.h	(revision 3034)
+++ src/server/zone/managers/creature/SpawnAreaMap.h	(working copy)
@@ -30,7 +30,7 @@
 
 	void loadMap(Zone* z) {
 		zone = z;
-		String planetName = zone->getPlanetName();
+		String planetName = zone->getZoneName();
 
 		Lua::init();
 
Index: src/server/zone/managers/minigames/FishingManagerImplementation.cpp
===================================================================
--- src/server/zone/managers/minigames/FishingManagerImplementation.cpp	(revision 3034)
+++ src/server/zone/managers/minigames/FishingManagerImplementation.cpp	(working copy)
@@ -469,7 +469,7 @@
 					lootFishObject->addObject(baitObject, -1, true);
 				}
 
-				String resourceString = Planet::getPlanetName(zone->getZoneID());
+				String resourceString = zone->getZoneName();
 				resourceString = "seafood_fish_" + resourceString;
 				int amount = System::random(50)+factor;
 				ManagedReference<ResourceManager*> resourceManager = zone->getZoneServer()->getResourceManager();
Index: src/server/zone/managers/mission/MissionManagerImplementation.cpp
===================================================================
--- src/server/zone/managers/mission/MissionManagerImplementation.cpp	(revision 3034)
+++ src/server/zone/managers/mission/MissionManagerImplementation.cpp	(working copy)
@@ -395,7 +395,7 @@
 
 	Vector3 startPos = player->getCoordinate(System::random(1000) + 1000, (float)System::random(360));
 	//mission->setMissionTarget(lairObjectTemplate->getObjectName());
-	mission->setStartPlanetCRC(player->getZone()->getPlanetName().hashCode());
+	mission->setStartPlanetCRC(player->getZone()->getZoneName().hashCode());
 	mission->setStartPosition(startPos.getX(), startPos.getY(), player->getPlanetCRC());
 	mission->setCreatorName(nm->makeCreatureName());
 
Index: src/server/zone/managers/planet/PlanetManager.cpp
===================================================================
--- src/server/zone/managers/planet/PlanetManager.cpp	(revision 3034)
+++ src/server/zone/managers/planet/PlanetManager.cpp	(working copy)
@@ -729,8 +729,8 @@
 	zone = planet;
 	// server/zone/managers/planet/PlanetManager.idl():  		server = srv;
 	server = srv;
-	// server/zone/managers/planet/PlanetManager.idl():  		Logger.setLoggingName("PlanetManager " + zone.getPlanetName());
-	Logger::setLoggingName("PlanetManager " + zone->getPlanetName());
+	// server/zone/managers/planet/PlanetManager.idl():  		Logger.setLoggingName("PlanetManager " + zone.getZoneName());
+	Logger::setLoggingName("PlanetManager " + zone->getZoneName());
 	// server/zone/managers/planet/PlanetManager.idl():  		Logger.setLogging(false);
 	Logger::setLogging(false);
 	// server/zone/managers/planet/PlanetManager.idl():  		Logger.setGlobalLogging(true);
Index: src/server/zone/managers/planet/PlanetManager.idl
===================================================================
--- src/server/zone/managers/planet/PlanetManager.idl	(revision 3034)
+++ src/server/zone/managers/planet/PlanetManager.idl	(working copy)
@@ -119,7 +119,7 @@
 		zone = planet;
 		server = srv;
 				
-		Logger.setLoggingName("PlanetManager " + zone.getPlanetName());
+		Logger.setLoggingName("PlanetManager " + zone.getZoneName());
 		Logger.setLogging(false);
 		Logger.setGlobalLogging(true);
 		
Index: src/server/zone/managers/planet/PlanetManagerImplementation.cpp
===================================================================
--- src/server/zone/managers/planet/PlanetManagerImplementation.cpp	(revision 3034)
+++ src/server/zone/managers/planet/PlanetManagerImplementation.cpp	(working copy)
@@ -31,14 +31,12 @@
 void PlanetManagerImplementation::initialize() {
 	terrainManager = new TerrainManager(zone);
 
-	int zoneID = zone->getZoneID();
-
 	numberOfCities = 0;
 
 	info("Loading planet...", true);
 
 	//TODO: Load from the TRE files.
-	if (terrainManager->initialize("terrain/" + zone->getPlanetName() + ".trn"))
+	if (terrainManager->initialize("terrain/" + zone->getZoneName() + ".trn"))
 		info("Loaded terrain file successfully.", true);
 	else
 		error("Failed to load terrain file.");
@@ -59,14 +57,12 @@
 	structureManager = new StructureManager(zone, server);
 	structureManager->loadStructures();
 
-	if (zone->getZoneID() < 10) { //No need for a weather manager in tutorial or corvette etc.
-		weatherManager = new WeatherManager(zone);
-		weatherManager->initialize();
-	}
+	weatherManager = new WeatherManager(zone);
+	weatherManager->initialize();
 }
 
 void PlanetManagerImplementation::loadLuaConfig() {
-	String planetName = zone->getPlanetName();
+	String planetName = zone->getZoneName();
 
 	Lua* lua = new Lua();
 	lua->init();
@@ -104,7 +100,7 @@
 	DataTableIff dtiff;
 	dtiff.readObject(iffStream);
 
-	Vector<DataTableRow*> rows = dtiff.getRowsByColumn(0, zone->getPlanetName());
+	Vector<DataTableRow*> rows = dtiff.getRowsByColumn(0, zone->getZoneName());
 
 	if (rows.size() <= 0) {
 		info("Travel fares could not be found.", true);
@@ -171,7 +167,7 @@
 void PlanetManagerImplementation::loadSnapshotObjects() {
 	TemplateManager* templateManager = TemplateManager::instance();
 
-	IffStream* iffStream = templateManager->openIffFile("snapshot/" + zone->getPlanetName() + ".ws");
+	IffStream* iffStream = templateManager->openIffFile("snapshot/" + zone->getZoneName() + ".ws");
 
 	if (iffStream == NULL) {
 		info("Snapshot wasn't found.", true);
@@ -313,7 +309,7 @@
 void PlanetManagerImplementation::loadRegions() {
 	TemplateManager* templateManager = TemplateManager::instance();
 
-	IffStream* iffStream = templateManager->openIffFile("datatables/clientregion/" + zone->getPlanetName() + ".iff");
+	IffStream* iffStream = templateManager->openIffFile("datatables/clientregion/" + zone->getZoneName() + ".iff");
 
 	if (iffStream == NULL) {
 		info("No client regions found.", true);
@@ -416,118 +412,13 @@
 }
 
 void PlanetManagerImplementation::loadShuttles() {
-	info("loading shuttles", true);
-
-	int planetid = zone->getZoneID();
-	String planetName = Planet::getPlanetName(zone->getZoneID());
-
-	CreatureManager* creatureManager = zone->getCreatureManager();
-
-	Locker locker(_this);
-
-	try {
-		StringBuffer query;
-		query << "SELECT * FROM transports WHERE planet_id = " << planetid << ";";
-
-		Reference<ResultSet*> shut = ServerDatabase::instance()->executeQuery(query);
-
-		while (shut->next()) {
-			uint32 shuttleId = shut->getUnsignedInt(0);
-			String shuttleName = shut->getString(2);
-			uint64 shuttleParentId = shut->getUnsignedLong(3);
-			float shuttlePosX = shut->getFloat(4);
-			float shuttlePosY = shut->getFloat(5);
-			float shuttlePosZ = shut->getFloat(6);
-			float shuttleDirY = shut->getFloat(7);
-			float shuttleDirW = shut->getFloat(8);
-			float playerSpawnX = shut->getFloat(9);
-			float playerSpawnY = shut->getFloat(10);
-			float playerSpawnZ = shut->getFloat(11);
-			bool starport = shut->getInt(12);
-			uint32	tax = shut->getInt(13);
-			uint64 shuttleCRC = shut->getUnsignedLong(14);
-
-			CreatureObject* creatureObject = creatureManager->spawnCreature(shuttleCRC, shuttlePosX, shuttlePosZ, shuttlePosY, shuttleParentId);
-
-			if (creatureObject == NULL || !creatureObject->isShuttleCreature()) {
-				error("wrong crc");
-
-				continue;
-			}
-
-			ShuttleCreature* shuttle = (ShuttleCreature*) creatureObject;
-
-			shuttle->setDirection(shuttleDirW, 0, shuttleDirY, 0);
-			shuttle->setArrivalPoint(playerSpawnX, playerSpawnY, playerSpawnZ);
-			shuttle->setStarport(starport);
-			shuttle->setTax(tax);
-			shuttle->setPlanet(planetName);
-			shuttle->setCity(shuttleName);
-
-			shuttleMap.put(shuttleName, shuttle);
-
-			shuttle->doTakeOff();
-
-			StringBuffer query2;
-			query2 << "SELECT parent, pos_x, pos_y, pos_z, dir_y, dir_w FROM ticket_collectors WHERE transport_id = " << shuttleId << ";";
-
-			Reference<ResultSet*> collectors = ServerDatabase::instance()->executeQuery(query2);
-
-			while (collectors->next()) {
-				uint64 collCellId = collectors->getUnsignedLong(0);
-				float collPosX = collectors->getFloat(1);
-				float collPosY = collectors->getFloat(2);
-				float collPosZ = collectors->getFloat(3);
-				float collDirY = collectors->getFloat(4);
-				float collDirW = collectors->getFloat(5);
-
-				TicketCollector* colector = (TicketCollector*) zone->getZoneServer()->createObject(String("object/tangible/travel/ticket_collector/ticket_collector.iff").hashCode(), 0);
-				SceneObject* cell = zone->getZoneServer()->getObject(collCellId);
-
-				if (cell != NULL)
-					cell->addObject(colector, -1);
-
-				colector->setDirection(collDirW, 0, collDirY, 0);
-				colector->initializePosition(collPosX, collPosZ, collPosY);
-				colector->insertToZone(zone);
-				colector->setShuttle(shuttle);
-			}
-
-			StringBuffer query3;
-			query3 << "SELECT parent, pos_x, pos_y, pos_z, dir_y, dir_w FROM ticket_terminals WHERE transport_id = " << shuttleId << ";";
-
-			Reference<ResultSet*> terminals = ServerDatabase::instance()->executeQuery(query3);
-
-			while (terminals->next()) {
-				uint64 termCellId = terminals->getUnsignedLong(0);
-				float termPosX = terminals->getFloat(1);
-				float termPosY = terminals->getFloat(2);
-				float termPosZ = terminals->getFloat(3);
-				float termDirY = terminals->getFloat(4);
-				float termDirW = terminals->getFloat(5);
-
-				TravelTerminal* travel = (TravelTerminal*) zone->getZoneServer()->createObject(String("object/tangible/terminal/terminal_travel.iff").hashCode(), 0);
-				SceneObject* cellPar = zone->getZoneServer()->getObject(termCellId);
-
-				if (cellPar != NULL)
-					cellPar->addObject(travel, -1);
-
-				travel->setShuttle(shuttle);
-				travel->setDirection(termDirW, 0, termDirY, 0);
-				travel->initializePosition(termPosX, termPosZ, termPosY);
-				travel->insertToZone(zone);
-			}
-
-		}
-	} catch (DatabaseException& e) {
-		error(e.getMessage());
-	}
+	info("Shuttles are temporarily disabled.", true);
 }
 
 void PlanetManagerImplementation::sendPlanetTravelPointListResponse(PlayerCreature* player) {
 	lock();
 
-	TravelListResponseMessage* msg = new TravelListResponseMessage(Planet::getPlanetName(zone->getZoneID()));
+	TravelListResponseMessage* msg = new TravelListResponseMessage(zone->getZoneName());
 
 	shuttleMap.resetIterator();
 
Index: src/server/zone/managers/resource/resourcespawner/ResourceSpawner.cpp
===================================================================
--- src/server/zone/managers/resource/resourcespawner/ResourceSpawner.cpp	(revision 3034)
+++ src/server/zone/managers/resource/resourcespawner/ResourceSpawner.cpp	(working copy)
@@ -477,8 +477,7 @@
 
 		// Update new waypoint
 		newwaypoint->setCustomName(UnicodeString("Resource Survey"));
-		newwaypoint->setPlanetCRC(Planet::getPlanetCRC(Planet::getPlanetName(
-				player->getZone()->getZoneID())));
+		newwaypoint->setPlanetCRC(player->getZone()->getZoneName());
 		newwaypoint->setPosition(maxX, 0, maxY);
 		newwaypoint->setColor(WaypointObject::COLOR_BLUE);
 		newwaypoint->setSpecialTypeID(WaypointObject::SPECIALTYPE_RESOURCE);
Index: src/server/zone/managers/structure/StructureManager.cpp
===================================================================
--- src/server/zone/managers/structure/StructureManager.cpp	(revision 3034)
+++ src/server/zone/managers/structure/StructureManager.cpp	(working copy)
@@ -321,8 +321,8 @@
 	server = proc;
 	// server/zone/managers/structure/StructureManager.idl():  		templateManager = TemplateManager.instance();
 	templateManager = TemplateManager::instance();
-	// server/zone/managers/structure/StructureManager.idl():  		string managerName = "StructureManager " + zone.getPlanetName();
-	String managerName = "StructureManager " + zone->getPlanetName();
+	// server/zone/managers/structure/StructureManager.idl():  		string managerName = "StructureManager " + zone.getZoneName();
+	String managerName = "StructureManager " + zone->getZoneName();
 	// server/zone/managers/structure/StructureManager.idl():  		Logger.setLoggingName(managerName);
 	Logger::setLoggingName(managerName);
 	// server/zone/managers/structure/StructureManager.idl():  		Logger.setGlobalLogging(true);
Index: src/server/zone/managers/structure/StructureManager.idl
===================================================================
--- src/server/zone/managers/structure/StructureManager.idl	(revision 3034)
+++ src/server/zone/managers/structure/StructureManager.idl	(working copy)
@@ -75,7 +75,7 @@
 
 		templateManager = TemplateManager.instance();
 
-		string managerName = "StructureManager " + zone.getPlanetName();
+		string managerName = "StructureManager " + zone.getZoneName();
 		Logger.setLoggingName(managerName);
 
 		Logger.setGlobalLogging(true);
Index: src/server/zone/managers/structure/StructureManagerImplementation.cpp
===================================================================
--- src/server/zone/managers/structure/StructureManagerImplementation.cpp	(revision 3034)
+++ src/server/zone/managers/structure/StructureManagerImplementation.cpp	(working copy)
@@ -415,7 +415,7 @@
 		waypointObject->setCustomName(full);
 		waypointObject->setActive(true);
 		waypointObject->setPosition(x, z, y);
-		String planetName = Planet::getPlanetName(zone->getZoneID());
+		String planetName = zone->getZoneName();
 		waypointObject->setPlanetCRC(planetName.hashCode());
 
 		playerObject->addWaypoint(waypointObject, false, true);
Index: src/server/zone/managers/weather/WeatherManagerImplementation.cpp
===================================================================
--- src/server/zone/managers/weather/WeatherManagerImplementation.cpp	(revision 3034)
+++ src/server/zone/managers/weather/WeatherManagerImplementation.cpp	(working copy)
@@ -23,7 +23,7 @@
 void WeatherManagerImplementation::initialize() {
 	//Customize the Manager's name.
 	String managerName = "WeatherManager ";
-	setLoggingName(managerName + Planet::getPlanetName(zone->getZoneID()));
+	setLoggingName(managerName + zone->getZoneName());
 	setGlobalLogging(true);
 	setLogging(true);
 
@@ -638,7 +638,7 @@
 
 	Locker playerLocker(player);
 
-	String planetName = Planet::getPlanetName(zone->getZoneID());
+	String planetName = zone->getZoneName();
 
 	Time executionTime;
 	StringBuffer output;
Index: src/server/zone/objects/creature/commands/FindCommand.h
===================================================================
--- src/server/zone/objects/creature/commands/FindCommand.h	(revision 3034)
+++ src/server/zone/objects/creature/commands/FindCommand.h	(working copy)
@@ -115,7 +115,7 @@
 		PlayerObject* ghost = player->getPlayerObject();
 
 		Zone* zone = player->getZone();
-		String planet = Planet::getPlanetName(zone->getZoneID());
+		String planet = zone->getZoneName();
 		StringIdChatParameter msg;
 
 		ManagedReference<WaypointObject*> wpt =
@@ -165,7 +165,7 @@
 		String objClientString = stringManager->getStringId(objFullName.hashCode());
 
 		if (regClientString.isEmpty()) {
-			regClientString = object->getZone()->getPlanetName();
+			regClientString = object->getZone()->getZoneName();
 			regClientString[0] = toupper(regClientString[0]);
 		}
 
Index: src/server/zone/objects/creature/commands/FindFriendCommand.h
===================================================================
--- src/server/zone/objects/creature/commands/FindFriendCommand.h	(revision 3034)
+++ src/server/zone/objects/creature/commands/FindFriendCommand.h	(working copy)
@@ -100,7 +100,7 @@
 		if (zone == NULL)
 			return GENERALERROR;
 
-		String planet = Planet::getPlanetName(zone->getZoneID());
+		String planet = zone->getZoneName();
 
 		float x, z = 0, y;
 
Index: src/server/zone/objects/creature/commands/PlaceStructureModeCommand.h
===================================================================
--- src/server/zone/objects/creature/commands/PlaceStructureModeCommand.h	(revision 3034)
+++ src/server/zone/objects/creature/commands/PlaceStructureModeCommand.h	(working copy)
@@ -132,7 +132,7 @@
 			return GENERALERROR;
 		}
 
-		String planetName = zone->getPlanetName();
+		String planetName = zone->getZoneName();
 
 		/*if (planetName == "rori" || planetName == "yavin4") {
 			player->sendSystemMessage("Structure placement is currently disabled on this planet");
Index: src/server/zone/objects/creature/commands/WaypointCommand.h
===================================================================
--- src/server/zone/objects/creature/commands/WaypointCommand.h	(revision 3034)
+++ src/server/zone/objects/creature/commands/WaypointCommand.h	(working copy)
@@ -78,7 +78,7 @@
 		String waypointData = arguments.toString();
 
 		String waypointName = "New Waypoint";
-		String planet = Planet::getPlanetName(creature->getZone()->getZoneID());
+		String planet = creature->getZone()->getZoneName();
 		float x = creature->getPositionX();
 		float y = creature->getPositionY();
 		float z = 0.0f;
Index: src/server/zone/objects/installation/shuttle/ShuttleInstallationImplementation.cpp
===================================================================
--- src/server/zone/objects/installation/shuttle/ShuttleInstallationImplementation.cpp	(revision 3034)
+++ src/server/zone/objects/installation/shuttle/ShuttleInstallationImplementation.cpp	(working copy)
@@ -44,7 +44,7 @@
 		shuttle->setArrivalPoint(positionX, positionY, positionZ);
 		shuttle->setStarport(false);
 		shuttle->setTax(10);
-		shuttle->setPlanet(zone->getPlanetName());
+		shuttle->setPlanet(zone->getZoneName());
 		shuttle->setCity(shuttleName);
 		shuttle->updateZone(false);
 
Index: src/server/zone/objects/mission/ReconMissionObjectiveImplementation.cpp
===================================================================
--- src/server/zone/objects/mission/ReconMissionObjectiveImplementation.cpp	(revision 3034)
+++ src/server/zone/objects/mission/ReconMissionObjectiveImplementation.cpp	(working copy)
@@ -40,7 +40,7 @@
 		locationActiveArea->setRadius(32.f);
 		locationActiveArea->insertToZone(zone);
 
-		info("inserting to zone " + zone->getPlanetName(), true);
+		info("inserting to zone " + zone->getZoneName), true);
 	}
 
 	WaypointObject* waypoint = mission->getWaypointToMission();
Index: src/server/zone/objects/resource/ResourceSpawnImplementation.cpp
===================================================================
--- src/server/zone/objects/resource/ResourceSpawnImplementation.cpp	(revision 3034)
+++ src/server/zone/objects/resource/ResourceSpawnImplementation.cpp	(working copy)
@@ -243,7 +243,7 @@
 
 	Zone* zone = server->getZoneServer()->getZone(id);
 
-	return zone->getPlanetName().hashCode();
+	return zone->getZoneName().hashCode();
 }
 
 void ResourceSpawnImplementation::extractResource(int zoneid, int units) {
@@ -313,7 +313,7 @@
 	}
 
 	for (int i = 0; i < spawnMaps.size(); ++i) {
-		info(Planet::getPlanetName(spawnMaps.elementAt(i).getKey()));
+		//TODO: Fix this info(Planet::getPlanetName(spawnMaps.elementAt(i).getKey()));
 		spawnMaps.get(i).print();
 	}
 
Index: src/server/zone/objects/scene/SceneObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/scene/SceneObjectImplementation.cpp	(revision 3034)
+++ src/server/zone/objects/scene/SceneObjectImplementation.cpp	(working copy)
@@ -1517,7 +1517,7 @@
 	if (zone == NULL)
 		return 0;
 
-	return zone->getPlanetName().hashCode();
+	return zone->getZoneName().hashCode();
 }
 
 void SceneObjectImplementation::createChildObjects() {
Index: src/server/zone/objects/tangible/deed/building/BuildingDeedImplementation.cpp
===================================================================
--- src/server/zone/objects/tangible/deed/building/BuildingDeedImplementation.cpp	(revision 3034)
+++ src/server/zone/objects/tangible/deed/building/BuildingDeedImplementation.cpp	(working copy)
@@ -53,7 +53,7 @@
 	for (int i = 0; i < 10; ++i) {
 		if (buildingTemplate->isAllowedZone(i)) {
 			StringBuffer planetName;
-			planetName << "@planet_n:" << Planet::getPlanetName(i);
+			planetName << "@planet_n:" << zone->getZoneName();
 			alm->insertAttribute("examine_scene", planetName.toString()); //Can Be Built On
 		}
 	}
Index: src/server/zone/objects/tangible/fishing/FishObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/tangible/fishing/FishObjectImplementation.cpp	(revision 3034)
+++ src/server/zone/objects/tangible/fishing/FishObjectImplementation.cpp	(working copy)
@@ -65,6 +65,7 @@
 	String lengthText = String::valueOf(length) + "m";
 	alm->insertAttribute("length", lengthText);
 
-	String planetText = Planet::getPlanetName(planet);
-	alm->insertAttribute("planet", planetText);
+	//TODO: Reenable with new zone system.
+	//String planetText = Planet::getPlanetName(planet);
+	//alm->insertAttribute("planet", planetText);
 }
Index: src/server/zone/objects/tangible/tool/SurveyToolImplementation.cpp
===================================================================
--- src/server/zone/objects/tangible/tool/SurveyToolImplementation.cpp	(revision 3034)
+++ src/server/zone/objects/tangible/tool/SurveyToolImplementation.cpp	(working copy)
@@ -395,7 +395,7 @@
 
 	// Update new waypoint
 	newwaypoint->setCustomName(UnicodeString("Resource Survey"));
-	newwaypoint->setPlanetCRC(Planet::getPlanetCRC(Planet::getPlanetName(player->getZone()->getZoneID())));
+	newwaypoint->setPlanetCRC(player->getZone()->getZoneName().hashCode());
 	newwaypoint->setPosition(richSampleLocation->getPositionX(), 0, richSampleLocation->getPositionY());
 	newwaypoint->setColor(WaypointObject::COLOR_BLUE);
 	newwaypoint->setSpecialTypeID(WaypointObject::SPECIALTYPE_RESOURCE);
Index: src/server/zone/packets/auction/IsVendorOwnerMessageCallback.h
===================================================================
--- src/server/zone/packets/auction/IsVendorOwnerMessageCallback.h	(revision 3034)
+++ src/server/zone/packets/auction/IsVendorOwnerMessageCallback.h	(working copy)
@@ -45,7 +45,7 @@
 		if (player == NULL)
 			return;
 
-		String planetString = Planet::getPlanetName(zone->getZoneID());
+		String planetString = zone->getZoneName();
 		String vendorRegion = ""; // TODO: Vendors don't have regions impl yet.
 
 		//TODO: Relook at this! - POLONEL
Index: src/server/zone/packets/object/PlayersNearYou.h
===================================================================
--- src/server/zone/packets/object/PlayersNearYou.h	(revision 3034)
+++ src/server/zone/packets/object/PlayersNearYou.h	(working copy)
@@ -69,7 +69,7 @@
 		insertInt(Races::getRaceID(player->getRaceName())); // Race ID
  
 		insertAscii(Region::getRegionName(player->getRegionID())); //Region Name
-		insertAscii(Planet::getPlanetName(player->getZoneID())); //Planet
+		insertAscii(player->getZone()->getZoneName()); //Planet
  
   		if (player->isGuilded())
 			insertAscii(player->getGuildName()); //Guild
Index: src/server/zone/packets/player/CharacterSheetResponseMessage.h
===================================================================
--- src/server/zone/packets/player/CharacterSheetResponseMessage.h	(revision 3034)
+++ src/server/zone/packets/player/CharacterSheetResponseMessage.h	(working copy)
@@ -74,7 +74,8 @@
 			insertFloat(declaredResidence->getPositionX()); //Home Location X
 			insertFloat(declaredResidence->getPositionZ()); //Home Location Z
 			insertFloat(declaredResidence->getPositionY()); //Home Location Y
-			insertAscii(Planet::getPlanetName(declaredResidence->getZone()->getZoneID())); //Home Planet
+			//insertAscii(Planet::getPlanetName(declaredResidence->getZone()->getZoneID())); //Home Planet
+			insertShort(0); //TODO: Reenable with new zone name system.
 		} else {
 			insertFloat(0);
 			insertFloat(0);
Index: src/tre3/TreeArchive.h
===================================================================
--- src/tre3/TreeArchive.h	(revision 3034)
+++ src/tre3/TreeArchive.h	(working copy)
@@ -72,22 +72,11 @@
 		return record->getBytes();
 	}
 
-	void printNodesByPath(const String& path) {
-		TreeDirectory* records = &nodeMap.get(path);
-
-		if (records == NULL) {
-			error("No files at specified path.");
-			return;
-		}
-
-		for (int i = 0; i < records->size(); ++i) {
-			Reference<TreeFileRecord*> record = records->elementAt(i);
-
-			String recordName = record->getRecordName();
+	TreeDirectory* getDirectory(const String& path) {
+		if (!nodeMap.contains(path))
+			return NULL;
 
-			if (recordName.indexOf(".trn") != -1)
-				info(recordName);
-		}
+		return &nodeMap.get(path);
 	}
 };
 
