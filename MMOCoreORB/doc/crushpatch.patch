Index: src/Makefile.am
===================================================================
--- src/Makefile.am	(revision 3024)
+++ src/Makefile.am	(working copy)
@@ -438,6 +438,8 @@
 		server/zone/managers/weather/WeatherManagerImplementation.cpp \
 		server/zone/managers/city/CityManagerImplementation.cpp \
 		server/zone/objects/structure/StructureObjectImplementation.cpp \
+		server/zone/objects/structure/PlayerStructureComponent.cpp \
+		server/zone/objects/structure/MaintenanceComponent.cpp \
 		server/zone/objects/tangible/wearables/WearableObjectImplementation.cpp \
 		server/zone/objects/tangible/wearables/ArmorObjectImplementation.cpp \
 		server/zone/objects/tangible/wearables/PsgArmorObjectImplementation.cpp \
Index: src/server/zone/Zone.cpp
===================================================================
--- src/server/zone/Zone.cpp	(revision 3024)
+++ src/server/zone/Zone.cpp	(working copy)
@@ -26,7 +26,7 @@
  *	ZoneStub
  */
 
-enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_GETNEARESTCLONINGBUILDING__CREATUREOBJECT_,RPC_GETNEARESTPLANETARYOBJECT__SCENEOBJECT_INT_,RPC_INITIALIZEPRIVATEDATA__,RPC_UPDATEACTIVEAREAS__SCENEOBJECT_,RPC_STARTMANAGERS__,RPC_STOPMANAGERS__,RPC_GETHEIGHT__FLOAT_FLOAT_,RPC_ADDSCENEOBJECT__SCENEOBJECT_,RPC_SENDMAPLOCATIONSTO__STRING_SCENEOBJECT_,RPC_DROPSCENEOBJECT__SCENEOBJECT_,RPC_GETZONEID__,RPC_GETPLANETNAME__,RPC_GETPLANETMANAGER__,RPC_GETCITYMANAGER__,RPC_GETZONESERVER__,RPC_GETCREATUREMANAGER__,RPC_GETGALACTICTIME__,RPC_HASMANAGERSSTARTED__,RPC_GETMINX__,RPC_GETMAXX__,RPC_GETMINY__,RPC_GETMAXY__};
+enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_GETNEARESTCLONINGBUILDING__CREATUREOBJECT_,RPC_GETNEARESTPLANETARYOBJECT__SCENEOBJECT_INT_,RPC_INITIALIZEPRIVATEDATA__,RPC_UPDATEACTIVEAREAS__SCENEOBJECT_,RPC_STARTMANAGERS__,RPC_STOPMANAGERS__,RPC_GETHEIGHT__FLOAT_FLOAT_,RPC_ADDSCENEOBJECT__SCENEOBJECT_,RPC_SENDMAPLOCATIONSTO__STRING_SCENEOBJECT_,RPC_DROPSCENEOBJECT__SCENEOBJECT_,RPC_GETZONEID__,RPC_GETPLANETNAME__,RPC_GETPLANETMANAGER__,RPC_GETSTRUCTUREMANAGER__,RPC_GETCITYMANAGER__,RPC_GETZONESERVER__,RPC_GETCREATUREMANAGER__,RPC_GETGALACTICTIME__,RPC_HASMANAGERSSTARTED__,RPC_GETMINX__,RPC_GETMAXX__,RPC_GETMINY__,RPC_GETMAXY__};
 
 Zone::Zone(ZoneProcessServer* processor, int zoneid) : ManagedObject(DummyConstructorParameter::instance()) {
 	ZoneImplementation* _implementation = new ZoneImplementation(processor, zoneid);
@@ -297,6 +297,19 @@
 		return _implementation->getPlanetManager();
 }
 
+StructureManager* Zone::getStructureManager() {
+	ZoneImplementation* _implementation = (ZoneImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		if (!deployed)
+			throw ObjectNotDeployedException(this);
+
+		DistributedMethod method(this, RPC_GETSTRUCTUREMANAGER__);
+
+		return (StructureManager*) method.executeWithObjectReturn();
+	} else
+		return _implementation->getStructureManager();
+}
+
 CityManager* Zone::getCityManager() {
 	ZoneImplementation* _implementation = (ZoneImplementation*) _getImplementation();
 	if (_implementation == NULL) {
@@ -531,6 +544,11 @@
 		return true;
 	}
 
+	if (_name == "structureManager") {
+		TypeInfo<ManagedReference<StructureManager* > >::parseFromBinaryStream(&structureManager, stream);
+		return true;
+	}
+
 	if (_name == "cityManager") {
 		TypeInfo<ManagedReference<CityManager* > >::parseFromBinaryStream(&cityManager, stream);
 		return true;
@@ -595,6 +613,14 @@
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
+	_name = "structureManager";
+	_name.toBinaryStream(stream);
+	_offset = stream->getOffset();
+	stream->writeShort(0);
+	TypeInfo<ManagedReference<StructureManager* > >::toBinaryStream(&structureManager, stream);
+	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
+	stream->writeShort(_offset, _totalSize);
+
 	_name = "cityManager";
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
@@ -636,7 +662,7 @@
 	stream->writeShort(_offset, _totalSize);
 
 
-	return 8 + ManagedObjectImplementation::writeObjectMembers(stream);
+	return 9 + ManagedObjectImplementation::writeObjectMembers(stream);
 }
 
 QuadTree* ZoneImplementation::getRegionTree() {
@@ -654,6 +680,11 @@
 	return planetManager;
 }
 
+StructureManager* ZoneImplementation::getStructureManager() {
+	// server/zone/Zone.idl():  		return structureManager;
+	return structureManager;
+}
+
 CityManager* ZoneImplementation::getCityManager() {
 	// server/zone/Zone.idl():  		return cityManager;
 	return cityManager;
@@ -735,6 +766,9 @@
 	case RPC_GETPLANETMANAGER__:
 		resp->insertLong(getPlanetManager()->_getObjectID());
 		break;
+	case RPC_GETSTRUCTUREMANAGER__:
+		resp->insertLong(getStructureManager()->_getObjectID());
+		break;
 	case RPC_GETCITYMANAGER__:
 		resp->insertLong(getCityManager()->_getObjectID());
 		break;
@@ -829,6 +863,10 @@
 	return ((ZoneImplementation*) impl)->getPlanetManager();
 }
 
+StructureManager* ZoneAdapter::getStructureManager() {
+	return ((ZoneImplementation*) impl)->getStructureManager();
+}
+
 CityManager* ZoneAdapter::getCityManager() {
 	return ((ZoneImplementation*) impl)->getCityManager();
 }
Index: src/server/zone/Zone.h
===================================================================
--- src/server/zone/Zone.h	(revision 3024)
+++ src/server/zone/Zone.h	(working copy)
@@ -210,6 +210,8 @@
 
 	PlanetManager* getPlanetManager();
 
+	StructureManager* getStructureManager();
+
 	CityManager* getCityManager();
 
 	ZoneServer* getZoneServer();
@@ -259,6 +261,8 @@
 
 	ManagedReference<PlanetManager* > planetManager;
 
+	ManagedReference<StructureManager* > structureManager;
+
 	ManagedReference<CityManager* > cityManager;
 
 	ManagedReference<CreatureManager* > creatureManager;
@@ -324,6 +328,8 @@
 
 	PlanetManager* getPlanetManager();
 
+	StructureManager* getStructureManager();
+
 	CityManager* getCityManager();
 
 	ZoneServer* getZoneServer();
@@ -413,6 +419,8 @@
 
 	PlanetManager* getPlanetManager();
 
+	StructureManager* getStructureManager();
+
 	CityManager* getCityManager();
 
 	ZoneServer* getZoneServer();
Index: src/server/zone/Zone.idl
===================================================================
--- src/server/zone/Zone.idl	(revision 3024)
+++ src/server/zone/Zone.idl	(working copy)
@@ -79,11 +79,11 @@
 
 	@dereferenced
 	private ObjectMap objectMap;
+
+	private PlanetManager planetManager;
 	
-	//private StructureManager structureManager; // move to planet manager when converted
+	private StructureManager structureManager;
 	
-	private PlanetManager planetManager;
-	
 	private CityManager cityManager;
 	
 	private CreatureManager creatureManager;
@@ -167,6 +167,10 @@
 		return planetManager;
 	}
 	
+	public StructureManager getStructureManager() {
+		return structureManager;
+	}
+	
 	public CityManager getCityManager() {
 		return cityManager;
 	}
Index: src/server/zone/ZoneImplementation.cpp
===================================================================
--- src/server/zone/ZoneImplementation.cpp	(revision 3024)
+++ src/server/zone/ZoneImplementation.cpp	(working copy)
@@ -84,6 +84,7 @@
 
 void ZoneImplementation::initializePrivateData() {
 	planetManager = new PlanetManager(_this, processor);
+	structureManager = new StructureManager(_this, processor);
 
 	creatureManager = new CreatureManager(_this);
 	creatureManager->deploy("CreatureManager", zoneID);
@@ -127,6 +128,8 @@
 
 	planetManager->initialize();
 
+	structureManager->initialize();
+
 	//FIXME
 #ifndef WITH_STM
 	creatureManager->initialize();
Index: src/server/zone/managers/planet/PlanetManager.cpp
===================================================================
--- src/server/zone/managers/planet/PlanetManager.cpp	(revision 3024)
+++ src/server/zone/managers/planet/PlanetManager.cpp	(working copy)
@@ -12,8 +12,6 @@
 
 #include "server/zone/objects/scene/variables/StringId.h"
 
-#include "server/zone/managers/structure/StructureManager.h"
-
 #include "server/zone/managers/weather/WeatherManager.h"
 
 #include "server/zone/managers/objectcontroller/ObjectController.h"
@@ -26,7 +24,7 @@
  *	PlanetManagerStub
  */
 
-enum {RPC_INITIALIZETRANSIENTMEMBERS__,RPC_FINALIZE__,RPC_INITIALIZE__,RPC_LOADREGIONS__,RPC_LOADPLAYERREGIONS__,RPC_LOADNOBUILDAREAS__,RPC_LOADSHUTTLES__,RPC_LOADBADGEAREAS__,RPC_LOADPERFORMANCELOCATIONS__,RPC_LOADHUNTINGTARGETS__,RPC_LOADRECONLOCATIONS__,RPC_GETSHUTTLE__STRING_,RPC_ADDSHUTTLE__STRING_SHUTTLECREATURE_,RPC_DROPSHUTTLE__STRING_,RPC_GETTRAVELFARE__STRING_,RPC_SENDPLANETTRAVELPOINTLISTRESPONSE__PLAYERCREATURE_,RPC_GETSTRUCTUREMANAGER__,RPC_GETWEATHERMANAGER__,RPC_GETREGION__FLOAT_FLOAT_,RPC_GETREGIONCOUNT__,RPC_GETNUMBEROFCITIES__,RPC_INCREASENUMBEROFCITIES__,RPC_GETREGION__INT_,RPC_ADDREGION__REGION_,RPC_DROPREGION__REGION_,RPC_HASREGION__STRING_,RPC_ADDPERFORMANCELOCATION__SCENEOBJECT_,RPC_ADDMISSIONNPC__SCENEOBJECT_,RPC_ADDHUNTINGTARGETTEMPLATE__STRING_STRING_INT_,RPC_ADDRECONLOC__SCENEOBJECT_,RPC_ADDINFORMANT__SCENEOBJECT_,};
+enum {RPC_INITIALIZETRANSIENTMEMBERS__,RPC_FINALIZE__,RPC_INITIALIZE__,RPC_LOADREGIONS__,RPC_LOADPLAYERREGIONS__,RPC_LOADNOBUILDAREAS__,RPC_LOADSHUTTLES__,RPC_LOADBADGEAREAS__,RPC_LOADPERFORMANCELOCATIONS__,RPC_LOADHUNTINGTARGETS__,RPC_LOADRECONLOCATIONS__,RPC_GETSHUTTLE__STRING_,RPC_ADDSHUTTLE__STRING_SHUTTLECREATURE_,RPC_DROPSHUTTLE__STRING_,RPC_GETTRAVELFARE__STRING_,RPC_SENDPLANETTRAVELPOINTLISTRESPONSE__PLAYERCREATURE_,RPC_GETWEATHERMANAGER__,RPC_GETREGION__FLOAT_FLOAT_,RPC_GETREGIONCOUNT__,RPC_GETNUMBEROFCITIES__,RPC_INCREASENUMBEROFCITIES__,RPC_GETREGION__INT_,RPC_ADDREGION__REGION_,RPC_DROPREGION__REGION_,RPC_HASREGION__STRING_,RPC_ADDPERFORMANCELOCATION__SCENEOBJECT_,RPC_ADDMISSIONNPC__SCENEOBJECT_,RPC_ADDHUNTINGTARGETTEMPLATE__STRING_STRING_INT_,RPC_ADDRECONLOC__SCENEOBJECT_,RPC_ADDINFORMANT__SCENEOBJECT_,};
 
 PlanetManager::PlanetManager(Zone* planet, ZoneProcessServer* srv) : ManagedService(DummyConstructorParameter::instance()) {
 	PlanetManagerImplementation* _implementation = new PlanetManagerImplementation(planet, srv);
@@ -260,19 +258,6 @@
 		return _implementation->getRegions(regionName);
 }
 
-StructureManager* PlanetManager::getStructureManager() {
-	PlanetManagerImplementation* _implementation = (PlanetManagerImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETSTRUCTUREMANAGER__);
-
-		return (StructureManager*) method.executeWithObjectReturn();
-	} else
-		return _implementation->getStructureManager();
-}
-
 WeatherManager* PlanetManager::getWeatherManager() {
 	PlanetManagerImplementation* _implementation = (PlanetManagerImplementation*) _getImplementation();
 	if (_implementation == NULL) {
@@ -639,11 +624,6 @@
 		return true;
 	}
 
-	if (_name == "structureManager") {
-		TypeInfo<ManagedReference<StructureManager* > >::parseFromBinaryStream(&structureManager, stream);
-		return true;
-	}
-
 	if (_name == "weatherManager") {
 		TypeInfo<ManagedReference<WeatherManager* > >::parseFromBinaryStream(&weatherManager, stream);
 		return true;
@@ -693,14 +673,6 @@
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
-	_name = "structureManager";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<ManagedReference<StructureManager* > >::toBinaryStream(&structureManager, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
 	_name = "weatherManager";
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
@@ -718,7 +690,7 @@
 	stream->writeShort(_offset, _totalSize);
 
 
-	return 6 + ManagedServiceImplementation::writeObjectMembers(stream);
+	return 5 + ManagedServiceImplementation::writeObjectMembers(stream);
 }
 
 PlanetManagerImplementation::PlanetManagerImplementation(Zone* planet, ZoneProcessServer* srv) {
@@ -737,8 +709,6 @@
 	terrainManager = NULL;
 	// server/zone/managers/planet/PlanetManager.idl():  		numberOfCities = 0;
 	numberOfCities = 0;
-	// server/zone/managers/planet/PlanetManager.idl():  		structureManager = null;
-	structureManager = NULL;
 	// server/zone/managers/planet/PlanetManager.idl():  		weatherManager = null;
 	weatherManager = NULL;
 	// server/zone/managers/planet/PlanetManager.idl():  		travelFares.setNullValue(0);
@@ -775,11 +745,6 @@
 	return (&regionMap)->getRegions((&regionName));
 }
 
-StructureManager* PlanetManagerImplementation::getStructureManager() {
-	// server/zone/managers/planet/PlanetManager.idl():  		return structureManager;
-	return structureManager;
-}
-
 WeatherManager* PlanetManagerImplementation::getWeatherManager() {
 	// server/zone/managers/planet/PlanetManager.idl():  		return weatherManager;
 	return weatherManager;
@@ -939,9 +904,6 @@
 	case RPC_SENDPLANETTRAVELPOINTLISTRESPONSE__PLAYERCREATURE_:
 		sendPlanetTravelPointListResponse((PlayerCreature*) inv->getObjectParameter());
 		break;
-	case RPC_GETSTRUCTUREMANAGER__:
-		resp->insertLong(getStructureManager()->_getObjectID());
-		break;
 	case RPC_GETWEATHERMANAGER__:
 		resp->insertLong(getWeatherManager()->_getObjectID());
 		break;
@@ -1055,10 +1017,6 @@
 	((PlanetManagerImplementation*) impl)->sendPlanetTravelPointListResponse(player);
 }
 
-StructureManager* PlanetManagerAdapter::getStructureManager() {
-	return ((PlanetManagerImplementation*) impl)->getStructureManager();
-}
-
 WeatherManager* PlanetManagerAdapter::getWeatherManager() {
 	return ((PlanetManagerImplementation*) impl)->getWeatherManager();
 }
Index: src/server/zone/managers/planet/PlanetManager.h
===================================================================
--- src/server/zone/managers/planet/PlanetManager.h	(revision 3024)
+++ src/server/zone/managers/planet/PlanetManager.h	(working copy)
@@ -64,20 +64,6 @@
 namespace server {
 namespace zone {
 namespace managers {
-namespace structure {
-
-class StructureManager;
-
-} // namespace structure
-} // namespace managers
-} // namespace zone
-} // namespace server
-
-using namespace server::zone::managers::structure;
-
-namespace server {
-namespace zone {
-namespace managers {
 namespace weather {
 
 class WeatherManager;
@@ -208,8 +194,6 @@
 
 	Vector<ManagedReference<Region* > > getRegions(StringId& regionName);
 
-	StructureManager* getStructureManager();
-
 	WeatherManager* getWeatherManager();
 
 	TerrainManager* getTerrainManager();
@@ -282,8 +266,6 @@
 
 	VectorMap<String, int> travelFares;
 
-	ManagedReference<StructureManager* > structureManager;
-
 	ManagedReference<WeatherManager* > weatherManager;
 
 	int numberOfCities;
@@ -361,8 +343,6 @@
 
 	Vector<ManagedReference<Region* > > getRegions(StringId& regionName);
 
-	StructureManager* getStructureManager();
-
 	WeatherManager* getWeatherManager();
 
 	TerrainManager* getTerrainManager();
@@ -476,8 +456,6 @@
 
 	void sendPlanetTravelPointListResponse(PlayerCreature* player);
 
-	StructureManager* getStructureManager();
-
 	WeatherManager* getWeatherManager();
 
 	Region* getRegion(float x, float y);
Index: src/server/zone/managers/planet/PlanetManager.idl
===================================================================
--- src/server/zone/managers/planet/PlanetManager.idl	(revision 3024)
+++ src/server/zone/managers/planet/PlanetManager.idl	(working copy)
@@ -54,7 +54,6 @@
 import system.util.SortedVector;
 import system.util.VectorMap;
 import server.zone.objects.scene.variables.StringId;
-import server.zone.managers.structure.StructureManager;
 import server.zone.managers.weather.WeatherManager;
 import server.zone.managers.objectcontroller.ObjectController;
 import server.zone.objects.creature.shuttle.ShuttleCreature;
@@ -82,8 +81,6 @@
 	
 	@dereferenced
 	protected VectorMap<string, int> travelFares;
-	
-	protected StructureManager structureManager;
 
 	protected WeatherManager weatherManager;
 	
@@ -125,8 +122,6 @@
 		terrainManager = null;
 		
 		numberOfCities = 0;
-		
-		structureManager = null;
 
 		weatherManager = null;
 		
@@ -193,10 +188,6 @@
 	public Vector<Region> getRegions(@dereferenced StringId regionName) {
 		return regionMap.getRegions(regionName);
 	}
-	
-	public StructureManager getStructureManager() {
-		return structureManager;
-	}
 
 	public WeatherManager getWeatherManager() {
 		return weatherManager;
Index: src/server/zone/managers/planet/PlanetManagerImplementation.cpp
===================================================================
--- src/server/zone/managers/planet/PlanetManagerImplementation.cpp	(revision 3024)
+++ src/server/zone/managers/planet/PlanetManagerImplementation.cpp	(working copy)
@@ -11,9 +11,9 @@
 #include "server/db/ServerDatabase.h"
 #include "server/zone/Zone.h"
 #include "server/zone/ZoneServer.h"
-#include "server/zone/managers/structure/StructureManager.h"
 #include "server/zone/managers/creature/CreatureManager.h"
 #include "server/zone/managers/weather/WeatherManager.h"
+#include "server/zone/managers/templates/TemplateManager.h"
 
 #include "engine/util/iffstream/IffStream.h"
 #include "server/zone/templates/snapshot/WorldSnapshotIff.h"
@@ -56,9 +56,6 @@
 
 	loadStaticTangibleObjects();
 
-	structureManager = new StructureManager(zone, server);
-	structureManager->loadStructures();
-
 	if (zone->getZoneID() < 10) { //No need for a weather manager in tutorial or corvette etc.
 		weatherManager = new WeatherManager(zone);
 		weatherManager->initialize();
Index: src/server/zone/managers/structure/StructureManager.cpp
===================================================================
--- src/server/zone/managers/structure/StructureManager.cpp	(revision 3024)
+++ src/server/zone/managers/structure/StructureManager.cpp	(working copy)
@@ -22,7 +22,7 @@
  *	StructureManagerStub
  */
 
-enum {RPC_LOADSTRUCTURES__,RPC_PLACESTRUCTUREFROMDEED__PLAYERCREATURE_LONG_FLOAT_FLOAT_INT_,RPC_DESTROYSTRUCTURE__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_REDEEDSTRUCTURE__PLAYERCREATURE_STRUCTUREOBJECT_BOOL_,RPC_DECLARERESIDENCE__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_CHANGEPRIVACY__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_GETTIMESTRING__INT_,RPC_GETINRANGEPARKINGGARAGE__SCENEOBJECT_INT_};
+enum {RPC_INITIALIZE__,RPC_PLACESTRUCTUREFROMDEED__PLAYERCREATURE_LONG_FLOAT_FLOAT_INT_,RPC_DESTROYSTRUCTURE__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_REDEEDSTRUCTURE__PLAYERCREATURE_STRUCTUREOBJECT_BOOL_,RPC_DECLARERESIDENCE__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_CHANGEPRIVACY__PLAYERCREATURE_STRUCTUREOBJECT_,RPC_GETTIMESTRING__INT_,RPC_GETINRANGEPARKINGGARAGE__SCENEOBJECT_INT_};
 
 StructureManager::StructureManager(Zone* zne, ZoneProcessServer* proc) : ManagedService(DummyConstructorParameter::instance()) {
 	StructureManagerImplementation* _implementation = new StructureManagerImplementation(zne, proc);
@@ -37,19 +37,28 @@
 }
 
 
-void StructureManager::loadStructures() {
+void StructureManager::initialize() {
 	StructureManagerImplementation* _implementation = (StructureManagerImplementation*) _getImplementation();
 	if (_implementation == NULL) {
 		if (!deployed)
 			throw ObjectNotDeployedException(this);
 
-		DistributedMethod method(this, RPC_LOADSTRUCTURES__);
+		DistributedMethod method(this, RPC_INITIALIZE__);
 
 		method.executeWithVoidReturn();
 	} else
-		_implementation->loadStructures();
+		_implementation->initialize();
 }
 
+bool StructureManager::validateStructurePlacableAtPosition(SharedStructureObjectTemplate* structureTemplate, float x, float y) {
+	StructureManagerImplementation* _implementation = (StructureManagerImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		throw ObjectNotLocalException(this);
+
+	} else
+		return _implementation->validateStructurePlacableAtPosition(structureTemplate, x, y);
+}
+
 int StructureManager::placeStructureFromDeed(PlayerCreature* player, unsigned long long deedID, float x, float y, int angle) {
 	StructureManagerImplementation* _implementation = (StructureManagerImplementation*) _getImplementation();
 	if (_implementation == NULL) {
@@ -331,7 +340,7 @@
 	Logger::setLogging(false);
 }
 
-void StructureManagerImplementation::loadStructures() {
+void StructureManagerImplementation::initialize() {
 	// server/zone/managers/structure/StructureManager.idl():  		Logger.info("Loading structures...", true);
 	Logger::info("Loading structures...", true);
 	// server/zone/managers/structure/StructureManager.idl():  		loadPlayerStructures();
@@ -349,8 +358,8 @@
 	Packet* resp = new MethodReturnMessage(0);
 
 	switch (methid) {
-	case RPC_LOADSTRUCTURES__:
-		loadStructures();
+	case RPC_INITIALIZE__:
+		initialize();
 		break;
 	case RPC_PLACESTRUCTUREFROMDEED__PLAYERCREATURE_LONG_FLOAT_FLOAT_INT_:
 		resp->insertSignedInt(placeStructureFromDeed((PlayerCreature*) inv->getObjectParameter(), inv->getUnsignedLongParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getSignedIntParameter()));
@@ -380,8 +389,8 @@
 	return resp;
 }
 
-void StructureManagerAdapter::loadStructures() {
-	((StructureManagerImplementation*) impl)->loadStructures();
+void StructureManagerAdapter::initialize() {
+	((StructureManagerImplementation*) impl)->initialize();
 }
 
 int StructureManagerAdapter::placeStructureFromDeed(PlayerCreature* player, unsigned long long deedID, float x, float y, int angle) {
Index: src/server/zone/managers/structure/StructureManager.h
===================================================================
--- src/server/zone/managers/structure/StructureManager.h	(revision 3024)
+++ src/server/zone/managers/structure/StructureManager.h	(working copy)
@@ -128,8 +128,10 @@
 public:
 	StructureManager(Zone* zne, ZoneProcessServer* proc);
 
-	void loadStructures();
+	void initialize();
 
+	bool validateStructurePlacableAtPosition(SharedStructureObjectTemplate* structureTemplate, float x, float y);
+
 	int placeStructureFromDeed(PlayerCreature* player, unsigned long long deedID, float x, float y, int angle);
 
 	int placeStructure(PlayerCreature* player, StructureObject* structureObject, SharedStructureObjectTemplate* structureTemplate, unsigned long long deedID, float x, float y, const Quaternion& direction);
@@ -190,8 +192,10 @@
 	void loadPlayerStructures();
 
 public:
-	void loadStructures();
+	void initialize();
 
+	bool validateStructurePlacableAtPosition(SharedStructureObjectTemplate* structureTemplate, float x, float y);
+
 	int placeStructureFromDeed(PlayerCreature* player, unsigned long long deedID, float x, float y, int angle);
 
 	int placeStructure(PlayerCreature* player, StructureObject* structureObject, SharedStructureObjectTemplate* structureTemplate, unsigned long long deedID, float x, float y, const Quaternion& direction);
@@ -253,7 +257,7 @@
 
 	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);
 
-	void loadStructures();
+	void initialize();
 
 	int placeStructureFromDeed(PlayerCreature* player, unsigned long long deedID, float x, float y, int angle);
 
Index: src/server/zone/managers/structure/StructureManager.idl
===================================================================
--- src/server/zone/managers/structure/StructureManager.idl	(revision 3024)
+++ src/server/zone/managers/structure/StructureManager.idl	(working copy)
@@ -84,13 +84,23 @@
 	
 	private native void loadPlayerStructures();
 	
-	public void loadStructures() {
+	public void initialize() {
 		Logger.info("Loading structures...", true);
 
 		loadPlayerStructures();
 	}
 	
 	/**
+	 * Checks for any regions, boundaries, or existing objects that should block this structure's placement.
+	 * @param structureTemplate The structure template representing the structure to be placed.
+	 * @param x The x coordinate representing the center point of the place attempt.
+	 * @param y The y coordinate representing the center point of the place attempt.
+	 * @return Returns true if the structure can be placed at the position.
+	 */
+	@local
+	public native boolean validateStructurePlacableAtPosition(SharedStructureObjectTemplate structureTemplate, float x, float y);
+	
+	/**
 	 * A player places a structure from a deed.
 	 * @pre player is locked, the deed is unlocked
 	 * @post player is locked, the deed is unlocked
Index: src/server/zone/managers/structure/StructureManagerImplementation.cpp
===================================================================
--- src/server/zone/managers/structure/StructureManagerImplementation.cpp	(revision 3024)
+++ src/server/zone/managers/structure/StructureManagerImplementation.cpp	(working copy)
@@ -59,18 +59,15 @@
 #include "server/zone/managers/minigames/events/GamblingEvent.h"
 
 void StructureManagerImplementation::loadPlayerStructures() {
+	info("Loading player structure", true);
 
-	StringBuffer msg;
-	msg << "StructureManagerImplementation::loadPlayerStructures()";
-	info(msg.toString());
-
 	ObjectDatabaseManager* dbManager = ObjectDatabaseManager::instance();
 	//dbManager->loadDatabases();
 
 	ObjectDatabase* playerStructuresDatabase = ObjectDatabaseManager::instance()->loadObjectDatabase("playerstructures", true);
 
 	if (playerStructuresDatabase == NULL) {
-		error("StructureManagerImplementation::loadPlayerStructures(): There was an error loading the 'playerstructures' database.");
+		error("There was an error loading the 'playerstructures' database.");
 
 		return;
 	}
@@ -107,10 +104,9 @@
 			SceneObject* object = server->getZoneServer()->getObject(objectID);
 
 			if (object != NULL) {
-				//object->info("loaded player structure into world");
 				++i;
 			} else {
-				error("could not load structure " + String::valueOf(objectID));
+				error("Could not load structure " + String::valueOf(objectID));
 			}
 
 			objectData->clear();
@@ -118,321 +114,46 @@
 
 		delete objectData;
 	} catch (DatabaseException& e) {
-		StringBuffer err;
-		err << "Loading Player Structures, exception: " << e.getMessage();
-		error(err);
+		error("Unhandled exception while loading player structures: " + e.getMessage());
 
 		return;
 	}
 
-	info(String::valueOf(i) + " player structures loaded", true);
+	info("Successfully loaded " + String::valueOf(i) + " player structures.", true);
 }
 
 int StructureManagerImplementation::placeStructureFromDeed(PlayerCreature* player, uint64 deedID, float x, float y, int angle) {
-	ZoneServer* zoneServer = player->getZoneServer();
-	ObjectManager* objectManager = ObjectManager::instance();
-
-	ManagedReference<PlayerObject*> playerObject = player->getPlayerObject();
-	ManagedReference<SceneObject*> inventory = player->getSlottedObject("inventory");
-
-	if (playerObject == NULL || inventory == NULL)
-		return 1;
-
-	ManagedReference<SceneObject*> obj = zoneServer->getObject(deedID);
-
-	if (obj == NULL || !obj->isDeedObject()) {
-		player->sendSystemMessage("@player_structure:not_a_deed"); //That is not a deed.
-		return 1;
-	}
-
-	if (!obj->isASubChildOf(player) && !obj->isASubChildOf(inventory)) {
-		player->sendSystemMessage("@player_structure:no_possession"); //You no longer are in possession of the deed for this structure. Aborting construction.
-		return 1;
-	}
-
-	Deed* deed = (Deed*) obj.get();
-
-	String structureTemplateString = deed->getGeneratedObjectTemplate();
-	uint32 structureTemplateCRC = structureTemplateString.hashCode();
-
-	SharedStructureObjectTemplate* ssot = dynamic_cast<SharedStructureObjectTemplate*>(templateManager->getTemplate(structureTemplateCRC));
-
-	if (ssot == NULL) {
-		player->error("Invalid template (" + structureTemplateString + ") used in placeStructureFromDeed.");
-		return 1;
-	}
-
-	String abilityRequired = ssot->getAbilityRequired();
-
-	if (!abilityRequired.isEmpty() && !player->getPlayerObject()->hasSkill(abilityRequired)) {
-		player->sendSystemMessage("@player_structure:" + abilityRequired);
-		return 1;
-	}
-
-	PlanetManager* planetManager = zone->getPlanetManager();
-	StringId errorStf;
-
-	if (planetManager->isNoBuildArea(x, y, errorStf)) {
-		StringIdChatParameter sendString("player_structure", "city_too_close"); //You cannot place here. It is too close to %TO.
-		sendString.setTO(errorStf.getFile(), errorStf.getStringID());
-		player->sendSystemMessage(sendString);
-
-		return 1;
-	}
-
-	ManagedReference<Region*> region = planetManager->getRegion(x, y);
-	ManagedReference<CityHallObject*> cityHall = NULL;
-
-	uint8 reqRank = ssot->getCityRankRequired();
-
-	if (region != NULL) {
-		cityHall = region->getCityHall();
-
-		if (cityHall != NULL) {
-			uint8 cityRank = cityHall->getCityRank();
-
-			if (cityHall->isZoningEnabled() && !cityHall->hasZoningRights(player->getObjectID())) {
-				player->sendSystemMessage("@player_structure:no_rights"); //You don't have the right to place that structure in this city. The mayor or one of the city milita must grant you zoning rights first.
-				return 1;
-			}
-
-			if (cityRank < reqRank) {
-				StringIdChatParameter params;
-				params.setStringId("@city/city:rank_req"); //The city must be at least rank %DI (%TO) in order for you to place this structure.
-				params.setDI(reqRank);
-				params.setTO("@city/city:rank" + String::valueOf(reqRank));
-
-				player->sendSystemMessage(params);
-				return 1;
-			}
-		}
-	} else {
-		if (reqRank > 0) {
-			player->sendSystemMessage("@city/city:build_no_city"); //You must be in a city to place that structure.
-			return 1;
-		}
-	}
-
-	int lotsRemaining = player->getLotsRemaining();
-	int lotsRequired = 0;
-
-	//If the player is not an admin, then find out how many lots are required.
-	if (playerObject != NULL && !playerObject->isPrivileged())
-		lotsRequired = ssot->getLotSize();
-
-	if (lotsRemaining < lotsRequired) {
-		StringIdChatParameter stringId;
-		stringId.setStringId("@player_structure:not_enough_lots"); //This structure requires %DI lots.
-		stringId.setDI(lotsRequired);
-
-		player->sendSystemMessage(stringId);
-		return 1;
-	}
-
-	ManagedReference<SceneObject*> sobj = objectManager->createObject(structureTemplateCRC, 1, "playerstructures");
-
-	//Make sure its a valid Structure Object
-	if (sobj == NULL || !sobj->isStructureObject()) {
-		if (sobj != NULL)
-			sobj->destroyObjectFromDatabase(true);
-
-		player->error("Object created was not a valid structure object in placeStructure.");
-		return 1;
-	}
-
-	StructureObject* structureObject = (StructureObject*) sobj.get();
-
-	//Check requisites.
-	if (!structureObject->checkRequisitesForPlacement(player)) {
-		structureObject->destroyObjectFromDatabase(true);
-		return 1;
-	}
-
-	//Surplus Maintenance and Power
-	if (deed->isBuildingDeed()) {
-		BuildingDeed* buildingDeed = (BuildingDeed*) deed;
-
-		structureObject->setSurplusMaintenance(buildingDeed->getSurplusMaintenance());
-	}
-
-	if (deed->isInstallationDeed()) {
-		InstallationDeed* installationDeed = (InstallationDeed*) deed;
-
-		structureObject->setSurplusMaintenance(installationDeed->getSurplusMaintenance());
-		structureObject->setSurplusPower(installationDeed->getSurplusPower());
-	}
-
-	player->setLotsRemaining(lotsRemaining - lotsRequired);
-
-	//Remove the deed from it's container.
-	ManagedReference<SceneObject*> deedContainer = deed->getParent();
-
-	if (deedContainer != NULL)
-		deedContainer->removeObject(deed, true);
-
-	Quaternion direction;
-	Vector3 unity(0, 1, 0);
-	direction.rotate(unity, angle);
-
-	constructStructure(player, structureObject, ssot, deedID, x, y, direction);
-
 	return 0;
 }
 
 int StructureManagerImplementation::constructStructure(PlayerCreature* player, StructureObject* structureObject, SharedStructureObjectTemplate* ssot, uint64 deedID, float x, float y, const Quaternion& direction) {
-	ZoneServer* zoneServer = player->getZoneServer();
-
-	String constructionMarkerTemplateString = ssot->getConstructionMarkerTemplate();
-	uint32 constructionMarkerTemplateCRC = constructionMarkerTemplateString.hashCode();
-
-	if (constructionMarkerTemplateString.isEmpty()) {
-		placeStructure(player, structureObject, ssot, deedID, x, y, direction);
-		return 1;
-	}
-
-	float z = zone->getHeight(x, y);
-
-	ManagedReference<SceneObject*> constructionMarker = zoneServer->createObject(constructionMarkerTemplateCRC, 1);
-	constructionMarker->initializePosition(x, z, y);
-	constructionMarker->setDirection(direction);
-	constructionMarker->rotate(180); //Construction markers seem to all be 180 degrees rotated from the building they represent.
-	constructionMarker->insertToZone(zone);
-
-	int buildTime = 3000 * ssot->getLotSize();
-
-	Task* task = new StructureConstructionCompleteTask(_this, player, structureObject, ssot, deedID, x, y, direction, constructionMarker);
-	task->schedule(buildTime);
-	//player->info("Scheduled StructureConstructionCompleteTask in " + String::valueOf(buildTime) , true);
 	return 0;
 }
 
 int StructureManagerImplementation::placeStructure(PlayerCreature* player, StructureObject* structureObject, SharedStructureObjectTemplate* structureTemplate, uint64 deedID, float x, float y, const Quaternion& direction) {
-	ZoneServer* zoneServer = player->getZoneServer();
-	TerrainManager* terrainManager = zone->getPlanetManager()->getTerrainManager();
+	//clearFloraRaidus and snapToTerrain
 
-	float z = zone->getHeight(x, y);
+	//get highest point.
 
-	float floraRadius = structureTemplate->getClearFloraRadius();
-	bool snapToTerrain = structureTemplate->getSnapToTerrain();
+	//if building, create cells
 
-	float width = structureTemplate->getWidth();
-	float length = structureTemplate->getLength();
+	//set public structure if template is public structure
+	//init position and direction
 
-	int orient = direction.getDegrees() / 4;
+	//set owner id and deed id
 
-	if (orient & 1) { //is odd, swap them to account for building rotation
-		width = structureTemplate->getLength();
-		length = structureTemplate->getWidth();
-	}
+	//insert to zone
 
-	//Scale them.
-	width *= 4.0f;
-	length *= 4.0f;
+	//create child objects
 
-	if (floraRadius > 0 && !snapToTerrain)
-		z = terrainManager->getHighestHeight(x - width, y - length, x + width, y + length, 1);
+	//create the sign
 
-	if (structureObject->isBuildingObject()) {
-		BuildingObject* buildingObject = (BuildingObject*) structureObject;
-		buildingObject->createCellObjects();
-	}
+	//.structureObject->notifyStructurePlaced(player);
 
-	//info("initializing position to z:" + String::valueOf(z), true);
-
-	//Finish setting up the structure.
-	structureObject->setPublicStructure(structureTemplate->isPublicStructure());
-	structureObject->initializePosition(x, z, y);
-	structureObject->setDirection(direction);
-	structureObject->setOwnerObjectID(player->getObjectID());
-	structureObject->setDeedObjectID(deedID);
-	structureObject->insertToZone(zone);
-
-	structureObject->createChildObjects();
-
-	if (structureObject->isBuildingObject()) {
-		SharedBuildingObjectTemplate* sbot = dynamic_cast<SharedBuildingObjectTemplate*>(structureTemplate);
-
-		if (sbot != NULL) {
-			BuildingObject* buildingObject = (BuildingObject*) structureObject;
-			//Create a sign
-
-			ChildObject* child = sbot->getSign();
-			if (child != NULL && !child->getTemplateFile().isEmpty()) {
-				ManagedReference<SceneObject*> signobj = zoneServer->createObject(child->getTemplateFile().hashCode(), 1);
-
-				if (signobj != NULL) {
-					if (signobj->isSignObject()) {
-						SignObject* sign = (SignObject*) signobj.get();
-						UnicodeString signName = player->getObjectName()->getDisplayedName() + "'s House";
-						sign->setCustomObjectName(signName, false);
-						Vector3 signPos = child->getPosition();
-						Quaternion signDir = child->getDirection();
-
-						float angle = buildingObject->getDirection()->getRadians();
-
-						float signx = (Math::cos(angle) * signPos.getX()) + (signPos.getY() * Math::sin(angle));
-						float signy = (Math::cos(angle) * signPos.getY()) - (signPos.getX() * Math::sin(angle));
-
-						signx += buildingObject->getPositionX();
-						signy += buildingObject->getPositionY();
-
-						float signz = buildingObject->getPositionZ() + signPos.getZ();
-
-						float degrees = buildingObject->getDirection()->getDegrees();
-
-						Quaternion dir = child->getDirection();
-
-						buildingObject->setSignObject(sign);
-
-						sign->initializePosition(signx, signz, signy);
-						sign->setDirection(dir.rotate(Vector3(0, 1, 0), degrees));
-
-						sign->insertToZone(zone);
-					} else {
-						signobj->destroyObjectFromDatabase(true);
-					}
-				}
-			}
-		}
-	}
-
-	structureObject->notifyStructurePlaced(player);
-	structureObject->updateToDatabase();
-
 	//Create a waypoint
-	ManagedReference<PlayerObject*> playerObject = player->getPlayerObject();
-	ManagedReference<WaypointObject*> waypointObject = NULL;
 
-	if (playerObject != NULL) {
-		String full = structureObject->getCustomObjectName().toString();
+	//Create an email with waypoint attached
 
-		if (full.isEmpty())
-			structureObject->getObjectName()->getFullPath(full);
-
-		String waypointTemplateString = "object/waypoint/world_waypoint_blue.iff";
-
-		waypointObject = (WaypointObject*) zoneServer->createObject(waypointTemplateString.hashCode(), 1);
-		waypointObject->setCustomName(full);
-		waypointObject->setActive(true);
-		waypointObject->setPosition(x, z, y);
-		String planetName = Planet::getPlanetName(zone->getZoneID());
-		waypointObject->setPlanetCRC(planetName.hashCode());
-
-		playerObject->addWaypoint(waypointObject, false, true);
-	}
-
-	//Create an email
-	ManagedReference<ChatManager*> chatManager = zoneServer->getChatManager();
-
-	if (chatManager != NULL) {
-		StringIdChatParameter emailBody;
-		emailBody.setStringId("@player_structure:construction_complete");
-		emailBody.setTO(structureObject->getObjectName());
-		emailBody.setDI(player->getLotsRemaining());
-		UnicodeString subject = "@player_structure:construction_complete_subject";
-		chatManager->sendMail("@player_structure:construction_complete_sender", subject, emailBody, player->getFirstName(), waypointObject);
-	}
-
 	return 0;
 }
 
@@ -444,105 +165,22 @@
 
 	float x = structureObject->getPositionX();
 	float y = structureObject->getPositionY();
-	float z = structureObject->getZone()->getHeight(x, y);
+	//float z = structureObject->getZone()->getHeight(x, y);
 
-	if (structureObject->isBuildingObject()) {
-		ManagedReference<BuildingObject*> buildingObject = (BuildingObject*) structureObject;
+	//remove all players from the building
 
-		for (int i = 0; i < buildingObject->getTotalCellNumber(); ++i) {
-			ManagedReference<CellObject*> cellObject = buildingObject->getCell(i);
+	//remove structure from zone;
 
-			int childObjects = cellObject->getContainerObjectsSize();
+	//refund lots
 
-			if (cellObject == NULL || childObjects <= 0)
-				continue;
+	//if this is the declared residence, unset players residence
 
-			//Traverse the vector backwards since the size will change as objects are removed.
-			for (int j = childObjects - 1; j >= 0; --j) {
-				ManagedReference<SceneObject*> obj = cellObject->getContainerObject(j);
+	//structureObject->destroyObjectFromDatabase(true);
 
-				if (obj->isPlayerCreature()) {
-					ManagedReference<PlayerCreature*> playerCreature = (PlayerCreature*) obj.get();
-
-					playerCreature->teleport(x, z, y, 0);
-				}
-			}
-		}
-	}
-
-	structureObject->removeFromZone();
-
-	int lotsRemaining = player->getLotsRemaining();
-
-	if (!player->getPlayerObject()->isPrivileged())
-		player->setLotsRemaining(lotsRemaining + structureObject->getLotSize());
-
-	//If the deed object id is not 0, then the deed wasn't reclaimed.
-	//NOTICE: This could potentially give an erroneous message if the deed never existed when the structure was placed.
-	if (structureObject->getDeedObjectID() != 0)
-		player->sendSystemMessage("@player_structure:structure_destroyed"); //Structure destroyed.
-	else
-		player->sendSystemMessage("@player_structure:deed_reclaimed"); //Structure destroyed and deed reclaimed.
-
-	if (player->getDeclaredResidence() == structureObject)
-		player->setDeclaredResidence(NULL);
-
-	structureObject->destroyObjectFromDatabase(true);
-
 	return 0;
 }
 
 int StructureManagerImplementation::redeedStructure(PlayerCreature* player, StructureObject* structureObject, bool destroy) {
-	ZoneServer* zoneServer = player->getZoneServer();
-
-	int surplusMaintenance = structureObject->getSurplusMaintenance();
-	int redeedCost = structureObject->getRedeedCost();
-
-	ManagedReference<SceneObject*> obj = zoneServer->getObject(structureObject->getDeedObjectID());
-
-	if (obj != NULL && obj->isDeedObject()) {
-		Deed* deed = (Deed*) obj.get();
-
-		if (surplusMaintenance >= redeedCost) {
-			//Enough surplus maintenance exists to redeed the structure.
-			ManagedReference<SceneObject*> inventory = player->getSlottedObject("inventory");
-
-			if (inventory != NULL) {
-				if (!inventory->hasFullContainerObjects()) {
-					//There is room in the inventory for the deed, set its values and put it in the inventory.
-					if (deed->isBuildingDeed()) {
-						BuildingDeed* buildingDeed = (BuildingDeed*) deed;
-
-						buildingDeed->setSurplusMaintenance(surplusMaintenance - redeedCost);
-					} else if (deed->isInstallationDeed()) {
-						InstallationDeed* installationDeed = (InstallationDeed*) deed;
-
-						installationDeed->setSurplusMaintenance(surplusMaintenance - redeedCost);
-
-						if (structureObject->isInstallationObject())
-							installationDeed->setSurplusPower(((InstallationObject*) structureObject)->getSurplusPower());
-					}
-
-					deed->sendTo(player, true);
-					inventory->addObject(deed, -1, true);
-
-					//Since we have retrieved the deed, set the structures deed id to 0 so that it doesn't get deleted from the database.
-					structureObject->setDeedObjectID(0);
-				} else {
-					//The deed cant be returned to them because their inventory is full. Abort the deletion of the structure here.
-					player->sendSystemMessage("@player_structure:inventory_full"); //This installation can not be redeeded because your inventory does not have room to put the deed.
-					return 1;
-				}
-			}
-		} else {
-			//Not enough surplus maintenance existed to redeed the structure, destroy the deed but continue with structure destruction.
-			deed->destroyObjectFromDatabase(true);
-		}
-	}
-
-	if (destroy)
-		destroyStructure(player, structureObject);
-
 	return 0;
 }
 
@@ -570,158 +208,10 @@
 }
 
 int StructureManagerImplementation::declareResidence(PlayerCreature* player, StructureObject* structureObject) {
-	if (!structureObject->isBuildingObject()) {
-		player->sendSystemMessage("@player_structure:residence_must_be_building"); //Your declared residence must be a building.
-		return 1;
-	}
-
-	ManagedReference<BuildingObject*> declaredResidence = player->getDeclaredResidence();
-
-	if (declaredResidence != NULL && declaredResidence->isCityHallBuilding()) {
-		player->sendSystemMessage("@city/city:mayor_residence_change"); //As a city Mayor, your residence is always the city hall of the city in which you are mayor.  You cannot declare a new residence.
-		return 1;
-	}
-
-	ManagedReference<BuildingObject*> buildingObject = (BuildingObject*) structureObject;
-
-	if (!buildingObject->isOwnerOf(player)) {
-		player->sendSystemMessage("@player_structure:declare_must_be_owner"); //You must be the owner of the building to declare residence.
-		return 1;
-	}
-
-	//@player_structure:change_residence_time You cannot change residence for %NO hours.
-
-	if (declaredResidence == buildingObject) {
-		player->sendSystemMessage("@player_structure:already_residence"); //This building is already your residence.
-		return 1;
-	}
-
-	if (declaredResidence == NULL) {
-		player->sendSystemMessage("@player_structure:declared_residency"); //You have declared your residency here.
-	} else {
-		player->sendSystemMessage("@player_structure:change_residence"); //You change your residence to this building.
-	}
-
-	//Set the characters home location to this structure.
-	player->setDeclaredResidence(buildingObject);
-
-
-	//If in a city, add to the cities citizens
-	ManagedReference<ActiveArea*> activeArea = buildingObject->getActiveRegion();
-
-	if (activeArea == NULL || !activeArea->isRegion())
-		return 0; //Not in a city.
-
-	Region* region = (Region*) activeArea.get();
-
-	ManagedReference<CityHallObject*> cityHall = region->getCityHall();
-
-	ManagedReference<CityManager*> cityManager = zone->getCityManager();
-
-	if (cityHall != NULL && !cityHall->isCitizen(player->getObjectID()))
-		cityManager->declareCitizenship(cityHall, player);
-
-	//Just need to save the players declared residence
-	player->updateToDatabaseWithoutChildren();
-
 	return 0;
 }
 
 int StructureManagerImplementation::changePrivacy(PlayerCreature* player, StructureObject* structureObject) {
-	SharedBuildingObjectTemplate* sbot = dynamic_cast<SharedBuildingObjectTemplate*>(templateManager->getTemplate(structureObject->getServerObjectCRC()));
-
-	if (sbot != NULL && sbot->isAlwaysPublic()) {
-		player->sendSystemMessage("@player_structure:force_public"); //This structure is always public.
-		return 0;
-	}
-
-	structureObject->setPublicStructure(!structureObject->isPublicStructure());
-
-	if (structureObject->isPublicStructure())
-		player->sendSystemMessage("@player_structure:structure_now_public"); //This structure is now public
-	else
-		player->sendSystemMessage("@player_structure:structure_now_private"); //This structure is now private
-
-	if (!structureObject->isBuildingObject())
-		return 0;
-
-	ManagedReference<BuildingObject*> buildingObject = (BuildingObject*) structureObject;
-
-	bool allowEntry = buildingObject->isPublicStructure();
-	int totalCells = buildingObject->getTotalCellNumber();
-
-	Vector<BaseMessage*> cellMessages;
-
-	for (int i = 0; i < totalCells; ++i) {
-		ManagedReference<CellObject*> cell = buildingObject->getCell(i);
-
-		if (cell == NULL)
-			continue;
-
-		UpdateCellPermissionsMessage* cellMessage = new UpdateCellPermissionsMessage(cell->getObjectID(), allowEntry);
-		cellMessages.add(cellMessage);
-	}
-
-	Locker _locker(zone);
-
-	int inRangeObjectCount = buildingObject->inRangeObjectCount();
-
-	//All players outside, that are in range...
-	for (int i = 0; i < inRangeObjectCount; ++i) {
-		ManagedReference<SceneObject*> obj = (SceneObject*) buildingObject->getInRangeObject(i);;
-
-		if (obj == NULL || !obj->isPlayerCreature() || obj == player)
-			continue;
-
-
-		PlayerCreature* targetPlayer = (PlayerCreature*) obj.get();
-
-		//Permissions shouldnt change for the player if they are on the entry, access, or ban list.
-		if (buildingObject->isOnBanList(targetPlayer))
-			continue;
-
-		if (buildingObject->isOnEntryList(targetPlayer))
-			continue;
-
-		if (buildingObject->isOnAccessList(targetPlayer))
-			continue;
-
-		for (int j = 0; j < cellMessages.size(); ++j)
-			targetPlayer->sendMessage(cellMessages.get(j)->clone());
-	}
-
-	//Delete the messages...
-	for (int i = 0; i < cellMessages.size(); ++i) {
-		BaseMessage* msg = cellMessages.get(i);
-		delete msg;
-		msg = NULL;
-	}
-
-	_locker.release();
-
-	//Send updates out to all players inside the building...
-	for (int i = 0; i < buildingObject->getTotalCellNumber(); ++i) {
-		ManagedReference<CellObject*> cellObject = (CellObject*) buildingObject->getCell(i);
-
-		if (cellObject == NULL)
-			continue;
-
-		int cellObjectCount = cellObject->getContainerObjectsSize();
-
-		for (int j = cellObjectCount - 1; j >= 0; --j) {
-			ManagedReference<SceneObject*> obj = cellObject->getContainerObject(j);
-
-			if (obj == NULL || !obj->isPlayerCreature() || obj == player)
-				continue;
-
-			PlayerCreature* targetPlayer = (PlayerCreature*) obj.get();
-
-			Locker _locker(targetPlayer);
-
-			buildingObject->updateCellPermissionsTo(targetPlayer);
-		}
-	}
-
 	return 0;
 }
 
@@ -743,3 +233,25 @@
 
 	return NULL;
 }
+
+bool StructureManagerImplementation::validateStructurePlacableAtPosition(SharedStructureObjectTemplate* structureTemplate, float x, float y) {
+	String footprintFile = structureTemplate->getStructureFootprintFileName();
+
+	if (footprintFile.isEmpty())
+		return true;
+
+	TemplateManager* templateManager = TemplateManager::instance();
+
+	IffStream* iffStream = templateManager->openIffFile(footprintFile);
+
+	if (iffStream == NULL)
+		return true;
+
+	//StructureFootprintIff sfpiff;
+	//sfpiff.readObject(iffStream);
+
+	//We need to check if any collidable object in QuadTree is within the boundaries of the rectangle...
+	//Also, translate the rectangle to account for direction of the structure...
+
+	return true;
+}
Index: src/server/zone/managers/sui/SuiManager.cpp
===================================================================
--- src/server/zone/managers/sui/SuiManager.cpp	(revision 3024)
+++ src/server/zone/managers/sui/SuiManager.cpp	(working copy)
@@ -1092,13 +1092,8 @@
 	if (zone == NULL)
 		return;
 
-	PlanetManager* planetManager = zone->getPlanetManager();
+	StructureManager* structureManager = zone->getStructureManager();
 
-	if (planetManager == NULL)
-		return;
-
-	StructureManager* structureManager = planetManager->getStructureManager();
-
 	if (structureManager == NULL)
 		return;
 
Index: src/server/zone/managers/templates/TemplateManager.cpp
===================================================================
--- src/server/zone/managers/templates/TemplateManager.cpp	(revision 3024)
+++ src/server/zone/managers/templates/TemplateManager.cpp	(working copy)
@@ -151,7 +151,7 @@
 	if (treFilesToLoad.size() == 0)
 		return;
 
-	info("loading tres..", true);
+	info("Loading TRE files...", true);
 
 	treeDirectory = new treArchive();
 
@@ -164,7 +164,7 @@
 		fullPath += file;
 
 		if (!treeDirectory->addFile(fullPath.toCharArray()))
-			error("could not load " + fullPath);
+			error("Could not load " + fullPath);
 		else
 			++j;
 	}
@@ -176,7 +176,7 @@
 
 	//treeDirectory->printArchiveContents();
 
-	info("tres loaded", true);
+	info("TRE files loaded.", true);
 }
 
 void TemplateManager::addTemplate(uint32 key, const String& fullName, LuaObject* templateData) {
Index: src/server/zone/objects/building/city/CityHallObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/building/city/CityHallObjectImplementation.cpp	(revision 3024)
+++ src/server/zone/objects/building/city/CityHallObjectImplementation.cpp	(working copy)
@@ -187,7 +187,7 @@
 	if (zone == NULL)
 		return;
 
-	ManagedReference<StructureManager*> structureManager = zone->getPlanetManager()->getStructureManager();
+	ManagedReference<StructureManager*> structureManager = zone->getStructureManager();
 
 	if (structureManager == NULL)
 		return;
Index: src/server/zone/objects/creature/VehicleObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/creature/VehicleObjectImplementation.cpp	(revision 3024)
+++ src/server/zone/objects/creature/VehicleObjectImplementation.cpp	(working copy)
@@ -39,7 +39,7 @@
 	if (zone == NULL)
 		return false;
 
-	ManagedReference<StructureManager*> structureManager = zone->getPlanetManager()->getStructureManager();
+	ManagedReference<StructureManager*> structureManager = zone->getStructureManager();
 
 	if (structureManager == NULL)
 		return false;
Index: src/server/zone/objects/creature/commands/PlaceStructureCommand.h
===================================================================
--- src/server/zone/objects/creature/commands/PlaceStructureCommand.h	(revision 3024)
+++ src/server/zone/objects/creature/commands/PlaceStructureCommand.h	(working copy)
@@ -99,13 +99,8 @@
 		if (zone == NULL)
 			return GENERALERROR;
 
-		PlanetManager* planetManager = zone->getPlanetManager();
+		StructureManager* structureManager = zone->getStructureManager();
 
-		if (planetManager == NULL)
-			return GENERALERROR;
-
-		StructureManager* structureManager = planetManager->getStructureManager();
-
 		if (structureManager == NULL)
 			return GENERALERROR;
 
Index: src/server/zone/objects/creature/commands/PlaceStructureModeCommand.h
===================================================================
--- src/server/zone/objects/creature/commands/PlaceStructureModeCommand.h	(revision 3024)
+++ src/server/zone/objects/creature/commands/PlaceStructureModeCommand.h	(working copy)
@@ -55,7 +55,6 @@
 
 class PlaceStructureModeCommand : public QueueCommand {
 public:
-
 	PlaceStructureModeCommand(const String& name, ZoneProcessServer* server)
 		: QueueCommand(name, server) {
 
@@ -74,31 +73,33 @@
 
 		PlayerCreature* player = (PlayerCreature*) creature;
 
-		ZoneServer* zserv = server->getZoneServer();
+		StructureManager* structureManager = player->getZone()->getStructureManager();
 
-		if (zserv == NULL)
-			return GENERALERROR;
+		ManagedReference<SceneObject*> obj = server->getZoneServer()->getObject(target);
 
-		ManagedReference<SceneObject*> obj = zserv->getObject(target);
+		if (obj == NULL || (!obj->isBuildingDeed() && !obj->isInstallationDeed()))
+			return INVALIDTARGET;
 
-		if (obj == NULL)
-			return GENERALERROR;
+		//Get the deed.
+		ManagedReference<Deed*> deed = (Deed*) obj.get();
 
-		if (!obj->isBuildingDeed() && !obj->isInstallationDeed())
-			return GENERALERROR;
+		//Check that the deed is in the player's inventory.
+		ManagedReference<SceneObject*> inventory = player->getSlottedObject("inventory");
 
-		ManagedReference<Deed*> deed = (Deed*) obj.get();
+		if (!deed->isASubChildOf(inventory)) {
+			//Does not own the deed.
+			return INVALIDPARAMETERS;
+		}
 
-		//Need to lock the deed ?
 		Locker _locker(deed);
 
-		if (creature->isRidingMount()) {
-			creature->sendSystemMessage("player_structure", "cant_place_mounted"); //You may not place a structure while mounted or riding a vehicle.
+		if (player->isRidingMount()) {
+			player->sendSystemMessage("@player_structure:cant_place_mounted"); //You may not place a structure while mounted or riding a vehicle.
 			return GENERALERROR;
 		}
 
 		if (creature->getParentID() > 0) {
-			creature->sendSystemMessage("player_structure", "not_inside"); //You can not place a structure while you are inside a building.
+			creature->sendSystemMessage("@player_structure:not_inside"); //You can not place a structure while you are inside a building.
 			return GENERALERROR;
 		}
 
@@ -121,6 +122,7 @@
 			StringIdChatParameter stringId;
 			stringId.setStringId("@player_structure:not_enough_lots"); //This structure requires %DI lots.
 			stringId.setDI(lotsNeeded);
+
 			player->sendSystemMessage(stringId);
 			return GENERALERROR;
 		}
@@ -132,18 +134,13 @@
 			return GENERALERROR;
 		}
 
-		String planetName = zone->getPlanetName();
+		PlanetManager* planetManager = zone->getPlanetManager();
 
-		/*if (planetName == "rori" || planetName == "yavin4") {
-			player->sendSystemMessage("Structure placement is currently disabled on this planet");
-			return GENERALERROR;
-		}*/
-
-		PlanetManager* planetManager = player->getZone()->getPlanetManager();
 		StringId errorStf;
 
+		//Check if the player is in a no build area.
 		if (planetManager->isNoBuildArea(player->getPositionX(), player->getPositionY(), errorStf)) {
-			StringIdChatParameter sendString("player_structure", "city_too_close");
+			StringIdChatParameter sendString("@player_structure:city_too_close");
 			sendString.setTO(errorStf.getFile(), errorStf.getStringID());
 
 			player->sendSystemMessage(sendString);
@@ -151,6 +148,7 @@
 			return GENERALERROR;
 		}
 
+		//Check to see if the player is standing in an active area.
 		Vector<ManagedReference<ActiveArea*> >* areas = player->getActiveAreas();
 
 		if (areas->size() != 0) {
@@ -167,6 +165,8 @@
 			}
 		}
 
+		//EnterStructurePlacementMode. move this to a facade.
+
 		int clientObjectCRC = structureTemplate->getClientObjectCRC();
 
 		String clientTemplateString = structureTemplateName;
Index: src/server/zone/objects/installation/InstallationObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/installation/InstallationObjectImplementation.cpp	(revision 3024)
+++ src/server/zone/objects/installation/InstallationObjectImplementation.cpp	(working copy)
@@ -604,11 +604,6 @@
 	if (!destroyContainedObjects)
 		return;
 
-	ManagedReference<SceneObject*> deed = getZoneServer()->getObject(deedObjectID);
-
-	if (deed != NULL)
-		deed->destroyObjectFromDatabase(true);
-
 	for (int i = 0; i < resourceHopper.size(); ++i) {
 		ResourceContainer* container = resourceHopper.get(i);
 
Index: src/server/zone/objects/structure/MaintenanceComponent.cpp
===================================================================
--- src/server/zone/objects/structure/MaintenanceComponent.cpp	(revision 0)
+++ src/server/zone/objects/structure/MaintenanceComponent.cpp	(revision 0)
@@ -0,0 +1,8 @@
+/*
+ * MaintenanceComponent.cpp
+ *
+ *  Created on: Apr 3, 2011
+ *      Author: crush
+ */
+
+#include "MaintenanceComponent.h"
Index: src/server/zone/objects/structure/MaintenanceComponent.h
===================================================================
--- src/server/zone/objects/structure/MaintenanceComponent.h	(revision 3024)
+++ src/server/zone/objects/structure/MaintenanceComponent.h	(working copy)
@@ -15,6 +15,18 @@
 	MaintenanceComponent() : Object() {
 
 	}
+
+	MaintenanceComponent(const MaintenanceComponent& mc) : Object() {
+
+	}
+
+	MaintenanceComponent& operator= (const MaintenanceComponent& mc) {
+		if (this == &mc)
+			return *this;
+
+
+		return *this;
+	}
 };
 
 
Index: src/server/zone/objects/structure/PlayerStructureComponent.cpp
===================================================================
--- src/server/zone/objects/structure/PlayerStructureComponent.cpp	(revision 0)
+++ src/server/zone/objects/structure/PlayerStructureComponent.cpp	(revision 0)
@@ -0,0 +1,36 @@
+/*
+ * PlayerStructureComponent.cpp
+ *
+ *  Created on: Apr 3, 2011
+ *      Author: crush
+ */
+
+#include "PlayerStructureComponent.h"
+#include "MaintenanceComponent.h"
+
+PlayerStructureComponent::PlayerStructureComponent() {
+	maintenanceComponent = NULL;
+	powerComponent = NULL;
+
+	deedObjectID = 0;
+}
+
+PlayerStructureComponent::PlayerStructureComponent(const PlayerStructureComponent& psc)
+		: Object() {
+	structurePermissionList = psc.structurePermissionList;
+	maintenanceComponent = psc.maintenanceComponent;
+	powerComponent = psc.powerComponent;
+	deedObjectID = psc.deedObjectID;
+}
+
+PlayerStructureComponent& PlayerStructureComponent::operator= (const PlayerStructureComponent& psc) {
+	if (this == &psc)
+		return *this;
+
+	structurePermissionList = psc.structurePermissionList;
+	maintenanceComponent = psc.maintenanceComponent;
+	powerComponent = psc.powerComponent;
+	deedObjectID = psc.deedObjectID;
+
+	return *this;
+}
Index: src/server/zone/objects/structure/PlayerStructureComponent.h
===================================================================
--- src/server/zone/objects/structure/PlayerStructureComponent.h	(revision 3024)
+++ src/server/zone/objects/structure/PlayerStructureComponent.h	(working copy)
@@ -9,10 +9,13 @@
 #define PLAYERSTRUCTURECOMPONENT_H_
 
 #include "engine/engine.h"
-#include "MaintenanceComponent.h"
+#include "StructurePermissionList.h"
 
-class PlayerStructureComponent : public Object, public Logger {
+class MaintenanceComponent;
+
+class PlayerStructureComponent : public Object {
 	StructurePermissionList structurePermissionList;
+
 	Reference<MaintenanceComponent*> maintenanceComponent;
 	Reference<MaintenanceComponent*> powerComponent;
 
@@ -23,7 +26,21 @@
 	PlayerStructureComponent(const PlayerStructureComponent& psc);
 	PlayerStructureComponent& operator= (const PlayerStructureComponent& psc);
 
+	inline void setDeedObjectID(uint64 objid) {
+		deedObjectID = objid;
+	}
 
+	MaintenanceComponent* getMaintenanceComponent() {
+		return maintenanceComponent;
+	}
+
+	StructurePermissionList* getStructurePermissionList() {
+		return &structurePermissionList;
+	}
+
+	inline uint64 getDeedObjectID() {
+		return deedObjectID;
+	}
 };
 
 
Index: src/server/zone/objects/structure/StructureObject.cpp
===================================================================
--- src/server/zone/objects/structure/StructureObject.cpp	(revision 3024)
+++ src/server/zone/objects/structure/StructureObject.cpp	(working copy)
@@ -20,7 +20,7 @@
  *	StructureObjectStub
  */
 
-enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_CREATECHILDOBJECTS__,RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_,RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_,RPC_SENDSTATUSTO__PLAYERCREATURE_,RPC_SENDDESTROYCONFIRMTO__PLAYERCREATURE_,RPC_SENDDESTROYCODETO__PLAYERCREATURE_,RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_,RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_,RPC_GETTIMESTRING__INT_,RPC_GENERATEDESTROYCODE__,RPC_ISVALIDDESTROYCODE__INT_,RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__,RPC_ISONADMINLIST__SCENEOBJECT_,RPC_ISONADMINLIST__LONG_,RPC_ISONENTRYLIST__SCENEOBJECT_,RPC_ISONENTRYLIST__LONG_,RPC_ISONBANLIST__SCENEOBJECT_,RPC_ISONBANLIST__LONG_,RPC_ISOWNEROF__SCENEOBJECT_,RPC_ISOWNEROF__LONG_,RPC_ISONACCESSLIST__SCENEOBJECT_,RPC_ISONACCESSLIST__LONG_,RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_,RPC_ADDPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_,RPC_ADDPERMISSION__PLAYERCREATURE_STRING_STRING_,RPC_REMOVEPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_,RPC_REMOVEPERMISSION__PLAYERCREATURE_STRING_STRING_,RPC_CREATEVENDOR__PLAYERCREATURE_,RPC_GETREDEEDCOST__,RPC_GETOWNEROBJECTID__,RPC_GETDEEDOBJECTID__,RPC_GETLOTSIZE__,RPC_GETDESTROYCODE__,RPC_GETBASEMAINTENANCERATE__,RPC_GETBASEPOWERRATE__,RPC_GETSURPLUSMAINTENANCE__,RPC_GETSURPLUSPOWER__,RPC_ISPUBLICSTRUCTURE__,RPC_SETOWNEROBJECTID__LONG_,RPC_SETDEEDOBJECTID__LONG_,RPC_SETLOTSIZE__INT_,RPC_SETDESTROYCODE__INT_,RPC_SETBASEMAINTENANCERATE__INT_,RPC_SETBASEPOWERRATE__INT_,RPC_SETSURPLUSMAINTENANCE__INT_,RPC_ADDMAINTENANCE__INT_,RPC_SETSURPLUSPOWER__INT_,RPC_ADDPOWER__INT_,RPC_SETPUBLICSTRUCTURE__BOOL_,RPC_ISSTRUCTUREOBJECT__,RPC_ISREDEEDABLE__,RPC_GETLENGTH__,RPC_SETLENGTH__INT_,RPC_GETWIDTH__,RPC_SETWIDTH__INT_};
+enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_FINALIZE__,RPC_DESTROYOBJECTFROMDATABASE__BOOL_,RPC_CREATECHILDOBJECTS__,RPC_NOTIFYSTRUCTUREPLACED__PLAYERCREATURE_,RPC_CHECKREQUISITESFORPLACEMENT__PLAYERCREATURE_,RPC_SENDSTATUSTO__PLAYERCREATURE_,RPC_SENDDESTROYCONFIRMTO__PLAYERCREATURE_,RPC_SENDDESTROYCODETO__PLAYERCREATURE_,RPC_SENDMANAGEMAINTENANCETO__PLAYERCREATURE_,RPC_SENDCHANGENAMEPROMPTTO__PLAYERCREATURE_,RPC_GETTIMESTRING__INT_,RPC_GENERATEDESTROYCODE__,RPC_ISVALIDDESTROYCODE__INT_,RPC_SCHEDULEMAINTENANCEEXPIRATIONEVENT__,RPC_ISONADMINLIST__SCENEOBJECT_,RPC_ISONADMINLIST__LONG_,RPC_ISONENTRYLIST__SCENEOBJECT_,RPC_ISONENTRYLIST__LONG_,RPC_ISONBANLIST__SCENEOBJECT_,RPC_ISONBANLIST__LONG_,RPC_ISOWNEROF__SCENEOBJECT_,RPC_ISOWNEROF__LONG_,RPC_ISONACCESSLIST__SCENEOBJECT_,RPC_ISONACCESSLIST__LONG_,RPC_SENDPERMISSIONLISTTO__PLAYERCREATURE_STRING_,RPC_ADDPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_,RPC_ADDPERMISSION__PLAYERCREATURE_STRING_STRING_,RPC_REMOVEPERMISSION__PLAYERCREATURE_PLAYERCREATURE_STRING_,RPC_REMOVEPERMISSION__PLAYERCREATURE_STRING_STRING_,RPC_CREATEVENDOR__PLAYERCREATURE_,RPC_GETREDEEDCOST__,RPC_GETOWNEROBJECTID__,RPC_GETLOTSIZE__,RPC_GETDESTROYCODE__,RPC_GETBASEMAINTENANCERATE__,RPC_GETBASEPOWERRATE__,RPC_GETSURPLUSMAINTENANCE__,RPC_GETSURPLUSPOWER__,RPC_ISPUBLICSTRUCTURE__,RPC_SETOWNEROBJECTID__LONG_,RPC_SETLOTSIZE__INT_,RPC_SETDESTROYCODE__INT_,RPC_SETBASEMAINTENANCERATE__INT_,RPC_SETBASEPOWERRATE__INT_,RPC_SETSURPLUSMAINTENANCE__INT_,RPC_ADDMAINTENANCE__INT_,RPC_SETSURPLUSPOWER__INT_,RPC_ADDPOWER__INT_,RPC_SETPUBLICSTRUCTURE__BOOL_,RPC_ISSTRUCTUREOBJECT__,RPC_ISREDEEDABLE__,RPC_GETLENGTH__,RPC_SETLENGTH__INT_,RPC_GETWIDTH__,RPC_SETWIDTH__INT_};
 
 StructureObject::StructureObject() : TangibleObject(DummyConstructorParameter::instance()) {
 	StructureObjectImplementation* _implementation = new StructureObjectImplementation();
@@ -48,6 +48,20 @@
 		_implementation->initializeTransientMembers();
 }
 
+void StructureObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
+	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		if (!deployed)
+			throw ObjectNotDeployedException(this);
+
+		DistributedMethod method(this, RPC_DESTROYOBJECTFROMDATABASE__BOOL_);
+		method.addBooleanParameter(destroyContainedObjects);
+
+		method.executeWithVoidReturn();
+	} else
+		_implementation->destroyObjectFromDatabase(destroyContainedObjects);
+}
+
 void StructureObject::loadTemplateData(SharedObjectTemplate* templateData) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
@@ -482,19 +496,6 @@
 		return _implementation->getOwnerObjectID();
 }
 
-unsigned long long StructureObject::getDeedObjectID() {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_GETDEEDOBJECTID__);
-
-		return method.executeWithUnsignedLongReturn();
-	} else
-		return _implementation->getDeedObjectID();
-}
-
 int StructureObject::getLotSize() {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
@@ -573,6 +574,15 @@
 		return _implementation->getSurplusPower();
 }
 
+PlayerStructureComponent* StructureObject::getPlayerStructureComponent() {
+	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
+	if (_implementation == NULL) {
+		throw ObjectNotLocalException(this);
+
+	} else
+		return _implementation->getPlayerStructureComponent();
+}
+
 bool StructureObject::isPublicStructure() {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
@@ -600,20 +610,6 @@
 		_implementation->setOwnerObjectID(objectID);
 }
 
-void StructureObject::setDeedObjectID(unsigned long long deedID) {
-	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
-	if (_implementation == NULL) {
-		if (!deployed)
-			throw ObjectNotDeployedException(this);
-
-		DistributedMethod method(this, RPC_SETDEEDOBJECTID__LONG_);
-		method.addUnsignedLongParameter(deedID);
-
-		method.executeWithVoidReturn();
-	} else
-		_implementation->setDeedObjectID(deedID);
-}
-
 void StructureObject::setLotSize(int lots) {
 	StructureObjectImplementation* _implementation = (StructureObjectImplementation*) _getImplementation();
 	if (_implementation == NULL) {
@@ -931,6 +927,11 @@
 	if (TangibleObjectImplementation::readObjectMember(stream, _name))
 		return true;
 
+	if (_name == "playerStructureComponent") {
+		TypeInfo<PlayerStructureComponent* >::parseFromBinaryStream(&playerStructureComponent, stream);
+		return true;
+	}
+
 	if (_name == "structurePermissionList") {
 		TypeInfo<StructurePermissionList >::parseFromBinaryStream(&structurePermissionList, stream);
 		return true;
@@ -951,11 +952,6 @@
 		return true;
 	}
 
-	if (_name == "deedObjectID") {
-		TypeInfo<unsigned long long >::parseFromBinaryStream(&deedObjectID, stream);
-		return true;
-	}
-
 	if (_name == "lotSize") {
 		TypeInfo<int >::parseFromBinaryStream(&lotSize, stream);
 		return true;
@@ -1011,6 +1007,14 @@
 	String _name;
 	int _offset;
 	uint16 _totalSize;
+	_name = "playerStructureComponent";
+	_name.toBinaryStream(stream);
+	_offset = stream->getOffset();
+	stream->writeShort(0);
+	TypeInfo<PlayerStructureComponent* >::toBinaryStream(&playerStructureComponent, stream);
+	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
+	stream->writeShort(_offset, _totalSize);
+
 	_name = "structurePermissionList";
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
@@ -1043,14 +1047,6 @@
 	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
 	stream->writeShort(_offset, _totalSize);
 
-	_name = "deedObjectID";
-	_name.toBinaryStream(stream);
-	_offset = stream->getOffset();
-	stream->writeShort(0);
-	TypeInfo<unsigned long long >::toBinaryStream(&deedObjectID, stream);
-	_totalSize = (uint16) (stream->getOffset() - (_offset + 2));
-	stream->writeShort(_offset, _totalSize);
-
 	_name = "lotSize";
 	_name.toBinaryStream(stream);
 	_offset = stream->getOffset();
@@ -1129,8 +1125,6 @@
 	lotSize = 0;
 	// server/zone/objects/structure/StructureObject.idl():  		ownerObjectID = 0;
 	ownerObjectID = 0;
-	// server/zone/objects/structure/StructureObject.idl():  		deedObjectID = 0;
-	deedObjectID = 0;
 	// server/zone/objects/structure/StructureObject.idl():  		destroyCode = 0;
 	destroyCode = 0;
 	// server/zone/objects/structure/StructureObject.idl():  		baseMaintenanceRate = 0;
@@ -1147,6 +1141,8 @@
 	width = 0;
 	// server/zone/objects/structure/StructureObject.idl():  		structureMaintenanceTask = null;
 	structureMaintenanceTask = NULL;
+	// server/zone/objects/structure/StructureObject.idl():  		playerStructureComponent = null;
+	playerStructureComponent = NULL;
 }
 
 void StructureObjectImplementation::createChildObjects() {
@@ -1231,11 +1227,6 @@
 	return ownerObjectID;
 }
 
-unsigned long long StructureObjectImplementation::getDeedObjectID() {
-	// server/zone/objects/structure/StructureObject.idl():  		return deedObjectID;
-	return deedObjectID;
-}
-
 int StructureObjectImplementation::getLotSize() {
 	// server/zone/objects/structure/StructureObject.idl():  		return lotSize;
 	return lotSize;
@@ -1266,6 +1257,11 @@
 	return surplusPower;
 }
 
+PlayerStructureComponent* StructureObjectImplementation::getPlayerStructureComponent() {
+	// server/zone/objects/structure/StructureObject.idl():  		return playerStructureComponent;
+	return playerStructureComponent;
+}
+
 bool StructureObjectImplementation::isPublicStructure() {
 	// server/zone/objects/structure/StructureObject.idl():  		return false;
 	return false;
@@ -1280,11 +1276,6 @@
 	(&structurePermissionList)->addPermission(objectID, StructurePermissionList::OWNER);
 }
 
-void StructureObjectImplementation::setDeedObjectID(unsigned long long deedID) {
-	// server/zone/objects/structure/StructureObject.idl():  		deedObjectID = deedID;
-	deedObjectID = deedID;
-}
-
 void StructureObjectImplementation::setLotSize(int lots) {
 	// server/zone/objects/structure/StructureObject.idl():  		lotSize = lots;
 	lotSize = lots;
@@ -1375,6 +1366,9 @@
 	case RPC_FINALIZE__:
 		finalize();
 		break;
+	case RPC_DESTROYOBJECTFROMDATABASE__BOOL_:
+		destroyObjectFromDatabase(inv->getBooleanParameter());
+		break;
 	case RPC_CREATECHILDOBJECTS__:
 		createChildObjects();
 		break;
@@ -1465,9 +1459,6 @@
 	case RPC_GETOWNEROBJECTID__:
 		resp->insertLong(getOwnerObjectID());
 		break;
-	case RPC_GETDEEDOBJECTID__:
-		resp->insertLong(getDeedObjectID());
-		break;
 	case RPC_GETLOTSIZE__:
 		resp->insertSignedInt(getLotSize());
 		break;
@@ -1492,9 +1483,6 @@
 	case RPC_SETOWNEROBJECTID__LONG_:
 		setOwnerObjectID(inv->getUnsignedLongParameter());
 		break;
-	case RPC_SETDEEDOBJECTID__LONG_:
-		setDeedObjectID(inv->getUnsignedLongParameter());
-		break;
 	case RPC_SETLOTSIZE__INT_:
 		setLotSize(inv->getSignedIntParameter());
 		break;
@@ -1555,6 +1543,10 @@
 	((StructureObjectImplementation*) impl)->finalize();
 }
 
+void StructureObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
+	((StructureObjectImplementation*) impl)->destroyObjectFromDatabase(destroyContainedObjects);
+}
+
 void StructureObjectAdapter::createChildObjects() {
 	((StructureObjectImplementation*) impl)->createChildObjects();
 }
@@ -1675,10 +1667,6 @@
 	return ((StructureObjectImplementation*) impl)->getOwnerObjectID();
 }
 
-unsigned long long StructureObjectAdapter::getDeedObjectID() {
-	return ((StructureObjectImplementation*) impl)->getDeedObjectID();
-}
-
 int StructureObjectAdapter::getLotSize() {
 	return ((StructureObjectImplementation*) impl)->getLotSize();
 }
@@ -1711,10 +1699,6 @@
 	((StructureObjectImplementation*) impl)->setOwnerObjectID(objectID);
 }
 
-void StructureObjectAdapter::setDeedObjectID(unsigned long long deedID) {
-	((StructureObjectImplementation*) impl)->setDeedObjectID(deedID);
-}
-
 void StructureObjectAdapter::setLotSize(int lots) {
 	((StructureObjectImplementation*) impl)->setLotSize(lots);
 }
Index: src/server/zone/objects/structure/StructureObject.h
===================================================================
--- src/server/zone/objects/structure/StructureObject.h	(revision 3024)
+++ src/server/zone/objects/structure/StructureObject.h	(working copy)
@@ -99,6 +99,8 @@
 
 #include "server/zone/packets/ui/CreateClientPathMessage.h"
 
+#include "server/zone/objects/structure/PlayerStructureComponent.h"
+
 #include "server/zone/objects/tangible/TangibleObject.h"
 
 #include "engine/util/u3d/AABBTree.h"
@@ -118,6 +120,8 @@
 
 	void initializeTransientMembers();
 
+	void destroyObjectFromDatabase(bool destroyContainedObjects);
+
 	void loadTemplateData(SharedObjectTemplate* templateData);
 
 	void createChildObjects();
@@ -180,8 +184,6 @@
 
 	unsigned long long getOwnerObjectID();
 
-	unsigned long long getDeedObjectID();
-
 	int getLotSize();
 
 	unsigned int getDestroyCode();
@@ -194,12 +196,12 @@
 
 	int getSurplusPower();
 
+	PlayerStructureComponent* getPlayerStructureComponent();
+
 	bool isPublicStructure();
 
 	void setOwnerObjectID(unsigned long long objectID);
 
-	void setDeedObjectID(unsigned long long deedID);
-
 	void setLotSize(int lots);
 
 	void setDestroyCode(unsigned int code);
@@ -260,6 +262,8 @@
 
 class StructureObjectImplementation : public TangibleObjectImplementation {
 protected:
+	PlayerStructureComponent* playerStructureComponent;
+
 	StructureMaintenanceTask* structureMaintenanceTask;
 
 	StructurePermissionList structurePermissionList;
@@ -270,8 +274,6 @@
 
 	unsigned long long ownerObjectID;
 
-	unsigned long long deedObjectID;
-
 	int lotSize;
 
 	unsigned int destroyCode;
@@ -297,6 +299,8 @@
 
 	void finalize();
 
+	void destroyObjectFromDatabase(bool destroyContainedObjects);
+
 	void loadTemplateData(SharedObjectTemplate* templateData);
 
 	void createChildObjects();
@@ -359,8 +363,6 @@
 
 	unsigned long long getOwnerObjectID();
 
-	unsigned long long getDeedObjectID();
-
 	int getLotSize();
 
 	unsigned int getDestroyCode();
@@ -373,12 +375,12 @@
 
 	int getSurplusPower();
 
+	PlayerStructureComponent* getPlayerStructureComponent();
+
 	virtual bool isPublicStructure();
 
 	void setOwnerObjectID(unsigned long long objectID);
 
-	void setDeedObjectID(unsigned long long deedID);
-
 	void setLotSize(int lots);
 
 	void setDestroyCode(unsigned int code);
@@ -456,6 +458,8 @@
 
 	void finalize();
 
+	void destroyObjectFromDatabase(bool destroyContainedObjects);
+
 	void createChildObjects();
 
 	int notifyStructurePlaced(PlayerCreature* player);
@@ -516,8 +520,6 @@
 
 	unsigned long long getOwnerObjectID();
 
-	unsigned long long getDeedObjectID();
-
 	int getLotSize();
 
 	unsigned int getDestroyCode();
@@ -534,8 +536,6 @@
 
 	void setOwnerObjectID(unsigned long long objectID);
 
-	void setDeedObjectID(unsigned long long deedID);
-
 	void setLotSize(int lots);
 
 	void setDestroyCode(unsigned int code);
Index: src/server/zone/objects/structure/StructureObject.idl
===================================================================
--- src/server/zone/objects/structure/StructureObject.idl	(revision 3024)
+++ src/server/zone/objects/structure/StructureObject.idl	(working copy)
@@ -59,10 +59,10 @@
 import engine.util.u3d.Vector3;
 
 include server.zone.packets.ui.CreateClientPathMessage;
+include server.zone.objects.structure.PlayerStructureComponent;
 
 class StructureObject extends TangibleObject {
-	//@dereferenced
-	//protected PlayerStructureComponent playerStructureComponent;
+	protected PlayerStructureComponent playerStructureComponent;
 	
 	protected transient StructureMaintenanceTask structureMaintenanceTask;
 	//protected transient StructurePowerTask structurePowerTask;
@@ -77,7 +77,6 @@
 	protected Time powerExpires;
 	
 	protected unsigned long ownerObjectID;
-	protected unsigned long deedObjectID;
 	
 	protected int lotSize;
 	
@@ -101,8 +100,6 @@
 		
 		ownerObjectID = 0;
 		
-		deedObjectID = 0;
-		
 		destroyCode = 0;
 		
 		baseMaintenanceRate = 0;
@@ -118,12 +115,16 @@
 		width = 0;
 		
 		structureMaintenanceTask = null;
+		
+		playerStructureComponent = null;
 	}
 	
 	public native void initializeTransientMembers();
 	
 	public native void finalize();
 	
+	public native void destroyObjectFromDatabase(boolean destroyContainedObjects);
+	
 	/**
 	 * Reads and sets the template data from a SharedObjectTemplate LuaObject
 	 * @pre { templateData is a valid pointer }
@@ -236,10 +237,6 @@
 		return ownerObjectID;
 	}
 	
-	public unsigned long getDeedObjectID() {
-		return deedObjectID;
-	}
-	
 	public int getLotSize() {
 		return lotSize;
 	}
@@ -264,6 +261,14 @@
 		return surplusPower;
 	}
 	
+	/**
+	 * @return The PlayerStructureComponent or NULL if one has not been assigned to this StructureObject.
+	 */
+	@local
+	public PlayerStructureComponent getPlayerStructureComponent() {
+		return playerStructureComponent;
+	}
+	
 	public abstract boolean isPublicStructure() {
 		return false;
 	}
@@ -280,10 +285,6 @@
 		structurePermissionList.addPermission(objectID, StructurePermissionList.OWNER);
 	}
 	
-	public void setDeedObjectID(unsigned long deedID) {
-		deedObjectID = deedID;
-	}
-	
 	public void setLotSize(int lots) {
 		lotSize = lots;
 	}
Index: src/server/zone/objects/structure/StructureObjectImplementation.cpp
===================================================================
--- src/server/zone/objects/structure/StructureObjectImplementation.cpp	(revision 3024)
+++ src/server/zone/objects/structure/StructureObjectImplementation.cpp	(working copy)
@@ -26,6 +26,20 @@
 #include "server/zone/templates/appearance/MeshAppearanceTemplate.h"
 #include "server/zone/templates/appearance/PortalLayout.h"
 
+void StructureObjectImplementation::destroyObjectFromDatabase(bool destroyContainedObjects) {
+	TangibleObjectImplementation::destroyObjectFromDatabase(destroyContainedObjects);
+
+	if (!destroyContainedObjects)
+		return;
+
+	if (playerStructureComponent != NULL) {
+		ManagedReference<SceneObject*> deed = getZoneServer()->getObject(playerStructureComponent->getDeedObjectID());
+
+		if (deed != NULL)
+			deed->destroyObjectFromDatabase(true);
+	}
+}
+
 void StructureObjectImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
 	TangibleObjectImplementation::loadTemplateData(templateData);
 
Index: src/server/zone/objects/tangible/terminal/structure/StructureTerminalImplementation.cpp
===================================================================
--- src/server/zone/objects/tangible/terminal/structure/StructureTerminalImplementation.cpp	(revision 3024)
+++ src/server/zone/objects/tangible/terminal/structure/StructureTerminalImplementation.cpp	(working copy)
@@ -70,13 +70,8 @@
 	if (zone == NULL)
 		return 1;
 
-	ManagedReference<PlanetManager*> planetManager = zone->getPlanetManager();
+	ManagedReference<StructureManager*> structureManager = zone->getStructureManager();
 
-	if (planetManager == NULL)
-		return 1;
-
-	ManagedReference<StructureManager*> structureManager = planetManager->getStructureManager();
-
 	if (structureManager == NULL)
 		return 1;
 
Index: src/server/zone/templates/footprint/StructureFootprintIff.cpp
===================================================================
--- src/server/zone/templates/footprint/StructureFootprintIff.cpp	(revision 0)
+++ src/server/zone/templates/footprint/StructureFootprintIff.cpp	(revision 0)
@@ -0,0 +1,44 @@
+/*
+ * StructureFootprintIff.cpp
+ *
+ *  Created on: Apr 3, 2011
+ *      Author: crush
+ */
+
+#include "StructureFootprintIff.h"
+#include "engine/util/iffstream/IffStream.h"
+
+
+StructureFootprintIff::StructureFootprintIff() {
+
+}
+
+void StructureFootprintIff::readObject(IffStream* iffStream) {
+	iffStream->openForm('FOOT');
+
+	uint32 version = iffStream->getNextFormType();
+	iffStream->openForm(version);
+
+	switch (version) {
+	case '0000':
+		Chunk* info = iffStream->openChunk('INFO');
+		cols = info->readInt();
+		rows = info->readInt();
+
+		colCenter = info->readInt();
+		rowCenter = info->readInt();
+
+		colConversionRatio = info->readFloat();
+		rowConversionRatio = info->readFloat();
+
+		iffStream->closeChunk('INFO');
+
+		//Chunk* prnt;
+		//Create a multi dimensional array of "blocks".
+	default:
+		break;
+	}
+
+	iffStream->closeForm(version);
+	iffStream->closeForm('FOOT');
+}
Index: src/server/zone/templates/footprint/StructureFootprintIff.h
===================================================================
--- src/server/zone/templates/footprint/StructureFootprintIff.h	(revision 0)
+++ src/server/zone/templates/footprint/StructureFootprintIff.h	(revision 0)
@@ -0,0 +1,66 @@
+/*
+ * StructureFootprintIff.h
+ *
+ *  Created on: Apr 3, 2011
+ *      Author: crush
+ */
+
+#ifndef STRUCTUREFOOTPRINTIFF_H_
+#define STRUCTUREFOOTPRINTIFF_H_
+
+#include "engine/engine.h"
+#include "../IffTemplate.h"
+
+class StructureFootprintIff : public IffTemplate {
+	int rows;
+	int cols;
+
+	int rowCenter;
+	int colCenter;
+
+	float rowConversionRatio;
+	float colConversionRatio;
+
+public:
+	StructureFootprintIff() {
+		rows = 0;
+		cols = 0;
+		rowCenter = 0;
+		colCenter = 0;
+		rowConversionRatio = 0.f;
+		colConversionRatio = 0.f;
+	}
+
+	void readObject(IffStream* iffStream);
+
+	/**
+	 * @return Returns the length in game meter units of the structure footprint rectangle.
+	 */
+	inline int getLength() {
+		return floor(cols * colConversionRatio);
+	}
+
+	/**
+	 * @return Returns the width in game meter units of the structure footprint rectangle.
+	 */
+	inline int getWidth() {
+		return floor(rows * rowConversionRatio);
+	}
+
+	/**
+	 * @return Returns the number of game meter units from the top left corner of the rectangle to the center point along the x axis.
+	 */
+	inline int getCenterOffsetX() {
+		return floor(colCenter * colConversionRatio);
+	}
+
+	/**
+	 * @return Returns the number of game meter units from the top left corner of the rectangle to the center point along the y axis.
+	 */
+	inline int getCenterOffsetY() {
+		return floor(rowCenter * rowConversionRatio);
+	}
+};
+
+
+#endif /* STRUCTUREFOOTPRINTIFF_H_ */
