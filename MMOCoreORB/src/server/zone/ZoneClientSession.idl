/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone;

import engine.service.proto.BaseClientProxy;
import engine.service.proto.BasePacket;
import engine.core.ManagedObject;
import server.zone.objects.creature.CreatureObject;
import system.lang.Time;
import system.util.VectorMap;

//@nonTransactional
class ZoneClientSession extends ManagedObject {
	transient protected BaseClientProxy session;
	
	@dereferenced
	protected VectorMap<unsigned int, unsigned long> characters;
	
	@dereferenced
	protected VectorMap<unsigned int, unsigned long> bannedCharacters;
	
	@weakReference
	protected CreatureObject player;

	protected unsigned int sessionID;

	protected unsigned int accountID;
	
	boolean disconnecting;
	
	@dereferenced
	protected Time commandSpamCooldown;
	
	protected int commandCount;
	
	public native ZoneClientSession(BaseClientProxy session);
			
	public native void disconnect();
	public native void disconnect(boolean doLock);
	
	@dirty
	@local
	public native void sendMessage(BasePacket msg);

	public native void balancePacketCheckupTime();
	
	public native void resetPacketCheckupTime();
	
	public native void closeConnection(boolean lockPlayer, boolean doLock = true);

	public native void info(final string msg, boolean force = false);
	public native void debug(final string msg);
	public native void error(final string msg);

	public native string getAddress();
	
	// setters and getters
	public native void setPlayer(CreatureObject playerCreature);

	public void setSessionID(unsigned int id) {
		sessionID = id;
	}

	public void setAccountID(unsigned int acc) {
		accountID = acc;
	}
	
	public int getCommandCount() {
		return commandCount;
	}
	 
	public void increaseCommandCount() {
		commandCount = commandCount + 1;
	}
	
	public void resetCommandCount() {
		commandCount = 0;
	}
	
	@local
	public Time getCommandSpamCooldown() {
		return commandSpamCooldown;
	}

	@local
	public native BaseClientProxy getSession();
	
	@reference
	@dirty
	public native CreatureObject getPlayer();

	public unsigned int getSessionID() {
		return sessionID;
	}
	
	public unsigned int getAccountID() {
		return accountID;
	}

	public native boolean hasCharacter(unsigned long cid, unsigned int galaxyId);

	public void addCharacter(unsigned long cid, unsigned int galaxyId) {
		characters.put(galaxyId, cid);	
	}
	
	public void addBannedCharacter(unsigned long cid, unsigned int galaxyId) {
		bannedCharacters.put(galaxyId, cid);
	}
	
	public int getCharacterCount() {
		return characters.size() + bannedCharacters.size();
	}
	
	public native int getCharacterCount(int galaxyId);
	
	public void resetCharacters() {
		characters.removeAll();
		bannedCharacters.removeAll();
	}
}
