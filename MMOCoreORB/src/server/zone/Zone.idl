/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone;

import server.zone.TreeEntry;
include server.chat.room.ChatRoom;

import system.lang.Time;
import server.zone.ZoneProcessServer;
include server.zone.ZoneServer;
include server.zone.InRangeObjectsVector;
include server.zone.ActiveAreasVector;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.area.ActiveArea;
import server.zone.objects.creature.CreatureObject;
import server.zone.managers.planet.PlanetManager;
import server.zone.managers.creature.CreatureManager;
import server.zone.managers.gcw.GCWManager;
import system.util.SortedVector;
import system.util.SynchronizedSortedVector;
include server.zone.managers.object.ObjectMap;
include server.zone.managers.planet.MapLocationTable;
include engine.util.u3d.Vector3;
include server.zone.QuadTreeReference;

import server.zone.objects.tangible.TangibleObject;
import server.zone.objects.pathfinding.NavArea;
import system.thread.atomic.AtomicInteger;
include system.thread.atomic.AtomicBoolean;
include server.zone.objects.region.CityRegion;

import server.zone.ActiveAreaQuadTree;
import server.zone.ActiveAreaOctree;

@mock
class Zone extends SceneObject {
	private transient ChatRoom planetChatRoom;

	@dereferenced
	protected transient Time galacticTime;

	@transactional
	protected transient MapLocationTable mapLocations;

	@dereferenced
	protected AtomicInteger spawnedAiAgents;

	@dereferenced
	protected transient AtomicBoolean managersStarted;
	protected transient boolean zoneCleared;

	protected transient ObjectMap objectMap;

	protected transient ZoneServer server;

	protected string zoneName;

	protected unsigned int zoneCRC;

	protected transient ZoneProcessServer processor;

	// Zone Default Constructor
	public native Zone(ZoneProcessServer processor, final string zoneName);

	/*

		Zone Management

	*/

	public native abstract void createContainerComponent();

	public native abstract void initializePrivateData();

	public native abstract void initializeTransientMembers();

	public native abstract void finalize();

	public native abstract void startManagers();

	public native abstract void stopManagers();

	public native abstract void clearZone();

	/*

		Object Management in Zone

	*/

	@local
	public native abstract void insert(TreeEntry entry);

	@local
	public native abstract void remove(TreeEntry entry);

	@local
	public native abstract void update(TreeEntry entry);

	@local
	public native abstract void inRange(TreeEntry entry, float range);

	public native abstract void updateActiveAreas(TangibleObject tano);

	@arg1preLocked
	@preLocked
	public native abstract void addSceneObject(SceneObject object);

	@arg1preLocked
	@preLocked
	public native abstract void dropSceneObject(SceneObject object);

	/*

		Object Tracking

	*/

	@local
	public native abstract int getInRangeSolidObjects(float x, float z, float y, float range, SortedVector<TreeEntry> objects, boolean readLockZone);

	@local
	public native abstract int getInRangeObjects(float x, float z, float y, float range, SortedVector<TreeEntry> objects, boolean readLockZone, boolean includeBuildingObjects = true);

	@local
	public native abstract int getInRangeObjects(float x, float z, float y, float range, InRangeObjectsVector objects, boolean readLockZone, boolean includeBuildingObjects = true);

	@local
	public native abstract int getInRangePlayers(float x, float z, float y, float range, SortedVector<TreeEntry> objects);

	@local
	public native abstract int getInRangeActiveAreas(float x, float z, float y, SortedVector<ActiveArea> objects, boolean readLockZone);

	@local
	public native abstract int getInRangeActiveAreas(float x, float z, float y, ActiveAreasVector objects, boolean readLockZone);

	/*

		Quadtree

	*/

	@dirty
	public native abstract float getHeight(float x, float y);

	@dirty
	public native abstract float getHeightNoCache(float x, float y);

	@reference
	public native abstract SceneObject getNearestPlanetaryObject(SceneObject object, final string mapCategory, final string mapSubCategory);

	@local
	public native abstract int getInRangeNavMeshes(float x, float y, SortedVector<NavArea> objects, boolean readLockZone);

	@local
	@dereferenced
	public native abstract SortedVector<SceneObject> getPlanetaryObjectList(final string mapObjectLocationType);

	/**
	 * Registers the object to the planetary map. This also makes the object visible to the find command.
	 * @param object The object to register to the planetary map.
	 */
	public native abstract void registerObjectWithPlanetaryMap(SceneObject object);

	/**
	 * Unregisters the object from the planetary map.
	 * @param object The object to unregister from the planetary map.
	 */
	public native abstract void unregisterObjectWithPlanetaryMap(SceneObject object);

	public native abstract boolean objectIsValidPlanetaryMapPerformanceLocation(SceneObject object);
	public native abstract boolean isObjectRegisteredWithPlanetaryMap(SceneObject object);
	public native abstract void updatePlanetaryMapIcon(SceneObject object, byte icon);

	@dirty
	public native abstract void sendMapLocationsTo(CreatureObject player);

	/**
	 * These functions return the size of the terrain file for this zone.
	 */
	@dirty
	public native abstract float getMinX();

	@dirty
	public native abstract float getMaxX();

	@dirty
	public native abstract float getMinY();

	@dirty
	public native abstract float getMaxY();

	public native abstract void updateCityRegions();

	@dirty
	public abstract CreatureManager getCreatureManager() {
		return null;
	}

	@dirty
	public abstract PlanetManager getPlanetManager() {
		return null;
	}

	@local
	public abstract ActiveAreaQuadTree getActiveAreaTree() {
		return null;
	}

	public abstract void addCityRegionToUpdate(CityRegion city) {
	}

	/*

		Octree

	*/

	@local
	public abstract ActiveAreaOctree getActiveAreaOctree() {
		return null;
	}

	/*

		Shared Functions

	*/

	@dirty
	@local
	public native abstract boolean isWithinBoundaries(@dereferenced final Vector3 position);

	public native abstract float getBoundingRadius();

	public native abstract float getZoneObjectRange();

	// Mutators

	private void setZoneName(final string n) {
		zoneName = n;
	}

	private void setZoneCRC(unsigned int zoneCrc) {
		zoneCRC = zoneCrc;
	}

	private void setZoneProcessServer(ZoneProcessServer procServer) {
		processor = procServer;
	}

	private void setZoneServer(ZoneServer zoneServ) {
		server = zoneServ;
	}

	// Accessors
	@dirty
	public string getZoneName() {
		return zoneName;
	}

	@dirty
	public unsigned int getZoneCRC() {
		return zoneCRC;
	}

	@dirty
	public ZoneServer getZoneServer() {
		return server;
	}


	@dirty
	public abstract GCWManager getGCWManager() {
		return null;
	}

	@read
	public unsigned long getGalacticTime() {
		return galacticTime.miliDifference() / 1000;
	}

	@dirty
	public boolean hasManagersStarted() {
		return managersStarted.get();
	}

	@read
	public boolean isZoneCleared() {
		return zoneCleared;
	}

	@read
	public int getSpawnedAiAgents() {
		return spawnedAiAgents.get();
	}

	public void setPlanetChatRoom(ChatRoom room) {
		planetChatRoom = room;
	}

	public ChatRoom getPlanetChatRoom() {
		return planetChatRoom;
	}

	public abstract boolean isGroundZone() {
		return false;
	}

	public abstract boolean isSpaceZone() {
		return false;
	}
}
