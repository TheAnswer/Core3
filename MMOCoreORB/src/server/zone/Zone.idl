/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone;

import engine.util.u3d.QuadTree;
import engine.util.u3d.QuadTreeEntry;
include server.chat.room.ChatRoom;

import system.lang.Time;
import engine.core.TaskManager;
import engine.core.ManagedObject;

import server.zone.ZoneProcessServer;
include server.zone.ZoneServer;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.area.ActiveArea;
import server.zone.managers.planet.PlanetManager;
import server.zone.managers.creature.CreatureManager;
import server.zone.managers.objectcontroller.ObjectController;
import server.zone.managers.gcw.GCWManager;
import system.util.VectorMap;
import system.util.SortedVector;
import server.zone.managers.minigames.FishingManager;
import server.zone.managers.minigames.GamblingManager;
import server.zone.managers.minigames.ForageManager;
include server.zone.managers.planet.HeightMap;
include server.zone.managers.object.ObjectMap;
include server.zone.managers.planet.MapLocationTable;
include engine.util.u3d.Vector3;
include server.zone.QuadTreeReference;

import system.lang.System;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.region.CityRegion;

class Zone extends SceneObject {
	private string zoneName;
	
	private unsigned int zoneCRC;
	
	private transient ZoneProcessServer processor;

	private transient ObjectMap objectMap;

	private transient PlanetManager planetManager;
	
	private transient CreatureManager creatureManager;
	
	private transient GCWManager gcwManager;
	
	private ChatRoom chatRoom;

	@dereferenced
	private transient SortedVector<CityRegion> cityRegionUpdateVector;
	
	private transient ZoneServer server;
	
	@dereferenced
	private QuadTreeReference regionTree;

	@dereferenced
	private QuadTreeReference quadTree;

	@dereferenced
	private transient Time galacticTime;
	
	private transient HeightMap heightMap;
	
	@transactional
	private transient MapLocationTable mapLocations;
	
	private transient boolean managersStarted;
	
	public native Zone(ZoneProcessServer processor, final string zoneName);
	public native void initializeTransientMembers();
	public native void finalize();

	public native SceneObject getNearestPlanetaryObject(SceneObject object, final string mapObjectLocationType);
	
	public native void initializePrivateData();
	
	@local
	public QuadTree getRegionTree() {
		return regionTree.get();
	}
	
	@local
	public native int getInRangeObjects(float x, float y, float range, SortedVector<QuadTreeEntry> objects, boolean readLockZone);
	
	public native void createContainerComponent();
	
	@local
	public native int getInRangeActiveAreas(float x, float y, SortedVector<ActiveArea> objects, boolean readLockZone);
	
	@local
	@dereferenced
	public native SortedVector<SceneObject> getPlanetaryObjectList(final string mapObjectLocationType);
	
	@local
	public native void insert(QuadTreeEntry entry);
	
	@local
	public native void remove(QuadTreeEntry entry);
	
	@local
	public native void update(QuadTreeEntry entry);

	@local
	public native void inRange(QuadTreeEntry entry, float range);
	
	public native void updateActiveAreas(SceneObject object);

	public native void startManagers();

	public native void stopManagers();
	
	@dirty
	public native float getHeight(float x, float y);

	public native void addSceneObject(SceneObject object);
	
	public synchronized void addCityRegionToUpdate(CityRegion city) {
		cityRegionUpdateVector.put(city);
	}
	
	public native void updateCityRegions();
	
	public native void sendMapLocationsTo(SceneObject player);
	
	public native void dropSceneObject(SceneObject object);
	
	@dirty
	public PlanetManager getPlanetManager() {
		return planetManager;
	}

	@dirty
	public ZoneServer getZoneServer() {
		return server;
	}
	
	@dirty
	public CreatureManager getCreatureManager() {
		return creatureManager;
	}
	
	public unsigned long getGalacticTime() {
		return galacticTime.miliDifference() / 1000;
	}

	public boolean hasManagersStarted() {
		return managersStarted;
	}
	
	/**
	 * These functions return the size of the terrain file for this zone.
	 */
	@dirty
	public native float getMinX();
	
	@dirty
	public native float getMaxX();
	
	@dirty
	public native float getMinY();
	
	@dirty
	public native float getMaxY();
	
	@dirty
	@local
	public native boolean isWithinBoundaries(@dereferenced final Vector3 position);
	
	public native float getBoundingRadius();
	
	/**
	 * Registers the object to the planetary map. This also makes the object visible to the find command.
	 * @param object The object to register to the planetary map.
	 */
	public native void registerObjectWithPlanetaryMap(SceneObject object);
	/**
	 * Unregisters the object from the planetary map.
	 * @param object The object to unregister from the planetary map.
	 */
	public native void unregisterObjectWithPlanetaryMap(SceneObject object);
	
	@dirty
	public string getZoneName() {
		return zoneName;
	}
	
	@dirty
	public unsigned int getZoneCRC() {
		return zoneCRC;
	}
	
	public native GCWManager getGCWManager(){
		return gcwManager;
	}
	
	public void setChatRoom(ChatRoom room) {
		chatRoom = room;
	}

	public ChatRoom getChatRoom() {
		return chatRoom;
	}	
}
