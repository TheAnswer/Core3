/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.managers.creature;

import engine.core.ManagedService;
import server.zone.objects.creature.AiAgent;
import server.zone.objects.intangible.PetControlDevice;
import server.zone.ZoneServer;
import server.zone.objects.creature.CreatureObject;
include server.zone.managers.creature.ValidMountScaleRange;

class PetManager extends ManagedService implements Logger {
	private transient ZoneServer zoneServer;

	@dereferenced
	protected Vector<Reference<ValidMountScaleRange> > validMountScaleRanges;

	// Pet Types
	public static final int FACTIONPET = 0;
	public static final int CREATUREPET = 1;
	public static final int DROIDPET = 2;

	// Mount Training States
	public static final short INVALIDCREATURE = 0x00;
	public static final short TOOSMALL = 0x01;
	public static final short TOOLARGE = 0x02;
	public static final short CANBEMOUNTTRAINED = 0x03;

	// Command IDs
	public static final unsigned int FOLLOW = 1;
	public static final unsigned int STORE = 2;
	public static final unsigned int ATTACK = 3;
	public static final unsigned int GUARD = 4;
	public static final unsigned int FRIEND = 5;
	public static final unsigned int FOLLOWOTHER = 6;
	public static final unsigned int TRICK1 = 7;
	public static final unsigned int TRICK2 = 8;
	public static final unsigned int PATROL = 9;
	public static final unsigned int FORMATION1 = 10;
	public static final unsigned int FORMATION2 = 11;	
	public static final unsigned int SPECIAL_ATTACK1 = 12;
	public static final unsigned int SPECIAL_ATTACK2 = 13;
	public static final unsigned int RANGED_ATTACK = 14;
	public static final unsigned int GROUP = 15;
	public static final unsigned int STAY = 16;
	public static final unsigned int RECHARGEOTHER = 17;
	public static final unsigned int TRANSFER = 18;

	public PetManager(ZoneServer server) {
		zoneServer = server;

		Logger.setLoggingName("PetManager");
	}

	public void initialize() {
		loadValidMountScaleRanges();
	}

	public native void loadValidMountScaleRanges();

	public native short isValidMountScale(final string appearanceFilename, int saddleCapacity, float scale);

	public native short checkMountEligibility(PetControlDevice petControlDevice, float height = -1);

	/**
	 * Handles chat messages to the pet
	 * @pre { }
	 * @post { }
	 * @param object player creature speaking
	 * @param object pet receiving chat
	 * @param string chat message
	 */
	@local
	public native void handleChat(CreatureObject speaker, AiAgent pet, final string message);

	/**
	 * Handles command training
	 * @pre { }
	 * @post { }
	 * @param object player creature speaking
	 * @param object pet being trained
	 * @param string chat message
	 * @return returns true if chat came from pet's owner
	 */
	@local
	protected native boolean handleCommandTraining(CreatureObject speaker, AiAgent pet, final string message);

	/**
	 * Enqueues a pet command
	 * @pre { }
	 * @post { }
	 * @param object player creature commanding
	 * @param unsigned long command CRC
	 * @param const string arguments
	 * @param boolean if true, uses player as target, if false uses player's target
	 */
	@local
	public native void enqueuePetCommand(CreatureObject player, AiAgent pet, unsigned int command, final string args, boolean selfTarget = false);

	/**
	 * Enqueues a pet command, player must be the pet's owner
	 * @pre { }
	 * @post { }
	 * @param object player creature commanding
	 * @param unsigned long command CRC
	 * @param const string arguments
	 */
	@local
	public native void enqueueOwnerOnlyPetCommand(CreatureObject player, AiAgent pet, unsigned int command, final string args);
}
