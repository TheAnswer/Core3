/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.
*/

package server.zone.managers.creature;

import engine.core.ManagedObject;
import engine.util.Observable;
import server.zone.managers.creature.SpawnObserver;
import server.zone.objects.tangible.TangibleObject;
import server.zone.managers.creature.HealLairObserverEvent;
include system.thread.atomic.AtomicInteger;

class LairObserver extends SpawnObserver {

	@dereferenced
	protected AtomicInteger spawnNumber;

	@dereferenced
	protected AtomicInteger respawnNumber;

	protected boolean repopulated;

	protected boolean repopulateStatus;

	protected transient HealLairObserverEvent healLairEvent;

	public LairObserver() {
		super();

		Logger.setLoggingName("LairObserver");

		healLairEvent = null;
		spawnNumber.set(0);
		respawnNumber.set(0);
		repopulated = false;
		repopulateStatus = false;
	}

	public native int notifyObserverEvent(unsigned int eventType, Observable observable, ManagedObject arg1, long arg2);

	public native void notifyDestruction(TangibleObject lair, TangibleObject attacker, int condition);

	@arg1preLocked
	public abstract native boolean checkForNewSpawns(TangibleObject lair, TangibleObject attacker, boolean forceSpawn = false);
	public native void healLair(TangibleObject lair, TangibleObject attacker);
	public abstract native void checkForHeal(TangibleObject lair, TangibleObject attacker, boolean forceNewUpdate = false);
	public native void doAggro(TangibleObject lair, TangibleObject attacker, boolean allAttack = false);

	private native void incrementSpawn(boolean respawn = false);
	public native void repopulateLair(TangibleObject lair);

	public boolean isLairObserver() {
		return true;
	}

	public native int getLivingCreatureCount();

	public int getMobType() {
		return super.lairTemplate.getMobType();
	}

	public int getSpawnNumber() {
		return spawnNumber.get();
	}

	public int getRespawnNumber() {
		return respawnNumber.get();
	}

	public void setRepopulated(boolean val) {
		repopulated = val;
	}

	public boolean isRepopulated() {
		return repopulated;
	}

	public void setRepopulateStatus(boolean val) {
		repopulateStatus = val;
	}

	public boolean isRepopulateStatus() {
		return repopulateStatus;
	}
}
