/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.
*/

package server.zone.managers.creature;

import engine.core.ManagedObject;
import engine.util.Observable;
import server.zone.managers.creature.SpawnObserver;
import server.zone.objects.tangible.TangibleObject;
import server.zone.managers.creature.HealLairObserverEvent;
include system.thread.atomic.AtomicInteger;

class LairObserver extends SpawnObserver {
	public static final int BABY_SPAWN_CHANCE = 500;

	public static final int SPAWN_TIME_MIN = 1; // In seconds
	public static final int SPAWN_TIME_MAX = 6; // In seconds

	@dereferenced
	protected AtomicInteger spawnNumber;

	protected transient HealLairObserverEvent healLairEvent;

	public LairObserver() {
		super();

		Logger.setLoggingName("LairObserver");

		healLairEvent = null;
		spawnNumber.set(0);
	}

	public native int notifyObserverEvent(unsigned int eventType, Observable observable, ManagedObject arg1, long arg2);

	public native void notifyDestruction(TangibleObject lair, TangibleObject attacker, int condition);

	@arg1preLocked
	public abstract native boolean checkForNewSpawns(TangibleObject lair, TangibleObject attacker, boolean forceSpawn = false);

	@arg1preLocked
	public native void spawnLairMobile(TangibleObject lair, int spawnNumber, final string templateToSpawn);

	public native void healLair(TangibleObject lair, TangibleObject attacker);
	public abstract native void checkForHeal(TangibleObject lair, TangibleObject attacker, boolean forceNewUpdate = false);
	public native void doAggro(TangibleObject lair, TangibleObject attacker, boolean allAttack = false);
	public native void repopulateLair(TangibleObject lair);

	public boolean isLairObserver() {
		return true;
	}

	public native int getLivingCreatureCount();

	public int getMobType() {
		return super.lairTemplate.getMobType();
	}

	public int getSpawnNumber() {
		return spawnNumber.get();
	}
}
