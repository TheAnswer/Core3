/*
 *	server/zone/managers/creature/LairObserver.h generated by engine3 IDL compiler 0.60
 */

#ifndef LAIROBSERVER_H_
#define LAIROBSERVER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class HealLairObserverEvent;

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

#include "server/zone/templates/mobile/LairTemplate.h"

#include "engine/core/ManagedObject.h"

#include "engine/util/Observer.h"

#include "engine/util/Observable.h"

namespace server {
namespace zone {
namespace managers {
namespace creature {

class LairObserver : public Observer {
public:
	LairObserver();

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void notifyDestruction(TangibleObject* lair, TangibleObject* attacker, int condition);

	bool checkForNewSpawns(TangibleObject* lair, bool forceSpawn = false);

	void healLair(TangibleObject* lair, TangibleObject* attacker);

	void checkForHeal(TangibleObject* lair, TangibleObject* attacker, bool forceNewUpdate = false);

	void doAggro(TangibleObject* lair, TangibleObject* attacker);

	void setLairTemplate(LairTemplate* tmpl);

	void setDifficulty(int diff);

	bool isLairObserver();

	int getLivingCreatureCount();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	LairObserver(DummyConstructorParameter* param);

	virtual ~LairObserver();

	friend class LairObserverHelper;
};

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

namespace server {
namespace zone {
namespace managers {
namespace creature {

class LairObserverImplementation : public ObserverImplementation, public Logger {
protected:
	Reference<LairTemplate* > lairTemplate;

	Vector<ManagedReference<CreatureObject* > > spawnedCreatures;

	int spawnNumber;

	Reference<HealLairObserverEvent* > healLairEvent;

	int difficulty;

public:
	LairObserverImplementation();

	LairObserverImplementation(DummyConstructorParameter* param);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void notifyDestruction(TangibleObject* lair, TangibleObject* attacker, int condition);

	bool checkForNewSpawns(TangibleObject* lair, bool forceSpawn = false);

	void healLair(TangibleObject* lair, TangibleObject* attacker);

	void checkForHeal(TangibleObject* lair, TangibleObject* attacker, bool forceNewUpdate = false);

	void doAggro(TangibleObject* lair, TangibleObject* attacker);

	void setLairTemplate(LairTemplate* tmpl);

	void setDifficulty(int diff);

	bool isLairObserver();

	int getLivingCreatureCount();

	WeakReference<LairObserver*> _this;

	operator const LairObserver*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~LairObserverImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class LairObserver;
};

class LairObserverAdapter : public ObserverAdapter {
public:
	LairObserverAdapter(LairObserver* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void notifyDestruction(TangibleObject* lair, TangibleObject* attacker, int condition);

	bool checkForNewSpawns(TangibleObject* lair, bool forceSpawn);

	void healLair(TangibleObject* lair, TangibleObject* attacker);

	void checkForHeal(TangibleObject* lair, TangibleObject* attacker, bool forceNewUpdate);

	void doAggro(TangibleObject* lair, TangibleObject* attacker);

	void setDifficulty(int diff);

	bool isLairObserver();

	int getLivingCreatureCount();

};

class LairObserverHelper : public DistributedObjectClassHelper, public Singleton<LairObserverHelper> {
	static LairObserverHelper* staticInitializer;

public:
	LairObserverHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<LairObserverHelper>;
};

} // namespace creature
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::creature;

#endif /*LAIROBSERVER_H_*/
