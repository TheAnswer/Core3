/*
 *	server/zone/managers/guild/GuildManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "GuildManager.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/ZoneServer.h"

#include "server/chat/ChatManager.h"

#include "server/chat/room/ChatRoom.h"

#include "server/zone/objects/guild/GuildObject.h"

#include "server/zone/objects/tangible/terminal/guild/GuildTerminal.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	GuildManagerStub
 */

enum {RPC_SETCHATMANAGER__CHATMANAGER_ = 6,RPC_SENDGUILDLISTTO__CREATUREOBJECT_STRING_,RPC_ADDPENDINGGUILD__LONG_STRING_,RPC_REMOVEPENDINGGUILD__LONG_,RPC_GETPENDINGGUILDNAME__LONG_,RPC_ADDSPONSOREDPLAYER__LONG_GUILDOBJECT_,RPC_REMOVESPONSOREDPLAYER__LONG_,RPC_ISCREATINGGUILD__LONG_,RPC_ISSPONSOREDPLAYER__LONG_,RPC_GETSPONSOREDGUILD__LONG_,RPC_SENDBASELINESTO__CREATUREOBJECT_,RPC_LOADGUILDS__,RPC_SENDGUILDCREATENAMETO__CREATUREOBJECT_GUILDTERMINAL_,RPC_SENDGUILDCREATEABBREVTO__CREATUREOBJECT_GUILDTERMINAL_,RPC_SENDGUILDINFORMATIONTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_,RPC_SENDGUILDMEMBERLISTTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_,RPC_SENDGUILDMEMBEROPTIONSTO__CREATUREOBJECT_GUILDOBJECT_LONG_GUILDTERMINAL_,RPC_SENDGUILDDISBANDCONFIRMTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_,RPC_SENDGUILDSPONSOREDLISTTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_,RPC_SENDGUILDSPONSOREDOPTIONSTO__CREATUREOBJECT_GUILDOBJECT_LONG_GUILDTERMINAL_,RPC_SENDGUILDSPONSORTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_,RPC_SENDGUILDSPONSORVERIFYTO__CREATUREOBJECT_CREATUREOBJECT_,RPC_SENDGUILDKICKPROMPTTO__CREATUREOBJECT_CREATUREOBJECT_,RPC_SENDGUILDSETTITLETO__CREATUREOBJECT_CREATUREOBJECT_,RPC_SENDGUILDWARSTATUSTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_,RPC_PROMPTADDNEWENEMY__CREATUREOBJECT_GUILDOBJECT_SCENEOBJECT_,RPC_TOGGLEWARSTATUS__CREATUREOBJECT_GUILDOBJECT_LONG_,RPC_DECLAREWARBYNAME__CREATUREOBJECT_GUILDOBJECT_STRING_,RPC_UPDATEWARSTATUSTOWARINGGUILD__GUILDOBJECT_GUILDOBJECT_,RPC_SENDMEMBERPERMISSIONSTO__CREATUREOBJECT_LONG_GUILDTERMINAL_,RPC_VALIDATEGUILDNAME__CREATUREOBJECT_STRING_,RPC_VALIDATEGUILDABBREV__CREATUREOBJECT_STRING_,RPC_GUILDNAMEEXISTS__STRING_,RPC_GUILDABBREVEXISTS__STRING_,RPC_CREATEGUILD__CREATUREOBJECT_GUILDTERMINAL_STRING_STRING_,RPC_DISBANDGUILD__CREATUREOBJECT_GUILDOBJECT_,RPC_SPONSORPLAYER__CREATUREOBJECT_GUILDTERMINAL_STRING_,RPC_ACCEPTSPONSORSHIPREQUEST__CREATUREOBJECT_CREATUREOBJECT_,RPC_ACCEPTSPONSOREDPLAYER__CREATUREOBJECT_LONG_,RPC_KICKMEMBER__CREATUREOBJECT_CREATUREOBJECT_,RPC_LEAVEGUILD__CREATUREOBJECT_GUILDOBJECT_,RPC_SETMEMBERTITLE__CREATUREOBJECT_CREATUREOBJECT_STRING_,RPC_SETALLEGIANCETO__CREATUREOBJECT_LONG_GUILDTERMINAL_,RPC_TOGGLEGUILDPERMISSION__CREATUREOBJECT_LONG_INT_GUILDTERMINAL_,RPC_CREATEGUILDCHANNELS__GUILDOBJECT_,RPC_SENDGUILDTRANSFERTO__CREATUREOBJECT_GUILDTERMINAL_,RPC_SENDTRANSFERACKTO__CREATUREOBJECT_STRING_SCENEOBJECT_,RPC_TRANSFERLEADERSHIP__CREATUREOBJECT_CREATUREOBJECT_SCENEOBJECT_,RPC_SENDACCEPTLOTSTO__CREATUREOBJECT_GUILDTERMINAL_,RPC_TRANSFERGUILDHALL__CREATUREOBJECT_SCENEOBJECT_,RPC_GETGUILDFROMABBREV__STRING_};

GuildManager::GuildManager(ZoneServer* serv, ZoneProcessServer* proc) : ManagedService(DummyConstructorParameter::instance()) {
	GuildManagerImplementation* _implementation = new GuildManagerImplementation(serv, proc);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("GuildManager");
}

GuildManager::GuildManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("GuildManager");
}

GuildManager::~GuildManager() {
}



void GuildManager::setChatManager(ChatManager* chatmanager) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCHATMANAGER__CHATMANAGER_);
		method.addObjectParameter(chatmanager);

		method.executeWithVoidReturn();
	} else
		_implementation->setChatManager(chatmanager);
}

void GuildManager::sendGuildListTo(CreatureObject* player, const String& guildFilter) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDLISTTO__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(guildFilter);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildListTo(player, guildFilter);
}

void GuildManager::addPendingGuild(unsigned long long playerID, const String& guildName) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPENDINGGUILD__LONG_STRING_);
		method.addUnsignedLongParameter(playerID);
		method.addAsciiParameter(guildName);

		method.executeWithVoidReturn();
	} else
		_implementation->addPendingGuild(playerID, guildName);
}

void GuildManager::removePendingGuild(unsigned long long playerID) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPENDINGGUILD__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removePendingGuild(playerID);
}

String GuildManager::getPendingGuildName(unsigned long long playerID) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPENDINGGUILDNAME__LONG_);
		method.addUnsignedLongParameter(playerID);

		String _return_getPendingGuildName;
		method.executeWithAsciiReturn(_return_getPendingGuildName);
		return _return_getPendingGuildName;
	} else
		return _implementation->getPendingGuildName(playerID);
}

void GuildManager::addSponsoredPlayer(unsigned long long playerID, GuildObject* guild) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSPONSOREDPLAYER__LONG_GUILDOBJECT_);
		method.addUnsignedLongParameter(playerID);
		method.addObjectParameter(guild);

		method.executeWithVoidReturn();
	} else
		_implementation->addSponsoredPlayer(playerID, guild);
}

void GuildManager::removeSponsoredPlayer(unsigned long long playerID) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESPONSOREDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSponsoredPlayer(playerID);
}

bool GuildManager::isCreatingGuild(unsigned long long playerID) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCREATINGGUILD__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCreatingGuild(playerID);
}

bool GuildManager::isSponsoredPlayer(unsigned long long playerID) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSPONSOREDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSponsoredPlayer(playerID);
}

GuildObject* GuildManager::getSponsoredGuild(unsigned long long playerID) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPONSOREDGUILD__LONG_);
		method.addUnsignedLongParameter(playerID);

		return static_cast<GuildObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getSponsoredGuild(playerID);
}

void GuildManager::sendBaselinesTo(CreatureObject* player) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void GuildManager::loadGuilds() {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADGUILDS__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadGuilds();
}

void GuildManager::sendGuildCreateNameTo(CreatureObject* player, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDCREATENAMETO__CREATUREOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildCreateNameTo(player, guildTerminal);
}

void GuildManager::sendGuildCreateAbbrevTo(CreatureObject* player, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDCREATEABBREVTO__CREATUREOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildCreateAbbrevTo(player, guildTerminal);
}

void GuildManager::sendGuildInformationTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDINFORMATIONTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildInformationTo(player, guild, guildTerminal);
}

void GuildManager::sendGuildMemberListTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDMEMBERLISTTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildMemberListTo(player, guild, guildTerminal);
}

void GuildManager::sendGuildMemberOptionsTo(CreatureObject* player, GuildObject* guild, unsigned long long memberID, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDMEMBEROPTIONSTO__CREATUREOBJECT_GUILDOBJECT_LONG_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addUnsignedLongParameter(memberID);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildMemberOptionsTo(player, guild, memberID, guildTerminal);
}

void GuildManager::sendGuildDisbandConfirmTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDDISBANDCONFIRMTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildDisbandConfirmTo(player, guild, guildTerminal);
}

void GuildManager::sendGuildSponsoredListTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDSPONSOREDLISTTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildSponsoredListTo(player, guild, guildTerminal);
}

void GuildManager::sendGuildSponsoredOptionsTo(CreatureObject* player, GuildObject* guild, unsigned long long playerID, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDSPONSOREDOPTIONSTO__CREATUREOBJECT_GUILDOBJECT_LONG_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addUnsignedLongParameter(playerID);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildSponsoredOptionsTo(player, guild, playerID, guildTerminal);
}

void GuildManager::sendGuildSponsorTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDSPONSORTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildSponsorTo(player, guild, guildTerminal);
}

void GuildManager::sendGuildSponsorVerifyTo(CreatureObject* player, CreatureObject* target) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDSPONSORVERIFYTO__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildSponsorVerifyTo(player, target);
}

void GuildManager::sendGuildKickPromptTo(CreatureObject* player, CreatureObject* target) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDKICKPROMPTTO__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildKickPromptTo(player, target);
}

void GuildManager::sendGuildSetTitleTo(CreatureObject* player, CreatureObject* target) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDSETTITLETO__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildSetTitleTo(player, target);
}

void GuildManager::sendGuildWarStatusTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDWARSTATUSTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildWarStatusTo(player, guild, guildTerminal);
}

void GuildManager::promptAddNewEnemy(CreatureObject* player, GuildObject* guild, SceneObject* terminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_PROMPTADDNEWENEMY__CREATUREOBJECT_GUILDOBJECT_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addObjectParameter(terminal);

		method.executeWithVoidReturn();
	} else
		_implementation->promptAddNewEnemy(player, guild, terminal);
}

void GuildManager::toggleWarStatus(CreatureObject* player, GuildObject* guild, unsigned long long guildoid) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TOGGLEWARSTATUS__CREATUREOBJECT_GUILDOBJECT_LONG_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addUnsignedLongParameter(guildoid);

		method.executeWithVoidReturn();
	} else
		_implementation->toggleWarStatus(player, guild, guildoid);
}

void GuildManager::declareWarByName(CreatureObject* player, GuildObject* guild, const String& search) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECLAREWARBYNAME__CREATUREOBJECT_GUILDOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);
		method.addAsciiParameter(search);

		method.executeWithVoidReturn();
	} else
		_implementation->declareWarByName(player, guild, search);
}

void GuildManager::updateWarStatusToWaringGuild(GuildObject* guild, GuildObject* waringGuild) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEWARSTATUSTOWARINGGUILD__GUILDOBJECT_GUILDOBJECT_);
		method.addObjectParameter(guild);
		method.addObjectParameter(waringGuild);

		method.executeWithVoidReturn();
	} else
		_implementation->updateWarStatusToWaringGuild(guild, waringGuild);
}

void GuildManager::sendMemberPermissionsTo(CreatureObject* player, unsigned long long targetID, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMEMBERPERMISSIONSTO__CREATUREOBJECT_LONG_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(targetID);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendMemberPermissionsTo(player, targetID, guildTerminal);
}

bool GuildManager::validateGuildName(CreatureObject* player, const String& guildName) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATEGUILDNAME__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(guildName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->validateGuildName(player, guildName);
}

bool GuildManager::validateGuildAbbrev(CreatureObject* player, const String& guildAbbrev) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATEGUILDABBREV__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(guildAbbrev);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->validateGuildAbbrev(player, guildAbbrev);
}

bool GuildManager::guildNameExists(const String& guildName) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GUILDNAMEEXISTS__STRING_);
		method.addAsciiParameter(guildName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->guildNameExists(guildName);
}

bool GuildManager::guildAbbrevExists(const String& guildAbbrev) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GUILDABBREVEXISTS__STRING_);
		method.addAsciiParameter(guildAbbrev);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->guildAbbrevExists(guildAbbrev);
}

GuildObject* GuildManager::createGuild(CreatureObject* player, GuildTerminal* guildTerminal, const String& guildName, const String& guildAbbrev) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEGUILD__CREATUREOBJECT_GUILDTERMINAL_STRING_STRING_);
		method.addObjectParameter(player);
		method.addObjectParameter(guildTerminal);
		method.addAsciiParameter(guildName);
		method.addAsciiParameter(guildAbbrev);

		return static_cast<GuildObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->createGuild(player, guildTerminal, guildName, guildAbbrev);
}

bool GuildManager::disbandGuild(CreatureObject* player, GuildObject* guild) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DISBANDGUILD__CREATUREOBJECT_GUILDOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->disbandGuild(player, guild);
}

void GuildManager::sponsorPlayer(CreatureObject* player, GuildTerminal* guildTerminal, const String& playerName) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SPONSORPLAYER__CREATUREOBJECT_GUILDTERMINAL_STRING_);
		method.addObjectParameter(player);
		method.addObjectParameter(guildTerminal);
		method.addAsciiParameter(playerName);

		method.executeWithVoidReturn();
	} else
		_implementation->sponsorPlayer(player, guildTerminal, playerName);
}

void GuildManager::acceptSponsorshipRequest(CreatureObject* player, CreatureObject* target) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACCEPTSPONSORSHIPREQUEST__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->acceptSponsorshipRequest(player, target);
}

void GuildManager::acceptSponsoredPlayer(CreatureObject* player, unsigned long long targetID) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACCEPTSPONSOREDPLAYER__CREATUREOBJECT_LONG_);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(targetID);

		method.executeWithVoidReturn();
	} else
		_implementation->acceptSponsoredPlayer(player, targetID);
}

void GuildManager::kickMember(CreatureObject* player, CreatureObject* target) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_KICKMEMBER__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(target);

		method.executeWithVoidReturn();
	} else
		_implementation->kickMember(player, target);
}

void GuildManager::leaveGuild(CreatureObject* player, GuildObject* guild) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LEAVEGUILD__CREATUREOBJECT_GUILDOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(guild);

		method.executeWithVoidReturn();
	} else
		_implementation->leaveGuild(player, guild);
}

void GuildManager::setMemberTitle(CreatureObject* player, CreatureObject* target, const String& title) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMEMBERTITLE__CREATUREOBJECT_CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addObjectParameter(target);
		method.addAsciiParameter(title);

		method.executeWithVoidReturn();
	} else
		_implementation->setMemberTitle(player, target, title);
}

void GuildManager::setAllegianceTo(CreatureObject* player, unsigned long long targetID, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETALLEGIANCETO__CREATUREOBJECT_LONG_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(targetID);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->setAllegianceTo(player, targetID, guildTerminal);
}

void GuildManager::toggleGuildPermission(CreatureObject* player, unsigned long long targetID, int permissionIndex, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TOGGLEGUILDPERMISSION__CREATUREOBJECT_LONG_INT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addUnsignedLongParameter(targetID);
		method.addSignedIntParameter(permissionIndex);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->toggleGuildPermission(player, targetID, permissionIndex, guildTerminal);
}

ChatRoom* GuildManager::createGuildChannels(GuildObject* guild) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEGUILDCHANNELS__GUILDOBJECT_);
		method.addObjectParameter(guild);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->createGuildChannels(guild);
}

void GuildManager::sendGuildTransferTo(CreatureObject* player, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDGUILDTRANSFERTO__CREATUREOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(player);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendGuildTransferTo(player, guildTerminal);
}

void GuildManager::sendTransferAckTo(CreatureObject* player, const String& newOwnerName, SceneObject* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDTRANSFERACKTO__CREATUREOBJECT_STRING_SCENEOBJECT_);
		method.addObjectParameter(player);
		method.addAsciiParameter(newOwnerName);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendTransferAckTo(player, newOwnerName, guildTerminal);
}

void GuildManager::transferLeadership(CreatureObject* newOwner, CreatureObject* oldOwner, SceneObject* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TRANSFERLEADERSHIP__CREATUREOBJECT_CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(newOwner);
		method.addObjectParameter(oldOwner);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->transferLeadership(newOwner, oldOwner, guildTerminal);
}

void GuildManager::sendAcceptLotsTo(CreatureObject* newOwner, GuildTerminal* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDACCEPTLOTSTO__CREATUREOBJECT_GUILDTERMINAL_);
		method.addObjectParameter(newOwner);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->sendAcceptLotsTo(newOwner, guildTerminal);
}

void GuildManager::transferGuildHall(CreatureObject* newOwner, SceneObject* guildTerminal) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TRANSFERGUILDHALL__CREATUREOBJECT_SCENEOBJECT_);
		method.addObjectParameter(newOwner);
		method.addObjectParameter(guildTerminal);

		method.executeWithVoidReturn();
	} else
		_implementation->transferGuildHall(newOwner, guildTerminal);
}

void GuildManager::sendGuildMail(const String& subject, StringIdChatParameter& body, GuildObject* guild) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->sendGuildMail(subject, body, guild);
}

GuildObject* GuildManager::getGuildFromAbbrev(const String& guildAbbrev) {
	GuildManagerImplementation* _implementation = static_cast<GuildManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDFROMABBREV__STRING_);
		method.addAsciiParameter(guildAbbrev);

		return static_cast<GuildObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getGuildFromAbbrev(guildAbbrev);
}

DistributedObjectServant* GuildManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* GuildManager::_getImplementationForRead() {
	return _impl;
}

void GuildManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GuildManagerImplementation
 */

GuildManagerImplementation::GuildManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


GuildManagerImplementation::~GuildManagerImplementation() {
}


void GuildManagerImplementation::finalize() {
}

void GuildManagerImplementation::_initializeImplementation() {
	_setClassHelper(GuildManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void GuildManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<GuildManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* GuildManagerImplementation::_getStub() {
	return _this.get();
}

GuildManagerImplementation::operator const GuildManager*() {
	return _this.get();
}

void GuildManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void GuildManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void GuildManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void GuildManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void GuildManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void GuildManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void GuildManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void GuildManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("GuildManager");

}

void GuildManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(GuildManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GuildManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xdec1a904: //GuildManager.guildList
		TypeInfo<DeltaSet<String, ManagedReference<GuildObject* > > >::parseFromBinaryStream(&guildList, stream);
		return true;

	case 0xe380d077: //GuildManager.requiredMembers
		TypeInfo<int >::parseFromBinaryStream(&requiredMembers, stream);
		return true;

	case 0x1c0d34c5: //GuildManager.maximumMembers
		TypeInfo<int >::parseFromBinaryStream(&maximumMembers, stream);
		return true;

	case 0x8097075f: //GuildManager.guildUpdateInterval
		TypeInfo<int >::parseFromBinaryStream(&guildUpdateInterval, stream);
		return true;

	}

	return false;
}

void GuildManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GuildManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GuildManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xdec1a904; //GuildManager.guildList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<DeltaSet<String, ManagedReference<GuildObject* > > >::toBinaryStream(&guildList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe380d077; //GuildManager.requiredMembers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&requiredMembers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1c0d34c5; //GuildManager.maximumMembers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maximumMembers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8097075f; //GuildManager.guildUpdateInterval
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&guildUpdateInterval, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 4;
}

GuildManagerImplementation::GuildManagerImplementation(ZoneServer* serv, ZoneProcessServer* proc) {
	_initializeImplementation();
	// server/zone/managers/guild/GuildManager.idl():  		Logger.setLoggingName("GuildManager");
	Logger::setLoggingName("GuildManager");
	// server/zone/managers/guild/GuildManager.idl():  		Logger.setLogging(true);
	Logger::setLogging(true);
	// server/zone/managers/guild/GuildManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/guild/GuildManager.idl():  		pendingGuilds.setNoDuplicateInsertPlan();
	(&pendingGuilds)->setNoDuplicateInsertPlan();
	// server/zone/managers/guild/GuildManager.idl():  		sponsoredPlayers.setNoDuplicateInsertPlan();
	(&sponsoredPlayers)->setNoDuplicateInsertPlan();
	// server/zone/managers/guild/GuildManager.idl():  		sponsoredPlayers.setNullValue(null);
	(&sponsoredPlayers)->setNullValue(NULL);
	// server/zone/managers/guild/GuildManager.idl():  		server = serv;
	server = serv;
	// server/zone/managers/guild/GuildManager.idl():  		processor = proc;
	processor = proc;
	// server/zone/managers/guild/GuildManager.idl():  		requiredMembers = 5;
	requiredMembers = 5;
	// server/zone/managers/guild/GuildManager.idl():  		maximumMembers = 500;
	maximumMembers = 500;
	// server/zone/managers/guild/GuildManager.idl():  		guildUpdateInterval = 1440;
	guildUpdateInterval = 1440;
}

void GuildManagerImplementation::setChatManager(ChatManager* chatmanager) {
	// server/zone/managers/guild/GuildManager.idl():  		chatManager = chatmanager;
	chatManager = chatmanager;
}

void GuildManagerImplementation::addPendingGuild(unsigned long long playerID, const String& guildName) {
	Locker _locker(_this.get());
	// server/zone/managers/guild/GuildManager.idl():  		pendingGuilds.put(playerID, guildName);
	(&pendingGuilds)->put(playerID, guildName);
}

void GuildManagerImplementation::removePendingGuild(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/managers/guild/GuildManager.idl():  		pendingGuilds.drop(playerID);
	(&pendingGuilds)->drop(playerID);
}

String GuildManagerImplementation::getPendingGuildName(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/managers/guild/GuildManager.idl():  		return pendingGuilds.get(playerID);
	return (&pendingGuilds)->get(playerID);
}

void GuildManagerImplementation::addSponsoredPlayer(unsigned long long playerID, GuildObject* guild) {
	Locker _locker(_this.get());
	// server/zone/managers/guild/GuildManager.idl():  		sponsoredPlayers.put(playerID, guild);
	(&sponsoredPlayers)->put(playerID, guild);
}

void GuildManagerImplementation::removeSponsoredPlayer(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/managers/guild/GuildManager.idl():  		sponsoredPlayers.drop(playerID);
	(&sponsoredPlayers)->drop(playerID);
}

bool GuildManagerImplementation::isCreatingGuild(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/managers/guild/GuildManager.idl():  		return pendingGuilds.contains(playerID);
	return (&pendingGuilds)->contains(playerID);
}

bool GuildManagerImplementation::isSponsoredPlayer(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/managers/guild/GuildManager.idl():  		return sponsoredPlayers.contains(playerID);
	return (&sponsoredPlayers)->contains(playerID);
}

GuildObject* GuildManagerImplementation::getSponsoredGuild(unsigned long long playerID) {
	Locker _locker(_this.get());
	// server/zone/managers/guild/GuildManager.idl():  		return sponsoredPlayers.get(playerID);
	return (&sponsoredPlayers)->get(playerID);
}

/*
 *	GuildManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


GuildManagerAdapter::GuildManagerAdapter(GuildManager* obj) : ManagedServiceAdapter(obj) {
}

void GuildManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETCHATMANAGER__CHATMANAGER_:
		{
			setChatManager(static_cast<ChatManager*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDLISTTO__CREATUREOBJECT_STRING_:
		{
			String guildFilter; 
			sendGuildListTo(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(guildFilter));
		}
		break;
	case RPC_ADDPENDINGGUILD__LONG_STRING_:
		{
			String guildName; 
			addPendingGuild(inv->getUnsignedLongParameter(), inv->getAsciiParameter(guildName));
		}
		break;
	case RPC_REMOVEPENDINGGUILD__LONG_:
		{
			removePendingGuild(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_GETPENDINGGUILDNAME__LONG_:
		{
			resp->insertAscii(getPendingGuildName(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_ADDSPONSOREDPLAYER__LONG_GUILDOBJECT_:
		{
			addSponsoredPlayer(inv->getUnsignedLongParameter(), static_cast<GuildObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVESPONSOREDPLAYER__LONG_:
		{
			removeSponsoredPlayer(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_ISCREATINGGUILD__LONG_:
		{
			resp->insertBoolean(isCreatingGuild(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_ISSPONSOREDPLAYER__LONG_:
		{
			resp->insertBoolean(isSponsoredPlayer(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_GETSPONSOREDGUILD__LONG_:
		{
			resp->insertLong(getSponsoredGuild(inv->getUnsignedLongParameter())->_getObjectID());
		}
		break;
	case RPC_SENDBASELINESTO__CREATUREOBJECT_:
		{
			sendBaselinesTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_LOADGUILDS__:
		{
			loadGuilds();
		}
		break;
	case RPC_SENDGUILDCREATENAMETO__CREATUREOBJECT_GUILDTERMINAL_:
		{
			sendGuildCreateNameTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDCREATEABBREVTO__CREATUREOBJECT_GUILDTERMINAL_:
		{
			sendGuildCreateAbbrevTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDINFORMATIONTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_:
		{
			sendGuildInformationTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDMEMBERLISTTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_:
		{
			sendGuildMemberListTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDMEMBEROPTIONSTO__CREATUREOBJECT_GUILDOBJECT_LONG_GUILDTERMINAL_:
		{
			sendGuildMemberOptionsTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter(), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDDISBANDCONFIRMTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_:
		{
			sendGuildDisbandConfirmTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDSPONSOREDLISTTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_:
		{
			sendGuildSponsoredListTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDSPONSOREDOPTIONSTO__CREATUREOBJECT_GUILDOBJECT_LONG_GUILDTERMINAL_:
		{
			sendGuildSponsoredOptionsTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter(), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDSPONSORTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_:
		{
			sendGuildSponsorTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDSPONSORVERIFYTO__CREATUREOBJECT_CREATUREOBJECT_:
		{
			sendGuildSponsorVerifyTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDKICKPROMPTTO__CREATUREOBJECT_CREATUREOBJECT_:
		{
			sendGuildKickPromptTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDSETTITLETO__CREATUREOBJECT_CREATUREOBJECT_:
		{
			sendGuildSetTitleTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDGUILDWARSTATUSTO__CREATUREOBJECT_GUILDOBJECT_GUILDTERMINAL_:
		{
			sendGuildWarStatusTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_PROMPTADDNEWENEMY__CREATUREOBJECT_GUILDOBJECT_SCENEOBJECT_:
		{
			promptAddNewEnemy(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_TOGGLEWARSTATUS__CREATUREOBJECT_GUILDOBJECT_LONG_:
		{
			toggleWarStatus(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter());
		}
		break;
	case RPC_DECLAREWARBYNAME__CREATUREOBJECT_GUILDOBJECT_STRING_:
		{
			String search; 
			declareWarByName(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()), inv->getAsciiParameter(search));
		}
		break;
	case RPC_UPDATEWARSTATUSTOWARINGGUILD__GUILDOBJECT_GUILDOBJECT_:
		{
			updateWarStatusToWaringGuild(static_cast<GuildObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDMEMBERPERMISSIONSTO__CREATUREOBJECT_LONG_GUILDTERMINAL_:
		{
			sendMemberPermissionsTo(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter(), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_VALIDATEGUILDNAME__CREATUREOBJECT_STRING_:
		{
			String guildName; 
			resp->insertBoolean(validateGuildName(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(guildName)));
		}
		break;
	case RPC_VALIDATEGUILDABBREV__CREATUREOBJECT_STRING_:
		{
			String guildAbbrev; 
			resp->insertBoolean(validateGuildAbbrev(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(guildAbbrev)));
		}
		break;
	case RPC_GUILDNAMEEXISTS__STRING_:
		{
			String guildName; 
			resp->insertBoolean(guildNameExists(inv->getAsciiParameter(guildName)));
		}
		break;
	case RPC_GUILDABBREVEXISTS__STRING_:
		{
			String guildAbbrev; 
			resp->insertBoolean(guildAbbrevExists(inv->getAsciiParameter(guildAbbrev)));
		}
		break;
	case RPC_CREATEGUILD__CREATUREOBJECT_GUILDTERMINAL_STRING_STRING_:
		{
			String guildName; String guildAbbrev; 
			resp->insertLong(createGuild(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()), inv->getAsciiParameter(guildName), inv->getAsciiParameter(guildAbbrev))->_getObjectID());
		}
		break;
	case RPC_DISBANDGUILD__CREATUREOBJECT_GUILDOBJECT_:
		{
			resp->insertBoolean(disbandGuild(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_SPONSORPLAYER__CREATUREOBJECT_GUILDTERMINAL_STRING_:
		{
			String playerName; 
			sponsorPlayer(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()), inv->getAsciiParameter(playerName));
		}
		break;
	case RPC_ACCEPTSPONSORSHIPREQUEST__CREATUREOBJECT_CREATUREOBJECT_:
		{
			acceptSponsorshipRequest(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ACCEPTSPONSOREDPLAYER__CREATUREOBJECT_LONG_:
		{
			acceptSponsoredPlayer(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter());
		}
		break;
	case RPC_KICKMEMBER__CREATUREOBJECT_CREATUREOBJECT_:
		{
			kickMember(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_LEAVEGUILD__CREATUREOBJECT_GUILDOBJECT_:
		{
			leaveGuild(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SETMEMBERTITLE__CREATUREOBJECT_CREATUREOBJECT_STRING_:
		{
			String title; 
			setMemberTitle(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(title));
		}
		break;
	case RPC_SETALLEGIANCETO__CREATUREOBJECT_LONG_GUILDTERMINAL_:
		{
			setAllegianceTo(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter(), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_TOGGLEGUILDPERMISSION__CREATUREOBJECT_LONG_INT_GUILDTERMINAL_:
		{
			toggleGuildPermission(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedLongParameter(), inv->getSignedIntParameter(), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEGUILDCHANNELS__GUILDOBJECT_:
		{
			resp->insertLong(createGuildChannels(static_cast<GuildObject*>(inv->getObjectParameter()))->_getObjectID());
		}
		break;
	case RPC_SENDGUILDTRANSFERTO__CREATUREOBJECT_GUILDTERMINAL_:
		{
			sendGuildTransferTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDTRANSFERACKTO__CREATUREOBJECT_STRING_SCENEOBJECT_:
		{
			String newOwnerName; 
			sendTransferAckTo(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(newOwnerName), static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_TRANSFERLEADERSHIP__CREATUREOBJECT_CREATUREOBJECT_SCENEOBJECT_:
		{
			transferLeadership(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDACCEPTLOTSTO__CREATUREOBJECT_GUILDTERMINAL_:
		{
			sendAcceptLotsTo(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<GuildTerminal*>(inv->getObjectParameter()));
		}
		break;
	case RPC_TRANSFERGUILDHALL__CREATUREOBJECT_SCENEOBJECT_:
		{
			transferGuildHall(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETGUILDFROMABBREV__STRING_:
		{
			String guildAbbrev; 
			resp->insertLong(getGuildFromAbbrev(inv->getAsciiParameter(guildAbbrev))->_getObjectID());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void GuildManagerAdapter::setChatManager(ChatManager* chatmanager) {
	(static_cast<GuildManager*>(stub))->setChatManager(chatmanager);
}

void GuildManagerAdapter::sendGuildListTo(CreatureObject* player, const String& guildFilter) {
	(static_cast<GuildManager*>(stub))->sendGuildListTo(player, guildFilter);
}

void GuildManagerAdapter::addPendingGuild(unsigned long long playerID, const String& guildName) {
	(static_cast<GuildManager*>(stub))->addPendingGuild(playerID, guildName);
}

void GuildManagerAdapter::removePendingGuild(unsigned long long playerID) {
	(static_cast<GuildManager*>(stub))->removePendingGuild(playerID);
}

String GuildManagerAdapter::getPendingGuildName(unsigned long long playerID) {
	return (static_cast<GuildManager*>(stub))->getPendingGuildName(playerID);
}

void GuildManagerAdapter::addSponsoredPlayer(unsigned long long playerID, GuildObject* guild) {
	(static_cast<GuildManager*>(stub))->addSponsoredPlayer(playerID, guild);
}

void GuildManagerAdapter::removeSponsoredPlayer(unsigned long long playerID) {
	(static_cast<GuildManager*>(stub))->removeSponsoredPlayer(playerID);
}

bool GuildManagerAdapter::isCreatingGuild(unsigned long long playerID) {
	return (static_cast<GuildManager*>(stub))->isCreatingGuild(playerID);
}

bool GuildManagerAdapter::isSponsoredPlayer(unsigned long long playerID) {
	return (static_cast<GuildManager*>(stub))->isSponsoredPlayer(playerID);
}

GuildObject* GuildManagerAdapter::getSponsoredGuild(unsigned long long playerID) {
	return (static_cast<GuildManager*>(stub))->getSponsoredGuild(playerID);
}

void GuildManagerAdapter::sendBaselinesTo(CreatureObject* player) {
	(static_cast<GuildManager*>(stub))->sendBaselinesTo(player);
}

void GuildManagerAdapter::loadGuilds() {
	(static_cast<GuildManager*>(stub))->loadGuilds();
}

void GuildManagerAdapter::sendGuildCreateNameTo(CreatureObject* player, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildCreateNameTo(player, guildTerminal);
}

void GuildManagerAdapter::sendGuildCreateAbbrevTo(CreatureObject* player, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildCreateAbbrevTo(player, guildTerminal);
}

void GuildManagerAdapter::sendGuildInformationTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildInformationTo(player, guild, guildTerminal);
}

void GuildManagerAdapter::sendGuildMemberListTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildMemberListTo(player, guild, guildTerminal);
}

void GuildManagerAdapter::sendGuildMemberOptionsTo(CreatureObject* player, GuildObject* guild, unsigned long long memberID, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildMemberOptionsTo(player, guild, memberID, guildTerminal);
}

void GuildManagerAdapter::sendGuildDisbandConfirmTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildDisbandConfirmTo(player, guild, guildTerminal);
}

void GuildManagerAdapter::sendGuildSponsoredListTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildSponsoredListTo(player, guild, guildTerminal);
}

void GuildManagerAdapter::sendGuildSponsoredOptionsTo(CreatureObject* player, GuildObject* guild, unsigned long long playerID, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildSponsoredOptionsTo(player, guild, playerID, guildTerminal);
}

void GuildManagerAdapter::sendGuildSponsorTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildSponsorTo(player, guild, guildTerminal);
}

void GuildManagerAdapter::sendGuildSponsorVerifyTo(CreatureObject* player, CreatureObject* target) {
	(static_cast<GuildManager*>(stub))->sendGuildSponsorVerifyTo(player, target);
}

void GuildManagerAdapter::sendGuildKickPromptTo(CreatureObject* player, CreatureObject* target) {
	(static_cast<GuildManager*>(stub))->sendGuildKickPromptTo(player, target);
}

void GuildManagerAdapter::sendGuildSetTitleTo(CreatureObject* player, CreatureObject* target) {
	(static_cast<GuildManager*>(stub))->sendGuildSetTitleTo(player, target);
}

void GuildManagerAdapter::sendGuildWarStatusTo(CreatureObject* player, GuildObject* guild, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildWarStatusTo(player, guild, guildTerminal);
}

void GuildManagerAdapter::promptAddNewEnemy(CreatureObject* player, GuildObject* guild, SceneObject* terminal) {
	(static_cast<GuildManager*>(stub))->promptAddNewEnemy(player, guild, terminal);
}

void GuildManagerAdapter::toggleWarStatus(CreatureObject* player, GuildObject* guild, unsigned long long guildoid) {
	(static_cast<GuildManager*>(stub))->toggleWarStatus(player, guild, guildoid);
}

void GuildManagerAdapter::declareWarByName(CreatureObject* player, GuildObject* guild, const String& search) {
	(static_cast<GuildManager*>(stub))->declareWarByName(player, guild, search);
}

void GuildManagerAdapter::updateWarStatusToWaringGuild(GuildObject* guild, GuildObject* waringGuild) {
	(static_cast<GuildManager*>(stub))->updateWarStatusToWaringGuild(guild, waringGuild);
}

void GuildManagerAdapter::sendMemberPermissionsTo(CreatureObject* player, unsigned long long targetID, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendMemberPermissionsTo(player, targetID, guildTerminal);
}

bool GuildManagerAdapter::validateGuildName(CreatureObject* player, const String& guildName) {
	return (static_cast<GuildManager*>(stub))->validateGuildName(player, guildName);
}

bool GuildManagerAdapter::validateGuildAbbrev(CreatureObject* player, const String& guildAbbrev) {
	return (static_cast<GuildManager*>(stub))->validateGuildAbbrev(player, guildAbbrev);
}

bool GuildManagerAdapter::guildNameExists(const String& guildName) {
	return (static_cast<GuildManager*>(stub))->guildNameExists(guildName);
}

bool GuildManagerAdapter::guildAbbrevExists(const String& guildAbbrev) {
	return (static_cast<GuildManager*>(stub))->guildAbbrevExists(guildAbbrev);
}

GuildObject* GuildManagerAdapter::createGuild(CreatureObject* player, GuildTerminal* guildTerminal, const String& guildName, const String& guildAbbrev) {
	return (static_cast<GuildManager*>(stub))->createGuild(player, guildTerminal, guildName, guildAbbrev);
}

bool GuildManagerAdapter::disbandGuild(CreatureObject* player, GuildObject* guild) {
	return (static_cast<GuildManager*>(stub))->disbandGuild(player, guild);
}

void GuildManagerAdapter::sponsorPlayer(CreatureObject* player, GuildTerminal* guildTerminal, const String& playerName) {
	(static_cast<GuildManager*>(stub))->sponsorPlayer(player, guildTerminal, playerName);
}

void GuildManagerAdapter::acceptSponsorshipRequest(CreatureObject* player, CreatureObject* target) {
	(static_cast<GuildManager*>(stub))->acceptSponsorshipRequest(player, target);
}

void GuildManagerAdapter::acceptSponsoredPlayer(CreatureObject* player, unsigned long long targetID) {
	(static_cast<GuildManager*>(stub))->acceptSponsoredPlayer(player, targetID);
}

void GuildManagerAdapter::kickMember(CreatureObject* player, CreatureObject* target) {
	(static_cast<GuildManager*>(stub))->kickMember(player, target);
}

void GuildManagerAdapter::leaveGuild(CreatureObject* player, GuildObject* guild) {
	(static_cast<GuildManager*>(stub))->leaveGuild(player, guild);
}

void GuildManagerAdapter::setMemberTitle(CreatureObject* player, CreatureObject* target, const String& title) {
	(static_cast<GuildManager*>(stub))->setMemberTitle(player, target, title);
}

void GuildManagerAdapter::setAllegianceTo(CreatureObject* player, unsigned long long targetID, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->setAllegianceTo(player, targetID, guildTerminal);
}

void GuildManagerAdapter::toggleGuildPermission(CreatureObject* player, unsigned long long targetID, int permissionIndex, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->toggleGuildPermission(player, targetID, permissionIndex, guildTerminal);
}

ChatRoom* GuildManagerAdapter::createGuildChannels(GuildObject* guild) {
	return (static_cast<GuildManager*>(stub))->createGuildChannels(guild);
}

void GuildManagerAdapter::sendGuildTransferTo(CreatureObject* player, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendGuildTransferTo(player, guildTerminal);
}

void GuildManagerAdapter::sendTransferAckTo(CreatureObject* player, const String& newOwnerName, SceneObject* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendTransferAckTo(player, newOwnerName, guildTerminal);
}

void GuildManagerAdapter::transferLeadership(CreatureObject* newOwner, CreatureObject* oldOwner, SceneObject* guildTerminal) {
	(static_cast<GuildManager*>(stub))->transferLeadership(newOwner, oldOwner, guildTerminal);
}

void GuildManagerAdapter::sendAcceptLotsTo(CreatureObject* newOwner, GuildTerminal* guildTerminal) {
	(static_cast<GuildManager*>(stub))->sendAcceptLotsTo(newOwner, guildTerminal);
}

void GuildManagerAdapter::transferGuildHall(CreatureObject* newOwner, SceneObject* guildTerminal) {
	(static_cast<GuildManager*>(stub))->transferGuildHall(newOwner, guildTerminal);
}

GuildObject* GuildManagerAdapter::getGuildFromAbbrev(const String& guildAbbrev) {
	return (static_cast<GuildManager*>(stub))->getGuildFromAbbrev(guildAbbrev);
}

/*
 *	GuildManagerHelper
 */

GuildManagerHelper* GuildManagerHelper::staticInitializer = GuildManagerHelper::instance();

GuildManagerHelper::GuildManagerHelper() {
	className = "GuildManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void GuildManagerHelper::finalizeHelper() {
	GuildManagerHelper::finalize();
}

DistributedObject* GuildManagerHelper::instantiateObject() {
	return new GuildManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* GuildManagerHelper::instantiateServant() {
	return new GuildManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* GuildManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GuildManagerAdapter(static_cast<GuildManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

