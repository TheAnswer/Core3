/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.managers.guild;

import engine.core.ManagedService;
import server.zone.ZoneProcessServer;
import server.zone.ZoneServer;
import server.chat.ChatManager;
import server.chat.room.ChatRoom;
include server.zone.managers.guild.GuildList;
include server.zone.packets.guild.GuildObjectDeltaMessage3;
import server.zone.objects.guild.GuildObject;
import server.zone.objects.tangible.terminal.guild.GuildTerminal;
import server.zone.objects.creature.CreatureObject;
include server.zone.objects.scene.variables.DeltaSet;
include server.chat.StringIdChatParameter;

class GuildManager extends ManagedService implements Logger {
	private transient ZoneServer server;
	private transient ZoneProcessServer processor;
	
	private transient ChatManager chatManager;
	
	@dereferenced
	private DeltaSet<string, GuildObject> guildList;
	
	@dereferenced
	private transient VectorMap<unsigned long, string> pendingGuilds;
	
	@dereferenced
	private transient VectorMap<unsigned long, GuildObject> sponsoredPlayers;
	
	private int requiredMembers;
	private int maximumMembers;
	private int guildUpdateInterval;
	
	public GuildManager(ZoneServer serv, ZoneProcessServer proc) {
		Logger.setLoggingName("GuildManager");
		Logger.setLogging(true);
		Logger.setGlobalLogging(true);
		
		pendingGuilds.setNoDuplicateInsertPlan();
		
		sponsoredPlayers.setNoDuplicateInsertPlan();
		sponsoredPlayers.setNullValue(null);

		server = serv;
		processor = proc;
		
		requiredMembers = 5;
		maximumMembers = 500;
		guildUpdateInterval = 1440;
	}
	
	public void setChatManager(ChatManager chatmanager) {
		chatManager = chatmanager;
	}
	
	public native void sendGuildListTo(CreatureObject player, final string guildFilter);
	
	public synchronized void addPendingGuild(unsigned long playerID, final string guildName) {
		pendingGuilds.put(playerID, guildName);
	}
	
	public synchronized void removePendingGuild(unsigned long playerID) {
		pendingGuilds.drop(playerID);
	}
	
	public synchronized string getPendingGuildName(unsigned long playerID) {
		return pendingGuilds.get(playerID);
	}
	
	public synchronized void addSponsoredPlayer(unsigned long playerID, GuildObject guild) {
		sponsoredPlayers.put(playerID, guild);
	}
	
	public synchronized void removeSponsoredPlayer(unsigned long playerID) {
		sponsoredPlayers.drop(playerID);
	}
	
	public synchronized boolean isCreatingGuild(unsigned long playerID) {
		return pendingGuilds.contains(playerID);
	}
	
	public synchronized boolean isSponsoredPlayer(unsigned long playerID) {
		return sponsoredPlayers.contains(playerID);
	}
	
	public synchronized GuildObject getSponsoredGuild(unsigned long playerID) {
		return sponsoredPlayers.get(playerID);
	}

	
	
	public native void sendBaselinesTo(CreatureObject player);
	
	public native void loadGuilds();
	
	public native void sendGuildCreateNameTo(CreatureObject player, GuildTerminal guildTerminal);
	
	public native void sendGuildCreateAbbrevTo(CreatureObject player, GuildTerminal guildTerminal);
	
	public native void sendGuildInformationTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);
	
	public native void sendGuildMemberListTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);
	
	public native void sendGuildMemberOptionsTo(CreatureObject player, GuildObject guild, unsigned long memberID, GuildTerminal guildTerminal);
	
	public native void sendGuildDisbandConfirmTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);
	
	public native void sendGuildSponsoredListTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);
	
	public native void sendGuildSponsoredOptionsTo(CreatureObject player, GuildObject guild, unsigned long playerID, GuildTerminal guildTerminal);
	
	public native void sendGuildSponsorTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);
	
	public native void sendGuildSponsorVerifyTo(CreatureObject player, CreatureObject target);
	
	public native void sendGuildKickPromptTo(CreatureObject player, CreatureObject target);
	
	public native void sendGuildSetTitleTo(CreatureObject player, CreatureObject target);
	
	public native void sendGuildWarStatusTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);
	
	public native void promptAddNewEnemy(CreatureObject player, GuildObject guild, SceneObject terminal);
	
	public native void toggleWarStatus(CreatureObject player, GuildObject guild, unsigned long guildoid);
	
	public native void declareWarByName(CreatureObject player, GuildObject guild, final string search);
	
	public native void updateWarStatusToWaringGuild(GuildObject guild, GuildObject waringGuild);
	
	public native void sendMemberPermissionsTo(CreatureObject player, unsigned long targetID, GuildTerminal guildTerminal);
	
	public native boolean validateGuildName(CreatureObject player, final string guildName);
	
	public native boolean validateGuildAbbrev(CreatureObject player, final string guildAbbrev);
	
	public native boolean guildNameExists(final string guildName);
	
	public native boolean guildAbbrevExists(final string guildAbbrev);
	
	public native GuildObject createGuild(CreatureObject player, GuildTerminal guildTerminal, final string guildName, final string guildAbbrev);
	
	public native boolean disbandGuild(CreatureObject player, GuildObject guild);
	
	public native void sponsorPlayer(CreatureObject player, GuildTerminal guildTerminal, final string playerName);
	
	public native void acceptSponsorshipRequest(CreatureObject player, CreatureObject target);
	
	public native void acceptSponsoredPlayer(CreatureObject player, unsigned long targetID);
	
	public native void kickMember(CreatureObject player, CreatureObject target);
	
	public native void leaveGuild(CreatureObject player, GuildObject guild);
	
	public native void setMemberTitle(CreatureObject player, CreatureObject target, final string title);
	
	public native void setAllegianceTo(CreatureObject player, unsigned long targetID, GuildTerminal guildTerminal);
	
	public native void toggleGuildPermission(CreatureObject player, unsigned long targetID, int permissionIndex, GuildTerminal guildTerminal);
	
	public native ChatRoom createGuildChannels(GuildObject guild);
	
	public native void sendGuildTransferTo(CreatureObject player, GuildTerminal guildTerminal);

	public native void sendTransferAckTo(CreatureObject player,  final string newOwnerName, SceneObject guildTerminal);

	public native void transferLeadership(CreatureObject newOwner, CreatureObject oldOwner, SceneObject guildTerminal);  
	
	public native void sendAcceptLotsTo(CreatureObject newOwner, GuildTerminal guildTerminal);
	
	public native void transferGuildHall(CreatureObject newOwner, SceneObject guildTerminal);

	@local
	public native void sendGuildMail(final string subject, @dereferenced StringIdChatParameter body, GuildObject guild);

	public native GuildObject getGuildFromAbbrev(final string guildAbbrev);
}
