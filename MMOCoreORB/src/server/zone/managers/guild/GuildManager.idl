/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.managers.guild;

import engine.core.ManagedService;
import system.lang.StringBuffer;
import server.zone.ZoneProcessServer;
import server.zone.ZoneServer;
import server.chat.ChatManager;
import server.chat.room.ChatRoom;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.guild.GuildObject;
import server.zone.objects.tangible.terminal.guild.GuildTerminal;
import server.zone.objects.creature.CreatureObject;
include server.zone.objects.scene.variables.DeltaSet;
include server.chat.StringIdChatParameter;

@dirty
class GuildManager extends ManagedService implements Logger {
	private transient ZoneServer server;
	private transient ZoneProcessServer processor;

	private transient ChatManager chatManager;

	@dereferenced
	private DeltaSet<string, GuildObject> guildList;

	@dereferenced
	private transient VectorMap<unsigned long, string> pendingGuilds;

	@dereferenced
	private transient VectorMap<unsigned long, GuildObject> sponsoredPlayers;

	private int requiredMembers;
	private int maximumMembers;
	private int guildUpdateInterval;

	public GuildManager(ZoneServer serv, ZoneProcessServer proc) {
		Logger.setLoggingName("GuildManager");
		Logger.setLogging(true);
		Logger.setGlobalLogging(true);

		pendingGuilds.setNoDuplicateInsertPlan();

		sponsoredPlayers.setNoDuplicateInsertPlan();
		sponsoredPlayers.setNullValue(null);

		server = serv;
		processor = proc;

		requiredMembers = 5;
		maximumMembers = 500;
		guildUpdateInterval = 10080; // In minutes
	}

	public void setChatManager(ChatManager chatmanager) {
		chatManager = chatmanager;
	}

	public native void loadLuaConfig();

	public native void stop();

	private native void scheduleGuildUpdates();
	public native void processGuildUpdate(GuildObject guild);
	private native void processGuildElection(GuildObject guild);
	private native void destroyGuild(GuildObject guild, @dereferenced StringIdChatParameter mailbody);

	public native void sendGuildListTo(CreatureObject player, final string guildFilter);
	public native void sendAdminGuildInfoTo(CreatureObject player, GuildObject guild);
	private native void addPermsToAdminGuildInfo(byte perms, @dereferenced StringBuffer text);

	public synchronized void addPendingGuild(unsigned long playerID, final string guildName) {
		pendingGuilds.put(playerID, guildName);
	}

	public synchronized void removePendingGuild(unsigned long playerID) {
		pendingGuilds.drop(playerID);
	}

	public synchronized string getPendingGuildName(unsigned long playerID) {
		return pendingGuilds.get(playerID);
	}

	public synchronized void addSponsoredPlayer(unsigned long playerID, GuildObject guild) {
		sponsoredPlayers.put(playerID, guild);
	}

	public synchronized void removeSponsoredPlayer(unsigned long playerID) {
		sponsoredPlayers.drop(playerID);
	}

	public synchronized boolean isCreatingGuild(unsigned long playerID) {
		return pendingGuilds.contains(playerID);
	}

	public synchronized boolean isSponsoredPlayer(unsigned long playerID) {
		return sponsoredPlayers.contains(playerID);
	}

	public synchronized GuildObject getSponsoredGuild(unsigned long playerID) {
		return sponsoredPlayers.get(playerID);
	}

	public native void sendBaselinesTo(CreatureObject player);

	public native void loadGuilds();

	public native void sendGuildCreateNameTo(CreatureObject player, GuildTerminal guildTerminal);

	public native void sendGuildChangeNameTo(CreatureObject player, GuildObject guild);

	public native void sendGuildCreateAbbrevTo(CreatureObject player, GuildTerminal guildTerminal);

	public native void sendGuildChangeAbbrevTo(CreatureObject player, GuildObject guild);

	public native void sendGuildInformationTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);

	public native void sendGuildMemberListTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);

	public native void sendGuildMemberOptionsTo(CreatureObject player, GuildObject guild, unsigned long memberID, GuildTerminal guildTerminal);

	public native void sendGuildDisbandConfirmTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);

	public native void sendGuildSponsoredListTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);

	public native void sendGuildSponsoredOptionsTo(CreatureObject player, GuildObject guild, unsigned long playerID, GuildTerminal guildTerminal);

	public native void sendGuildSponsorTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);

	public native void sendGuildKickPromptTo(CreatureObject player, CreatureObject target);

	public native void sendGuildSetTitleTo(CreatureObject player, CreatureObject target);

	public native void sendGuildWarStatusTo(CreatureObject player, GuildObject guild, GuildTerminal guildTerminal);

	public native void promptAddNewEnemy(CreatureObject player, GuildObject guild, SceneObject terminal);

	public native void toggleWarStatus(CreatureObject player, GuildObject guild, unsigned long guildoid);

	public native void declareWarByName(CreatureObject player, GuildObject guild, final string search);

	public native void updateWarStatusToWaringGuild(GuildObject guild, GuildObject waringGuild);

	public native void sendMemberPermissionsTo(CreatureObject player, unsigned long targetID, GuildTerminal guildTerminal);

	public native boolean validateGuildName(CreatureObject player, final string guildName, GuildObject guild = null);

	public native boolean validateGuildAbbrev(CreatureObject player, final string guildAbbrev, GuildObject guild = null);

	public native boolean guildNameExists(final string guildName);

	public native boolean guildAbbrevExists(final string guildAbbrev);

	public native void setupGuildRename(CreatureObject player, GuildObject guild);

	public native void renameGuild(GuildObject guild);

	public native GuildObject createGuild(CreatureObject player, final string guildName, final string guildAbbrev);
	
	public native boolean disbandGuild(CreatureObject player, GuildObject guild);

	public native void sponsorPlayer(CreatureObject player, final string playerName);

	public native void acceptSponsorshipRequest(CreatureObject player, CreatureObject target);

	public native void acceptSponsoredPlayer(CreatureObject player, unsigned long targetID);

	public native void declineSponsoredPlayer(CreatureObject player, unsigned long targetID);

	public native void kickMember(CreatureObject player, CreatureObject target);

	public native void leaveGuild(CreatureObject player, GuildObject guild);

	public native void setMemberTitle(CreatureObject player, CreatureObject target, final string title);

	public native void toggleGuildPermission(CreatureObject player, unsigned long targetID, int permissionIndex, GuildTerminal guildTerminal);

	public native ChatRoom createGuildChannels(GuildObject guild);

	public native void sendGuildTransferTo(CreatureObject player, GuildTerminal guildTerminal);

	public native void sendTransferAckTo(CreatureObject player,  final string newOwnerName, SceneObject guildTerminal);

	public native void transferLeadership(CreatureObject newOwner, CreatureObject oldOwner, boolean election);  

	public native void sendAcceptLotsTo(CreatureObject newOwner, GuildTerminal guildTerminal);

	public native boolean transferGuildHall(CreatureObject newOwner, SceneObject guildTerminal);

	@local
	public native void sendGuildMail(final string subject, @dereferenced StringIdChatParameter body, GuildObject guild);

	public native GuildObject getGuildFromAbbrev(final string guildAbbrev);

	public native void toggleElection(GuildObject guild, CreatureObject player);

	public native void resetElection(GuildObject guild, CreatureObject player);

	public native void registerForElection(GuildObject guild, CreatureObject player);

	public native void unregisterFromElection(GuildObject guild, CreatureObject player);

	public native void promptCastVote(GuildObject guild, CreatureObject player, GuildTerminal terminal);

	public native void castVote(GuildObject guild, CreatureObject player, unsigned long candidateID);

	public native void viewElectionStandings(GuildObject guild, CreatureObject player, GuildTerminal terminal);
}
