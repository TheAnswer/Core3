/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.managers.minigames;

import engine.log.Logger;
import server.zone.objects.creature.CreatureObject;
import system.util.VectorMap;
import system.util.Vector;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.tangible.terminal.gambling.GamblingTerminal;

include engine.util.Observer;

class GamblingManager extends Observer implements Logger {

	@dereferenced
	protected VectorMap<CreatureObject, GamblingTerminal> slotGames;
	
	@dereferenced
	protected VectorMap<CreatureObject, GamblingTerminal> rouletteGames;
	
	// Stored possible roulette bet targets
	@dereferenced
	protected Vector<string> roulette;
	
	// Stores the numbers that belong to red, black are {1-36}\red
	@dereferenced
	protected Vector<string> red;
	
	// Stores the rewards for Slot Games
	@dereferenced
	protected Vector<int> slot;

	@dereferenced
	protected Vector<int> slotTimer;
	
	@dereferenced
	protected Vector<int> rouletteTimer;
	
	public GamblingManager() {
		initializeRoulette();
		initializeRouletteRed();
		initializeSlots();
		
		initializeSlotTimer();
		
		initializeRouletteTimer();
		
		Logger.setLoggingName("GamblingManager");
		Logger.setLogging(true);
	}

	@local
	public Vector<string> getRoulette() {
		return roulette;
	}
	
	public void initializeSlotTimer() {
		slotTimer.add(6);
		slotTimer.add(4);
		slotTimer.add(4);
		slotTimer.add(4);
		slotTimer.add(1);
		slotTimer.add(1);
	}
	
	public void initializeRouletteTimer() {
		rouletteTimer.add(30);
		rouletteTimer.add(30);
		rouletteTimer.add(30);
		rouletteTimer.add(10);
		rouletteTimer.add(5);
		rouletteTimer.add(5);
		rouletteTimer.add(5);
		rouletteTimer.add(5);
		rouletteTimer.add(10);
		rouletteTimer.add(5);
		rouletteTimer.add(5);
		rouletteTimer.add(2);
	}
	
	public void initializeSlots() {
		slot.add(4);
		slot.add(50);
		slot.add(75);
		slot.add(100);
		slot.add(250);
		slot.add(500);
		slot.add(1000);
		slot.add(1500);
	}
	
	public void initializeRouletteRed() {
		red.add("1");
		red.add("3");
		red.add("5");
		red.add("7");
		red.add("9");
		red.add("12");
		red.add("14");
		red.add("16");
		red.add("18");
		red.add("19");
		red.add("21");
		red.add("23");
		red.add("25");
		red.add("27");
		red.add("30");
		red.add("32");
		red.add("34");
		red.add("36");
	}
	
	public void initializeRoulette() {
		roulette.add("0");
		roulette.add("1");
		roulette.add("2");
		roulette.add("3");
		roulette.add("4");
		roulette.add("5");
		roulette.add("6");
		roulette.add("7");
		roulette.add("8");
		roulette.add("9");
		roulette.add("10");
		roulette.add("11");
		roulette.add("12");
		roulette.add("13");
		roulette.add("14");
		roulette.add("15");
		roulette.add("16");
		roulette.add("17");
		roulette.add("18");
		roulette.add("19");
		roulette.add("20");
		roulette.add("21");
		roulette.add("22");
		roulette.add("23");
		roulette.add("24");
		roulette.add("25");
		roulette.add("26");
		roulette.add("27");
		roulette.add("28");
		roulette.add("29");
		roulette.add("30");
		roulette.add("31");
		roulette.add("32");
		roulette.add("33");
		roulette.add("34");
		roulette.add("35");
		roulette.add("36");
		roulette.add("00");
		roulette.add("odd");
		roulette.add("even");
		roulette.add("high");
		roulette.add("low");
		roulette.add("red");
		roulette.add("black");
	}
	
	public int notify(SceneObject sceneObject) {
		if (sceneObject.isCreatureObject())
			return 1;
		
		return 0;
	}
	
	public boolean isHigh(int value) {
		if ((value > 18 ) && (value != 37))
			return true;
		return false;
	}
	
	public boolean isLow(int value) {
		if ((value > 0 ) && (value < 19))
			return true;
		return false;
	}
	
	public boolean isEven(int value) {
		if ((value == 0) || (value == 37))
			return false;
		if ((value % 2) == 0)
			return true;
		return false;
	}
	
	public boolean isOdd(int value) {
		if ((value == 0) || (value == 37))
			return false;
		if ((value % 2) == 1)
			return true;
		return false;
	}
	
	public boolean isBlack(int value) {
		if (roulette.get(value) == "0" || roulette.get(value) == "00")
			return false;
		if (isRed(value))
			return false;
		return true;
	}
	
	public boolean isRed(int value) {
		if (roulette.get(value) == "0" || roulette.get(value) == "00")
			return false;
		for (int i = 0; i < red.size(); ++i) {
			if (red.get(i)==roulette.get(value)) {
				return true;
			}
		}
		return false;
	}
	
	public native void handleSlot(CreatureObject player, boolean cancel, boolean other);
	
	protected native void refreshSlotMenu(CreatureObject player, GamblingTerminal terminal);
	
	/**
	 * Accept bet from /bet command
	 * This method receives the player who wants to bet, the amount he wants to bet, and the target he's betting on
	 * and calls bet(terminal, player, amount, target)
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject betting money
	 * @param amount Amount of Credits to bet
	 * @param target Target field (remains empty for slotMachine)
	 */
	public native void bet(CreatureObject player, int amount, int target, int machineType);
	
	/**
	 * Accept bet from /bet command or startGame
	 * This method receives the player who wants to bet, the amount he wants to bet, and the target he's betting on
	 * The method creates a bet and adds it to the GamblingTerminal's bets VectorMap
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param terminal GamblingTerminal for which to add bet
	 * @param player CreatureObject betting money
	 * @param amount Amount of Credits to bet
	 * @param target Target field (remains empty for slotMachine)
	 */
	public native void bet(GamblingTerminal terminal, CreatureObject player, int amount, int target);
	
	/**
	 * StartGame called by SuiManager
	 * This method receives a CreatureObject, looks it up in the machineType's corresponding VectorMap
	 * and then calls startGame(Terminal) 
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject for which to start the Game
	 * @param machineType machine type of the Terminal, set in the SuiManager
	 */
	public native void startGame(CreatureObject player, int machineType);
	
	/**
	 * Starts Game
	 * This method receives a GamblingTerminal, starting the Event cycle of the Game
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param terminal GamblingTerminal for which to start the game
	 */
	public native void startGame(GamblingTerminal terminal);
	
	/**
	 * LeaveTerminal called by SuiManager
	 * This method receives a CreatureObject, looks it up in the machineType's corresponding VectorMap
	 * and then calls Terminal::leaveTerminal(player) 
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject who wants to leave the Terminal
	 * @param machineType machine type of the Terminal, set in the SuiManager
	 */
	public native void leaveTerminal(CreatureObject player, int machineType);
	
	/**
	 * Adds player to VectorMap
	 * This method switches machineTypes adding the Player and GamblingTerminal to the machineType's corresponding VectorMap
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param terminal GamblingTerminal to register
	 * @param player CreatureObject to register
	 */
	public native void registerPlayer(GamblingTerminal terminal, CreatureObject player);
	
	/**
	 * Refreshes the menu
	 * This method receives a CreatureObject, looks it up in the Roulette VectorMap
	 * and then closes the Roulette Menu, reopening it
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject for which to refresh menu
	 */
	public native void refreshRouletteMenu(CreatureObject player);
	
	/**
	 * Continues the Game
	 * This method receives a CreatureObject, looks it up in the Roulette VectorMap
	 * and then closes the Roulette Menu, reopening it
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject for which to refresh menu
	 */
	public native void continueGame(GamblingTerminal terminal);
	
	/**
	 * Ends the Game
	 * This method receives a CreatureObject, looks it up in the Roulette VectorMap
	 * and then closes the Roulette Menu, reopening it
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject for which to refresh menu
	 */
	public native void stopGame(GamblingTerminal terminal, boolean cancel);
	
	/**
	 * Calculates the results of each players' bets
	 * This method receives a CreatureObject, looks it up in the Roulette VectorMap
	 * and then closes the Roulette Menu, reopening it
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject for which to refresh menu
	 */
	public native void calculateOutcome(GamblingTerminal terminal);
	
	/**
	 * Creates the Windows
	 * This method receives a CreatureObject, looks it up in the Roulette VectorMap
	 * and then closes the Roulette Menu, reopening it
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject for which to refresh menu
	 */
	public native unsigned int createWindow(GamblingTerminal terminal, CreatureObject player);
	
	/**
	 * Creates the SlotPayoutWindow
	 * This method receives a CreatureObject, looks it up in the Roulette VectorMap
	 * and then closes the Roulette Menu, reopening it
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject for which to refresh menu
	 */
	public native unsigned int createPayoutWindow(CreatureObject player);
	
	/**
	 * Creates the SlotWindow
	 * This method receives a CreatureObject, looks it up in the Roulette VectorMap
	 * and then closes the Roulette Menu, reopening it
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject for which to refresh menu
	 * @param payoutBoxID boxID of the payout menu so it can be closed later
	 */
	public native unsigned int createSlotWindow(CreatureObject player, unsigned int payoutBoxID);
	
	/**
	 * Creates the RouletteWindow
	 * This method receives a CreatureObject, looks it up in the Roulette VectorMap
	 * and then closes the Roulette Menu, reopening it
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param player CreatureObject for which to refresh menu
	 */
	public native unsigned int createRouletteWindow(CreatureObject player);
	
	/**
	 * Creates Events
	 * This method receives a Terminal and a time,
	 * creates a GamblingEvent, stores it in the Terminal and schedules it to time
	 * @pre { this object is not locked }
	 * @post { this object is not locked }
	 * @param terminal GamblingTerminal for which to create event
	 * @param time Time in ms to schedule the Task
	 */
	public native void createEvent(GamblingTerminal terminal, int time);
	
	public boolean isPlaying(CreatureObject player) {
		return (slotGames.contains(player) || rouletteGames.contains(player));
	}
	
}
