/*
 *	server/zone/managers/director/PersistentEvent.cpp generated by engine3 IDL compiler 0.60
 */

#include "PersistentEvent.h"

/*
 *	PersistentEventStub
 */

enum {RPC_GETTIMESTAMP__ = 6,RPC_GETKEY__,RPC_GETSCREENPLAY__,RPC_GETOBJECT__,RPC_GETCURTIME__,RPC_SETCURTIME__INT_,RPC_SETTIMESTAMP__INT_,RPC_SETKEY__STRING_,RPC_SETSCREENPLAY__STRING_,RPC_SETOBJECT__SCENEOBJECT_,RPC_NOTIFYLOADFROMDATABASE__};

PersistentEvent::PersistentEvent() : ManagedObject(DummyConstructorParameter::instance()) {
	PersistentEventImplementation* _implementation = new PersistentEventImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PersistentEvent");
}

PersistentEvent::PersistentEvent(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("PersistentEvent");
}

PersistentEvent::~PersistentEvent() {
}



int PersistentEvent::getTimeStamp() {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIMESTAMP__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTimeStamp();
}

const String PersistentEvent::getKey() {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETKEY__);

		String _return_getKey;
		method.executeWithAsciiReturn(_return_getKey);
		return _return_getKey;
	} else
		return _implementation->getKey();
}

const String PersistentEvent::getScreenplay() {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSCREENPLAY__);

		String _return_getScreenplay;
		method.executeWithAsciiReturn(_return_getScreenplay);
		return _return_getScreenplay;
	} else
		return _implementation->getScreenplay();
}

SceneObject* PersistentEvent::getObject() {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOBJECT__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getObject();
}

int PersistentEvent::getCurTime() {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCURTIME__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getCurTime();
}

void PersistentEvent::setCurTime(int time) {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCURTIME__INT_);
		method.addSignedIntParameter(time);

		method.executeWithVoidReturn();
	} else
		_implementation->setCurTime(time);
}

void PersistentEvent::setTimeStamp(int stamp) {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTIMESTAMP__INT_);
		method.addSignedIntParameter(stamp);

		method.executeWithVoidReturn();
	} else
		_implementation->setTimeStamp(stamp);
}

void PersistentEvent::setKey(const String& k) {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETKEY__STRING_);
		method.addAsciiParameter(k);

		method.executeWithVoidReturn();
	} else
		_implementation->setKey(k);
}

void PersistentEvent::setScreenplay(const String& sp) {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSCREENPLAY__STRING_);
		method.addAsciiParameter(sp);

		method.executeWithVoidReturn();
	} else
		_implementation->setScreenplay(sp);
}

void PersistentEvent::setObject(SceneObject* o) {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOBJECT__SCENEOBJECT_);
		method.addObjectParameter(o);

		method.executeWithVoidReturn();
	} else
		_implementation->setObject(o);
}

void PersistentEvent::notifyLoadFromDatabase() {
	PersistentEventImplementation* _implementation = static_cast<PersistentEventImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyLoadFromDatabase();
}

DistributedObjectServant* PersistentEvent::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PersistentEvent::_getImplementationForRead() {
	return _impl;
}

void PersistentEvent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PersistentEventImplementation
 */

PersistentEventImplementation::PersistentEventImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


PersistentEventImplementation::~PersistentEventImplementation() {
}


void PersistentEventImplementation::finalize() {
}

void PersistentEventImplementation::_initializeImplementation() {
	_setClassHelper(PersistentEventHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PersistentEventImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PersistentEvent*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* PersistentEventImplementation::_getStub() {
	return _this.get();
}

PersistentEventImplementation::operator const PersistentEvent*() {
	return _this.get();
}

void PersistentEventImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PersistentEventImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PersistentEventImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PersistentEventImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PersistentEventImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PersistentEventImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PersistentEventImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PersistentEventImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("PersistentEvent");

}

void PersistentEventImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PersistentEventImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PersistentEventImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x9aac8fa1: //PersistentEvent.timeStamp
		TypeInfo<int >::parseFromBinaryStream(&timeStamp, stream);
		return true;

	case 0x8f4c2527: //PersistentEvent.curTime
		TypeInfo<int >::parseFromBinaryStream(&curTime, stream);
		return true;

	case 0x1e880265: //PersistentEvent.key
		TypeInfo<String >::parseFromBinaryStream(&key, stream);
		return true;

	case 0x709aa4e0: //PersistentEvent.play
		TypeInfo<String >::parseFromBinaryStream(&play, stream);
		return true;

	case 0x6f7733aa: //PersistentEvent.obj
		TypeInfo<ManagedReference<SceneObject* > >::parseFromBinaryStream(&obj, stream);
		return true;

	}

	return false;
}

void PersistentEventImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PersistentEventImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PersistentEventImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x9aac8fa1; //PersistentEvent.timeStamp
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&timeStamp, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8f4c2527; //PersistentEvent.curTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&curTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1e880265; //PersistentEvent.key
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&key, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x709aa4e0; //PersistentEvent.play
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&play, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6f7733aa; //PersistentEvent.obj
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<SceneObject* > >::toBinaryStream(&obj, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 5;
}

PersistentEventImplementation::PersistentEventImplementation() {
	_initializeImplementation();
	// server/zone/managers/director/PersistentEvent.idl():  		play = "";
	play = "";
}

int PersistentEventImplementation::getTimeStamp() {
	// server/zone/managers/director/PersistentEvent.idl():  		return timeStamp;
	return timeStamp;
}

const String PersistentEventImplementation::getKey() {
	// server/zone/managers/director/PersistentEvent.idl():  		return key;
	return key;
}

const String PersistentEventImplementation::getScreenplay() {
	// server/zone/managers/director/PersistentEvent.idl():  		return play;
	return play;
}

SceneObject* PersistentEventImplementation::getObject() {
	// server/zone/managers/director/PersistentEvent.idl():  		return obj;
	return obj;
}

int PersistentEventImplementation::getCurTime() {
	// server/zone/managers/director/PersistentEvent.idl():  		return curTime;
	return curTime;
}

void PersistentEventImplementation::setCurTime(int time) {
	// server/zone/managers/director/PersistentEvent.idl():  		curTime = time;
	curTime = time;
}

void PersistentEventImplementation::setTimeStamp(int stamp) {
	// server/zone/managers/director/PersistentEvent.idl():  		timeStamp = stamp;
	timeStamp = stamp;
}

void PersistentEventImplementation::setKey(const String& k) {
	// server/zone/managers/director/PersistentEvent.idl():  		key = k;
	key = k;
}

void PersistentEventImplementation::setScreenplay(const String& sp) {
	// server/zone/managers/director/PersistentEvent.idl():  		play = sp;
	play = sp;
}

void PersistentEventImplementation::setObject(SceneObject* o) {
	// server/zone/managers/director/PersistentEvent.idl():  		obj = o;
	obj = o;
}

/*
 *	PersistentEventAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PersistentEventAdapter::PersistentEventAdapter(PersistentEvent* obj) : ManagedObjectAdapter(obj) {
}

void PersistentEventAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_GETTIMESTAMP__:
		{
			resp->insertSignedInt(getTimeStamp());
		}
		break;
	case RPC_GETKEY__:
		{
			resp->insertAscii(getKey());
		}
		break;
	case RPC_GETSCREENPLAY__:
		{
			resp->insertAscii(getScreenplay());
		}
		break;
	case RPC_GETOBJECT__:
		{
			resp->insertLong(getObject()->_getObjectID());
		}
		break;
	case RPC_GETCURTIME__:
		{
			resp->insertSignedInt(getCurTime());
		}
		break;
	case RPC_SETCURTIME__INT_:
		{
			setCurTime(inv->getSignedIntParameter());
		}
		break;
	case RPC_SETTIMESTAMP__INT_:
		{
			setTimeStamp(inv->getSignedIntParameter());
		}
		break;
	case RPC_SETKEY__STRING_:
		{
			String k; 
			setKey(inv->getAsciiParameter(k));
		}
		break;
	case RPC_SETSCREENPLAY__STRING_:
		{
			String sp; 
			setScreenplay(inv->getAsciiParameter(sp));
		}
		break;
	case RPC_SETOBJECT__SCENEOBJECT_:
		{
			setObject(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			notifyLoadFromDatabase();
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int PersistentEventAdapter::getTimeStamp() {
	return (static_cast<PersistentEvent*>(stub))->getTimeStamp();
}

const String PersistentEventAdapter::getKey() {
	return (static_cast<PersistentEvent*>(stub))->getKey();
}

const String PersistentEventAdapter::getScreenplay() {
	return (static_cast<PersistentEvent*>(stub))->getScreenplay();
}

SceneObject* PersistentEventAdapter::getObject() {
	return (static_cast<PersistentEvent*>(stub))->getObject();
}

int PersistentEventAdapter::getCurTime() {
	return (static_cast<PersistentEvent*>(stub))->getCurTime();
}

void PersistentEventAdapter::setCurTime(int time) {
	(static_cast<PersistentEvent*>(stub))->setCurTime(time);
}

void PersistentEventAdapter::setTimeStamp(int stamp) {
	(static_cast<PersistentEvent*>(stub))->setTimeStamp(stamp);
}

void PersistentEventAdapter::setKey(const String& k) {
	(static_cast<PersistentEvent*>(stub))->setKey(k);
}

void PersistentEventAdapter::setScreenplay(const String& sp) {
	(static_cast<PersistentEvent*>(stub))->setScreenplay(sp);
}

void PersistentEventAdapter::setObject(SceneObject* o) {
	(static_cast<PersistentEvent*>(stub))->setObject(o);
}

void PersistentEventAdapter::notifyLoadFromDatabase() {
	(static_cast<PersistentEvent*>(stub))->notifyLoadFromDatabase();
}

/*
 *	PersistentEventHelper
 */

PersistentEventHelper* PersistentEventHelper::staticInitializer = PersistentEventHelper::instance();

PersistentEventHelper::PersistentEventHelper() {
	className = "PersistentEvent";

	Core::getObjectBroker()->registerClass(className, this);
}

void PersistentEventHelper::finalizeHelper() {
	PersistentEventHelper::finalize();
}

DistributedObject* PersistentEventHelper::instantiateObject() {
	return new PersistentEvent(DummyConstructorParameter::instance());
}

DistributedObjectServant* PersistentEventHelper::instantiateServant() {
	return new PersistentEventImplementation();
}

DistributedObjectAdapter* PersistentEventHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PersistentEventAdapter(static_cast<PersistentEvent*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

