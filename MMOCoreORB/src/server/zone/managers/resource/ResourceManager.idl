/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.managers.resource;

import engine.core.ManagedObject;
import engine.lua.Lua;
import engine.log.Logger;
import server.zone.ZoneServer;
import server.zone.Zone;
import server.zone.ZoneProcessServer;
import server.zone.managers.object.ObjectManager;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.resource.ResourceContainer;
import engine.service.proto.BaseMessage;
import engine.util.Observer;
import engine.util.Observable;
import server.zone.objects.player.sui.listbox.SuiListBox;

include server.zone.managers.resource.resourcespawner.ResourceSpawner;
include server.zone.managers.resource.resourcespawner.resourcetree.ResourceTree;
include server.zone.packets.resource.ResourceListForSurveyMessage;
include server.zone.objects.resource.ResourceSpawn;

/**
 * The resource manager handles all aspects of in game resources
 * within the Core3 environment
 */
class ResourceManager extends Observer implements Logger {
	private transient ZoneProcessServer processor;
	@weakReference
	private ZoneServer zoneServer;
	private transient ResourceSpawner resourceSpawner;
	private transient ObjectManager objectManager;
	private transient int shiftInterval;
	private transient Lua lua;
	
	public static final int RESOURCE_DEED_QUANTITY = 100000;
	
	public ResourceManager(ZoneServer server, ZoneProcessServer impl, 
			ObjectManager objectMan) {

		Logger.setLoggingName("ResourceManager");
		
		Logger.setLogging(true);
		Logger.setGlobalLogging(true);
		
		zoneServer = server;
		processor = impl;
		objectManager = objectMan;
	
		resourceSpawner = new ResourceSpawner(server, impl, objectMan);
	
		Logger.info("ResourceManager started");
	}
	
	
	public native void stop();
	public native void initialize();
	public native void shiftResources();
	
	public native int notifyObserverEvent(unsigned int eventType, Observable observable, ManagedObject arg1, long arg2);
	
	public native int getResourceRecycleType(ResourceSpawn resource);	

	public native void sendResourceListForSurvey(CreatureObject playerCreature, final int toolType, final string surveyType);
	public native void sendSurvey(CreatureObject playerCreature, final string resname);
	public native void sendSample(CreatureObject playerCreature, final string resname, final string sampleAnimation);
	
	public native ResourceContainer harvestResource(CreatureObject player, final string type, final int quantity);
	public native void harvestResourceToPlayer(CreatureObject player, ResourceSpawn resourceSpawn, final int quantity);
	
	public native unsigned int getAvailablePowerFromPlayer(CreatureObject player);
	public native void removePowerFromPlayer(CreatureObject player, unsigned int power);
	
	@local
	public native void getResourceListByType(@dereferenced Vector<ResourceSpawn> list, int type, final string zoneName);
	
	public native void createResourceSpawn(CreatureObject playerCreature, final string restype);
	public native void givePlayerResource(CreatureObject playerCreature, final string restype, final int quantity);

	public native ResourceSpawn getCurrentSpawn(final string restype, final string zoneName);
	public native ResourceSpawn getResourceSpawn(final string spawnName);
	
	private native boolean loadConfigFile();
	private native boolean loadConfigData();
	private native void loadDefaultConfig();
	
	private native void startResourceSpawner();

	public native boolean isRecycledResource(ResourceSpawn resource);

	public native ResourceSpawn getRecycledVersion(ResourceSpawn resource);
	
	/// Resource Deed Methods
	public native void addNodeToListBox(SuiListBox sui, final string nodeName);
	public native string addParentNodeToListBox(SuiListBox sui, final string currentNode);

	public native void listResourcesForPlanetOnScreen(CreatureObject creature, final string planet);

	public native string healthCheck(); 
	
	public native string dumpResources();
	
	public native string despawnResource(string resourceName);

}

