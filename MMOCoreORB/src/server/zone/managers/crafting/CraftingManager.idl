/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.managers.crafting;

import system.util.VectorMap;

import engine.lua.Lua;

import server.zone.objects.player.PlayerObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.manufactureschematic.ManufactureSchematic;
import server.zone.objects.draftschematic.DraftSchematic;
import system.util.Vector;
import server.zone.managers.ZoneManager;
import server.zone.managers.crafting.labratories.SharedLabratory;
import server.zone.objects.tangible.TangibleObject;
include server.zone.managers.crafting.schematicmap.SchematicMap;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;

class CraftingManager extends ZoneManager {
	private transient SchematicMap schematicMap;
	
	// Ingredient math types
	public static final short RESOURCECOMBINE = 0x00;
	public static final short LINEARCOMBINE = 0x01;
	public static final short PERCENTAGECOMBINE = 0x02;
	public static final short BITSETCOMBINE = 0x03;
	public static final short OVERRIDECOMBINE = 0x04;
	
	public static final short CR = 1;
	public static final short CD = 2;
	public static final short DR = 3;
	public static final short HR = 4;
	public static final short FL = 5;
	public static final short MA = 6;
	public static final short PE = 7;
	public static final short OQ = 8;
	public static final short SR = 9;
	public static final short UT = 10;
	
	public static final short AMAZINGSUCCESS = 0;
	public static final short GREATSUCCESS = 1;
	public static final short GOODSUCCESS = 2;
	public static final short MODERATESUCCESS = 3;
	public static final short SUCCESS = 4;
	public static final short MARGINALSUCCESS = 5;
	public static final short OK = 6;
	public static final short BARELYSUCCESSFUL = 7;
	public static final short CRITICALFAILURE = 8;
	
	public static final int RESOURCE_LAB = 0x00;
	public static final int GENETIC_LAB = 0x01;
	
	
	@dereferenced
	private transient SortedVector<string> bioMods;
	
	@dereferenced
	private transient HashTable<int, Reference<SharedLabratory> > labs;
	
	public CraftingManager() {
		super("CraftingManager");
	}
	
	@local
	public native void initialize();
		
	@local 
	public native void awardSchematicGroup(PlayerObject playerObject, @dereferenced Vector<string> schematicgroups, boolean updateClient = false);
	
	@local
	public native void removeSchematicGroup(PlayerObject playerObject, @dereferenced Vector<string> schematicgroups, boolean updateClient = false);
	
	public DraftSchematic getSchematic(unsigned int schematicID) {
		return schematicMap.get(schematicID);
	}
	
	public native void sendDraftSlotsTo(CreatureObject player, unsigned int schematicID);
	
	public native void sendResourceWeightsTo(CreatureObject player, unsigned int schematicID);
	
	public native int calculateAssemblySuccess(CreatureObject player, DraftSchematic draftSchematic, float effectiveness);
	
	@local
	public native void experimentRow(ManufactureSchematic schematic, CraftingValues craftingValues, int rowEffected, int pointsAttempted, 
			float failure, int experimentationResult);
	
	public native int calculateExperimentationFailureRate(CreatureObject player, ManufactureSchematic manufactureSchematic, int pointsUsed);
	
	public native int calculateExperimentationSuccess(CreatureObject player, DraftSchematic draftSchematic, float effectiveness);
	
	public native string generateSerial();

	private native boolean loadBioSkillMods();

	public native string checkBioSkillMods(final string property);
	
	private native void configureLabratories();
	
	public native void setInitialCraftingValues(TangibleObject prototype, ManufactureSchematic manufactureSchematic, int assemblySuccess);
	public native boolean allowManufactureSchematic(ManufactureSchematic manufactureSchematic);
}
