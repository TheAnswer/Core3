/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.managers.auction;

import engine.core.ManagedObject;
import system.util.VectorMap;
import server.zone.objects.auction.AuctionItem;
import server.zone.objects.creature.CreatureObject;
include server.zone.managers.auction.AuctionTerminalMap;
include server.zone.managers.auction.TerminalListVector;
include server.zone.managers.auction.CommoditiesLimit;

class AuctionsMap extends ManagedObject {
	
	@dereferenced
	protected transient AuctionTerminalMap vendorItemsForSale;
	
	@dereferenced
	protected transient AuctionTerminalMap bazaarItemsForSale;

	@dereferenced
	protected transient VectorMap<unsigned long, AuctionItem> allItems;
	
	@dereferenced
	CommoditiesLimit commoditiesLimit;
	
	@dereferenced
	protected transient Logger logger;
	
	public AuctionsMap() {
		allItems.setNullValue(null);
		allItems.setNoDuplicateInsertPlan();

		commoditiesLimit.setNoDuplicateInsertPlan();

		logger.setLoggingName("AuctionsMap");
		logger.setGlobalLogging(true);
		logger.setLogging(true);
	}

	public native int addItem(CreatureObject player, SceneObject vendor, AuctionItem item);
	private native int addVendorItem(CreatureObject player, final string planet, final string region, SceneObject vendor, AuctionItem item);
	private native int addBazaarItem(CreatureObject player, final string planet, final string region, SceneObject vendor, AuctionItem item);

	public native void deleteItem(SceneObject vendor, AuctionItem item);
	private native void removeVendorItem(SceneObject vendor, AuctionItem item);
	private native void removeBazaarItem(SceneObject vendor, AuctionItem item);

	
	public synchronized AuctionItem getItem(unsigned long id) {
		return allItems.get(id);
	}
	
	public synchronized boolean containsItem(unsigned long id) {
		return allItems.contains(id);
	}

	@local
	@dereferenced
	public native TerminalListVector getVendorTerminalData(final string planet, final string region, SceneObject vendor);
	
	@local
	@dereferenced
	public native TerminalListVector getBazaarTerminalData(final string planet, final string region, SceneObject vendor);

	public native int getPlayerItemCount(CreatureObject player);

	public native int getVendorItemCount(SceneObject vendor, boolean forSaleOnly = false);
	
	public native void deleteTerminalItems(SceneObject vendor);
	
	public native int getCommodityCount(CreatureObject player);
	
	public native void updateUID(SceneObject vendor, final string oldUID, final string newUID);

	public native void updateVendorSearch(SceneObject vendor, boolean enabled);

	public native void addToCommodityLimit(AuctionItem item);
	
	public native void removeFromCommodityLimit(AuctionItem item);
	
	public synchronized int getBazaarCount() {
		return bazaarItemsForSale.size();
	}
	
	public int getVendorCount() {
		return vendorItemsForSale.size();
	}
	
	public int getTotalItemCount() {
		return allItems.size();
	}
}
