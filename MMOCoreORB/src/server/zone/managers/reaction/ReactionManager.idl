/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.managers.reaction;

import engine.core.ManagedService;
import engine.log.Logger;
import engine.lua.Lua;
import server.zone.ZoneServer;
import server.zone.Zone;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.AiAgent;
import server.zone.objects.scene.SceneObject;
import system.util.VectorMap;
import system.util.Vector;
include server.zone.managers.reaction.EmoteReactionFine;
include server.zone.managers.reaction.ReactionRankData;

class ReactionManager extends ManagedService implements Logger {
	private transient ZoneServer zoneServer;

	@dereferenced
	protected transient Vector<Reference<EmoteReactionFine> > emoteReactionFines;

	@dereferenced
	protected transient Vector<Reference<ReactionRankData> > reactionRankData;

	@dereferenced
	private transient VectorMap<string, int> reactionEmotes;

	// chat reaction types
	public static final int ALERT = 0;
	public static final int ALLY = 1;
	public static final int ASSIST = 2;
	public static final int ATTACKED = 3;
	public static final int BYE = 4;
	public static final int CALM = 5;
	public static final int DEATH = 6;
	public static final int FLEE = 7;
	public static final int GLOAT = 8;
	public static final int HELP = 9;
	public static final int HI = 10;
	public static final int HIT = 11;
	public static final int HITTARGET = 12;
	public static final int THREAT = 13;

	// chat reaction states
	public static final int NONE = 0;
	public static final int NICE = 1;
	public static final int MID = 2;
	public static final int MEAN = 3;
	
	public ReactionManager(ZoneServer zserv) {
		Logger.setLoggingName("ReactionManager");
		Logger.setLogging(true);

		zoneServer = zserv;
	}

	public native int getReactionLevel(final string emote) {
		if (reactionEmotes.contains(emote))
			return reactionEmotes.get(emote);

		return 0;
	}

	public native void loadLuaConfig();

	/**
	 * Sends a chat message
	 * @pre { npc is locked }
	 * @post { npc is locked }
	 * @param npc: the npc that sends the message
	 * @param type: the type of reaction the message is in response to
	 * @param state: the state of the reaction
	 * @param force: if true, 100% chance to send the chat
	 */
	@arg1preLocked
	public native void sendChatReaction(AiAgent npc, int type, int state = 0, boolean force = false);

	@local
	public native EmoteReactionFine getEmoteReactionFine(CreatureObject emoteUser, AiAgent emoteTarget, int reactionLevel);

	@local
	public native ReactionRankData getReactionRankData(final string name);

	public native string getReactionQuip(int num);

	public native void emoteReaction(CreatureObject emoteUser, AiAgent emoteTarget, int emoteid);

	public native void doKnockdown(CreatureObject victim, AiAgent attacker);
}
