/*
 *	server/zone/managers/planet/PlanetManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "PlanetManager.h"

#include "server/zone/Zone.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/region/CityRegion.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/managers/weather/WeatherManager.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/area/ActiveArea.h"

/*
 *	PlanetManagerStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__,RPC_FINALIZE__,RPC_INITIALIZE__,RPC_LOADCLIENTREGIONS__,RPC_LOADCLIENTPOIDATA__,RPC_LOADBADGEAREAS__,RPC_LOADPERFORMANCELOCATIONS__,RPC_ISBUILDINGPERMITTEDAT__FLOAT_FLOAT_SCENEOBJECT_,RPC_ISCAMPINGPERMITTEDAT__FLOAT_FLOAT_FLOAT_,RPC_FINDOBJECTTOOCLOSETODECORATION__FLOAT_FLOAT_FLOAT_,RPC_ISINRANGEWITHPOI__FLOAT_FLOAT_FLOAT_,RPC_ISINOBJECTSNOBUILDZONE__FLOAT_FLOAT_FLOAT_,RPC_GETTRAVELFARE__STRING_STRING_,RPC_SENDPLANETTRAVELPOINTLISTRESPONSE__CREATUREOBJECT_,RPC_CREATETICKET__STRING_STRING_STRING_,RPC_VALIDATEREGIONNAME__STRING_,RPC_VALIDATECLIENTCITYINRANGE__CREATUREOBJECT_FLOAT_FLOAT_,RPC_GETWEATHERMANAGER__,RPC_GETREGIONCOUNT__,RPC_GETNUMBEROFCITIES__,RPC_INCREASENUMBEROFCITIES__,RPC_GETREGION__INT_,RPC_GETREGION__STRING_,RPC_GETREGIONAT__FLOAT_FLOAT_,RPC_ADDREGION__CITYREGION_,RPC_DROPREGION__STRING_,RPC_HASREGION__STRING_,RPC_ADDPERFORMANCELOCATION__SCENEOBJECT_,RPC_ISEXISTINGPLANETTRAVELPOINT__STRING_,RPC_ISINTERPLANETARYTRAVELALLOWED__STRING_,RPC_ISINCOMINGTRAVELALLOWED__STRING_,RPC_ISTRAVELTOLOCATIONPERMITTED__STRING_STRING_STRING_,RPC_SCHEDULESHUTTLE__CREATUREOBJECT_INT_,RPC_REMOVESHUTTLE__CREATUREOBJECT_,RPC_CHECKSHUTTLESTATUS__CREATUREOBJECT_CREATUREOBJECT_,RPC_ISINWATER__FLOAT_FLOAT_,RPC_REMOVEPLAYERCITYTRAVELPOINT__STRING_};

PlanetManager::PlanetManager(Zone* planet, ZoneProcessServer* srv) : ManagedService(DummyConstructorParameter::instance()) {
	PlanetManagerImplementation* _implementation = new PlanetManagerImplementation(planet, srv);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("PlanetManager");
}

PlanetManager::PlanetManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("PlanetManager");
}

PlanetManager::~PlanetManager() {
}



void PlanetManager::initializeTransientMembers() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void PlanetManager::initialize() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

void PlanetManager::loadClientRegions() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADCLIENTREGIONS__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadClientRegions();
}

void PlanetManager::loadClientPoiData() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADCLIENTPOIDATA__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadClientPoiData();
}

void PlanetManager::loadBadgeAreas() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADBADGEAREAS__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadBadgeAreas();
}

void PlanetManager::loadPerformanceLocations() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADPERFORMANCELOCATIONS__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadPerformanceLocations();
}

PlanetTravelPoint* PlanetManager::getNearestPlanetTravelPoint(SceneObject* object, float range) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getNearestPlanetTravelPoint(object, range);
}

PlanetTravelPoint* PlanetManager::getNearestPlanetTravelPoint(const Vector3& position, float range) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getNearestPlanetTravelPoint(position, range);
}

bool PlanetManager::isBuildingPermittedAt(float x, float y, SceneObject* objectTryingToBuild) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBUILDINGPERMITTEDAT__FLOAT_FLOAT_SCENEOBJECT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addObjectParameter(objectTryingToBuild);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBuildingPermittedAt(x, y, objectTryingToBuild);
}

bool PlanetManager::isCampingPermittedAt(float x, float y, float margin) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCAMPINGPERMITTEDAT__FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(margin);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCampingPermittedAt(x, y, margin);
}

Reference<SceneObject* > PlanetManager::findObjectTooCloseToDecoration(float x, float y, float margin) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FINDOBJECTTOOCLOSETODECORATION__FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(margin);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->findObjectTooCloseToDecoration(x, y, margin);
}

bool PlanetManager::isInRangeWithPoi(float x, float y, float range) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINRANGEWITHPOI__FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(range);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInRangeWithPoi(x, y, range);
}

bool PlanetManager::isInObjectsNoBuildZone(float x, float y, float extraMargin) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINOBJECTSNOBUILDZONE__FLOAT_FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(extraMargin);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInObjectsNoBuildZone(x, y, extraMargin);
}

int PlanetManager::getTravelFare(const String& departurePlanet, const String& arrivalPlanet) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTRAVELFARE__STRING_STRING_);
		method.addAsciiParameter(departurePlanet);
		method.addAsciiParameter(arrivalPlanet);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTravelFare(departurePlanet, arrivalPlanet);
}

void PlanetManager::sendPlanetTravelPointListResponse(CreatureObject* player) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDPLANETTRAVELPOINTLISTRESPONSE__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendPlanetTravelPointListResponse(player);
}

Reference<SceneObject* > PlanetManager::createTicket(const String& departurePoint, const String& arrivalPlanet, const String& arrivalPoint) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATETICKET__STRING_STRING_STRING_);
		method.addAsciiParameter(departurePoint);
		method.addAsciiParameter(arrivalPlanet);
		method.addAsciiParameter(arrivalPoint);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->createTicket(departurePoint, arrivalPlanet, arrivalPoint);
}

bool PlanetManager::validateRegionName(const String& name) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATEREGIONNAME__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->validateRegionName(name);
}

bool PlanetManager::validateClientCityInRange(CreatureObject* creatureObject, float x, float y) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_VALIDATECLIENTCITYINRANGE__CREATUREOBJECT_FLOAT_FLOAT_);
		method.addObjectParameter(creatureObject);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->validateClientCityInRange(creatureObject, x, y);
}

WeatherManager* PlanetManager::getWeatherManager() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETWEATHERMANAGER__);

		return static_cast<WeatherManager*>(method.executeWithObjectReturn());
	} else
		return _implementation->getWeatherManager();
}

TerrainManager* PlanetManager::getTerrainManager() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getTerrainManager();
}

int PlanetManager::getRegionCount() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGIONCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRegionCount();
}

int PlanetManager::getNumberOfCities() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNUMBEROFCITIES__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getNumberOfCities();
}

void PlanetManager::increaseNumberOfCities() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INCREASENUMBEROFCITIES__);

		method.executeWithVoidReturn();
	} else
		_implementation->increaseNumberOfCities();
}

CityRegion* PlanetManager::getRegion(int index) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGION__INT_);
		method.addSignedIntParameter(index);

		return static_cast<CityRegion*>(method.executeWithObjectReturn());
	} else
		return _implementation->getRegion(index);
}

CityRegion* PlanetManager::getRegion(const String& region) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGION__STRING_);
		method.addAsciiParameter(region);

		return static_cast<CityRegion*>(method.executeWithObjectReturn());
	} else
		return _implementation->getRegion(region);
}

CityRegion* PlanetManager::getRegionAt(float x, float y) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGIONAT__FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return static_cast<CityRegion*>(method.executeWithObjectReturn());
	} else
		return _implementation->getRegionAt(x, y);
}

void PlanetManager::addRegion(CityRegion* region) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDREGION__CITYREGION_);
		method.addObjectParameter(region);

		method.executeWithVoidReturn();
	} else
		_implementation->addRegion(region);
}

void PlanetManager::dropRegion(const String& region) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPREGION__STRING_);
		method.addAsciiParameter(region);

		method.executeWithVoidReturn();
	} else
		_implementation->dropRegion(region);
}

bool PlanetManager::hasRegion(const String& name) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASREGION__STRING_);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasRegion(name);
}

void PlanetManager::addPerformanceLocation(SceneObject* obj) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPERFORMANCELOCATION__SCENEOBJECT_);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		_implementation->addPerformanceLocation(obj);
}

MissionTargetMap* PlanetManager::getPerformanceLocations() {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getPerformanceLocations();
}

bool PlanetManager::isExistingPlanetTravelPoint(const String& pointName) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISEXISTINGPLANETTRAVELPOINT__STRING_);
		method.addAsciiParameter(pointName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isExistingPlanetTravelPoint(pointName);
}

bool PlanetManager::isInterplanetaryTravelAllowed(const String& pointName) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINTERPLANETARYTRAVELALLOWED__STRING_);
		method.addAsciiParameter(pointName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInterplanetaryTravelAllowed(pointName);
}

bool PlanetManager::isIncomingTravelAllowed(const String& pointName) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINCOMINGTRAVELALLOWED__STRING_);
		method.addAsciiParameter(pointName);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isIncomingTravelAllowed(pointName);
}

PlanetTravelPoint* PlanetManager::getPlanetTravelPoint(const String& pointName) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getPlanetTravelPoint(pointName);
}

bool PlanetManager::isTravelToLocationPermitted(const String& destinationPoint, const String& arrivalPlanet, const String& arrivalPoint) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTRAVELTOLOCATIONPERMITTED__STRING_STRING_STRING_);
		method.addAsciiParameter(destinationPoint);
		method.addAsciiParameter(arrivalPlanet);
		method.addAsciiParameter(arrivalPoint);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTravelToLocationPermitted(destinationPoint, arrivalPlanet, arrivalPoint);
}

void PlanetManager::scheduleShuttle(CreatureObject* shuttle, int shuttleType) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SCHEDULESHUTTLE__CREATUREOBJECT_INT_);
		method.addObjectParameter(shuttle);
		method.addSignedIntParameter(shuttleType);

		method.executeWithVoidReturn();
	} else
		_implementation->scheduleShuttle(shuttle, shuttleType);
}

void PlanetManager::removeShuttle(CreatureObject* shuttle) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESHUTTLE__CREATUREOBJECT_);
		method.addObjectParameter(shuttle);

		method.executeWithVoidReturn();
	} else
		_implementation->removeShuttle(shuttle);
}

bool PlanetManager::checkShuttleStatus(CreatureObject* creature, CreatureObject* shuttle) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CHECKSHUTTLESTATUS__CREATUREOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(creature);
		method.addObjectParameter(shuttle);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->checkShuttleStatus(creature, shuttle);
}

bool PlanetManager::isInWater(float x, float y) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINWATER__FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInWater(x, y);
}

float PlanetManager::findClosestWorldFloor(float x, float y, float z, float swimHeight, IntersectionResults* intersections, CloseObjectsVector* closeObjects) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->findClosestWorldFloor(x, y, z, swimHeight, intersections, closeObjects);
}

void PlanetManager::addPlayerCityTravelPoint(PlanetTravelPoint* ptp) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addPlayerCityTravelPoint(ptp);
}

void PlanetManager::removePlayerCityTravelPoint(const String& cityName) {
	PlanetManagerImplementation* _implementation = static_cast<PlanetManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPLAYERCITYTRAVELPOINT__STRING_);
		method.addAsciiParameter(cityName);

		method.executeWithVoidReturn();
	} else
		_implementation->removePlayerCityTravelPoint(cityName);
}

DistributedObjectServant* PlanetManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* PlanetManager::_getImplementationForRead() {
	return _impl;
}

void PlanetManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	PlanetManagerImplementation
 */

PlanetManagerImplementation::PlanetManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


PlanetManagerImplementation::~PlanetManagerImplementation() {
	PlanetManagerImplementation::finalize();
}


void PlanetManagerImplementation::_initializeImplementation() {
	_setClassHelper(PlanetManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void PlanetManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<PlanetManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* PlanetManagerImplementation::_getStub() {
	return _this.get();
}

PlanetManagerImplementation::operator const PlanetManager*() {
	return _this.get();
}

void PlanetManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void PlanetManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void PlanetManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void PlanetManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void PlanetManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void PlanetManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void PlanetManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void PlanetManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("PlanetManager");

}

void PlanetManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(PlanetManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool PlanetManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x11df934a: //PlanetManager.zone
		TypeInfo<ManagedReference<Zone* > >::parseFromBinaryStream(&zone, stream);
		return true;

	case 0x7bb5f7eb: //PlanetManager.regionMap
		TypeInfo<RegionMap >::parseFromBinaryStream(&regionMap, stream);
		return true;

	case 0x154256c5: //PlanetManager.travelFares
		TypeInfo<TravelFare >::parseFromBinaryStream(&travelFares, stream);
		return true;

	case 0x354b472c: //PlanetManager.planetTravelPointList
		TypeInfo<Reference<PlanetTravelPointList* > >::parseFromBinaryStream(&planetTravelPointList, stream);
		return true;

	case 0x7f1b36da: //PlanetManager.shuttleportAwayTime
		TypeInfo<int >::parseFromBinaryStream(&shuttleportAwayTime, stream);
		return true;

	case 0x69500c87: //PlanetManager.shuttleportLandedTime
		TypeInfo<int >::parseFromBinaryStream(&shuttleportLandedTime, stream);
		return true;

	case 0xe347989a: //PlanetManager.shuttleportLandingTime
		TypeInfo<int >::parseFromBinaryStream(&shuttleportLandingTime, stream);
		return true;

	case 0x29b5da5a: //PlanetManager.starportAwayTime
		TypeInfo<int >::parseFromBinaryStream(&starportAwayTime, stream);
		return true;

	case 0xfcb0b27a: //PlanetManager.starportLandedTime
		TypeInfo<int >::parseFromBinaryStream(&starportLandedTime, stream);
		return true;

	case 0x3121356f: //PlanetManager.starportLandingTime
		TypeInfo<int >::parseFromBinaryStream(&starportLandingTime, stream);
		return true;

	case 0xe9542cff: //PlanetManager.weatherManager
		TypeInfo<ManagedReference<WeatherManager* > >::parseFromBinaryStream(&weatherManager, stream);
		return true;

	case 0xe36eb8b: //PlanetManager.numberOfCities
		TypeInfo<int >::parseFromBinaryStream(&numberOfCities, stream);
		return true;

	}

	return false;
}

void PlanetManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = PlanetManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int PlanetManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x11df934a; //PlanetManager.zone
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<Zone* > >::toBinaryStream(&zone, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7bb5f7eb; //PlanetManager.regionMap
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<RegionMap >::toBinaryStream(&regionMap, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x154256c5; //PlanetManager.travelFares
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<TravelFare >::toBinaryStream(&travelFares, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x354b472c; //PlanetManager.planetTravelPointList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Reference<PlanetTravelPointList* > >::toBinaryStream(&planetTravelPointList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7f1b36da; //PlanetManager.shuttleportAwayTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&shuttleportAwayTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x69500c87; //PlanetManager.shuttleportLandedTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&shuttleportLandedTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe347989a; //PlanetManager.shuttleportLandingTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&shuttleportLandingTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x29b5da5a; //PlanetManager.starportAwayTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&starportAwayTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xfcb0b27a; //PlanetManager.starportLandedTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&starportLandedTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3121356f; //PlanetManager.starportLandingTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&starportLandingTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe9542cff; //PlanetManager.weatherManager
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<WeatherManager* > >::toBinaryStream(&weatherManager, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe36eb8b; //PlanetManager.numberOfCities
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&numberOfCities, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 12;
}

PlanetManagerImplementation::PlanetManagerImplementation(Zone* planet, ZoneProcessServer* srv) {
	_initializeImplementation();
	Reference<TerrainManager*> _ref0;
	Reference<PlanetTravelPointList*> _ref1;
	// server/zone/managers/planet/PlanetManager.idl():  		zone = planet;
	zone = planet;
	// server/zone/managers/planet/PlanetManager.idl():  		server = srv;
	server = srv;
	// server/zone/managers/planet/PlanetManager.idl():  		Logger.setLoggingName("PlanetManager " + zone.getZoneName());
	Logger::setLoggingName("PlanetManager " + zone->getZoneName());
	// server/zone/managers/planet/PlanetManager.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/managers/planet/PlanetManager.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/managers/planet/PlanetManager.idl():  		terrainManager = new TerrainManager(zone);
	terrainManager = _ref0 = new TerrainManager(zone);
	// server/zone/managers/planet/PlanetManager.idl():  		}
	if (terrainManager->initialize("terrain/" + zone->getZoneName() + ".trn")){
	// server/zone/managers/planet/PlanetManager.idl():  			Logger.info("Loaded terrain file successfully.");
	Logger::info("Loaded terrain file successfully.");
}

	else {
	// server/zone/managers/planet/PlanetManager.idl():  			Logger.error("Failed to load terrain file.");
	Logger::error("Failed to load terrain file.");
}
	// server/zone/managers/planet/PlanetManager.idl():  		numberOfCities = 0;
	numberOfCities = 0;
	// server/zone/managers/planet/PlanetManager.idl():  		shuttleportAwayTime = 300;
	shuttleportAwayTime = 300;
	// server/zone/managers/planet/PlanetManager.idl():  		shuttleportLandedTime = 120;
	shuttleportLandedTime = 120;
	// server/zone/managers/planet/PlanetManager.idl():  		shuttleportLandingTime = 11;
	shuttleportLandingTime = 11;
	// server/zone/managers/planet/PlanetManager.idl():  		starportAwayTime = 60;
	starportAwayTime = 60;
	// server/zone/managers/planet/PlanetManager.idl():  		starportLandedTime = 120;
	starportLandedTime = 120;
	// server/zone/managers/planet/PlanetManager.idl():  		starportLandingTime = 14;
	starportLandingTime = 14;
	// server/zone/managers/planet/PlanetManager.idl():  		weatherManager = null;
	weatherManager = NULL;
	// server/zone/managers/planet/PlanetManager.idl():  		travelFares.setNoDuplicateInsertPlan();
	(&travelFares)->setNoDuplicateInsertPlan();
	// server/zone/managers/planet/PlanetManager.idl():  		planetTravelPointList = new PlanetTravelPointList();
	planetTravelPointList = _ref1 = new PlanetTravelPointList();
}

WeatherManager* PlanetManagerImplementation::getWeatherManager() {
	// server/zone/managers/planet/PlanetManager.idl():  		return weatherManager;
	return weatherManager;
}

TerrainManager* PlanetManagerImplementation::getTerrainManager() {
	// server/zone/managers/planet/PlanetManager.idl():  		return terrainManager;
	return terrainManager;
}

int PlanetManagerImplementation::getRegionCount() {
	// server/zone/managers/planet/PlanetManager.idl():  		return regionMap.getTotalRegions();
	return (&regionMap)->getTotalRegions();
}

int PlanetManagerImplementation::getNumberOfCities() {
	// server/zone/managers/planet/PlanetManager.idl():  		return numberOfCities;
	return numberOfCities;
}

void PlanetManagerImplementation::increaseNumberOfCities() {
	// server/zone/managers/planet/PlanetManager.idl():  		numberOfCities = numberOfCities + 1;
	numberOfCities = numberOfCities + 1;
}

CityRegion* PlanetManagerImplementation::getRegion(int index) {
	// server/zone/managers/planet/PlanetManager.idl():  		return regionMap.getRegion(index);
	return (&regionMap)->getRegion(index);
}

CityRegion* PlanetManagerImplementation::getRegion(const String& region) {
	// server/zone/managers/planet/PlanetManager.idl():  		return regionMap.getRegion(region);
	return (&regionMap)->getRegion(region);
}

CityRegion* PlanetManagerImplementation::getRegionAt(float x, float y) {
	// server/zone/managers/planet/PlanetManager.idl():  		return regionMap.getRegionAt(x, y);
	return (&regionMap)->getRegionAt(x, y);
}

void PlanetManagerImplementation::addRegion(CityRegion* region) {
	Locker _locker(_this.get());
	// server/zone/managers/planet/PlanetManager.idl():  		regionMap.addRegion(region);
	(&regionMap)->addRegion(region);
}

void PlanetManagerImplementation::dropRegion(const String& region) {
	Locker _locker(_this.get());
	// server/zone/managers/planet/PlanetManager.idl():  		regionMap.dropRegion(region);
	(&regionMap)->dropRegion(region);
}

bool PlanetManagerImplementation::hasRegion(const String& name) {
	// server/zone/managers/planet/PlanetManager.idl():  		return regionMap.containsRegion(name);
	return (&regionMap)->containsRegion(name);
}

void PlanetManagerImplementation::addPerformanceLocation(SceneObject* obj) {
	// server/zone/managers/planet/PlanetManager.idl():  		performanceLocations.add(obj);
	performanceLocations->add(obj);
}

MissionTargetMap* PlanetManagerImplementation::getPerformanceLocations() {
	// server/zone/managers/planet/PlanetManager.idl():  		return performanceLocations;
	return performanceLocations;
}

bool PlanetManagerImplementation::isExistingPlanetTravelPoint(const String& pointName) {
	// server/zone/managers/planet/PlanetManager.idl():  		return planetTravelPointList.contains(pointName);
	return planetTravelPointList->contains(pointName);
}

bool PlanetManagerImplementation::isInterplanetaryTravelAllowed(const String& pointName) {
	// server/zone/managers/planet/PlanetManager.idl():  		PlanetTravelPoint ptp = planetTravelPointList.get(pointName);
	PlanetTravelPoint* ptp = planetTravelPointList->get(pointName);
	// server/zone/managers/planet/PlanetManager.idl():  		return 
	if (ptp == NULL)	// server/zone/managers/planet/PlanetManager.idl():  			return false;
	return false;
	// server/zone/managers/planet/PlanetManager.idl():  		return ptp.isInterplanetary();
	return ptp->isInterplanetary();
}

bool PlanetManagerImplementation::isIncomingTravelAllowed(const String& pointName) {
	// server/zone/managers/planet/PlanetManager.idl():  		PlanetTravelPoint ptp = planetTravelPointList.get(pointName);
	PlanetTravelPoint* ptp = planetTravelPointList->get(pointName);
	// server/zone/managers/planet/PlanetManager.idl():  		return 
	if (ptp == NULL)	// server/zone/managers/planet/PlanetManager.idl():  			return false;
	return false;
	// server/zone/managers/planet/PlanetManager.idl():  		return ptp.isIncomingAllowed();
	return ptp->isIncomingAllowed();
}

PlanetTravelPoint* PlanetManagerImplementation::getPlanetTravelPoint(const String& pointName) {
	// server/zone/managers/planet/PlanetManager.idl():  		return planetTravelPointList.get(pointName);
	return planetTravelPointList->get(pointName);
}

void PlanetManagerImplementation::removeShuttle(CreatureObject* shuttle) {
	Locker _locker(_this.get());
	// server/zone/managers/planet/PlanetManager.idl():  		shuttleMap.drop(shuttle.getObjectID());
	(&shuttleMap)->drop(shuttle->getObjectID());
}

/*
 *	PlanetManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


PlanetManagerAdapter::PlanetManagerAdapter(PlanetManager* obj) : ManagedServiceAdapter(obj) {
}

void PlanetManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_FINALIZE__:
		{
			finalize();
		}
		break;
	case RPC_INITIALIZE__:
		{
			initialize();
		}
		break;
	case RPC_LOADCLIENTREGIONS__:
		{
			loadClientRegions();
		}
		break;
	case RPC_LOADCLIENTPOIDATA__:
		{
			loadClientPoiData();
		}
		break;
	case RPC_LOADBADGEAREAS__:
		{
			loadBadgeAreas();
		}
		break;
	case RPC_LOADPERFORMANCELOCATIONS__:
		{
			loadPerformanceLocations();
		}
		break;
	case RPC_ISBUILDINGPERMITTEDAT__FLOAT_FLOAT_SCENEOBJECT_:
		{
			resp->insertBoolean(isBuildingPermittedAt(inv->getFloatParameter(), inv->getFloatParameter(), static_cast<SceneObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_ISCAMPINGPERMITTEDAT__FLOAT_FLOAT_FLOAT_:
		{
			resp->insertBoolean(isCampingPermittedAt(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter()));
		}
		break;
	case RPC_FINDOBJECTTOOCLOSETODECORATION__FLOAT_FLOAT_FLOAT_:
		{
			resp->insertLong(findObjectTooCloseToDecoration(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter())->_getObjectID());
		}
		break;
	case RPC_ISINRANGEWITHPOI__FLOAT_FLOAT_FLOAT_:
		{
			resp->insertBoolean(isInRangeWithPoi(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter()));
		}
		break;
	case RPC_ISINOBJECTSNOBUILDZONE__FLOAT_FLOAT_FLOAT_:
		{
			resp->insertBoolean(isInObjectsNoBuildZone(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter()));
		}
		break;
	case RPC_GETTRAVELFARE__STRING_STRING_:
		{
			String departurePlanet; String arrivalPlanet; 
			resp->insertSignedInt(getTravelFare(inv->getAsciiParameter(departurePlanet), inv->getAsciiParameter(arrivalPlanet)));
		}
		break;
	case RPC_SENDPLANETTRAVELPOINTLISTRESPONSE__CREATUREOBJECT_:
		{
			sendPlanetTravelPointListResponse(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATETICKET__STRING_STRING_STRING_:
		{
			String departurePoint; String arrivalPlanet; String arrivalPoint; 
			resp->insertLong(createTicket(inv->getAsciiParameter(departurePoint), inv->getAsciiParameter(arrivalPlanet), inv->getAsciiParameter(arrivalPoint))->_getObjectID());
		}
		break;
	case RPC_VALIDATEREGIONNAME__STRING_:
		{
			String name; 
			resp->insertBoolean(validateRegionName(inv->getAsciiParameter(name)));
		}
		break;
	case RPC_VALIDATECLIENTCITYINRANGE__CREATUREOBJECT_FLOAT_FLOAT_:
		{
			resp->insertBoolean(validateClientCityInRange(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getFloatParameter(), inv->getFloatParameter()));
		}
		break;
	case RPC_GETWEATHERMANAGER__:
		{
			resp->insertLong(getWeatherManager()->_getObjectID());
		}
		break;
	case RPC_GETREGIONCOUNT__:
		{
			resp->insertSignedInt(getRegionCount());
		}
		break;
	case RPC_GETNUMBEROFCITIES__:
		{
			resp->insertSignedInt(getNumberOfCities());
		}
		break;
	case RPC_INCREASENUMBEROFCITIES__:
		{
			increaseNumberOfCities();
		}
		break;
	case RPC_GETREGION__INT_:
		{
			resp->insertLong(getRegion(inv->getSignedIntParameter())->_getObjectID());
		}
		break;
	case RPC_GETREGION__STRING_:
		{
			String region; 
			resp->insertLong(getRegion(inv->getAsciiParameter(region))->_getObjectID());
		}
		break;
	case RPC_GETREGIONAT__FLOAT_FLOAT_:
		{
			resp->insertLong(getRegionAt(inv->getFloatParameter(), inv->getFloatParameter())->_getObjectID());
		}
		break;
	case RPC_ADDREGION__CITYREGION_:
		{
			addRegion(static_cast<CityRegion*>(inv->getObjectParameter()));
		}
		break;
	case RPC_DROPREGION__STRING_:
		{
			String region; 
			dropRegion(inv->getAsciiParameter(region));
		}
		break;
	case RPC_HASREGION__STRING_:
		{
			String name; 
			resp->insertBoolean(hasRegion(inv->getAsciiParameter(name)));
		}
		break;
	case RPC_ADDPERFORMANCELOCATION__SCENEOBJECT_:
		{
			addPerformanceLocation(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ISEXISTINGPLANETTRAVELPOINT__STRING_:
		{
			String pointName; 
			resp->insertBoolean(isExistingPlanetTravelPoint(inv->getAsciiParameter(pointName)));
		}
		break;
	case RPC_ISINTERPLANETARYTRAVELALLOWED__STRING_:
		{
			String pointName; 
			resp->insertBoolean(isInterplanetaryTravelAllowed(inv->getAsciiParameter(pointName)));
		}
		break;
	case RPC_ISINCOMINGTRAVELALLOWED__STRING_:
		{
			String pointName; 
			resp->insertBoolean(isIncomingTravelAllowed(inv->getAsciiParameter(pointName)));
		}
		break;
	case RPC_ISTRAVELTOLOCATIONPERMITTED__STRING_STRING_STRING_:
		{
			String destinationPoint; String arrivalPlanet; String arrivalPoint; 
			resp->insertBoolean(isTravelToLocationPermitted(inv->getAsciiParameter(destinationPoint), inv->getAsciiParameter(arrivalPlanet), inv->getAsciiParameter(arrivalPoint)));
		}
		break;
	case RPC_SCHEDULESHUTTLE__CREATUREOBJECT_INT_:
		{
			scheduleShuttle(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_REMOVESHUTTLE__CREATUREOBJECT_:
		{
			removeShuttle(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CHECKSHUTTLESTATUS__CREATUREOBJECT_CREATUREOBJECT_:
		{
			resp->insertBoolean(checkShuttleStatus(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_ISINWATER__FLOAT_FLOAT_:
		{
			resp->insertBoolean(isInWater(inv->getFloatParameter(), inv->getFloatParameter()));
		}
		break;
	case RPC_REMOVEPLAYERCITYTRAVELPOINT__STRING_:
		{
			String cityName; 
			removePlayerCityTravelPoint(inv->getAsciiParameter(cityName));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void PlanetManagerAdapter::initializeTransientMembers() {
	(static_cast<PlanetManager*>(stub))->initializeTransientMembers();
}

void PlanetManagerAdapter::finalize() {
	(static_cast<PlanetManager*>(stub))->finalize();
}

void PlanetManagerAdapter::initialize() {
	(static_cast<PlanetManager*>(stub))->initialize();
}

void PlanetManagerAdapter::loadClientRegions() {
	(static_cast<PlanetManager*>(stub))->loadClientRegions();
}

void PlanetManagerAdapter::loadClientPoiData() {
	(static_cast<PlanetManager*>(stub))->loadClientPoiData();
}

void PlanetManagerAdapter::loadBadgeAreas() {
	(static_cast<PlanetManager*>(stub))->loadBadgeAreas();
}

void PlanetManagerAdapter::loadPerformanceLocations() {
	(static_cast<PlanetManager*>(stub))->loadPerformanceLocations();
}

bool PlanetManagerAdapter::isBuildingPermittedAt(float x, float y, SceneObject* objectTryingToBuild) {
	return (static_cast<PlanetManager*>(stub))->isBuildingPermittedAt(x, y, objectTryingToBuild);
}

bool PlanetManagerAdapter::isCampingPermittedAt(float x, float y, float margin) {
	return (static_cast<PlanetManager*>(stub))->isCampingPermittedAt(x, y, margin);
}

Reference<SceneObject* > PlanetManagerAdapter::findObjectTooCloseToDecoration(float x, float y, float margin) {
	return (static_cast<PlanetManager*>(stub))->findObjectTooCloseToDecoration(x, y, margin);
}

bool PlanetManagerAdapter::isInRangeWithPoi(float x, float y, float range) {
	return (static_cast<PlanetManager*>(stub))->isInRangeWithPoi(x, y, range);
}

bool PlanetManagerAdapter::isInObjectsNoBuildZone(float x, float y, float extraMargin) {
	return (static_cast<PlanetManager*>(stub))->isInObjectsNoBuildZone(x, y, extraMargin);
}

int PlanetManagerAdapter::getTravelFare(const String& departurePlanet, const String& arrivalPlanet) {
	return (static_cast<PlanetManager*>(stub))->getTravelFare(departurePlanet, arrivalPlanet);
}

void PlanetManagerAdapter::sendPlanetTravelPointListResponse(CreatureObject* player) {
	(static_cast<PlanetManager*>(stub))->sendPlanetTravelPointListResponse(player);
}

Reference<SceneObject* > PlanetManagerAdapter::createTicket(const String& departurePoint, const String& arrivalPlanet, const String& arrivalPoint) {
	return (static_cast<PlanetManager*>(stub))->createTicket(departurePoint, arrivalPlanet, arrivalPoint);
}

bool PlanetManagerAdapter::validateRegionName(const String& name) {
	return (static_cast<PlanetManager*>(stub))->validateRegionName(name);
}

bool PlanetManagerAdapter::validateClientCityInRange(CreatureObject* creatureObject, float x, float y) {
	return (static_cast<PlanetManager*>(stub))->validateClientCityInRange(creatureObject, x, y);
}

WeatherManager* PlanetManagerAdapter::getWeatherManager() {
	return (static_cast<PlanetManager*>(stub))->getWeatherManager();
}

int PlanetManagerAdapter::getRegionCount() {
	return (static_cast<PlanetManager*>(stub))->getRegionCount();
}

int PlanetManagerAdapter::getNumberOfCities() {
	return (static_cast<PlanetManager*>(stub))->getNumberOfCities();
}

void PlanetManagerAdapter::increaseNumberOfCities() {
	(static_cast<PlanetManager*>(stub))->increaseNumberOfCities();
}

CityRegion* PlanetManagerAdapter::getRegion(int index) {
	return (static_cast<PlanetManager*>(stub))->getRegion(index);
}

CityRegion* PlanetManagerAdapter::getRegion(const String& region) {
	return (static_cast<PlanetManager*>(stub))->getRegion(region);
}

CityRegion* PlanetManagerAdapter::getRegionAt(float x, float y) {
	return (static_cast<PlanetManager*>(stub))->getRegionAt(x, y);
}

void PlanetManagerAdapter::addRegion(CityRegion* region) {
	(static_cast<PlanetManager*>(stub))->addRegion(region);
}

void PlanetManagerAdapter::dropRegion(const String& region) {
	(static_cast<PlanetManager*>(stub))->dropRegion(region);
}

bool PlanetManagerAdapter::hasRegion(const String& name) {
	return (static_cast<PlanetManager*>(stub))->hasRegion(name);
}

void PlanetManagerAdapter::addPerformanceLocation(SceneObject* obj) {
	(static_cast<PlanetManager*>(stub))->addPerformanceLocation(obj);
}

bool PlanetManagerAdapter::isExistingPlanetTravelPoint(const String& pointName) {
	return (static_cast<PlanetManager*>(stub))->isExistingPlanetTravelPoint(pointName);
}

bool PlanetManagerAdapter::isInterplanetaryTravelAllowed(const String& pointName) {
	return (static_cast<PlanetManager*>(stub))->isInterplanetaryTravelAllowed(pointName);
}

bool PlanetManagerAdapter::isIncomingTravelAllowed(const String& pointName) {
	return (static_cast<PlanetManager*>(stub))->isIncomingTravelAllowed(pointName);
}

bool PlanetManagerAdapter::isTravelToLocationPermitted(const String& destinationPoint, const String& arrivalPlanet, const String& arrivalPoint) {
	return (static_cast<PlanetManager*>(stub))->isTravelToLocationPermitted(destinationPoint, arrivalPlanet, arrivalPoint);
}

void PlanetManagerAdapter::scheduleShuttle(CreatureObject* shuttle, int shuttleType) {
	(static_cast<PlanetManager*>(stub))->scheduleShuttle(shuttle, shuttleType);
}

void PlanetManagerAdapter::removeShuttle(CreatureObject* shuttle) {
	(static_cast<PlanetManager*>(stub))->removeShuttle(shuttle);
}

bool PlanetManagerAdapter::checkShuttleStatus(CreatureObject* creature, CreatureObject* shuttle) {
	return (static_cast<PlanetManager*>(stub))->checkShuttleStatus(creature, shuttle);
}

bool PlanetManagerAdapter::isInWater(float x, float y) {
	return (static_cast<PlanetManager*>(stub))->isInWater(x, y);
}

void PlanetManagerAdapter::removePlayerCityTravelPoint(const String& cityName) {
	(static_cast<PlanetManager*>(stub))->removePlayerCityTravelPoint(cityName);
}

/*
 *	PlanetManagerHelper
 */

PlanetManagerHelper* PlanetManagerHelper::staticInitializer = PlanetManagerHelper::instance();

PlanetManagerHelper::PlanetManagerHelper() {
	className = "PlanetManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void PlanetManagerHelper::finalizeHelper() {
	PlanetManagerHelper::finalize();
}

DistributedObject* PlanetManagerHelper::instantiateObject() {
	return new PlanetManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* PlanetManagerHelper::instantiateServant() {
	return new PlanetManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* PlanetManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new PlanetManagerAdapter(static_cast<PlanetManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

