/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.managers.planet;

import engine.core.ManagedService;
import server.zone.Zone;
import server.zone.ZoneProcessServer;
import engine.log.Logger;
import server.zone.objects.building.BuildingObject;
import system.thread.Thread;
import system.util.SortedVector;
import system.util.VectorMap;
import system.util.HashTable;
import system.util.Vector;
import server.zone.objects.region.CityRegion;
import server.zone.objects.scene.variables.StringId;
import server.zone.managers.weather.WeatherManager;
import server.zone.managers.objectcontroller.ObjectController;
import server.zone.managers.gcw.GCWManager;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.scene.SceneObject;
include server.zone.managers.planet.RegionMap;
include server.zone.managers.terrain.TerrainManager;
include server.zone.managers.planet.MissionTargetMap;
include server.zone.templates.snapshot.WorldSnapshotNode;
include server.zone.templates.snapshot.WorldSnapshotIff;
include server.zone.managers.planet.PlanetTravelPointList;
include server.zone.managers.planet.PlanetTravelPoint;
include engine.lua.LuaObject;
include server.zone.objects.building.ShuttleMap;
include server.zone.objects.building.tasks.ShuttleDepartureTask;
include server.zone.objects.creature.CreaturePosture;
include server.zone.managers.planet.ClientPoiDataTable;
include server.zone.managers.planet.TravelFare;
import server.zone.objects.area.ActiveArea;
import system.thread.Mutex;
import engine.util.u3d.CloseObjectsVector;
include server.zone.managers.collision.IntersectionResults;

class PlanetManager extends ManagedService implements Logger {
	protected Zone zone;

	@dereferenced
	protected RegionMap regionMap;

	@dereferenced
	protected transient ShuttleMap shuttleMap;

	@dereferenced
	protected TravelFare travelFares;

	protected PlanetTravelPointList planetTravelPointList;

	//In seconds.
	protected int shuttleportAwayTime;
	protected int shuttleportLandedTime;
	protected int shuttleportLandingTime;

	protected int starportAwayTime;
	protected int starportLandedTime;
	protected int starportLandingTime;

	public static final int SHUTTLEPORT = 0;
	public static final int STARPORT = 1;

	protected WeatherManager weatherManager;

	protected transient GCWManager gcwManager;

	protected int numberOfCities;

	protected transient ZoneProcessServer server;

	protected transient TerrainManager terrainManager;

	protected transient MissionTargetMap performanceLocations;

	@dereferenced
	protected static transient ClientPoiDataTable clientPoiDataTable;

	@dereferenced
	protected static transient Mutex poiMutex;

	public PlanetManager(Zone planet, ZoneProcessServer srv) {
		zone = planet;
		server = srv;

		Logger.setLoggingName("PlanetManager " + zone.getZoneName());
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);

		terrainManager = new TerrainManager(zone);

		if (terrainManager.initialize("terrain/" + zone.getZoneName() + ".trn")) {
			Logger.info("Loaded terrain file successfully.");
		} else {
			Logger.error("Failed to load terrain file.");
		}

		numberOfCities = 0;

		shuttleportAwayTime = 300;
		shuttleportLandedTime = 120;
		shuttleportLandingTime = 11;

		starportAwayTime = 60;
		starportLandedTime = 120;
		starportLandingTime = 14;

		weatherManager = null;
		gcwManager = null;

		travelFares.setNoDuplicateInsertPlan();

		planetTravelPointList = new PlanetTravelPointList();
	}

	@local
	@reference
	private native SceneObject loadSnapshotObject(WorldSnapshotNode node, WorldSnapshotIff wsiff, @dereferenced int totalObjects);
	private native void loadSnapshotObjects();
	private native void loadTravelFares();

	@local
	private native void loadPlanetObjects(LuaObject lua);

	@local
	private native void loadBadgeAreas(LuaObject lua);

	private native void loadLuaConfig();

	public native void initializeTransientMembers();

	public native void finalize();

	public native abstract void initialize();
	public native void loadClientRegions();
	public native void loadClientPoiData();

	/**
	 * Returns the closest PlanetTravelPoint within the given range.
	 * @param object The object to use as reference.
	 * @param range The maximum range to search within.
	 * @return Returns a PlanetTravelPoint or NULL if not found in range
	 */
	@local
	public native PlanetTravelPoint getNearestPlanetTravelPoint(SceneObject object, float range = 16000.0);

	/**
	 * Returns the closest PlanetTravelPoint within the given range.
	 * @param position The position to use as reference.
	 * @param range The maximum range to search within.
	 * @return Returns a PlanetTravelPoint or NULL if not found in range
	 */
	@local
	public native PlanetTravelPoint getNearestPlanetTravelPoint(@dereferenced final Vector3 position, float range = 16000.0);

	public native boolean isSpawningPermittedAt(float x, float y, float margin = 0);

	public native boolean isBuildingPermittedAt(float x, float y, SceneObject objectTryingToBuild = null, float margin = 0);

	public native boolean isCampingPermittedAt(float x, float y, float margin);

	@reference
	public native SceneObject findObjectTooCloseToDecoration(float x, float y, float margin);

	public native boolean isInRangeWithPoi(float x, float y, float range);

	public native boolean isInObjectsNoBuildZone(float x, float y, float extraMargin);

	/**
	 * Gets the cost to travel via shuttleport/starport to the destination planet.
	 * If the value is 0, then travel to the planet from this planet is disabled.
	 * @param destinationPlanet The planet that to which is being travelled. Can be the same planet.
	 * @return The cost to travel to the destination planet.
	 */
	public native int getTravelFare(final string departurePlanet, final string arrivalPlanet);

	public native void sendPlanetTravelPointListResponse(CreatureObject player);

	/**
	 * Creates a travel ticket from the departure point on this planet to the arrival point on the arrival planet.
	 * @param departurePoint The point on this planet from which the ticket is set to depart.
	 * @param arrivalPlanet The planet to which the ticket is set to arrive.
	 * @param departurePoint The point on the arrival planet to which the ticket is set to arrive.
	 * @return Returns a travel ticket for the route specified, or NULL if it could not be created.
	 */
	@reference
	public native SceneObject createTicket(final string departurePoint, final string arrivalPlanet, final string arrivalPoint);

	public native boolean validateRegionName(final string name);
	public native boolean validateClientCityInRange(CreatureObject creatureObject, float x, float y);

	public WeatherManager getWeatherManager() {
		return weatherManager;
	}

	public GCWManager getGCWManager() {
		return gcwManager;
	}

	@local
	public TerrainManager getTerrainManager() {
		return terrainManager;
	}

	public int getRegionCount() {
		return regionMap.getTotalRegions();
	}

	public int getNumberOfCities() {
		return numberOfCities;
	}

	public void increaseNumberOfCities() {
		numberOfCities = numberOfCities + 1;
	}

	public CityRegion getRegion(int index) {
		return regionMap.getRegion(index);
	}

	public CityRegion getRegion(final string region) {
		return regionMap.getRegion(region);
	}

	public CityRegion getRegionAt(float x, float y) {
		return regionMap.getRegionAt(x, y);
	}

	public synchronized void addRegion(CityRegion region) {
		regionMap.addRegion(region);
	}

	public synchronized void dropRegion(final string region) {
		regionMap.dropRegion(region);
	}

	public boolean hasRegion(final string name) {
		return regionMap.containsRegion(name);
	}

	public void addPerformanceLocation(SceneObject obj) {
		performanceLocations.add(obj);
	}

	public void removePerformanceLocation(SceneObject obj) {
		performanceLocations.remove(obj);
	}

	@local
	public MissionTargetMap getPerformanceLocations() {
		return performanceLocations;
	}

	/**
	 * Checks to see if the point is an existing planet travel point.
	 * @param pointName The name of the point to check for.
	 * @return Returns true if the point exists.
	 */
	public boolean isExistingPlanetTravelPoint(final string pointName) {
		return planetTravelPointList.contains(pointName);
	}

	/**
	 * Checks to see if interplanetary travel is allowed to the specified point.
	 * @param pointName The point name representing a travel point belonging to this planet.
	 * @return Returns true if interplanetary travel is allowed.
	 */
	public boolean isInterplanetaryTravelAllowed(final string pointName) {
		PlanetTravelPoint ptp = planetTravelPointList.get(pointName);

		if (ptp == null)
			return false;

		return ptp.isInterplanetary();
	}

	/**
	 * Checks to see if incoming travel is allowed to the specified point.
	 * @param pointName The point name representing a travel point belonging to this planet.
	 * @return Returns true if incoming travel is allowed.
	 */
	public boolean isIncomingTravelAllowed(final string pointName) {
		PlanetTravelPoint ptp = planetTravelPointList.get(pointName);

		if (ptp == null)
			return false;

		return ptp.isIncomingAllowed();
	}

	/**
	 * Gets the PlanetTravelPoint that corresponds to the point name. If the point doesn't exist
	 * then it will return NULL.
	 * @param pointName The planet travel point's name.
	 * @return PlanetTravelPoint for the given point name.
	 */
	@local
	public PlanetTravelPoint getPlanetTravelPoint(final string pointName) {
		return planetTravelPointList.get(pointName);
	}

	/**
	 * Checks to see the travel between the points is allowed based on their settings.
	 * @param destinationPoint The point from which is being traveled.
	 * @param arrivalPlanet The planet to which is being traveled.
	 * @param arrivalPoint The point to which is being traveled.
	 * @return Returns true if travel is permitted between the two points.
	 */
	public native boolean isTravelToLocationPermitted(final string destinationPoint, final string arrivalPlanet, final string arrivalPoint);

	public native void scheduleShuttle(CreatureObject shuttle, int shuttleType);

	public synchronized void removeShuttle(CreatureObject shuttle){
		shuttleMap.drop(shuttle.getObjectID());
	}

	public native boolean checkShuttleStatus(CreatureObject creature, CreatureObject shuttle);

	public native boolean isInWater(float x, float y);

	@local
	public native float findClosestWorldFloor(float x, float y, float z, float swimHeight, IntersectionResults intersections = null, CloseObjectsVector closeObjects = null);

	@local
	public native void addPlayerCityTravelPoint(PlanetTravelPoint ptp);

	public native void removePlayerCityTravelPoint(final string cityName);
}
