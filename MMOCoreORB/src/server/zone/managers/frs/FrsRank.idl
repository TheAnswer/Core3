/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions. */

package server.zone.managers.frs;

import engine.core.ManagedObject;
import system.util.VectorMap;

class FrsRank extends ManagedObject {
	protected short type;
	protected short rank;
	protected short voteStatus;

	@dereferenced
	protected SortedVector<unsigned long> playerList;
	
	@dereferenced
	protected SortedVector<unsigned long> votedList;
	
	@dereferenced
	protected VectorMap<unsigned long, int> petitionerList;
	
	@dereferenced
	protected SortedVector<unsigned long> winnerList;
	
	@dereferenced
	protected Time lastUpdateTick;

	public FrsRank(short rankType, short rankNum, short status) {
		type = rankType;
		rank = rankNum;
		voteStatus = status;
		
		playerList.setNoDuplicateInsertPlan();
		votedList.setNoDuplicateInsertPlan();
		petitionerList.setAllowOverwriteInsertPlan();
	}
	
	@read
	public short getRank() {
		return rank;
	}
	
	@read
	public short getCouncilType() {
		return type;
	}

	public void addToPlayerList(unsigned long id) {
		playerList.put(id);
	}

	public void removeFromPlayerList(unsigned long id) {
		playerList.drop(id);
	}
	
	public int getTotalPlayersInRank() {
		return playerList.size();
	}

	@dirty
	public boolean isOnPlayerList(unsigned long id) {
		return playerList.contains(id);
	}

	@local
	public SortedVector<unsigned long> getPlayerList() {
		return playerList;
	}
	
	@local
	public VectorMap<unsigned long, int> getPetitionerList() {
		return petitionerList;
	}
	
	public void addToPetitionerList(unsigned long playerID, int votes) {
		petitionerList.put(playerID, votes);
	}
	
	@dirty
	public boolean isOnPetitionerList(unsigned long id) {
		return petitionerList.contains(id);
	}
	
	public int getTotalPetitioners() {
		return petitionerList.size();
	}
	
	public void clearPetitionerList() {
		petitionerList.removeAll();
	}
	
	public void removeFromPetitionerList(unsigned long id) {
		petitionerList.drop(id);
	}
	
	public void addToVotedList(unsigned long id) {
		votedList.put(id);
	}

	public void removeFromVotedList(unsigned long id) {
		votedList.drop(id);
	}
	
	public void clearVotedList() {
		votedList.removeAll();
	}

	@dirty
	public boolean isOnVotedList(unsigned long id) {
		return votedList.contains(id);
	}

	@local
	public SortedVector<unsigned long> getVotedList() {
		return votedList;
	}
	
	public void addToWinnerList(unsigned long id) {
		winnerList.put(id);
	}
	
	public void removeFromWinnerList(unsigned long id) {
		winnerList.drop(id);
	}
	
	public int getTotalWinners() {
		return winnerList.size();
	}
	
	@dirty
	public boolean isOnWinnerList(unsigned long id) {
		return winnerList.contains(id);
	}
	
	public void clearWinnerList() {
		winnerList.removeAll();
	}
	
	@local
	public SortedVector<unsigned long> getWinnerList() {
		return winnerList;
	}
	
	public void updateLastTick() {
		lastUpdateTick.updateToCurrentTime();
	}
	
	public unsigned long getLastUpdateTickDiff() {
		return lastUpdateTick.miliDifference();
	}
	
	@read
	public short getVoteStatus() {
		return voteStatus;
	}
	
	public void setVoteStatus(int newStatus) {
		voteStatus = newStatus;
	}
	
	public void resetVotingData() {
		clearVotedList();
		clearPetitionerList();
		clearWinnerList();
	}
}
