/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.managers.player;

import engine.log.Logger;
import system.util.SortedVector;
import system.util.VectorMap;
import server.zone.ZoneProcessServer;
include server.zone.packets.charcreation.ClientCreateCharacterCallback;
import server.zone.objects.tangible.TangibleObject;
import engine.core.ManagedObject;
import server.zone.ZoneServer;
import server.zone.objects.tangible.wearables.ArmorObject;
import engine.util.Observer;
import engine.util.Observable;
import server.zone.objects.player.PlayerObject;
import server.zone.objects.structure.StructureObject;
import server.zone.Zone;
include system.util.SynchronizedVector;
import server.zone.objects.creature.ai.Creature;
import server.zone.objects.tangible.tool.CraftingStation;
include server.zone.managers.player.StartingLocationList;
include server.zone.managers.player.StartingLocation;
include server.zone.objects.player.ValidatedPosition;
include server.zone.objects.tangible.threat.ThreatMap;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.scene.SceneObject;
include server.zone.managers.player.CharacterNameMap;
include server.zone.managers.player.PermissionLevelList;
import server.login.account.Account;
include server.zone.objects.creature.variables.Skill;
include server.zone.managers.player.OnlineZoneClientMap;
import system.thread.ReadWriteLock;
import server.zone.CloseObjectsVector;
include server.zone.managers.collision.IntersectionResults;
include server.zone.managers.player.VeteranRewardList;
include server.zone.managers.player.JukeboxSong;
include server.zone.managers.player.QuestInfo;
include server.zone.objects.player.badges.Badge;
include system.util.Vector;
include system.lang.ref.Reference;
include server.zone.managers.player.XpBonusList;
import server.zone.ZoneClientSession;
import system.thread.Mutex;
include engine.util.JSONSerializationType;

@dirty
class PlayerManager extends Observer implements Logger {
	transient ZoneProcessServer processor;

	@dereferenced
	private transient Logger playerLogger;

	private transient string playerLoggerFilename;

	@dereferenced
	protected transient Mutex playerLoggerMutex;
	protected transient int playerLoggerLines = 0;

	// Used for frog/gm buffs
	protected int performanceBuff;
	protected int medicalBuff;
	protected int performanceDuration;
	protected int medicalDuration;

	protected int baseStoredCreaturePets;
	protected int baseStoredFactionPets;
	protected int baseStoredDroids;
	protected int baseStoredVehicles;
	protected int baseStoredShips;
	protected boolean allowSameAccountPvpRatingCredit;
	protected int onlineCharactersPerAccount;
	
	@dereferenced
	protected XpBonusList xpBonusList;

	@dereferenced
	private SortedVector<int> veteranRewardMilestones;

	private int veteranRewardAdditionalMilestones;

	@dereferenced 
	private VeteranRewardList veteranRewards;

	private ZoneServer server;

	transient CharacterNameMap nameMap;
	private float globalExpMultiplier;
	private float groupExpMultiplier;

	@dereferenced
	private transient ReadWriteLock onlineMapMutex;

	@dereferenced
	protected transient Vector<Reference<JukeboxSong> > jukeboxSongs;

	@dereferenced
	protected transient Vector<Reference<QuestInfo> > questInfo;

	@dereferenced
	private transient OnlineZoneClientMap onlineZoneClientMap;

	public native PlayerManager(ZoneServer zoneServer, ZoneProcessServer impl);
	public native void loadNameMap();

	private native void loadLuaConfig();
	private native void loadStartingLocations();
	private native void loadPermissionLevels();
	private native void loadQuestInfo();

	public native void finalize();

	private transient PermissionLevelList permissionLevelList;

	@dereferenced
	private transient StartingLocationList startingLocationList;

	@local
	public native void sendStartingLocationsTo(CreatureObject player);

	@local
	public native StartingLocation getStartingLocation(final string city);

	/**
	 * Kicks a user
	 *
	 */
	public native boolean kickUser(final string name, final string admin, string reason, boolean doBan = true);

	@local
	public native boolean createPlayer(ClientCreateCharacterCallback callback);

	@local
	public native boolean checkPlayerName(ClientCreateCharacterCallback callback);

	public native string setFirstName(CreatureObject creature, final string newFirstName);

	public native string setLastName(CreatureObject creature, final string newLastName, boolean skipVerify = false);

	public native int notifyObserverEvent(unsigned int eventType, Observable observable, ManagedObject arg1, long arg2);

	/**
	 * @pre { destructor and destructedObject locked }
	 * @post { destructor and destructedObject locked }
	 */
	@arg1preLocked
	@arg2preLocked
	public native int notifyDestruction(TangibleObject destructor, TangibleObject destructedObject, int condition, boolean isCombatAction); 

	public native boolean shouldRescheduleCorpseDestruction(CreatureObject player, CreatureObject ai);

	public native void rescheduleCorpseDestruction(CreatureObject player, CreatureObject ai);

	public native boolean canGroupMemberHarvestCorpse(CreatureObject player, Creature creature);

	/**
	 * @pre { attacker and player locked }
	 * @post { attacker and player locked }
	 */
	public native void killPlayer(TangibleObject attacker, CreatureObject player, int typeofdeath = 0, boolean isCombatAction = false);

	/**
	 * Calculates the length of time that incapacitation should last. Cannot exceed 1 minute.
	 * \return Returns the number of seconds until the player should recover from incapacitation.
	 */
	public native byte calculateIncapacitationTimer(CreatureObject player, int condition);

	/**
	 * Check for enough encumbrances 
	 */
	public native boolean checkEncumbrancies(CreatureObject player, ArmorObject armor);
	public native void applyEncumbrancies(CreatureObject player, ArmorObject armor);
	public native void removeEncumbrancies(CreatureObject player, ArmorObject armor);
	public native void awardBadge(PlayerObject ghost, unsigned int badge);
	@local
	public native void awardBadge(PlayerObject ghost, final Badge badge);

	public native void setExperienceMultiplier(float globalMultiplier);
	public native int awardExperience(CreatureObject player, final string xpType, int amount, boolean sendSystemMessage = true, float localMultiplier = 1.0f, boolean applyModifiers = true);

	@local @dereferenced
	public native SortedVector<SceneObject> getInsurableItems(CreatureObject player, boolean onlyInsurable = true);

	@local
	public native void addInsurableItemsRecursive(SceneObject obj, SortedVector<SceneObject> items, boolean onlyInsurable);

	public native void handleAbortTradeMessage(CreatureObject player);
	public native void handleAddItemToTradeWindow(CreatureObject player, unsigned long itemID);
	public native void handleGiveMoneyMessage(CreatureObject player, unsigned int value);
	public native void handleAcceptTransactionMessage(CreatureObject player);
	public native void handleUnAcceptTransactionMessage(CreatureObject player);
	public native void handleVerifyTradeMessage(CreatureObject player);
	public native boolean checkTradeItems(CreatureObject player, CreatureObject receiver);

	/**
	 * Finds the closest structure in range with Administration priveleges.
	 * This is primarily used for commands that require a building or installation.
	 * First checks the passed targetID, then checks if the player is inside a building. Finally searches for an installation in range.
	 * @pre: creature locked, zone unlocked

	 * @post: creature locked, zone unlocked
	 * @param targetID The object id of the players target.
	 */
	public native SceneObject getInRangeStructureWithAdminRights(CreatureObject creature, unsigned long targetID = 0);

	public native StructureObject getInRangeOwnedStructure(CreatureObject creature, float range = 128);

	public native void sendBattleFatigueMessage(CreatureObject player, CreatureObject target);

	public native void stopWatch(CreatureObject creature, unsigned long entid, boolean doSendPackets = true, boolean forced = false, boolean doLock = true, boolean outOfRange = false);
	public native void stopListen(CreatureObject creature, unsigned long entid, boolean doSendPackets = true, boolean forced = false, boolean doLock = true, boolean outOfRange = false);
	public native void startWatch(CreatureObject creature, unsigned long entid);
	public native void startListen(CreatureObject creature, unsigned long entid);

	public native void lootAll(CreatureObject player, CreatureObject creature);

	/**
	 * Starts the ProposeUnitySession
	 * @param askingPlayer Player iniating the proposal
	 * @param respondingPlayer Player responding to the proposal
	 * @param askingPlayerRing The ring object selected by the player iniating the propsal
	 * @pre askingPlayer locked
	 * @post askingPlayer locked
	 */
	public native void proposeUnity( CreatureObject askingPlayer, CreatureObject respondingPlayer, SceneObject askingPlayerRing );

	/**
	 * Responder has denied unity
	 * @param respondingPlayer Player responding to the proposal
	 * @pre respondingPlayer locked
	 * @post respondingPlayer locked
	 */
	public native void denyUnity(CreatureObject respondingPlayer);

	/**
	 * Responder has accepted unity;  Prompt for ring
	 * @param respondingPlayer Player responding to the proposal
	 * @pre respondingPlayer locked
	 * @post respondingPlayer locked
	 */
	public native void acceptUnity(CreatureObject respondingPlayer);

	/**
	 * Responder has selected a ring; Exchange rings with asker and assign as spouse
	 * @param respondingPlayer Player responding to the proposal
	 * @pre respondingPlayer locked
	 * @post respondingPlayer locked
	 */
	public native void completeUnity(CreatureObject respondingPlayer, unsigned long respondingPlayerRing);	

	/**
	 * Cancel the propose unity session
	 * @param respondingPlayer Player responding to the proposal
	 * @param askingPlayer Player iniating the proposal
	 * @pre respondingPlayer and askingPlayer locked
	 * @post respondingPlayer and askingPlayerlocked
	 */
	protected native void cancelProposeUnitySession(CreatureObject respondingPlayer, CreatureObject askingPlayer);

	/**
	 * Prompt player to confirm divorce
	 * @param Player requesting divorce
	 * @pre player locked
	 * @post player locked
	 */
	public native void promptDivorce(CreatureObject player);	

	/**
	 * Nullify unity
	 * @param Player requesting divorce
	 * @pre player locked
	 * @post player locked
	 */
	@arg1preLocked
	public native void grantDivorce(CreatureObject player);	

	/**
	 * Checks whether the player qualifies for any veteran rewards
	 * and prompts for selection of reward if so
	 * @param Player requesting veteran rewards
	 * @pre player locked
	 * @post player locked
	 */
	public native void claimVeteranRewards(CreatureObject player);

	/**
	 * Returns the minimum veteran reward milestone the for which the account is eligible
	 * Returns -1 if not eligible
	 * @param playerGhost player requesting veteran rewards
	 * @param account requesting veteran rewards
	 */
	public native int getEligibleMilestone(PlayerObject playerGhost, Account account);

	/**
	 * Returns the next veteran reward milestone the account will be eligible for
	 * Returns -1 if no further rewards
	 * @param playerGhost player requesting veteran rewards
	 * @param account requesting veteran rewards
	 */
	public native int getFirstIneligibleMilestone(PlayerObject playerGhost, Account account);	

	/**
	 * Cancels the current reward session
	 * @param player requesting veteran rewards
	 */
	public native void cancelVeteranRewardSession( CreatureObject player );

	/**
	 * Asks the player to confirm selection of the given veteran reward
	 * @param player requesting veteran rewards
	 * @param itemIndex index to item in veteranRewards list
	 */
	public native void confirmVeteranReward( CreatureObject player, int itemIndex );	

	/**
	 * Generates the selected reward for the player. Starts a new reward session
	 * if player is eligible for additional milestones
	 * @param player requesting veteran rewards
	 * @param itemIndex index to item in veteranRewards list
	 */
	public native void generateVeteranReward( CreatureObject player );

	/**
	 * Enhances the patients attribute by a specified amount for a specified duration.
	 * @param patient The patient to enhance.
	 * @param attribute The attribute to enhance.
	 * @param buffvalue The amount to enhance the attribute.
	 * @param duration The duration in seconds the enhancement will last.
	 * @return The amount that was enhanced. If a buff existed, this is the amount exceeding the previous buff.
	 */
	public native int healEnhance(CreatureObject enhancer, CreatureObject patient, byte attribute, int buffvalue, float duration, int absorption = 0);

	@local
	public native void disseminateExperience(TangibleObject destructedObject, ThreatMap threatMap, SynchronizedVector<CreatureObject> lairSpawnedCreatures = null,Zone lairZone=null);

	public native int calculatePlayerLevel(CreatureObject player);
	public native int calculatePlayerLevel(CreatureObject player, string xpType);

	public native void sendLoginMessage(CreatureObject player);
	public native void resendLoginMessageToAll();

	public native void sendActivateCloneRequest(CreatureObject player, int typeofdeath = 0);
	public native boolean isValidClosestCloner(CreatureObject player, SceneObject cloner);
	public native void sendPlayerToCloner(CreatureObject player, unsigned long clonerID, int typeofdeath = 0);

	public native void ejectPlayerFromBuilding(CreatureObject player);

	public native boolean checkExistentNameInDatabase(final string firstName);

	public native void createTutorialBuilding(CreatureObject player);
	public native void createSkippedTutorialBuilding(CreatureObject player);

	@local
	public native void updateSwimmingState(CreatureObject player, float newZ, IntersectionResults intersections = null, CloseObjectsVector closeObjects = null);
	@local
	public native int checkSpeedHackFirstTest(CreatureObject player, float parsedSpeed, @dereferenced ValidatedPosition teleportPosition, float errorMultiplier = 1);
	public native int checkSpeedHackSecondTest(CreatureObject player, float newX, float newZ, float newY, unsigned int newStamp, SceneObject newParent = null);

	@dirty
	public native boolean existsName(final string name);
	
	@dirty
	public native boolean existsPlayerCreatureOID(unsigned long oid);
	
	@dirty
	public native unsigned long getObjectID(final string name);
	
	@dirty
	public native string getPlayerName(unsigned long oid);
	
	@reference
	public native CreatureObject getPlayer(final string name);

	public native void updatePermissionLevel(CreatureObject player, int adminLevel = 1);
	public native void updatePermissionName(CreatureObject player, int adminLevel);

	@dirty
	public void addPlayer(CreatureObject player) {
		nameMap.put(player);
	}

	@dirty
	public void removePlayer(final string playerName) {
		nameMap.remove(playerName);
	}
	
	@dirty
	public void removePlayer(unsigned long playerID) {
		nameMap.remove(playerID);
	}

	@dirty
	public boolean containsPlayer(final string playerName) {
		return nameMap.containsKey(playerName);
	}

	public native void sendAdminJediList(CreatureObject player);
	public native void sendAdminFRSList(CreatureObject player);	
	public native void sendAdminList(CreatureObject player);

    @dereferenced
    @local
	public native VectorMap<string, int> generateAdminList();

	public native CraftingStation getNearbyCraftingStation(CreatureObject player, int type);

	public native void finishHologrind(CreatureObject player);

	public native string banAccount(PlayerObject admin, Account account, unsigned int seconds, final string reason);	
	public native string unbanAccount(PlayerObject admin, Account account, final string reason);	
	public native string banFromGalaxy(PlayerObject admin, Account account, final unsigned int galaxy, unsigned int seconds, final string reason);	
	public native string unbanFromGalaxy(PlayerObject admin, Account account, final unsigned int galaxy, final string reason);	
	public native string banCharacter(PlayerObject admin, Account account, final string name, unsigned int galaxyID, unsigned int seconds, final string reason);
	public native string unbanCharacter(PlayerObject admin, Account account, final string name, unsigned int galaxyID, final string reason);
	public native void clearOwnedStructuresPermissions(CreatureObject player);

	public native boolean promptTeachableSkills(CreatureObject teacher, SceneObject target);

	public native void decreaseOnlineCharCount(ZoneClientSession client);
	public native boolean increaseOnlineCharCountIfPossible(ZoneClientSession client);
	//public native int getOnlineCharCount(unsigned int accountId);
	public native void disconnectAllPlayers();

	public native void fixHAM(CreatureObject player);
	public native void fixBuffSkillMods(CreatureObject player);

	@local
	@dereferenced
	public native JSONSerializationType basePlayerLogEntry(CreatureObject creature, PlayerObject ghost);

	@local
	public native void writePlayerLogEntry(@dereferenced JSONSerializationType logEntry);

	@local
	public native void writePlayerLog(CreatureObject creature, PlayerObject ghost, final string msg, int logLevelType);

	@local
	public native void writePlayerLog(PlayerObject ghost, final string msg, int logLevelType);

	@local
	public native void writePlayerLog(CreatureObject creature, final string msg, int logLevelType);

	public native int getPlayerQuestID(final string name);
	public native string getPlayerQuestParent(int questID);

	public int getTotalPlayerQuests(){
		return questInfo.size();
	}

	@local
	public native QuestInfo getQuestInfo(int questID) {
		return questInfo.get(questID);
	}

	/**
	 * Sends a confirmation box to the student asking if they want to learn the skill.
	 * @pre student crosslocked with teacher
	 * @post student crosslocked with teacher
	 */
	@local
	public native boolean offerTeaching(CreatureObject teacher, CreatureObject student, Skill skill);

	/**
	 * Accepts a teaching office.
	 * @pre student crosslocked with teacher
	 * @post student crosslocked with teacher
	 */
	@local
	public native boolean acceptTeachingOffer(CreatureObject teacher, CreatureObject student, Skill skill);

	/**
	 * Gets a vector skillboxes this teacher can teach this student.
	 * @pre student crosslocked with teacher
	 * @post student crosslocked with teacher
	 */
	@local @dereferenced
	public native SortedVector<string> getTeachableSkills(CreatureObject teacher, CreatureObject student);

	@local
	public OnlineZoneClientMap getOnlineZoneClientMap() {
		return onlineZoneClientMap;
	}

	public native void getCleanupCharacterCount();

	public native void cleanupCharacters();

	public native boolean shouldDeleteCharacter(unsigned long characterID, int galaxyID);

	public native boolean doBurstRun(CreatureObject player, float hamModifier, float cooldownModifier);

	/**
	 * Enhances the target character with doc/ent buffs
	 * @pre { player is locked }
	 * @post { player is locked }
	 */
	public native void enhanceCharacter(CreatureObject player);

	/**
	 * Creates and adds buff to Player
	 * @pre { player is locked }
	 * @post { player is locked }
	 * @returns true if it was added
	 * @param crc CRC of the buff, player target of buff, amount is the attribute modifier for the buff, duration of the buff, buffType specifies whether medical or performance and attribute sets the creature attribute to modify
	 */
	private native boolean doEnhanceCharacter(unsigned int crc, CreatureObject player, int amount, int duration, int buffType, byte attribute);

	public int getBaseStoredCreaturePets() {
		return baseStoredCreaturePets;
	}

	public int getBaseStoredFactionPets() {
		return baseStoredFactionPets;
	}

	public int getBaseStoredDroids() {
		return baseStoredDroids;
	}

	public int getBaseStoredVehicles() {
		return baseStoredVehicles;
	}

	public int getBaseStoredShips() {
		return baseStoredShips;
	}

	public int getNumVeteranRewardMilestones(){
		return veteranRewardMilestones.size();
	}

	public int getVeteranRewardMilestone( int index ){
		return veteranRewardMilestones.get(index);
	}

	@local
	public native JukeboxSong getJukeboxSong( int index ){
		return jukeboxSongs.get(index);
	}

	public int getNumJukeboxSongs(){
		return jukeboxSongs.size();
	}
	
	public void setOnlineCharactersPerAccount(int count) {
		onlineCharactersPerAccount = count;
	}

	@local
	@arg1preLocked
	public native void doPvpDeathRatingUpdate(CreatureObject player, ThreatMap threatMap);
	
	private native void loadXpBonusList();
	public native float getSpeciesXpModifier(final string species, final string xpType);
	
	public native void unlockFRSForTesting(CreatureObject player, int councilType);

	@local
	@dereferenced
	public native Vector<unsigned long> getOnlinePlayerList();
}
