/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.managers.space;

import engine.core.ManagedService;
import server.zone.SpaceZone;
import server.zone.ZoneProcessServer;
import engine.log.Logger;
import system.util.VectorMap;
import server.zone.objects.scene.SceneObject;
include engine.lua.LuaObject;
import server.zone.CloseObjectsVector;
include engine.util.u3d.Vector3;

@dirty
class SpaceManager extends ManagedService implements Logger {

	protected SpaceZone spacezone;

	protected transient ZoneProcessServer server;

    @rawTemplate(value="String, Vector3")
	@dereferenced
	protected transient VectorMap jtlTravelDestinations;

	@dereferenced
	protected transient string jtlZoneName;

	@dereferenced
	protected transient Vector3 jtlLaunchLocation;

	@dirty
	@local
	@dereferenced
	public native Vector3 getJTLLaunchLocation();

	public SpaceManager(SpaceZone sz, ZoneProcessServer srv) {
		spacezone = sz;
		server = srv;

		Logger.setLoggingName("SpaceManager " + spacezone.getZoneName());
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);
	}

	@local
	public native void loadLuaConfig();

	@local
	private native void loadJTLData(LuaObject lua);

	public native void initializeTransientMembers();

	public native void finalize();

	public native abstract void initialize();

	public native void start();

	@dirty
    @local
    @dereferenced
    public final Vector3 getJTLTravelDestination(string key) {
        return jtlTravelDestinations.get(key);
    }

    @dirty
    public boolean hasJTLTravelDestination(string key) {
        return jtlTravelDestinations.contains(key);
    }

    @dirty
    public string getJTLZoneName() {
        return jtlZoneName;
    }
}
