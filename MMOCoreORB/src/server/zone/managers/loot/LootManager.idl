/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.managers.loot;

import system.util.SortedVector;
import engine.core.ManagedService;
import system.thread.atomic.AtomicInteger;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.ai.AiAgent;
import server.zone.managers.crafting.CraftingManager;
import server.zone.managers.object.ObjectManager;
import engine.lua.LuaObject;
import server.zone.ZoneServer;
import server.zone.objects.tangible.TangibleObject;
include server.zone.managers.loot.LootGroupMap;
include server.zone.managers.loot.lootgroup.LootGroupCollection;
include templates.LootItemTemplate;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include server.zone.managers.loot.CrystalData;
include system.lang.ref.Reference;
include engine.log.Logger;
include system.util.VectorMap;

@dirty
class LootManager extends ManagedService implements Logger {
	private transient CraftingManager craftingManager;
	private transient ZoneServer zoneServer;
	private transient ObjectManager objectManager;

	private transient LootGroupMap lootGroupMap;

	private transient float yellowChance;
	private transient float yellowModifier;

	private transient float exceptionalChance;
	private transient float exceptionalModifier;

	private transient float legendaryChance;
	private transient float legendaryModifier;

	@dereferenced
	private transient AtomicInteger yellowLooted;
	@dereferenced
	private transient AtomicInteger exceptionalLooted;
	@dereferenced
	private transient AtomicInteger legendaryLooted;

	private transient float skillModChance;

	private transient float junkValueModifier;

	@dereferenced
	private transient SortedVector<int> randomDotAttribute;
	@dereferenced
	private transient SortedVector<int> randomDotStrength;
	@dereferenced
	private transient SortedVector<int> randomDotDuration;
	@dereferenced
	private transient SortedVector<int> randomDotPotency;
	@dereferenced
	private transient SortedVector<int> randomDotUses;

	@dereferenced
	private transient SortedVector<string> lootableArmorAttachmentMods;
	@dereferenced
	private transient SortedVector<string> lootableClothingAttachmentMods;
	@dereferenced
	private transient SortedVector<string> lootableArmorMods;
	@dereferenced
	private transient SortedVector<string> lootableClothingMods;
	@dereferenced
	private transient SortedVector<string> lootableOneHandedMeleeMods;
	@dereferenced
	private transient SortedVector<string> lootableTwoHandedMeleeMods;
	@dereferenced
	private transient SortedVector<string> lootableUnarmedMods;
	@dereferenced
	private transient SortedVector<string> lootablePistolMods;
	@dereferenced
	private transient SortedVector<string> lootableRifleMods;
	@dereferenced
	private transient SortedVector<string> lootableCarbineMods;
	@dereferenced
	private transient SortedVector<string> lootablePolearmMods;
	@dereferenced
	private transient SortedVector<string> lootableHeavyWeaponMods;

	@dereferenced
	private transient VectorMap<string, Reference<CrystalData> > crystalData;

	public LootManager(CraftingManager craftman, ObjectManager objMan, ZoneServer server) {
		craftingManager = craftman;
		objectManager = objMan;
		zoneServer = server;

		lootGroupMap = null;

		lootableArmorAttachmentMods.setNoDuplicateInsertPlan();
		lootableClothingAttachmentMods.setNoDuplicateInsertPlan();
		lootableArmorMods.setNoDuplicateInsertPlan();
		lootableClothingMods.setNoDuplicateInsertPlan();
		lootableOneHandedMeleeMods.setNoDuplicateInsertPlan();
		lootableTwoHandedMeleeMods.setNoDuplicateInsertPlan();
		lootableUnarmedMods.setNoDuplicateInsertPlan();
		lootablePistolMods.setNoDuplicateInsertPlan();
		lootableRifleMods.setNoDuplicateInsertPlan();
		lootableCarbineMods.setNoDuplicateInsertPlan();
		lootablePolearmMods.setNoDuplicateInsertPlan();
		lootableHeavyWeaponMods.setNoDuplicateInsertPlan();

		exceptionalChance = 0.0;
		exceptionalModifier = 0.0;

		legendaryChance = 0.0;
		legendaryModifier = 0.0;

		skillModChance = 0.0;

		Logger.setLoggingName("LootManager");

		Logger.setGlobalLogging(true);
	}

	public native void initialize();

	public native void stop();

	private native boolean loadConfigData();
	private native void loadDefaultConfig();

	@local
	private native void setInitialObjectStats(final LootItemTemplate templateObject, CraftingValues craftingValues, TangibleObject prototype);

	@local
	private native void setSkillMods(TangibleObject object, final LootItemTemplate templateObject, int level, float excMod);

	@local
	private native void setCustomObjectName(TangibleObject object, final LootItemTemplate templateObject);

	@local
	private native void setSockets(TangibleObject object, CraftingValues craftingValues);

	@local
	private native void addRandomDots(TangibleObject object, final LootItemTemplate templateObject, int level, float excMod);

	@local
	private native void addStaticDots(TangibleObject object, final LootItemTemplate templateObject, int level);

	@local
	private native float calculateDotValue(float min, float max, float level);

	@local
	private native void addConditionDamage(TangibleObject loot, CraftingValues craftingValues);

	@local
	private native void loadLootableMods( LuaObject modTable, SortedVector<string> mods );

	@local
	public native TangibleObject createLootObject(final LootItemTemplate templateObject, int level, boolean maxCondition = false);

	@local
	public native string getRandomLootableMod( unsigned int sceneObjectType );

	public native int calculateLootCredits(int level);

	public native boolean createLoot(SceneObject container, AiAgent creature);

	@local
	public native boolean createLootFromCollection(SceneObject container, final LootGroupCollection collection, int level);

	public native boolean createLoot(SceneObject container, final string lootGroup, int level = -1, boolean maxCondition = false);

	public native boolean createLootSet(SceneObject container, final string lootGroup, int level, boolean maxCondition,int setSize);

	//public native void generateStats(final string lootTemplate, CraftingValues)

	@read
	public unsigned int getYellowLooted() {
		return yellowLooted.get();
	}

	@read
	public unsigned int getExceptionalLooted() {
		return exceptionalLooted.get();
	}

	@read
	public unsigned int getLegendaryLooted() {
		return legendaryLooted.get();
	}

	@local
	@read
	public final LootGroupMap getLootMap() {
		return lootGroupMap;
	}

	@local
	@read
	public final CrystalData getCrystalData(final string name) {
		return crystalData.get(name);
	}

}
