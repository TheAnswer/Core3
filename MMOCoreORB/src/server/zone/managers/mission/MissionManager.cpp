/*
 *	server/zone/managers/mission/MissionManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionManager.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/ZoneProcessServer.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/tangible/terminal/mission/MissionTerminal.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/region/Region.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/managers/stringid/StringIdManager.h"

#include "server/zone/managers/creature/LairSpawn.h"

#include "server/zone/templates/mobile/CreatureTemplate.h"

/*
 *	MissionManagerStub
 */

enum {RPC_LOADLUASETTINGS__ = 6,RPC_HANDLEMISSIONLISTREQUEST__MISSIONTERMINAL_CREATUREOBJECT_INT_,RPC_HANDLEMISSIONACCEPT__MISSIONTERMINAL_MISSIONOBJECT_CREATUREOBJECT_,RPC_HANDLEMISSIONABORT__MISSIONOBJECT_CREATUREOBJECT_,RPC_REMOVEMISSION__MISSIONOBJECT_CREATUREOBJECT_,RPC_POPULATEMISSIONLIST__MISSIONTERMINAL_CREATUREOBJECT_INT_,RPC_RANDOMGENERICDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_BOOL_INT_,RPC_RANDOMIZEGENERICBOUNTYMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_,RPC_RANDOMIZEGENERICCRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_,RPC_RANDOMIZEGENERICDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_,RPC_RANDOMIZEGENERICDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_,RPC_RANDOMIZEGENERICENTERTAINERMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_INT_,RPC_RANDOMIZEGENERICHUNTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_,RPC_RANDOMIZEGENERICRECONMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_,RPC_RANDOMIZEGENERICSURVEYMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_,RPC_RANDOMIZESURVEYMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEBOUNTYMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZECRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEHUNTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZERECONMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEIMPERIALDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEIMPERIALDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEIMPERIALCRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEIMPERIALRECONMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEREBELDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEREBELDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEREBELCRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_RANDOMIZEREBELRECONMISSION__CREATUREOBJECT_MISSIONOBJECT_,RPC_CREATEMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_,RPC_CREATESURVEYMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_,RPC_CREATEDESTROYMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_,RPC_CREATEDELIVERMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_,RPC_CREATEENTERTAINERMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_,RPC_CREATEHUNTINGMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_,RPC_CREATERECONMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_,RPC_CREATEBOUNTYMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_,RPC_CREATECRAFTINGMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_,RPC_GETRANDOMFREENPCSPAWNPOINT__INT_FLOAT_FLOAT_INT_,RPC_CREATESPAWNPOINT__CREATUREOBJECT_STRING_,RPC_GETBOUNTYHUNTERMISSION__CREATUREOBJECT_,RPC_GETDELIVERYMISSIONFILENAME__INT_,RPC_GETDELIVERMISSIONNUMBEROFMISSIONS__INT_,RPC_GETDELIVERMISSIONSPAWNTYPE__INT_,RPC_ADDPLAYERTOBOUNTYLIST__LONG_INT_,RPC_REMOVEPLAYERFROMBOUNTYLIST__LONG_,RPC_UPDATEPLAYERBOUNTYREWARD__LONG_INT_,RPC_ADDBOUNTYHUNTERTOPLAYERBOUNTY__LONG_LONG_,RPC_REMOVEBOUNTYHUNTERFROMPLAYERBOUNTY__LONG_LONG_,RPC_GETRANDOMPLAYERBOUNTY__CREATUREOBJECT_,RPC_COMPLETEPLAYERBOUNTY__LONG_LONG_,RPC_FAILPLAYERBOUNTYMISSION__LONG_,RPC_FREEMISSIONNPC__NPCSPAWNPOINT_,RPC_DESPAWNMISSIONNPC__NPCSPAWNPOINT_,RPC_DEACTIVATEMISSIONS__CREATUREOBJECT_};

MissionManager::MissionManager(ZoneServer* srv, ZoneProcessServer* impl) : Observer(DummyConstructorParameter::instance()) {
	MissionManagerImplementation* _implementation = new MissionManagerImplementation(srv, impl);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("MissionManager");
}

MissionManager::MissionManager(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("MissionManager");
}

MissionManager::~MissionManager() {
}



void MissionManager::loadLuaSettings() {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADLUASETTINGS__);

		method.executeWithVoidReturn();
	} else
		_implementation->loadLuaSettings();
}

void MissionManager::handleMissionListRequest(MissionTerminal* missionTerminal, CreatureObject* player, int counter) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEMISSIONLISTREQUEST__MISSIONTERMINAL_CREATUREOBJECT_INT_);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		_implementation->handleMissionListRequest(missionTerminal, player, counter);
}

void MissionManager::handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEMISSIONACCEPT__MISSIONTERMINAL_MISSIONOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->handleMissionAccept(missionTerminal, mission, player);
}

void MissionManager::handleMissionAbort(MissionObject* mission, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEMISSIONABORT__MISSIONOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->handleMissionAbort(mission, player);
}

void MissionManager::removeMission(MissionObject* mission, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMISSION__MISSIONOBJECT_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMission(mission, player);
}

void MissionManager::populateMissionList(MissionTerminal* missionTerminal, CreatureObject* player, int counter) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_POPULATEMISSIONLIST__MISSIONTERMINAL_CREATUREOBJECT_INT_);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		_implementation->populateMissionList(missionTerminal, player, counter);
}

bool MissionManager::randomGenericDeliverMission(CreatureObject* player, MissionObject* mission, bool inTownMission, const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMGENERICDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_BOOL_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);
		method.addBooleanParameter(inTownMission);
		method.addSignedIntParameter(faction);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->randomGenericDeliverMission(player, mission, inTownMission, faction);
}

void MissionManager::randomizeGenericBountyMission(CreatureObject* player, MissionObject* mission, const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEGENERICBOUNTYMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);
		method.addSignedIntParameter(faction);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeGenericBountyMission(player, mission, faction);
}

void MissionManager::randomizeGenericCraftingMission(CreatureObject* player, MissionObject* mission, const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEGENERICCRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);
		method.addSignedIntParameter(faction);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeGenericCraftingMission(player, mission, faction);
}

void MissionManager::randomizeGenericDeliverMission(CreatureObject* player, MissionObject* mission, const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEGENERICDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);
		method.addSignedIntParameter(faction);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeGenericDeliverMission(player, mission, faction);
}

void MissionManager::randomizeGenericDestroyMission(CreatureObject* player, MissionObject* mission, const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEGENERICDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);
		method.addSignedIntParameter(faction);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeGenericDestroyMission(player, mission, faction);
}

void MissionManager::randomizeGenericEntertainerMission(CreatureObject* player, MissionObject* mission, const int faction, const int missionType) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEGENERICENTERTAINERMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);
		method.addSignedIntParameter(faction);
		method.addSignedIntParameter(missionType);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeGenericEntertainerMission(player, mission, faction, missionType);
}

void MissionManager::randomizeGenericHuntingMission(CreatureObject* player, MissionObject* mission, const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEGENERICHUNTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);
		method.addSignedIntParameter(faction);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeGenericHuntingMission(player, mission, faction);
}

void MissionManager::randomizeGenericReconMission(CreatureObject* player, MissionObject* mission, const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEGENERICRECONMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);
		method.addSignedIntParameter(faction);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeGenericReconMission(player, mission, faction);
}

void MissionManager::randomizeGenericSurveyMission(CreatureObject* player, MissionObject* mission, const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEGENERICSURVEYMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);
		method.addSignedIntParameter(faction);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeGenericSurveyMission(player, mission, faction);
}

void MissionManager::randomizeSurveyMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZESURVEYMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeSurveyMission(player, mission);
}

void MissionManager::randomizeDestroyMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeDestroyMission(player, mission);
}

void MissionManager::randomizeBountyMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEBOUNTYMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeBountyMission(player, mission);
}

void MissionManager::randomizeDeliverMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeDeliverMission(player, mission);
}

void MissionManager::randomizeCraftingMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZECRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeCraftingMission(player, mission);
}

void MissionManager::randomizeHuntingMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEHUNTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeHuntingMission(player, mission);
}

void MissionManager::randomizeReconMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZERECONMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeReconMission(player, mission);
}

void MissionManager::randomizeImperialDestroyMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEIMPERIALDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeImperialDestroyMission(player, mission);
}

void MissionManager::randomizeImperialDeliverMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEIMPERIALDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeImperialDeliverMission(player, mission);
}

void MissionManager::randomizeImperialCraftingMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEIMPERIALCRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeImperialCraftingMission(player, mission);
}

void MissionManager::randomizeImperialReconMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEIMPERIALRECONMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeImperialReconMission(player, mission);
}

void MissionManager::randomizeRebelDestroyMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEREBELDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeRebelDestroyMission(player, mission);
}

void MissionManager::randomizeRebelDeliverMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEREBELDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeRebelDeliverMission(player, mission);
}

void MissionManager::randomizeRebelCraftingMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEREBELCRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeRebelCraftingMission(player, mission);
}

void MissionManager::randomizeRebelReconMission(CreatureObject* player, MissionObject* mission) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RANDOMIZEREBELRECONMISSION__CREATUREOBJECT_MISSIONOBJECT_);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		_implementation->randomizeRebelReconMission(player, mission);
}

void MissionManager::createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATESURVEYMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createSurveyMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createDestroyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEDESTROYMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createDestroyMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createDeliverMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEDELIVERMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createDeliverMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createEntertainerMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEENTERTAINERMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createEntertainerMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createHuntingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEHUNTINGMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createHuntingMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createReconMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATERECONMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createReconMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createBountyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEBOUNTYMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createBountyMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createCraftingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATECRAFTINGMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->createCraftingMissionObjectives(mission, missionTerminal, player);
}

NpcSpawnPoint* MissionManager::getRandomFreeNpcSpawnPoint(unsigned const int planetCRC, const float x, const float y, const int spawnType) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANDOMFREENPCSPAWNPOINT__INT_FLOAT_FLOAT_INT_);
		method.addUnsignedIntParameter(planetCRC);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addSignedIntParameter(spawnType);

		return static_cast<NpcSpawnPoint*>(method.executeWithObjectReturn());
	} else
		return _implementation->getRandomFreeNpcSpawnPoint(planetCRC, x, y, spawnType);
}

void MissionManager::createSpawnPoint(CreatureObject* player, const String& spawnTypes) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATESPAWNPOINT__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(spawnTypes);

		method.executeWithVoidReturn();
	} else
		_implementation->createSpawnPoint(player, spawnTypes);
}

LairSpawn* MissionManager::getRandomLairSpawn(CreatureObject* player, const int faction, unsigned int type) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getRandomLairSpawn(player, faction, type);
}

Vector3 MissionManager::getRandomBountyTargetPosition(CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getRandomBountyTargetPosition(player);
}

MissionObject* MissionManager::getBountyHunterMission(CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBOUNTYHUNTERMISSION__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return static_cast<MissionObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getBountyHunterMission(player);
}

String MissionManager::getDeliveryMissionFileName(const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDELIVERYMISSIONFILENAME__INT_);
		method.addSignedIntParameter(faction);

		String _return_getDeliveryMissionFileName;
		method.executeWithAsciiReturn(_return_getDeliveryMissionFileName);
		return _return_getDeliveryMissionFileName;
	} else
		return _implementation->getDeliveryMissionFileName(faction);
}

int MissionManager::getDeliverMissionNumberOfMissions(const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDELIVERMISSIONNUMBEROFMISSIONS__INT_);
		method.addSignedIntParameter(faction);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDeliverMissionNumberOfMissions(faction);
}

int MissionManager::getDeliverMissionSpawnType(const int faction) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDELIVERMISSIONSPAWNTYPE__INT_);
		method.addSignedIntParameter(faction);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDeliverMissionSpawnType(faction);
}

void MissionManager::addPlayerToBountyList(unsigned long long targetId, int reward) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPLAYERTOBOUNTYLIST__LONG_INT_);
		method.addUnsignedLongParameter(targetId);
		method.addSignedIntParameter(reward);

		method.executeWithVoidReturn();
	} else
		_implementation->addPlayerToBountyList(targetId, reward);
}

void MissionManager::removePlayerFromBountyList(unsigned long long targetId) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPLAYERFROMBOUNTYLIST__LONG_);
		method.addUnsignedLongParameter(targetId);

		method.executeWithVoidReturn();
	} else
		_implementation->removePlayerFromBountyList(targetId);
}

void MissionManager::updatePlayerBountyReward(unsigned long long targetId, int reward) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEPLAYERBOUNTYREWARD__LONG_INT_);
		method.addUnsignedLongParameter(targetId);
		method.addSignedIntParameter(reward);

		method.executeWithVoidReturn();
	} else
		_implementation->updatePlayerBountyReward(targetId, reward);
}

void MissionManager::addBountyHunterToPlayerBounty(unsigned long long targetId, unsigned long long bountyHunterId) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBOUNTYHUNTERTOPLAYERBOUNTY__LONG_LONG_);
		method.addUnsignedLongParameter(targetId);
		method.addUnsignedLongParameter(bountyHunterId);

		method.executeWithVoidReturn();
	} else
		_implementation->addBountyHunterToPlayerBounty(targetId, bountyHunterId);
}

void MissionManager::removeBountyHunterFromPlayerBounty(unsigned long long targetId, unsigned long long bountyHunterId) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEBOUNTYHUNTERFROMPLAYERBOUNTY__LONG_LONG_);
		method.addUnsignedLongParameter(targetId);
		method.addUnsignedLongParameter(bountyHunterId);

		method.executeWithVoidReturn();
	} else
		_implementation->removeBountyHunterFromPlayerBounty(targetId, bountyHunterId);
}

BountyTargetListElement* MissionManager::getRandomPlayerBounty(CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRANDOMPLAYERBOUNTY__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return static_cast<BountyTargetListElement*>(method.executeWithObjectReturn());
	} else
		return _implementation->getRandomPlayerBounty(player);
}

void MissionManager::completePlayerBounty(unsigned long long targetId, unsigned long long bountyHunter) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPLETEPLAYERBOUNTY__LONG_LONG_);
		method.addUnsignedLongParameter(targetId);
		method.addUnsignedLongParameter(bountyHunter);

		method.executeWithVoidReturn();
	} else
		_implementation->completePlayerBounty(targetId, bountyHunter);
}

void MissionManager::failPlayerBountyMission(unsigned long long bountyHunter) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FAILPLAYERBOUNTYMISSION__LONG_);
		method.addUnsignedLongParameter(bountyHunter);

		method.executeWithVoidReturn();
	} else
		_implementation->failPlayerBountyMission(bountyHunter);
}

void MissionManager::allocateMissionNpcs(NpcSpawnPoint* target, NpcSpawnPoint* destination, TerrainManager* terrainManager, CreatureManager* creatureManager) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->allocateMissionNpcs(target, destination, terrainManager, creatureManager);
}

void MissionManager::freeMissionNpc(NpcSpawnPoint* npc) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_FREEMISSIONNPC__NPCSPAWNPOINT_);
		method.addObjectParameter(npc);

		method.executeWithVoidReturn();
	} else
		_implementation->freeMissionNpc(npc);
}

void MissionManager::despawnMissionNpc(NpcSpawnPoint* npc) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESPAWNMISSIONNPC__NPCSPAWNPOINT_);
		method.addObjectParameter(npc);

		method.executeWithVoidReturn();
	} else
		_implementation->despawnMissionNpc(npc);
}

void MissionManager::deactivateMissions(CreatureObject* player) {
	MissionManagerImplementation* _implementation = static_cast<MissionManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DEACTIVATEMISSIONS__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->deactivateMissions(player);
}

DistributedObjectServant* MissionManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* MissionManager::_getImplementationForRead() {
	return _impl;
}

void MissionManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	MissionManagerImplementation
 */

MissionManagerImplementation::MissionManagerImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


MissionManagerImplementation::~MissionManagerImplementation() {
}


void MissionManagerImplementation::finalize() {
}

void MissionManagerImplementation::_initializeImplementation() {
	_setClassHelper(MissionManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void MissionManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<MissionManager*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* MissionManagerImplementation::_getStub() {
	return _this.get();
}

MissionManagerImplementation::operator const MissionManager*() {
	return _this.get();
}

void MissionManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void MissionManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void MissionManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void MissionManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void MissionManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void MissionManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void MissionManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void MissionManagerImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("MissionManager");

}

void MissionManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(MissionManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool MissionManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x89a45126: //MissionManager.server
		TypeInfo<ManagedReference<ZoneServer* > >::parseFromBinaryStream(&server, stream);
		return true;

	case 0x6c6177f: //MissionManager.missionNpcSpawnMap
		TypeInfo<MissionNpcSpawnMap >::parseFromBinaryStream(&missionNpcSpawnMap, stream);
		return true;

	case 0xcb0e49a5: //MissionManager.craftingMissionItems
		TypeInfo<Vector<String> >::parseFromBinaryStream(&craftingMissionItems, stream);
		return true;

	case 0x625beb46: //MissionManager.bhTargetZones
		TypeInfo<Vector<String> >::parseFromBinaryStream(&bhTargetZones, stream);
		return true;

	case 0x558d02f7: //MissionManager.bhTargetsAtMissionLevel
		TypeInfo<VectorMap<unsigned int, Vector<String>*> >::parseFromBinaryStream(&bhTargetsAtMissionLevel, stream);
		return true;

	case 0xe9a8cdb8: //MissionManager.playerBountyList
		TypeInfo<VectorMap<unsigned long long, BountyTargetListElement*> >::parseFromBinaryStream(&playerBountyList, stream);
		return true;

	case 0x33edf8be: //MissionManager.enableFactionalCraftingMissions
		TypeInfo<bool >::parseFromBinaryStream(&enableFactionalCraftingMissions, stream);
		return true;

	case 0xdfc47e45: //MissionManager.enableFactionalReconMissions
		TypeInfo<bool >::parseFromBinaryStream(&enableFactionalReconMissions, stream);
		return true;

	case 0x180a28fd: //MissionManager.enableFactionalEntertainerMissions
		TypeInfo<bool >::parseFromBinaryStream(&enableFactionalEntertainerMissions, stream);
		return true;

	}

	return false;
}

void MissionManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = MissionManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int MissionManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x89a45126; //MissionManager.server
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ZoneServer* > >::toBinaryStream(&server, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6c6177f; //MissionManager.missionNpcSpawnMap
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<MissionNpcSpawnMap >::toBinaryStream(&missionNpcSpawnMap, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xcb0e49a5; //MissionManager.craftingMissionItems
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&craftingMissionItems, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x625beb46; //MissionManager.bhTargetZones
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&bhTargetZones, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x558d02f7; //MissionManager.bhTargetsAtMissionLevel
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned int, Vector<String>*> >::toBinaryStream(&bhTargetsAtMissionLevel, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe9a8cdb8; //MissionManager.playerBountyList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, BountyTargetListElement*> >::toBinaryStream(&playerBountyList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x33edf8be; //MissionManager.enableFactionalCraftingMissions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&enableFactionalCraftingMissions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xdfc47e45; //MissionManager.enableFactionalReconMissions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&enableFactionalReconMissions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x180a28fd; //MissionManager.enableFactionalEntertainerMissions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&enableFactionalEntertainerMissions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 9;
}

MissionManagerImplementation::MissionManagerImplementation(ZoneServer* srv, ZoneProcessServer* impl) {
	_initializeImplementation();
	// server/zone/managers/mission/MissionManager.idl():  		server = srv;
	server = srv;
	// server/zone/managers/mission/MissionManager.idl():  		processor = impl;
	processor = impl;
	// server/zone/managers/mission/MissionManager.idl():  		playerBountyList.setNoDuplicateInsertPlan();
	(&playerBountyList)->setNoDuplicateInsertPlan();
	// server/zone/managers/mission/MissionManager.idl():  		enableFactionalCraftingMissions = false;
	enableFactionalCraftingMissions = false;
	// server/zone/managers/mission/MissionManager.idl():  		enableFactionalReconMissions = false;
	enableFactionalReconMissions = false;
	// server/zone/managers/mission/MissionManager.idl():  		enableFactionalEntertainerMissions = false;
	enableFactionalEntertainerMissions = false;
	// server/zone/managers/mission/MissionManager.idl():  		Logger.setLoggingName("MissionManager");
	Logger::setLoggingName("MissionManager");
	// server/zone/managers/mission/MissionManager.idl():  		missionNpcSpawnMap.loadSpawnPointsFromLua();
	(&missionNpcSpawnMap)->loadSpawnPointsFromLua();
	// server/zone/managers/mission/MissionManager.idl():  		loadLuaSettings();
	loadLuaSettings();
}

/*
 *	MissionManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


MissionManagerAdapter::MissionManagerAdapter(MissionManager* obj) : ObserverAdapter(obj) {
}

void MissionManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_LOADLUASETTINGS__:
		{
			loadLuaSettings();
		}
		break;
	case RPC_HANDLEMISSIONLISTREQUEST__MISSIONTERMINAL_CREATUREOBJECT_INT_:
		{
			handleMissionListRequest(static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_HANDLEMISSIONACCEPT__MISSIONTERMINAL_MISSIONOBJECT_CREATUREOBJECT_:
		{
			handleMissionAccept(static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_HANDLEMISSIONABORT__MISSIONOBJECT_CREATUREOBJECT_:
		{
			handleMissionAbort(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVEMISSION__MISSIONOBJECT_CREATUREOBJECT_:
		{
			removeMission(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_POPULATEMISSIONLIST__MISSIONTERMINAL_CREATUREOBJECT_INT_:
		{
			populateMissionList(static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_RANDOMGENERICDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_BOOL_INT_:
		{
			resp->insertBoolean(randomGenericDeliverMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), inv->getBooleanParameter(), inv->getSignedIntParameter()));
		}
		break;
	case RPC_RANDOMIZEGENERICBOUNTYMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_:
		{
			randomizeGenericBountyMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_RANDOMIZEGENERICCRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_:
		{
			randomizeGenericCraftingMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_RANDOMIZEGENERICDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_:
		{
			randomizeGenericDeliverMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_RANDOMIZEGENERICDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_:
		{
			randomizeGenericDestroyMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_RANDOMIZEGENERICENTERTAINERMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_INT_:
		{
			randomizeGenericEntertainerMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		}
		break;
	case RPC_RANDOMIZEGENERICHUNTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_:
		{
			randomizeGenericHuntingMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_RANDOMIZEGENERICRECONMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_:
		{
			randomizeGenericReconMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_RANDOMIZEGENERICSURVEYMISSION__CREATUREOBJECT_MISSIONOBJECT_INT_:
		{
			randomizeGenericSurveyMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_RANDOMIZESURVEYMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeSurveyMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeDestroyMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEBOUNTYMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeBountyMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeDeliverMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZECRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeCraftingMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEHUNTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeHuntingMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZERECONMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeReconMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEIMPERIALDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeImperialDestroyMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEIMPERIALDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeImperialDeliverMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEIMPERIALCRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeImperialCraftingMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEIMPERIALRECONMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeImperialReconMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEREBELDESTROYMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeRebelDestroyMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEREBELDELIVERMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeRebelDeliverMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEREBELCRAFTINGMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeRebelCraftingMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_RANDOMIZEREBELRECONMISSION__CREATUREOBJECT_MISSIONOBJECT_:
		{
			randomizeRebelReconMission(static_cast<CreatureObject*>(inv->getObjectParameter()), static_cast<MissionObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_:
		{
			createMissionObjectives(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATESURVEYMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_:
		{
			createSurveyMissionObjectives(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEDESTROYMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_:
		{
			createDestroyMissionObjectives(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEDELIVERMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_:
		{
			createDeliverMissionObjectives(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEENTERTAINERMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_:
		{
			createEntertainerMissionObjectives(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEHUNTINGMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_:
		{
			createHuntingMissionObjectives(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATERECONMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_:
		{
			createReconMissionObjectives(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEBOUNTYMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_:
		{
			createBountyMissionObjectives(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATECRAFTINGMISSIONOBJECTIVES__MISSIONOBJECT_MISSIONTERMINAL_CREATUREOBJECT_:
		{
			createCraftingMissionObjectives(static_cast<MissionObject*>(inv->getObjectParameter()), static_cast<MissionTerminal*>(inv->getObjectParameter()), static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETRANDOMFREENPCSPAWNPOINT__INT_FLOAT_FLOAT_INT_:
		{
			resp->insertLong(getRandomFreeNpcSpawnPoint(inv->getUnsignedIntParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getSignedIntParameter())->_getObjectID());
		}
		break;
	case RPC_CREATESPAWNPOINT__CREATUREOBJECT_STRING_:
		{
			String spawnTypes; 
			createSpawnPoint(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(spawnTypes));
		}
		break;
	case RPC_GETBOUNTYHUNTERMISSION__CREATUREOBJECT_:
		{
			resp->insertLong(getBountyHunterMission(static_cast<CreatureObject*>(inv->getObjectParameter()))->_getObjectID());
		}
		break;
	case RPC_GETDELIVERYMISSIONFILENAME__INT_:
		{
			resp->insertAscii(getDeliveryMissionFileName(inv->getSignedIntParameter()));
		}
		break;
	case RPC_GETDELIVERMISSIONNUMBEROFMISSIONS__INT_:
		{
			resp->insertSignedInt(getDeliverMissionNumberOfMissions(inv->getSignedIntParameter()));
		}
		break;
	case RPC_GETDELIVERMISSIONSPAWNTYPE__INT_:
		{
			resp->insertSignedInt(getDeliverMissionSpawnType(inv->getSignedIntParameter()));
		}
		break;
	case RPC_ADDPLAYERTOBOUNTYLIST__LONG_INT_:
		{
			addPlayerToBountyList(inv->getUnsignedLongParameter(), inv->getSignedIntParameter());
		}
		break;
	case RPC_REMOVEPLAYERFROMBOUNTYLIST__LONG_:
		{
			removePlayerFromBountyList(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_UPDATEPLAYERBOUNTYREWARD__LONG_INT_:
		{
			updatePlayerBountyReward(inv->getUnsignedLongParameter(), inv->getSignedIntParameter());
		}
		break;
	case RPC_ADDBOUNTYHUNTERTOPLAYERBOUNTY__LONG_LONG_:
		{
			addBountyHunterToPlayerBounty(inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter());
		}
		break;
	case RPC_REMOVEBOUNTYHUNTERFROMPLAYERBOUNTY__LONG_LONG_:
		{
			removeBountyHunterFromPlayerBounty(inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter());
		}
		break;
	case RPC_GETRANDOMPLAYERBOUNTY__CREATUREOBJECT_:
		{
			resp->insertLong(getRandomPlayerBounty(static_cast<CreatureObject*>(inv->getObjectParameter()))->_getObjectID());
		}
		break;
	case RPC_COMPLETEPLAYERBOUNTY__LONG_LONG_:
		{
			completePlayerBounty(inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter());
		}
		break;
	case RPC_FAILPLAYERBOUNTYMISSION__LONG_:
		{
			failPlayerBountyMission(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_FREEMISSIONNPC__NPCSPAWNPOINT_:
		{
			freeMissionNpc(static_cast<NpcSpawnPoint*>(inv->getObjectParameter()));
		}
		break;
	case RPC_DESPAWNMISSIONNPC__NPCSPAWNPOINT_:
		{
			despawnMissionNpc(static_cast<NpcSpawnPoint*>(inv->getObjectParameter()));
		}
		break;
	case RPC_DEACTIVATEMISSIONS__CREATUREOBJECT_:
		{
			deactivateMissions(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void MissionManagerAdapter::loadLuaSettings() {
	(static_cast<MissionManager*>(stub))->loadLuaSettings();
}

void MissionManagerAdapter::handleMissionListRequest(MissionTerminal* missionTerminal, CreatureObject* player, int counter) {
	(static_cast<MissionManager*>(stub))->handleMissionListRequest(missionTerminal, player, counter);
}

void MissionManagerAdapter::handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->handleMissionAccept(missionTerminal, mission, player);
}

void MissionManagerAdapter::handleMissionAbort(MissionObject* mission, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->handleMissionAbort(mission, player);
}

void MissionManagerAdapter::removeMission(MissionObject* mission, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->removeMission(mission, player);
}

void MissionManagerAdapter::populateMissionList(MissionTerminal* missionTerminal, CreatureObject* player, int counter) {
	(static_cast<MissionManager*>(stub))->populateMissionList(missionTerminal, player, counter);
}

bool MissionManagerAdapter::randomGenericDeliverMission(CreatureObject* player, MissionObject* mission, bool inTownMission, const int faction) {
	return (static_cast<MissionManager*>(stub))->randomGenericDeliverMission(player, mission, inTownMission, faction);
}

void MissionManagerAdapter::randomizeGenericBountyMission(CreatureObject* player, MissionObject* mission, const int faction) {
	(static_cast<MissionManager*>(stub))->randomizeGenericBountyMission(player, mission, faction);
}

void MissionManagerAdapter::randomizeGenericCraftingMission(CreatureObject* player, MissionObject* mission, const int faction) {
	(static_cast<MissionManager*>(stub))->randomizeGenericCraftingMission(player, mission, faction);
}

void MissionManagerAdapter::randomizeGenericDeliverMission(CreatureObject* player, MissionObject* mission, const int faction) {
	(static_cast<MissionManager*>(stub))->randomizeGenericDeliverMission(player, mission, faction);
}

void MissionManagerAdapter::randomizeGenericDestroyMission(CreatureObject* player, MissionObject* mission, const int faction) {
	(static_cast<MissionManager*>(stub))->randomizeGenericDestroyMission(player, mission, faction);
}

void MissionManagerAdapter::randomizeGenericEntertainerMission(CreatureObject* player, MissionObject* mission, const int faction, const int missionType) {
	(static_cast<MissionManager*>(stub))->randomizeGenericEntertainerMission(player, mission, faction, missionType);
}

void MissionManagerAdapter::randomizeGenericHuntingMission(CreatureObject* player, MissionObject* mission, const int faction) {
	(static_cast<MissionManager*>(stub))->randomizeGenericHuntingMission(player, mission, faction);
}

void MissionManagerAdapter::randomizeGenericReconMission(CreatureObject* player, MissionObject* mission, const int faction) {
	(static_cast<MissionManager*>(stub))->randomizeGenericReconMission(player, mission, faction);
}

void MissionManagerAdapter::randomizeGenericSurveyMission(CreatureObject* player, MissionObject* mission, const int faction) {
	(static_cast<MissionManager*>(stub))->randomizeGenericSurveyMission(player, mission, faction);
}

void MissionManagerAdapter::randomizeSurveyMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeSurveyMission(player, mission);
}

void MissionManagerAdapter::randomizeDestroyMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeDestroyMission(player, mission);
}

void MissionManagerAdapter::randomizeBountyMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeBountyMission(player, mission);
}

void MissionManagerAdapter::randomizeDeliverMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeDeliverMission(player, mission);
}

void MissionManagerAdapter::randomizeCraftingMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeCraftingMission(player, mission);
}

void MissionManagerAdapter::randomizeHuntingMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeHuntingMission(player, mission);
}

void MissionManagerAdapter::randomizeReconMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeReconMission(player, mission);
}

void MissionManagerAdapter::randomizeImperialDestroyMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeImperialDestroyMission(player, mission);
}

void MissionManagerAdapter::randomizeImperialDeliverMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeImperialDeliverMission(player, mission);
}

void MissionManagerAdapter::randomizeImperialCraftingMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeImperialCraftingMission(player, mission);
}

void MissionManagerAdapter::randomizeImperialReconMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeImperialReconMission(player, mission);
}

void MissionManagerAdapter::randomizeRebelDestroyMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeRebelDestroyMission(player, mission);
}

void MissionManagerAdapter::randomizeRebelDeliverMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeRebelDeliverMission(player, mission);
}

void MissionManagerAdapter::randomizeRebelCraftingMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeRebelCraftingMission(player, mission);
}

void MissionManagerAdapter::randomizeRebelReconMission(CreatureObject* player, MissionObject* mission) {
	(static_cast<MissionManager*>(stub))->randomizeRebelReconMission(player, mission);
}

void MissionManagerAdapter::createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->createMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->createSurveyMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createDestroyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->createDestroyMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createDeliverMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->createDeliverMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createEntertainerMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->createEntertainerMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createHuntingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->createHuntingMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createReconMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->createReconMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createBountyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->createBountyMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createCraftingMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->createCraftingMissionObjectives(mission, missionTerminal, player);
}

NpcSpawnPoint* MissionManagerAdapter::getRandomFreeNpcSpawnPoint(unsigned const int planetCRC, const float x, const float y, const int spawnType) {
	return (static_cast<MissionManager*>(stub))->getRandomFreeNpcSpawnPoint(planetCRC, x, y, spawnType);
}

void MissionManagerAdapter::createSpawnPoint(CreatureObject* player, const String& spawnTypes) {
	(static_cast<MissionManager*>(stub))->createSpawnPoint(player, spawnTypes);
}

MissionObject* MissionManagerAdapter::getBountyHunterMission(CreatureObject* player) {
	return (static_cast<MissionManager*>(stub))->getBountyHunterMission(player);
}

String MissionManagerAdapter::getDeliveryMissionFileName(const int faction) {
	return (static_cast<MissionManager*>(stub))->getDeliveryMissionFileName(faction);
}

int MissionManagerAdapter::getDeliverMissionNumberOfMissions(const int faction) {
	return (static_cast<MissionManager*>(stub))->getDeliverMissionNumberOfMissions(faction);
}

int MissionManagerAdapter::getDeliverMissionSpawnType(const int faction) {
	return (static_cast<MissionManager*>(stub))->getDeliverMissionSpawnType(faction);
}

void MissionManagerAdapter::addPlayerToBountyList(unsigned long long targetId, int reward) {
	(static_cast<MissionManager*>(stub))->addPlayerToBountyList(targetId, reward);
}

void MissionManagerAdapter::removePlayerFromBountyList(unsigned long long targetId) {
	(static_cast<MissionManager*>(stub))->removePlayerFromBountyList(targetId);
}

void MissionManagerAdapter::updatePlayerBountyReward(unsigned long long targetId, int reward) {
	(static_cast<MissionManager*>(stub))->updatePlayerBountyReward(targetId, reward);
}

void MissionManagerAdapter::addBountyHunterToPlayerBounty(unsigned long long targetId, unsigned long long bountyHunterId) {
	(static_cast<MissionManager*>(stub))->addBountyHunterToPlayerBounty(targetId, bountyHunterId);
}

void MissionManagerAdapter::removeBountyHunterFromPlayerBounty(unsigned long long targetId, unsigned long long bountyHunterId) {
	(static_cast<MissionManager*>(stub))->removeBountyHunterFromPlayerBounty(targetId, bountyHunterId);
}

BountyTargetListElement* MissionManagerAdapter::getRandomPlayerBounty(CreatureObject* player) {
	return (static_cast<MissionManager*>(stub))->getRandomPlayerBounty(player);
}

void MissionManagerAdapter::completePlayerBounty(unsigned long long targetId, unsigned long long bountyHunter) {
	(static_cast<MissionManager*>(stub))->completePlayerBounty(targetId, bountyHunter);
}

void MissionManagerAdapter::failPlayerBountyMission(unsigned long long bountyHunter) {
	(static_cast<MissionManager*>(stub))->failPlayerBountyMission(bountyHunter);
}

void MissionManagerAdapter::freeMissionNpc(NpcSpawnPoint* npc) {
	(static_cast<MissionManager*>(stub))->freeMissionNpc(npc);
}

void MissionManagerAdapter::despawnMissionNpc(NpcSpawnPoint* npc) {
	(static_cast<MissionManager*>(stub))->despawnMissionNpc(npc);
}

void MissionManagerAdapter::deactivateMissions(CreatureObject* player) {
	(static_cast<MissionManager*>(stub))->deactivateMissions(player);
}

/*
 *	MissionManagerHelper
 */

MissionManagerHelper* MissionManagerHelper::staticInitializer = MissionManagerHelper::instance();

MissionManagerHelper::MissionManagerHelper() {
	className = "MissionManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void MissionManagerHelper::finalizeHelper() {
	MissionManagerHelper::finalize();
}

DistributedObject* MissionManagerHelper::instantiateObject() {
	return new MissionManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionManagerHelper::instantiateServant() {
	return new MissionManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionManagerAdapter(static_cast<MissionManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

