package server.zone;

include system.lang.ref.Reference;
include system.lang.Math;
include system.lang.Object;
include system.util.SortedVector;

include server.zone.CloseObjectsVector;

import engine.core.ManagedObject;

import engine.util.Observable;

import engine.util.u3d.Vector3;
include engine.util.u3d.Coordinate;
include server.zone.TreeNode;

@json
class TreeEntry extends Observable {
	public native TreeEntry(TreeNode n = null);

	@dereferenced
	protected Coordinate coordinates;

	@dereferenced
	protected transient Coordinate worldCoordinates;

	transient protected TreeNode node;

	protected boolean bounding;

	@weakReference
	protected TreeEntry parent;

	transient protected CloseObjectsVector closeobjects;

	protected float radius;

	protected transient int receiverFlags;

	@dirty
	public native void addInRangeObject(TreeEntry obj, boolean doNotifyUpdate = true);

	@dirty
	public native void removeInRangeObject(TreeEntry obj, boolean notifyDisappear = true);

	@dirty
	public void removeInRangeObject(int index) {
		//System::out << "droping in range object with index:" << index << "\n";

		closeobjects.remove(index);
	}

	@dirty
	public void removeInRangeObjects() {
		//System::out << "droping  all in range objects\n";

		/*for (int i = 0; i < closeobjects.size(); ++i) {
			closeobjects.get(i).notifyRemovedFromCloseObjects();
		}*/

		closeobjects.removeAll();
	}


	/*@read
	public boolean containsInRangeObject(TreeEntry obj) {
		return closeobjects.contains(obj);
	}*/

	@dirty
	public abstract boolean isInRange(TreeEntry obj, float range) {
		return isInRange(obj.getPositionX(), obj.getPositionY(), obj.getPositionZ(), range);
	}

	@local
	public native abstract float getOutOfRangeDistance();

	@dirty
	public abstract boolean isInRange(float x, float y, float z, float range) {
		int rangesq = range * range;

		float deltaX = x - coordinates.getPositionX();
		float deltaY = y - coordinates.getPositionY();
		float deltaZ = z - coordinates.getPositionZ();
		float deltaCalc = deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;

		return deltaCalc < rangesq;
	}

	@dirty
	public abstract boolean isInRange(float x, float y, float range) {
		float rangesq = range * range;

		float deltaX = x - coordinates.getPositionX();
		float deltaY = y - coordinates.getPositionY();

		if (deltaX * deltaX + deltaY * deltaY <= rangesq)
			return true;
		else
			return false;
	}

	@read
	public float getDistanceTo(TreeEntry obj) {
		float x = obj.getPositionX();
		float y = obj.getPositionY();
		float z = obj.getPositionZ();

		float deltaX = x - coordinates.getPositionX();
		float deltaY = y - coordinates.getPositionY();
		float deltaZ = z - coordinates.getPositionZ();

		return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
	}

	@local
	@dirty
	public CloseObjectsVector getCloseObjects() {
		return closeobjects;
	}

	@dirty
	@weakReference
	public TreeEntry getParent() {
		return parent;
	}

	@dirty
	public native TreeEntry getParentUnsafe();

	@dirty
	public native TreeEntry getRootParentUnsafe();

	@dirty
	public abstract native boolean containsPoint(float x, float y, float z);

	@dirty
	public abstract native boolean containsPoint(float x, float y);

	@dirty
	public native TreeEntry getRootParent();

	@read
	@local
	public native boolean isInSWArea(TreeNode node);

	@read
	@local
	public native boolean isInSEArea(TreeNode node);

	@read
	@local
	public native boolean isInNWArea(TreeNode node);

	@read
	@local
	public native boolean isInNEArea(TreeNode node);

	@read
	@local
	public native boolean isInSW2Area(TreeNode node);

	@read
	@local
	public native boolean isInSE2Area(TreeNode node);

	@read
	@local
	public native boolean isInNW2Area(TreeNode node);

	@read
	@local
	public native boolean isInNE2Area(TreeNode node);

	@read
	@local
	public native boolean isInArea(TreeNode node);

	@dirty
	public abstract void notifyInsert(TreeEntry obj) {
	}

	@dirty
	public abstract void notifyPositionUpdate(TreeEntry obj) {
	}

	@dirty
	public abstract void notifyDissapear(TreeEntry obj) {
	}

	@read
	public float getPositionX() {
		return coordinates.getPositionX();
	}

	@read
	public float getPositionZ() {
		return coordinates.getPositionZ();
	}

	@read
	public float getPositionY() {
		return coordinates.getPositionY();
	}

	@read
	public float getPreviousPositionX() {
		return coordinates.getPreviousPositionX();
	}

	@read
	public float getPreviousPositionZ() {
		return coordinates.getPreviousPositionZ();
	}

	@read
	public float getPreviousPositionY() {
		return coordinates.getPreviousPositionY();
	}

	@local
	@dereferenced
	@read
	public Vector3 getPreviousPosition() {
		return coordinates.getPreviousPosition();
	}

	@local
	@dereferenced
	@read
	public Vector3 getPosition() {
		return coordinates.getPosition();
	}

	@nativeStub
	@dirty
	public native abstract int compareTo(TreeEntry obj);

	@read
	public abstract int registerToCloseObjectsReceivers() {
		return receiverFlags;
	}

	@read
	public abstract int getReceiverFlags() {
		return receiverFlags;
	}

	@read
	public boolean isInQuadTree() {
		return node;
	}

	@read
	public boolean isInOctree() {
		return node;
	}

	/*@read
	public int inRangeObjectCount() {
		return closeobjects.size();
	}*/

	@reference
	@read
	@local
	public TreeNode getNode() {
		return node;
	}

	@local
	public void setCloseObjects(CloseObjectsVector vec) {
		closeobjects = vec;
	}

	@nativeStub
	@dirty
	public abstract native unsigned long getDirtyObjectID();

	@dirty
	@nativeStub
	@virtualStub
	public abstract native unsigned long getObjectID();

	@read
	public float getRadius() {
		return radius;
	}

	@read
	public boolean isBounding() {
		return bounding;
	}

	@local
	public native void setNode(TreeNode n);

	public void setBounding() {
		bounding = true;
	}

	public void setRadius(float rad) {
		radius = rad;
	}

	public void clearBounding() {
		bounding = false;
	}

	@dirty
	public native abstract void setParent(TreeEntry par);

	@dirty
	public native abstract void initializePosition(@dereferenced final Vector3 value);

	@dirty
	public native abstract void initializePosition(float x, float z, float y);

	public native abstract void setPosition(@dereferenced final Vector3 value);

	public native abstract void setPosition(float x, float z, float y);

	public native abstract void updateWorldPosition(boolean initialize = false);

	@read
	public native abstract float getWorldPositionX();

	@read
	public native abstract float getWorldPositionY();

	@read
	public native abstract float getWorldPositionZ();

	@read
	@local
	@dereferenced
	public native abstract Vector3 getWorldPosition();
}