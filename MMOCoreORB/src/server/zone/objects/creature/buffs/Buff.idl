/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.creature.buffs;

import engine.core.ManagedObject;
import system.util.VectorMap;
import system.lang.ref.Reference;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.CreatureObject;
import system.lang.Time;
import engine.log.Logger;
include server.zone.ZoneProcessServer;
import server.zone.objects.creature.buffs.BuffDurationEvent;
include server.zone.objects.creature.buffs.BuffType;
include server.chat.StringIdChatParameter;

class Buff extends ManagedObject implements Logger {
	@weakReference
	protected CreatureObject creature;

	protected transient BuffDurationEvent buffEvent;

	@dereferenced
	protected VectorMap<byte, int> attributeModifiers;

	@dereferenced
	protected VectorMap<string, int> skillModifiers;

	@dereferenced
	protected Vector<unsigned long> states;

	protected boolean modsApplied;

	protected string buffName;
	protected float buffDuration;
	protected unsigned int buffCRC;
	protected int buffType;
	protected boolean fillAttributesOnBuff;

	@dereferenced
	protected StringIdChatParameter startMessage;
	@dereferenced
	protected StringIdChatParameter endMessage;

	@dereferenced
	protected StringIdChatParameter startSpam;
	@dereferenced
	protected StringIdChatParameter endSpam;

	protected byte spamColor;
	protected boolean broadcastSpam;

	protected string startFlyFile;
	protected string startFlyAux;
	protected byte startFlyRed;
	protected byte startFlyGreen;
	protected byte startFlyBlue;

	protected string endFlyFile;
	protected string endFlyAux;
	protected byte endFlyRed;
	protected byte endFlyGreen;
	protected byte endFlyBlue;

	@dereferenced
	protected Time nextExecutionTime;

	@dereferenced
	protected Vector<unsigned long> secondaryBuffCRCs;

	public Buff(CreatureObject creo, unsigned int buffcrc, float duration, int bufftype, unsigned long secondaryCRC = 0) {
		creature = creo;
		buffCRC = buffcrc;
		buffDuration = duration;
		buffType = bufftype;
		fillAttributesOnBuff = false;
		modsApplied = false;

		if (secondaryCRC != 0)
			secondaryBuffCRCs.add(secondaryCRC);

		startFlyFile = "";
		endFlyFile = "";

		spamColor = 0; //default, use buff->setSpamColor() to change. 0=white, 10=red, 11=yellow
		broadcastSpam = false; //default, use buff->setBroadcastSpam() to change.

		Logger.setLoggingName("Buff");

		init();
	}

	public native void initializeTransientMembers();

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	public native void notifyLoadFromDatabase();

	public native void loadBuffDurationEvent(CreatureObject creo);

	public native void init();

	public native abstract void sendTo(CreatureObject player);
	public native abstract void sendDestroyTo(CreatureObject player);

	@preLocked
	public native abstract void activate(boolean applyModifiers);
	@preLocked
	public native abstract void deactivate(boolean removeModifiers);

	public abstract void activate() {
		activate(true);
	}

	public abstract void deactivate() {
		deactivate(true);
	}

	@local
	public VectorMap<string, int> getSkillModifiers() {
		return skillModifiers;
	}

	public native abstract void applyAttributeModifiers();
	public native abstract void applySkillModifiers();
	public native abstract void applyStates();

	public native abstract void removeAttributeModifiers();
	public native abstract void removeSkillModifiers();
	public native abstract void removeStates();

	@preLocked
	public abstract native void clearBuffEvent();

	@preLocked
	public native void setBuffEventNull();

	@preLocked
	public native void scheduleBuffEvent();

	@preLocked
	public void renew(float newDuration = -1) {
		if (newDuration > 0)
			buffDuration = newDuration;

		clearBuffEvent();
		scheduleBuffEvent();
	}

	@preLocked
	public native abstract void parseAttributeModifierString(final string modifierstring);
	@preLocked
	public native abstract void parseSkillModifierString(final string modifierstring);

	public native abstract string getAttributeModifierString();
	public native abstract string getSkillModifierString();

	public native abstract float getTimeLeft();

	@preLocked
	public void setAttributeModifier(byte attribute, int value) {
		if (attributeModifiers.contains(attribute))
			attributeModifiers.get(attribute) = value;
		else
			attributeModifiers.put(attribute, value);
	}

	@preLocked
	public void setSkillModifier(final string modname, int value) {
		if (skillModifiers.contains(modname))
			skillModifiers.get(modname) = value;
		else
			skillModifiers.put(modname, value);
	}

	@preLocked
	public void addState(unsigned long option) {
		states.add(option);
	}

	@preLocked
	public void setSpeedMultiplierMod(float multiplier) {
		setSkillModifier("private_speed_multiplier", multiplier * 100);
	}

	@preLocked
	public void setAccelerationMultiplierMod(float multiplier) {
		setSkillModifier("private_acceleration_multiplier", multiplier * 100);
	}

	public float getSpeedMultiplierMod() {
		int speed = getSkillModifierValue("private_speed_multiplier");
		float multiplier = speed / 100.0;

		return multiplier;
	}

	public float getAccelerationMultiplierMod() {
		int acceleration = getSkillModifierValue("private_acceleration_multiplier");
		float multiplier = acceleration / 100.0;

		return multiplier;
	}

	@preLocked
	public void setFillAttributesOnBuff(boolean val) {
		fillAttributesOnBuff = val;
	}

	//Getters
	public string getBuffName() {
		return buffName;
	}

	public unsigned int getBuffCRC() {
		return buffCRC;
	}

	public float getBuffDuration() {
		return buffDuration;
	}

	public int getBuffType() {
		return buffType;
	}

	@local
	public VectorMap<byte, int> getAttributeModifiers() {
		return attributeModifiers;
	}

	public abstract int getAttributeModifierValue(byte attribute) {
		if (attributeModifiers.contains(attribute))
			return attributeModifiers.get(attribute);

		return 0;
	}

	public abstract int getSkillModifierValue(final string modname) {
		if (skillModifiers.contains(modname))
			return skillModifiers.get(modname);

		return 0;
	}

	public native boolean isActive();

	public boolean isSpiceBuff() {
		return (buffType == BuffType.SPICE);
	}

	public boolean isAttributeBuff() {
		return (attributeModifiers.size() != 0);
	}

	@local
	@preLocked
	public native void setStartMessage(@dereferenced StringIdChatParameter start);
	@local
	@preLocked
	public native void setEndMessage(@dereferenced StringIdChatParameter end);

	@local
	@preLocked
	public native void setStartSpam(@dereferenced StringIdChatParameter start);
	@local
	@preLocked
	public native void setEndSpam(@dereferenced StringIdChatParameter end);

	@preLocked
	public native void setSpamColor(byte color);

	@preLocked
	public native void setBroadcastSpam(boolean value);

	@preLocked
	public native void setStartFlyText(final string file, final string aux, byte red, byte green, byte blue);

	@preLocked
	public native void setEndFlyText(final string file, final string aux, byte red, byte green, byte blue);

	@preLocked
	public void addSecondaryBuffCRC(unsigned long secondaryCRC) {
		if (secondaryCRC != 0 && !secondaryBuffCRCs.contains(secondaryCRC))
			secondaryBuffCRCs.add(secondaryCRC);
	}

	@local
	@dirty
	public Vector<unsigned long> getSecondaryBuffCRCs() {
		return secondaryBuffCRCs;
	}

	@read
	public boolean hasMods() {
		return modsApplied;
	}

	@preLocked
	public void setModsApplied(boolean applied) {
		modsApplied = applied;
	}
}
