/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.creature.buffs;

import engine.core.ManagedObject;
import system.util.VectorMap;
import system.lang.ref.Reference;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.CreatureObject;
import system.lang.Time;

include server.zone.ZoneProcessServer;
import server.zone.objects.creature.buffs.BuffDurationEvent;
import server.zone.objects.creature.buffs.Buff;
include server.zone.objects.creature.buffs.BuffType;
include server.chat.StringIdChatParameter;
include server.zone.objects.scene.ObserverEventType;

class SpiceDownerBuff extends Buff {
	public SpiceDownerBuff(CreatureObject creo, final string name, unsigned int buffCRC, int duration) {
		super(creo, buffCRC, duration, BuffType.SPICE);

		super.buffName = name;
	}

	@preLocked
	public void activate(boolean applyModifiers) {
		super.creature.sendSystemMessage("@spice/spice:" + super.buffName + "_downer");

		if (super.creature.hasBuff(BuffCRC.FOOD_REDUCE_SPICE_DOWNTIME)) {
			Buff buff = super.creature.getBuff(BuffCRC.FOOD_REDUCE_SPICE_DOWNTIME);

			if (buff != null) {
				super.buffDuration = super.buffDuration * (100.0 - buff.getSkillModifierValue("reduce_spice_downtime")) / 100.0;
			}
		}

		super.activate(applyModifiers);
		super.creature.notifyObservers(ObserverEventType.SPICEDOWNERACTIVATED, super.creature, 0);
	}

	@preLocked
	public void deactivate(boolean applyModifiers) {
		super.creature.sendSystemMessage("@spice/spice:" + super.buffName + "_done");

		super.deactivate(true);
	}
}
