
/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.creature.ai;

import server.zone.objects.creature.CreatureObject;
import server.zone.packets.object.ObjectMenuResponse;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.ai.AiAgent;
import server.zone.objects.tangible.components.droid.BaseDroidModuleComponent;
include server.zone.objects.tangible.tool.CraftingStation;
include server.zone.objects.structure.StructureObject;
include system.util.Vector;
include system.lang.ref.Reference;

class DroidObject extends AiAgent {

	/**
	 * Droid's power when recharged
	 */
	public static final int MAX_POWER = 1000;

	/**
	 * Current amount of power
	 */
	protected int power;

	/**
	 * Current paint decay
	 */
	protected int paintCount;

	/**
	 * Maximum paint charges
	 */
	public static final int PAINTCHARGES = 999;

	/**
	 * Armor type
	 */
	protected unsigned int armor;

	/**
	 * Damage resistance (same for all types except lightsaber)
	 */
	protected float resist;

	/**
	 * List of installed droid modules
	 */
	@dereferenced
	protected transient Vector<Reference<BaseDroidModuleComponent> > modules;

	/**
	 * Droid hit chance
	 */
	protected float hitChance;

	public native void initializeTransientMembers();

	/**
	 * Droid species for Identification
	 */
	public static final int ASSASSIN_DROID = 0xCB;
	public static final int R_SERIES = 0xCC;
	public static final int ROBO_BARTENDER = 0xCD;
	public static final int BUG_DROID = 0xCE;
	public static final int DARK_TROOPER_II = 0xCF;
	public static final int DEMOLITION_MECH = 0xD0;
	public static final int TT_8L_Y7 = 0xD1;
	public static final int DROIDECA = 0xD2;
	public static final int INTERROGATOR = 0xD3;
	public static final int JEDI_TRAINING = 0xD4;
	public static final int BLL = 0xD5;
	public static final int MSE = 0xD6;
	public static final int POWER_DROID = 0xD7;
	public static final int PROBOT = 0xD8;
	public static final int PROTOCOL = 0xD9;
	public static final int LE_REPAIR = 0xDA;
	public static final int MONK_SPIDER = 0xDB;
	public static final int SURGICAL = 0xDC;
	public static final int TT_8L = 0xDD;
	public static final int DZ70 = 0xDE;
	public static final int TREADWELL = 0xDF;
	public static final int PROBE_DROID = 0xE1;

	protected int maximumHam;
	protected int minDamage;
	protected int maxDamage;
	protected float attackSpeed;
	
	public DroidObject() {
		Logger.setLoggingName("DroidObject");
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);
		power = MAX_POWER;
		paintCount = 0;
		maximumHam = 55;
		minDamage = 1;
		maxDamage = 1;	
		attackSpeed = 2.0;
		armor = 0;
		resist = 0;
		hitChance = 0.2;
	}

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	@local
	@dirty
	@preLocked
	@arg1preLocked
	public native abstract int handleObjectMenuSelect(CreatureObject player, byte selectedID);	

	/**
	 * Fills the module radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	@local
	@dirty
	public native abstract void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);

	/**
	 * Inserts this object into zone
	 * @pre { this object is locked }
	 * @post { this object is locked and inserted into zone }
	 * @param zone Zone object where this object will be inserted
	 */
	@local
	public native void notifyInsertToZone(Zone zone);

	@dirty
	public boolean isDroidObject() {
		return true;
	}
	
	@dirty
	public int getMaximumHAM() {
		return maximumHam;
	}
	
	@preLocked
	public void setMaximumHAM(int idx) {
		maximumHam = idx;
	}
	
	public void setAttackSpeed(float f) {
		attackSpeed = f;
	}
	
	@dirty
	public boolean isCamouflaged(CreatureObject target) {
		return isAggressiveTo(target) && isConcealed(target);
	}

	@dirty
	public boolean hasPower(){
		return power > 0;
	}

	/**
	 * Consumes power
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param amount int the amount of power to use
	 */
	@preLocked
	public void usePower( int amount ){
		power = power - amount;
		if( power <= 0 ){
			power = 0;
			handleLowPower();
		}
	}

	@dirty
	@preLocked
	public native void runModulePowerDrain();

	/**
	 * Reset paint back to full
	 */
	@preLocked
	public void refreshPaint() {
		paintCount = PAINTCHARGES;
	}

	/**
	 * Handles the recharge droid radial selection
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @returns 0 if successful, 1 otherwise
	 */
	@preLocked
	@arg1preLocked
	public native int rechargeFromBattery(CreatureObject player);

	/**
	 * Handles droid being recharged by another droid
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param player CreatureObject that selected the option
	 */
	@preLocked
	public native void rechargeFromDroid();

	/**
	 * Instructs droid to recharge another droid
	 * @pre { this object is locked, droid is locked }
	 * @post { this object is locked, droid is locked }
	 * @param droid DroidObject that selected the option
	 */
	@preLocked
	@arg1preLocked
	public native void rechargeOtherDroid( DroidObject otherDroid );	

	/**
	 * Called when the droid runs out of power
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 */
	@preLocked
	public native void handleLowPower();

	/**
	 * Whether or not droid is a power droid
	 */
	@dirty
	public native boolean isPowerDroid();

	/**
	 * Initializes droid modules from crafted_components scenos
	 */
	@local
	public native void initDroidModules();

	@local
	@preLocked
	public native void initDroidWeapons();

	/**
	 * Returns a crafting station of the given type if droid has the appropriate module. Returns NULL otherwise.
	 */
	@local
	public native CraftingStation getCraftingStation(int type);

	/**
	 * Returns a reaction stf if the droid has a personality chip
	 */
	@local
	public native string getPersonalityBase();

	@local
	@dirty
	@reference
	public native BaseDroidModuleComponent getModule(final string name);

	@local
	@preLocked
	public native void onStore();
	@local
	@preLocked
	public native void onCall();
	@local
	@preLocked
	public native void loadSkillMods(CreatureObject player);
	@local
	@preLocked
	public native void unloadSkillMods(CreatureObject player);

	/**
	 * Handles chat messages to the droid and hands it off to the modules
	 * @pre { }
	 * @post { }
	 * @param object player creature speaking
	 * @param string chat message
	 */
	@local
	public native void handleChat(CreatureObject speaker, final string message);

	/**
	 * Set armor type (from armor module)
	 */
	@local
	@preLocked
	public void setArmor(unsigned int level){
		armor = level;
	}

	/**
	 * Set droid hit chance (form combat module)
	 */
	@local
	@preLocked
	public void setHitChance(float v) {
		hitChance = v;
	}

	/**
	 * Set resists (from armor module)
	 */
	@local
	@preLocked
	public void setResists(float res){
		resist = res;
	}
	
	@local
	@preLocked
	public void setMaxDamage(int i){
		maxDamage = i;
	}	
	
	@local
	@preLocked
	public void setMinDamage(int i){
		minDamage = i;
	}	

	@local
	public unsigned int getArmor(){
		if( isPet() ){
			return armor;
		}
		else{
			return super.getArmor();
		}
	}

	@dirty
	public float getKinetic(){
		if( isPet() ){
			return resist;
		}
		else{
			return super.getKinetic();
		}
	}

	@dirty
	public float getEnergy(){
		if( isPet() ){
			return resist;
		}
		else{
			return super.getEnergy();
		}
	}

	@dirty
	public float getElectricity() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getElectricity();
		}
	}

	@dirty
	public float getStun() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getStun();
		}
	}

	@dirty
	public float getBlast() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getBlast();
		}
	}

	@dirty
	public float getHeat() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getHeat();
		}
	}

	@dirty
	public float getCold() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getCold();
		}
	}

	@dirty
	public float getAcid() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getAcid();
		}
	}

	@dirty
	public float getLightSaber() {
		if( isPet() ){
			return -1; // Pet droids never have lightsaber resistance
		}
		else{
			return super.getLightSaber();
		}
	}

	@dirty
	public float getChanceHit() {
		if (isPet()) {
			return hitChance;
		} else {
			return super.getChanceHit();
		}
	}
	@dirty
	public native boolean isMerchantBarker();
	@dirty
	public native string getPersonalityStf();

	@dirty
	public native boolean isAdvancedModel();

	@dirty
	public native boolean isCombatDroid();

	@dirty
	public native boolean isTrapDroid();

	@dirty
	public native boolean hasStorage();

	@dirty
	public native boolean isMaintenanceDroid();

	@local
	@preLocked
	public native boolean assignStructure( StructureObject structure );

	@local
	public native boolean isStructureAssigned(StructureObject structure);

	/**
	 * sends the conversation notification 
	 * @pre {this locked, player locked }
	 * @post { this locked, player locked }
	 * @return whether the conversation was started or not
	 */
	@dirty
	@preLocked
	public native boolean sendConversationStartTo(SceneObject player);

	public boolean hasReactionChatMessages() {
		return getPersonalityBase() != "" || super.hasReactionChatMessages();
	}

	@dirty
	public string getReactionStf() {
		if (getPersonalityBase() != "")
			return getPersonalityBase();

		return super.getReactionStf();
	}
	
	@dirty
	public int getHamMaximum() {
		return maximumHam;
	}
	
	@dirty
	public int getHamBase() {
		return maximumHam;
	}
	
	@dirty
	public int getDamageMin() {
		if (isPet())
			return minDamage;
		else
			return super.getDamageMin();
	}

	@dirty
	public int getDamageMax() {
		if(isPet())
			return maxDamage;
		else	
			return super.getDamageMax();
	}

	@dirty
	public float getAttackSpeed() {
		return attackSpeed;
	}

	@dirty
	@preLocked
	public float calculateAttackSpeed(int level) {
		if (isPet()) 
			return attackSpeed;
		else
			return super.calculateAttackSpeed(level);
	}
}
