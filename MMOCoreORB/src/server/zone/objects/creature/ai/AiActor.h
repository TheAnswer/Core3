/*
 *	server/zone/objects/creature/ai/AiActor.h generated by engine3 IDL compiler 0.60
 */

#ifndef AIACTOR_H_
#define AIACTOR_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace events {

class AiThinkEvent;

} // namespace events
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::events;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace events {

class AiMoveEvent;

} // namespace events
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::events;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace events {

class AiAwarenessEvent;

} // namespace events
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::events;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace events {

class DespawnCreatureOnPlayerDissappear;

} // namespace events
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::events;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {
namespace bt {

class Behavior;

} // namespace bt
} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai::bt;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {
namespace bt {

class BehaviorTreeList;

} // namespace bt
} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai::bt;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {
namespace bt {

class BehaviorTree;

} // namespace bt
} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai::bt;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class WeaponObject;

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObject;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "gmock/gmock.h"

#include "server/zone/objects/creature/ai/components/AiStateComponent.h"

#include "server/zone/objects/creature/PatrolPointsVector.h"

#include "server/zone/objects/creature/PatrolPoint.h"

#include "engine/util/u3d/QuadTreeEntry.h"

#include "system/thread/Mutex.h"

#include "server/zone/templates/AiTemplate.h"

#include "server/zone/objects/creature/variables/CreatureTemplateReference.h"

#include "system/thread/Mutex.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/lang/Time.h"

#include "system/util/Vector.h"

#include "system/util/ArrayQueue.h"

#include "system/util/HashTable.h"

#include "system/lang/ref/Reference.h"

#include "engine/core/ManagedObject.h"

#include "system/lang/Time.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiActor : public SceneObject {
public:
	unsigned static const short FINISHED = 0;

	unsigned static const short UNFINISHED = 1;

	unsigned static const short ATTACKED = 2;

	unsigned static const short INTERESTED = 3;

	unsigned static const short DEAD = 4;

	unsigned static const short ALMOSTDEAD = 5;

	unsigned static const short SCARED = 6;

	unsigned static const short FORGOT = 7;

	unsigned static const short NONE = 0xFFFF;

	static const int UPDATEMOVEMENTINTERVAL = 500;

	AiActor();

	void setHost(CreatureObject* creo);

	CreatureObject* getHost();

	void initializeTransientMembers();

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void notifyPositionUpdate(QuadTreeEntry* entry);

	void setCurrentMessage(unsigned short msg);

	void next(unsigned short msg);

	void next();

	void destroyActor();

	void doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target);

	void addTransition(const String& stateName, unsigned short msg, const String& resultState);

	void loadTemplateData(CreatureTemplate* templateData);

	CreatureTemplateReference* getNpcTemplate();

	void setLevel(int lvl);

	int calculateAttackMinDamage(int level);

	int calculateAttackMaxDamage(int level);

	float calculateAttackSpeed(int level);

	bool isCamouflaged(CreatureObject* target);

	bool isScentMasked(CreatureObject* target);

	bool isConcealed(CreatureObject* target);

	void activateRecovery();

	void activateMovementEvent();

	void activateAwarenessEvent(CreatureObject* target);

	void activatePostureRecovery();

	void queueDizzyFallEvent();

	void setNextPosition(PatrolPoint& point);

	void setNextStepPosition(float x, float z, float y, SceneObject* cell = NULL);

	PatrolPoint* getNextStepPosition();

	void setShowNextPosition(bool val);

	bool isShowNextPosition();

	Vector<ManagedReference<SceneObject* > >* getMovementMarkers();

	int getMovementMarkersSize();

	SceneObject* getMovementMarker(int i);

	void dropMovementMarker(SceneObject* marker);

	void dropAllMovemementMarkers();

	void addMovementMarker(SceneObject* marker);

	void clearPatrolPoints();

	PatrolPointsVector* getPatrolPoints();

	void addPatrolPoint(PatrolPoint& point);

	void setHomeLocation(float x, float z, float y, SceneObject* cell = NULL);

	PatrolPoint* getHomeLocation();

	void setDespawnOnNoPlayerInRange(bool val);

	void notifyDespawn(Zone* zone);

	void scheduleDespawn(int timeToDespawn);

	void respawn(Zone* zone, int level);

	void scheduleDespawn();

	void clearDespawnEvent();

	void setRespawnTimer(float resp);

	float getRespawnTimer();

	bool getDespawnOnNoPlayerInRange();

	int getNumberOfPlayersInRange();

	void notifyInsert(QuadTreeEntry* entry);

	void notifyDissapear(QuadTreeEntry* entry);

	int notifyConverseObservers(CreatureObject* converser);

	SceneObject* getFollowObject();

	void setFollowObject(SceneObject* targ);

	void setTargetObject(SceneObject* obj);

	void setOblivious();

	void setDefender(SceneObject* defender);

	void addDefender(SceneObject* defender);

	void removeDefender(SceneObject* defender);

	bool isAttackableBy(CreatureObject* object);

	bool isAggressiveTo(CreatureObject* object);

	void updateLastDamageReceived();

	void sendConversationStartTo(SceneObject* player);

	float getKinetic();

	float getEnergy();

	float getElectricity();

	float getStun();

	float getBlast();

	float getHeat();

	float getCold();

	float getAcid();

	float getLightSaber();

	bool isStalker();

	bool isKiller();

	unsigned int getFerocity();

	unsigned int getArmor();

	String getFactionString();

	String getSocialGroup();

	float getChanceHit();

	int getDamageMin();

	int getDamageMax();

	int getBaseXp();

	unsigned int getDiet();

	CreatureAttackMap* getAttackMap();

	LootGroupCollection* getLootGroups();

	CreatureTemplate* getCreatureTemplate();

	Vector<ManagedReference<WeaponObject* > > getWeapons();

	Time getLastDamageReceived();

	bool isActorObject();

	int getBehaviorStatus(Behavior* b);

	void setBehaviorStatus(Behavior* b, int status);

	void addBehaviorToTree(BehaviorTree* tree, Behavior* b);

	Behavior* getNextBehaviorFromTree(BehaviorTree* tree);

	void resetBehaviorList(BehaviorTree* tree);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	AiActor(DummyConstructorParameter* param);

	virtual ~AiActor();

	friend class AiActorHelper;
};

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace ai {

class AiActorImplementation : public SceneObjectImplementation {
public:
	unsigned static const short FINISHED = 0;

	unsigned static const short UNFINISHED = 1;

	unsigned static const short ATTACKED = 2;

	unsigned static const short INTERESTED = 3;

	unsigned static const short DEAD = 4;

	unsigned static const short ALMOSTDEAD = 5;

	unsigned static const short SCARED = 6;

	unsigned static const short FORGOT = 7;

	unsigned static const short NONE = 0xFFFF;

protected:
	VectorMap<String, String> transitions;

	HashTable<Behavior*, int> statuses;

	HashTable<BehaviorTree*, BehaviorTreeList*> trees;

	Reference<AiStateComponent* > currentState;

	String currentStateName;

	String defaultStateName;

	Reference<AiTemplate* > aiTemplate;

	CreatureTemplateReference npcTemplate;

	Vector<ManagedReference<WeaponObject* > > weapons;

	Vector<ManagedReference<SceneObject* > > camouflagedObjects;

	bool loadedOutfit;

	unsigned short currentMessage;

	ManagedReference<CreatureObject* > host;

	float respawnTimer;

	bool despawnOnNoPlayerInRange;

	int numberOfPlayersInRange;

	Reference<AiThinkEvent* > thinkEvent;

	Reference<AiMoveEvent* > moveEvent;

	Reference<AiAwarenessEvent* > awarenessEvent;

	Reference<DespawnCreatureOnPlayerDissappear* > despawnEvent;

	Reference<Vector<String>* > skillCommands;

	PatrolPointsVector patrolPoints;

	PatrolPoint homeLocation;

	PatrolPoint nextStepPosition;

	bool baby;

	ManagedReference<SceneObject* > followObject;

	Mutex targetMutex;

	Time lastDamageReceived;

public:
	static const int UPDATEMOVEMENTINTERVAL = 500;

protected:
	bool showNextMovementPosition;

	Reference<Vector<ManagedReference<SceneObject* > >* > movementMarkers;

public:
	AiActorImplementation();

	AiActorImplementation(DummyConstructorParameter* param);

	void setHost(CreatureObject* creo);

	CreatureObject* getHost();

	void initializeTransientMembers();

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void notifyPositionUpdate(QuadTreeEntry* entry);

	void setCurrentMessage(unsigned short msg);

	void next(unsigned short msg);

	void next();

	void destroyActor();

	void doAwarenessCheck(Coordinate& start, unsigned long long time, CreatureObject* target);

	void addTransition(const String& stateName, unsigned short msg, const String& resultState);

	void loadTemplateData(CreatureTemplate* templateData);

	CreatureTemplateReference* getNpcTemplate();

	void setLevel(int lvl);

	int calculateAttackMinDamage(int level);

	int calculateAttackMaxDamage(int level);

	float calculateAttackSpeed(int level);

	bool isCamouflaged(CreatureObject* target);

	bool isScentMasked(CreatureObject* target);

	bool isConcealed(CreatureObject* target);

	virtual void activateRecovery();

	virtual void activateMovementEvent();

	void activateAwarenessEvent(CreatureObject* target);

	void activatePostureRecovery();

	void queueDizzyFallEvent();

	void setNextPosition(PatrolPoint& point);

	void setNextStepPosition(float x, float z, float y, SceneObject* cell = NULL);

	PatrolPoint* getNextStepPosition();

	void setShowNextPosition(bool val);

	bool isShowNextPosition();

	Vector<ManagedReference<SceneObject* > >* getMovementMarkers();

	int getMovementMarkersSize();

	SceneObject* getMovementMarker(int i);

	void dropMovementMarker(SceneObject* marker);

	void dropAllMovemementMarkers();

	void addMovementMarker(SceneObject* marker);

	void clearPatrolPoints();

	PatrolPointsVector* getPatrolPoints();

	void addPatrolPoint(PatrolPoint& point);

	void setHomeLocation(float x, float z, float y, SceneObject* cell = NULL);

	PatrolPoint* getHomeLocation();

	void setDespawnOnNoPlayerInRange(bool val);

	void notifyDespawn(Zone* zone);

	void scheduleDespawn(int timeToDespawn);

	void respawn(Zone* zone, int level);

	void scheduleDespawn();

	void clearDespawnEvent();

	void setRespawnTimer(float resp);

	float getRespawnTimer();

	bool getDespawnOnNoPlayerInRange();

	int getNumberOfPlayersInRange();

	void notifyInsert(QuadTreeEntry* entry);

	void notifyDissapear(QuadTreeEntry* entry);

	int notifyConverseObservers(CreatureObject* converser);

	SceneObject* getFollowObject();

	void setFollowObject(SceneObject* targ);

	void setTargetObject(SceneObject* obj);

	void setOblivious();

	void setDefender(SceneObject* defender);

	void addDefender(SceneObject* defender);

	void removeDefender(SceneObject* defender);

	bool isAttackableBy(CreatureObject* object);

	bool isAggressiveTo(CreatureObject* object);

	void updateLastDamageReceived();

	void sendConversationStartTo(SceneObject* player);

	float getKinetic();

	float getEnergy();

	float getElectricity();

	float getStun();

	float getBlast();

	float getHeat();

	float getCold();

	float getAcid();

	float getLightSaber();

	bool isStalker();

	bool isKiller();

	unsigned int getFerocity();

	unsigned int getArmor();

	String getFactionString();

	String getSocialGroup();

	float getChanceHit();

	int getDamageMin();

	int getDamageMax();

	int getBaseXp();

	unsigned int getDiet();

	CreatureAttackMap* getAttackMap();

	LootGroupCollection* getLootGroups();

	CreatureTemplate* getCreatureTemplate();

	Vector<ManagedReference<WeaponObject* > > getWeapons();

	Time getLastDamageReceived();

	bool isActorObject();

	int getBehaviorStatus(Behavior* b);

	void setBehaviorStatus(Behavior* b, int status);

	void addBehaviorToTree(BehaviorTree* tree, Behavior* b);

	Behavior* getNextBehaviorFromTree(BehaviorTree* tree);

	void resetBehaviorList(BehaviorTree* tree);

	WeakReference<AiActor*> _this;

	operator const AiActor*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~AiActorImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class AiActor;
};

class AiActorAdapter : public SceneObjectAdapter {
public:
	AiActorAdapter(AiActor* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setHost(CreatureObject* creo);

	CreatureObject* getHost();

	void initializeTransientMembers();

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void notifyPositionUpdate(QuadTreeEntry* entry);

	void setCurrentMessage(unsigned short msg);

	void next(unsigned short msg);

	void next();

	void destroyActor();

	void addTransition(const String& stateName, unsigned short msg, const String& resultState);

	void setLevel(int lvl);

	int calculateAttackMinDamage(int level);

	int calculateAttackMaxDamage(int level);

	float calculateAttackSpeed(int level);

	bool isCamouflaged(CreatureObject* target);

	bool isScentMasked(CreatureObject* target);

	bool isConcealed(CreatureObject* target);

	void activateRecovery();

	void activateMovementEvent();

	void activateAwarenessEvent(CreatureObject* target);

	void activatePostureRecovery();

	void queueDizzyFallEvent();

	void setNextStepPosition(float x, float z, float y, SceneObject* cell);

	void setShowNextPosition(bool val);

	bool isShowNextPosition();

	int getMovementMarkersSize();

	SceneObject* getMovementMarker(int i);

	void dropMovementMarker(SceneObject* marker);

	void dropAllMovemementMarkers();

	void addMovementMarker(SceneObject* marker);

	void clearPatrolPoints();

	void setHomeLocation(float x, float z, float y, SceneObject* cell);

	void setDespawnOnNoPlayerInRange(bool val);

	void notifyDespawn(Zone* zone);

	void scheduleDespawn(int timeToDespawn);

	void respawn(Zone* zone, int level);

	void scheduleDespawn();

	void clearDespawnEvent();

	void setRespawnTimer(float resp);

	float getRespawnTimer();

	bool getDespawnOnNoPlayerInRange();

	int getNumberOfPlayersInRange();

	void notifyInsert(QuadTreeEntry* entry);

	void notifyDissapear(QuadTreeEntry* entry);

	int notifyConverseObservers(CreatureObject* converser);

	SceneObject* getFollowObject();

	void setFollowObject(SceneObject* targ);

	void setTargetObject(SceneObject* obj);

	void setOblivious();

	void setDefender(SceneObject* defender);

	void addDefender(SceneObject* defender);

	void removeDefender(SceneObject* defender);

	bool isAttackableBy(CreatureObject* object);

	bool isAggressiveTo(CreatureObject* object);

	void updateLastDamageReceived();

	void sendConversationStartTo(SceneObject* player);

	float getKinetic();

	float getEnergy();

	float getElectricity();

	float getStun();

	float getBlast();

	float getHeat();

	float getCold();

	float getAcid();

	float getLightSaber();

	bool isStalker();

	bool isKiller();

	unsigned int getFerocity();

	unsigned int getArmor();

	String getFactionString();

	String getSocialGroup();

	float getChanceHit();

	int getDamageMin();

	int getDamageMax();

	int getBaseXp();

	unsigned int getDiet();

	bool isActorObject();

};

class AiActorHelper : public DistributedObjectClassHelper, public Singleton<AiActorHelper> {
	static AiActorHelper* staticInitializer;

public:
	AiActorHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<AiActorHelper>;
};

class MockAiActor : public AiActor {
public:


};

} // namespace ai
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::ai;

#endif /*AIACTOR_H_*/
