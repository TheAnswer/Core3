/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.creature.ai;

import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.ai.AiAgent;
import server.zone.packets.object.ObjectMenuResponse;
include server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.ai.CreatureTemplate;
import server.zone.Zone;

class Creature extends AiAgent {

	@dereferenced
	private transient SortedVector<unsigned long> alreadyHarvested;

	private short milkState;

	private short dnaState;

	private short dnaSampleCount;

	protected boolean baby;

	public Creature() {
		baby = false;
		Logger.setLoggingName("Creature");
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);
	}

	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();

	@dirty
	public boolean isCreature() {
		return true;
	}

	@read
	public short getDnaState() {
		return dnaState;
	}

	@read
	public short getDnaSampleCount(){
		return dnaSampleCount;
	}

	@preLocked
	public void incDnaSampleCount() {
		dnaSampleCount++;
	}

	@dirty
	public boolean isCamouflaged(CreatureObject target) {
		return isAggressiveTo(target) && (isScentMasked(target) || isConcealed(target));
	}

	@local
	@dirty
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	@preLocked
	@arg1preLocked
	public native int handleObjectMenuSelect(CreatureObject player, byte selectedID);

	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	@local
	public native void loadTemplateDataForBaby(CreatureTemplate templateData);

	public native void scheduleDespawn(); 

	public native boolean hasOrganics();

	public native boolean hasMilk();

	public native boolean hasDNA();

	public native boolean canHarvestMe(CreatureObject player);
	public native boolean canDroidHarvestMe(CreatureObject player,CreatureObject droid);

	public native boolean hasSkillToHarvestMe(CreatureObject player);

	public native boolean canTameMe(CreatureObject player);

	public native float getChanceToTame(CreatureObject player);

	public native boolean canMilkMe(CreatureObject player);

	public native boolean canCollectDna(CreatureObject player);

	public native boolean hasSkillToSampleMe(CreatureObject player);

	@preLocked
	public native void addAlreadyHarvested(CreatureObject player);

	@preLocked
	public native void setMilkState(short milkState);

	@preLocked
	public native void setDnaState(short dnaState);

	@preLocked
	public native void notifyDespawn(Zone zone);

	@preLocked
	public native void setPetLevel(int newLevel);

	public native boolean isVicious();

	public boolean isBaby() {
		return baby;
	}

	@preLocked
	public void setBaby(boolean bab) {
		baby = bab;
	}

	public float getTame() {
		if (super.npcTemplate == null)
			return 0;

		return super.npcTemplate.getTame();
	}

	public string getMeatType() {
		if (super.npcTemplate == null)
			return "";

		return super.npcTemplate.getMeatType();
	}

	public string getBoneType() {
		if (super.npcTemplate == null)
			return "";

		return super.npcTemplate.getBoneType();
	}

	public string getHideType() {
		if (super.npcTemplate == null)
			return "";

		return super.npcTemplate.getHideType();
	}

	public string getMilkType() {
		if (super.npcTemplate == null)
			return "";

		return super.npcTemplate.getMilkType();
	}

	public float getMilk() {
		if (super.npcTemplate == null || isEventMob())
			return 0;

		return super.npcTemplate.getMilk();
	}

	public float getHideMax() {
		if (super.npcTemplate == null || isEventMob())
			return 0;

		if (isBaby())
			return (super.npcTemplate.getHideMax() / 10);
		else
			return super.npcTemplate.getHideMax();
	}

	public float getBoneMax() {
		if (super.npcTemplate == null || isEventMob())
			return 0;

		if (isBaby())
			return (super.npcTemplate.getBoneMax() / 10);
		else
			return super.npcTemplate.getBoneMax();
	}

	public float getMeatMax() {
		if (super.npcTemplate == null || isEventMob())
			return 0;

		if (isBaby())
			return (super.npcTemplate.getMeatMax() / 10);
		else
			return super.npcTemplate.getMeatMax();
	}

	public int getBaseXp() {
		if (super.npcTemplate == null)
			return 0;

		if (isBaby() || isEventMob())
			return 0;
		else
			return super.npcTemplate.getBaseXp();
	}

	public string getControlDeviceTemplate() {
		if (super.npcTemplate == null)
			return "";

		return super.npcTemplate.getControlDeviceTemplate();
	}

	public native boolean isMount();

	public int getAdultLevel() {
		if (super.petDeed != null) {
			return super.petDeed.getLevel();
		}	
		if (super.npcTemplate == null)
			return super.getLevel();

		return super.npcTemplate.getLevel();
	}
}

