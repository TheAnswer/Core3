/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.creature.ai;

include server.zone.objects.creature.ai.components.AiStateComponent;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.events.AiThinkEvent;
import server.zone.objects.creature.events.AiMoveEvent;
import server.zone.objects.creature.events.AiAwarenessEvent;
import server.zone.objects.creature.events.DespawnCreatureOnPlayerDissappear;
include server.zone.objects.creature.PatrolPointsVector;
include server.zone.objects.creature.PatrolPoint;
include engine.util.u3d.QuadTreeEntry;
include system.thread.Mutex;
include server.zone.templates.AiTemplate;
include server.zone.objects.creature.variables.CreatureTemplateReference;
import server.zone.objects.creature.ai.bt.Behavior;
import server.zone.objects.creature.ai.bt.BehaviorTreeList;
import server.zone.objects.creature.ai.bt.BehaviorTree;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.tangible.weapon.WeaponObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.player.PlayerObject;
import server.zone.Zone;
import system.lang.Time;
import system.util.Vector;
import system.util.ArrayQueue;
import system.util.HashTable;
import system.lang.ref.Reference;
import engine.core.ManagedObject;
include system.thread.Mutex;
import system.lang.Time;

@mock
class AiActor extends SceneObject {
	// finished moving and/or finished dying/spawning
	public static final unsigned short FINISHED = 0;
	// not finished moving
	public static final unsigned short UNFINISHED = 1;
	// recipient of an attack
	public static final unsigned short ATTACKED = 2;
	// found an object of interest
	public static final unsigned short INTERESTED = 3;
	// no health
	public static final unsigned short DEAD = 4;
	// low health
	public static final unsigned short ALMOSTDEAD = 5;
	// scared of something
	public static final unsigned short SCARED = 6;
	// forgot mental state
	public static final unsigned short FORGOT = 7;
	// no host (remove the aiactor or respawn the host)
	public static final unsigned short NONE = 0xFFFF;
	
	@dereferenced
	protected transient VectorMap<string, string> transitions; // <"currentState:msg", "newState">

	@dereferenced
	protected transient HashTable<Behavior, int> statuses;
	
	@dereferenced
	protected transient HashTable<BehaviorTree, BehaviorTreeList> trees;
	
	protected transient AiStateComponent currentState;
	@dereferenced
	protected string currentStateName;
	@dereferenced
	protected string defaultStateName;
	
	protected transient AiTemplate aiTemplate;
	
	@dereferenced
	protected CreatureTemplateReference npcTemplate;

	@dereferenced
	protected Vector<WeaponObject> weapons;

	@dereferenced
	protected Vector<SceneObject> camouflagedObjects;
	
	protected boolean loadedOutfit;
	
	protected unsigned short currentMessage;
	
	protected CreatureObject host;
	
	protected float respawnTimer;
	protected boolean despawnOnNoPlayerInRange;
	protected int numberOfPlayersInRange;

	protected transient AiThinkEvent thinkEvent;
	protected transient AiMoveEvent moveEvent;
	protected transient AiAwarenessEvent awarenessEvent;
	protected transient DespawnCreatureOnPlayerDissappear despawnEvent;
	
	protected Vector<string> skillCommands;
	
	@dereferenced
	protected PatrolPointsVector patrolPoints;
	@dereferenced
	protected PatrolPoint homeLocation;
	@dereferenced
	protected PatrolPoint nextStepPosition;
	
	protected boolean baby;
	
	protected SceneObject followObject;
	
	@dereferenced
	protected transient Mutex targetMutex;
	
	@dereferenced
	protected transient Time lastDamageReceived;
	
	public static final int UPDATEMOVEMENTINTERVAL = 500; // msec
	
	//DEBUG
	protected boolean showNextMovementPosition;
	protected Vector<SceneObject> movementMarkers;
	
	public AiActor() {
		host = null;
		
		aiTemplate = null;

		respawnTimer = 0;
		
		showNextMovementPosition = true;
		
		despawnOnNoPlayerInRange = true;
		numberOfPlayersInRange = 0;
		
		loadedOutfit = false;
		
		Logger.setLoggingName("AiActor");
		Logger.setLogging(false);
		Logger.setGlobalLogging(false);
	}
	
	public void setHost(CreatureObject creo) {
		host = creo;
		host.addObservableChild(this);
	}
	
	public CreatureObject getHost() {
		return host;
	}
	
	/**
	 * Initializes the transient members of ManagedObject, must call the inherited object method first.
	 * @pre { transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();
	
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);
	
	/**
	 * Uses position updates to perform a think
	 */
	public native void notifyPositionUpdate(QuadTreeEntry entry);
	
	public void setCurrentMessage(unsigned short msg) {
		currentMessage = msg;
	}
	
	/**
	 * calculate next state based on initial state and message
	 */
	public native void next(unsigned short msg);
	public native void next();
	public native void destroyActor();

	@local
	public native void doAwarenessCheck(@dereferenced Coordinate start, unsigned long time, CreatureObject target);
	
	public native void addTransition(final string stateName, unsigned short msg, final string resultState);
	
	@local
	public native void loadTemplateData(CreatureTemplate templateData);
	
	@local
	@read
	public CreatureTemplateReference getNpcTemplate() {
		return npcTemplate;
	}

	public native void setLevel(int lvl);
	public native int calculateAttackMinDamage(int level);
	public native int calculateAttackMaxDamage(int level);
	public native float calculateAttackSpeed(int level);
	
	public native boolean isCamouflaged(CreatureObject target) {
		return isScentMasked(target) || isConcealed(target);
	}
	
	public native boolean isScentMasked(CreatureObject target);
	public native boolean isConcealed(CreatureObject target);
	
	// events
	public abstract native void activateRecovery();
	public abstract native void activateMovementEvent();
	public native void activateAwarenessEvent(CreatureObject target);
	public native void activatePostureRecovery();
	public native void queueDizzyFallEvent();

	// movement and patrols
	@local
	public native void setNextPosition(@dereferenced PatrolPoint point);

	public void setNextStepPosition(float x, float z, float y, SceneObject cell = null) {
		synchronized (targetMutex) {
			nextStepPosition.setPosition(x, z, y);
			nextStepPosition.setCell(cell);
		}
	}
	
	@local
	public PatrolPoint getNextStepPosition() {
		return nextStepPosition;
	}

	public void setShowNextPosition(boolean val) {
		showNextMovementPosition = val;
	}
	
	public boolean isShowNextPosition() {
		return showNextMovementPosition;
	}
	
	@local
	public Vector<SceneObject> getMovementMarkers() {
		return movementMarkers;
	}
	
	public int getMovementMarkersSize() {
		return movementMarkers.size();
	}
	
	public SceneObject getMovementMarker(int i) {
		return movementMarkers.get(i);
	}
	
	public void dropMovementMarker(SceneObject marker) {
		movementMarkers.removeElement(marker);
	}
	
	public void dropAllMovemementMarkers() {
		movementMarkers.removeAll();
	}
	
	public void addMovementMarker(SceneObject marker) {
		movementMarkers.add(marker);
	}
	
	public void clearPatrolPoints() {
		synchronized (targetMutex) {
			patrolPoints.removeAll();
		}
	}
	
	@local
	public PatrolPointsVector getPatrolPoints() {
		return patrolPoints;
	}
	
	@local
	public native void addPatrolPoint(@dereferenced PatrolPoint point);
	
	public void setHomeLocation(float x, float z, float y, SceneObject cell = null) {
		homeLocation.setPosition(x, z, y);
		homeLocation.setCell(cell);
		homeLocation.setReached(true);
	}
	
	@local
	public PatrolPoint getHomeLocation() {
		return homeLocation;
	}
	
	// spawn/despawn
	public native void setDespawnOnNoPlayerInRange(boolean val);
	public native void notifyDespawn(Zone zone);
	public native void scheduleDespawn(int timeToDespawn);
	public native void respawn(Zone zone, int level);
	
	public void scheduleDespawn() {
		//Despawn in 45 seconds.
		scheduleDespawn(45);
	}
	
	public void clearDespawnEvent() {
		despawnEvent = null;
	}

	public void setRespawnTimer(float resp) {
		respawnTimer = resp;
	}
	
	public float getRespawnTimer() {
		return respawnTimer;
	}
	
	public boolean getDespawnOnNoPlayerInRange() {
		return despawnOnNoPlayerInRange;
	}

	public int getNumberOfPlayersInRange() {
		return numberOfPlayersInRange;
	}
	
	// passed notifications
	public native void notifyInsert(QuadTreeEntry entry);
	public native void notifyDissapear(QuadTreeEntry entry);
	public native int notifyConverseObservers(CreatureObject converser);
	
	// some AI data
	public SceneObject getFollowObject() {
		return followObject;
	}
	
	public void setFollowObject(SceneObject targ) {
		followObject = targ;
	}
	
	public void setTargetObject(SceneObject obj) {
		synchronized (targetMutex) {
			if (followObject != obj) {
				clearPatrolPoints();

				followObject = obj;
			}
		}
	}
	public void setOblivious() {
		setTargetObject(null);
		next(FORGOT);
	}
	
	public native void setDefender(SceneObject defender);
	public native void addDefender(SceneObject defender);
	public native void removeDefender(SceneObject defender);
	
	/**
	 * Evaluates if this object can be attacket by the passed creature object
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @return returns true if the creature object can attack this 
	 */
	public boolean isAttackableBy(CreatureObject object) {
		if (object == host)
			return false;
		
		if (host.getPvpStatusBitmask() == 0)
			return false;
		
		//if (this.isRetreating())
			//return false;
		
		if (host.isDead())
			return false;
		
		if (object.isAiActor())
			return false;
		
		unsigned int targetFaction = object.getFaction();
		
		if (targetFaction != 0 && host.getFaction() != 0) {
			PlayerObject ghost = object.getPlayerObject();
			
			if (targetFaction == host.getFaction())
				return false;
			
			if (ghost != null && (targetFaction != host.getFaction()) && ghost.getFactionStatus() == FactionStatus.ONLEAVE)
				return false;
		} else if (targetFaction == 0 && host.getFaction() != 0)
			return false;
		
		return true;
	}
	
	/**
	 * Evaluates if this creature is aggresive to the object
	 * @pre { }
	 * @post { }
	 * @return returns true if its aggressive
	 */
	public native boolean isAggressiveTo(CreatureObject object);
	
	public void updateLastDamageReceived() {
		lastDamageReceived.updateToCurrentTime();
	}
	
	public native void sendConversationStartTo(SceneObject player);
	
	// raw template getters
	
	public float getKinetic() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getKinetic();
	}
	
	public float getEnergy() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getEnergy();
	}
	
	public float getElectricity() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getElectricity();
	}
	
	public float getStun() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getStun();
	}
	
	public float getBlast() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getBlast();
	}
	
	public float getHeat() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getHeat();
	}
	
	public float getCold() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getCold();
	}
	
	public float getAcid() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getAcid();
	}
	
	public float getLightSaber() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getLightSaber();
	}
	
	public boolean isStalker() {
		if (npcTemplate.get() == null)
			return false;
		
		return npcTemplate.get().isStalker();
	}
	
	public boolean isKiller() {
		if (npcTemplate.get() == null)
			return false;
		
		return npcTemplate.get().isKiller();
	}
	
	public unsigned int getFerocity() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getFerocity();
	}
	
	public unsigned int getArmor() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getArmor();
	}
	
	public string getFactionString() {
		if (npcTemplate.get() == null)
			return "";
		
		return npcTemplate.get().getFaction();
	}
	
	public string getSocialGroup() {
		if (npcTemplate.get() == null)
			return "";
		
		return npcTemplate.get().getSocialGroup();
	}
	
	public float getChanceHit() {
		if (npcTemplate.get() == null)
			return false;
		
		return npcTemplate.get().getChanceHit();
	}
	
	public int getDamageMin() {
		return host.getWeapon().getMinDamage();
	}
	
	public int getDamageMax() {
		return host.getWeapon().getMaxDamage();
	}
	
	public int getBaseXp() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getBaseXp();
	}
	
	public unsigned int getDiet() {
		if (npcTemplate.get() == null)
			return 0;
		
		return npcTemplate.get().getDiet();
	}
	
	@local
	public CreatureAttackMap getAttackMap() {
		if (npcTemplate.get() == null)
			return null;
		
		return npcTemplate.get().getAttacks();
	}
	
	@local
	public LootGroupCollection getLootGroups() {
		if (npcTemplate.get() == null)
			return null;
		
		return npcTemplate.get().getLootGroups();
	}
	
	@local
	public CreatureTemplate getCreatureTemplate() {
		return npcTemplate.get();
	}
	
	@local
	@dereferenced
	public native Vector<WeaponObject> getWeapons();
	
	@local
	@dereferenced
	public native Time getLastDamageReceived();
	
	@dirty
	public boolean isActorObject() {
		return true;
	}
	
	@local
	public native int getBehaviorStatus(Behavior b);
	
	@local
	public native void setBehaviorStatus(Behavior b,int status);
	
	@local
	public native void addBehaviorToTree(BehaviorTree tree, Behavior b);
	
	@local
	public native Behavior getNextBehaviorFromTree(BehaviorTree tree);
	
	@local
	public native void resetBehaviorList(BehaviorTree tree);
}