/*
 *	server/zone/objects/creature/Creature.h generated by engine3 IDL compiler 0.60
 */

#ifndef CREATURE_H_
#define CREATURE_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace group {

class GroupObject;

} // namespace group
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::group;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace templates {
namespace mobile {

class CreatureTemplate;

} // namespace mobile
} // namespace templates
} // namespace zone
} // namespace server

using namespace server::zone::templates::mobile;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "engine/core/ManagedObject.h"

#include "engine/util/u3d/Coordinate.h"

#include "server/zone/objects/creature/AiAgent.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class Creature : public AiAgent {
public:
	Creature();

	void initializeTransientMembers();

	bool isCreature();

	short getDnaState();

	short getDnaSampleCount();

	void incDnaSampleCount();

	bool isCamouflaged(CreatureObject* target);

	void runAway(CreatureObject* target);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void scheduleDespawn();

	bool hasOrganics();

	bool hasMilk();

	bool hasDNA();

	bool canHarvestMe(CreatureObject* player);

	bool hasSkillToHarvestMe(CreatureObject* player);

	bool canMilkMe(CreatureObject* player);

	bool canCollectDna(CreatureObject* player);

	bool hasSkillToSampleMe(CreatureObject* player);

	void addAlreadyHarvested(CreatureObject* player);

	void setMilkState(short milkState);

	void setDnaState(short dnaState);

	void notifyDespawn(Zone* zone);

	bool isBaby();

	float getTame();

	String getMeatType();

	String getBoneType();

	String getHideType();

	String getMilkType();

	float getMilk();

	float getHideMax();

	float getBoneMax();

	float getMeatMax();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	Creature(DummyConstructorParameter* param);

	virtual ~Creature();

	friend class CreatureHelper;
};

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureImplementation : public AiAgentImplementation {
	SortedVector<unsigned long long> alreadyHarvested;

	short milkState;

	short dnaState;

	short dnaSampleCount;

public:
	CreatureImplementation();

	CreatureImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	bool isCreature();

	short getDnaState();

	short getDnaSampleCount();

	void incDnaSampleCount();

	bool isCamouflaged(CreatureObject* target);

	void runAway(CreatureObject* target);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void scheduleDespawn();

	bool hasOrganics();

	bool hasMilk();

	bool hasDNA();

	bool canHarvestMe(CreatureObject* player);

	bool hasSkillToHarvestMe(CreatureObject* player);

	bool canMilkMe(CreatureObject* player);

	bool canCollectDna(CreatureObject* player);

	bool hasSkillToSampleMe(CreatureObject* player);

	void addAlreadyHarvested(CreatureObject* player);

	void setMilkState(short milkState);

	void setDnaState(short dnaState);

	void notifyDespawn(Zone* zone);

	bool isBaby();

	float getTame();

	String getMeatType();

	String getBoneType();

	String getHideType();

	String getMilkType();

	float getMilk();

	float getHideMax();

	float getBoneMax();

	float getMeatMax();

	WeakReference<Creature*> _this;

	operator const Creature*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CreatureImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class Creature;
};

class CreatureAdapter : public AiAgentAdapter {
public:
	CreatureAdapter(Creature* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	bool isCreature();

	short getDnaState();

	short getDnaSampleCount();

	void incDnaSampleCount();

	bool isCamouflaged(CreatureObject* target);

	void runAway(CreatureObject* target);

	int handleObjectMenuSelect(CreatureObject* player, byte selectedID);

	void fillAttributeList(AttributeListMessage* msg, CreatureObject* object);

	void scheduleDespawn();

	bool hasOrganics();

	bool hasMilk();

	bool hasDNA();

	bool canHarvestMe(CreatureObject* player);

	bool hasSkillToHarvestMe(CreatureObject* player);

	bool canMilkMe(CreatureObject* player);

	bool canCollectDna(CreatureObject* player);

	bool hasSkillToSampleMe(CreatureObject* player);

	void addAlreadyHarvested(CreatureObject* player);

	void setMilkState(short milkState);

	void setDnaState(short dnaState);

	void notifyDespawn(Zone* zone);

	bool isBaby();

	float getTame();

	String getMeatType();

	String getBoneType();

	String getHideType();

	String getMilkType();

	float getMilk();

	float getHideMax();

	float getBoneMax();

	float getMeatMax();

};

class CreatureHelper : public DistributedObjectClassHelper, public Singleton<CreatureHelper> {
	static CreatureHelper* staticInitializer;

public:
	CreatureHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CreatureHelper>;
};

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#endif /*CREATURE_H_*/
