/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.creature.conversation;

import engine.util.Observer;
import engine.util.Observable;

include server.zone.objects.creature.conversation.ConversationTemplate;
include server.zone.objects.creature.conversation.ConversationScreen;
import server.zone.objects.creature.CreatureObject;
include server.zone.objects.creature.conversation.screenhandlers.ScreenHandler;
import server.zone.objects.scene.SceneObject;
include engine.log.Logger;
import engine.core.ManagedObject;
include system.util.VectorMap;

class ConversationObserver extends Observer implements Logger {

	protected unsigned int conversationTemplateCRC;

	@dereferenced
	private VectorMap<string, ScreenHandler> screenHandlers;

	public native ConversationObserver(unsigned int convoTemplateCRC);

	public native int notifyObserverEvent(unsigned int eventType, Observable observable, ManagedObject arg1, long arg2);

	private ConversationScreen getInitialScreen() {
		return getConversationTemplate().getInitialScreen();
	}

	private ConversationScreen getConversationScreen(final string screenName) {
		return getConversationTemplate().getScreen(screenName);
	}

	protected abstract native void createConversationSession(CreatureObject conversingPlayer, SceneObject conversingNPC);

	protected void registerScreenHandler(final string screenId, ScreenHandler screenHandler) {
		if (!screenHandlers.contains(screenId)) {
			screenHandlers.put(screenId, screenHandler);
		}
	}

	protected void removeScreenHandler(final string screenId) {
		if (screenHandlers.contains(screenId)) {
			screenHandlers.drop(screenId);
		}
	}

	protected native void createPositionObserver(CreatureObject player);

	private native void cancelConversationSession(CreatureObject conversingPlayer, SceneObject conversingNPC, boolean forceClose = false);

	@local
	public abstract native ConversationScreen getNextConversationScreen(CreatureObject conversingPlayer, int selectedOption, SceneObject conversingNPC);

	@local
	public abstract native ConversationScreen runScreenHandlers(CreatureObject conversingPlayer, SceneObject conversingNPC, int selectedOption, ConversationScreen conversationScreen);

	private native void sendConversationScreenToPlayer(CreatureObject conversingPlayer, SceneObject conversingNPC, ConversationScreen conversationScreen);

	@local
	public native ConversationTemplate getConversationTemplate();
}
