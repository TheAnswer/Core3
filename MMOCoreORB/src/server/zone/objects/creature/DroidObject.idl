
/*
Copyright (C) 2013 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.creature;

import engine.core.ManagedObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.packets.object.ObjectMenuResponse;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.AiAgent;
import server.zone.objects.area.ActiveArea;
import engine.util.u3d.Coordinate;
import server.zone.objects.tangible.components.droid.BaseDroidModuleComponent;
include server.zone.objects.tangible.tool.CraftingStation;

class DroidObject extends AiAgent {
	
	/**
	 * Droid's power when recharged
	 */
	public static final int MAX_POWER = 1000;
	
	/**
	 * Current amount of power
	 */
	protected int power;
	
	/**
	 * Current paint decay
	 */
	protected int paintCount;
	
	/**
	 * Maximum paint charges
	 */
	public static final int PAINTCHARGES = 999;
	
	/**
	 * Armor type
	 */
	protected unsigned int armor = 0;
	
	/**
	 * Damage resistance (same for all types except lightsaber)
	 */
	protected float resist = 0;	

	/**
	 * List of installed droid modules
	 */	
	@dereferenced
	protected Vector<BaseDroidModuleComponent> modules;       
	
	public DroidObject() {
		Logger.setLoggingName("DroidObject");
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);
		power = MAX_POWER;
		paintCount = 0;
	}
	
	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	@local
	@dirty
	public native abstract int handleObjectMenuSelect(CreatureObject player, byte selectedID);	
	
	/**
	 * Fills the module radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	@local
	@dirty
	public native abstract void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);

	/**
	 * Inserts this object into zone
	 * @pre { this object is locked }
	 * @post { this object is locked and inserted into zone }
	 * @param zone Zone object where this object will be inserted
	 */
	@local
	public native void notifyInsertToZone(Zone zone);	
		
	@dirty
	public boolean isDroidObject() {
		return true;
	}
	
	@dirty
	public boolean isCamouflaged(CreatureObject target) {
		return isAggressiveTo(target) && isConcealed(target);
	}
	
	@dirty
	public boolean hasPower(){
		return power > 0;
	}

	/**
	 * Consumes power
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 * @param amount int the amount of power to use
	 */
	public void usePower( int amount ){
		power = power - amount;
		
		if( power <= 0 ){
			power = 0;
			handleLowPower();			
		}
		
	}
	
	/**
	 * Reset paint back to full
	 */
	public void refreshPaint() {
		paintCount = PAINTCHARGES;
	}

	/**
	 * Handles the recharge droid radial selection
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @returns 0 if successful, 1 otherwise
	 */
	public native int rechargeFromBattery(CreatureObject player);
	
	/**
	 * Handles droid being recharged by another droid
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 */
	public native void rechargeFromDroid();	
		
	/**
	 * Instructs droid to recharge another droid
	 * @pre { this object is locked, droid is locked }
	 * @post { this object is locked, droid is locked }
	 * @param droid DroidObject that selected the option
	 */
	public native void rechargeOtherDroid( DroidObject otherDroid );	
		
	/**
	 * Called when the droid runs out of power
	 * @pre { this object is locked }
	 * @post { this object is locked }
	 */
	public native void handleLowPower();
	
	/**
	 * Whether or not droid is a power droid
	 */
	@dirty
	public native boolean isPowerDroid();	

	/**
	 * Initializes droid modules from crafted_components scenos
	 */
	@local
	public native void initDroidModules();
	
	/**
	 * Returns a crafting station of the given type if droid has the appropriate module. Returns NULL otherwise.
	 */
	@local
	public native CraftingStation getCraftingStation(int type);	
	
	@local
	public native void onStore();
	@local
	public native void onCall();
	@local
	public native void loadSkillMods(CreatureObject player);
	@local
	public native void unloadSkillMods(CreatureObject player);
	
	/**
	 * Set armor type (from armor module)
	 */	
	@local
	public void setArmor(unsigned int level){
		armor = level;
	}
	
	/**
	 * Set resists (from armor module)
	 */	
	@local
	public void setResists(float res){
		resist = res;
	}
		
	@local
	public unsigned int getArmor(){
		if( isPet() ){
			return armor;
		}
		else{
			return super.getArmor();
		}
	}

	@dirty
	public float getKinetic(){
		if( isPet() ){
			return resist;
		}
		else{
			return super.getKinetic();
		}
	}
	
	@dirty
	public float getEnergy(){
		if( isPet() ){
			return resist;
		}
		else{
			return super.getEnergy();
		}
	}
	
	@dirty
	public float getElectricity() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getElectricity();
		}
	}
	
	@dirty
	public float getStun() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getStun();
		}
	}
	
	@dirty
	public float getBlast() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getBlast();
		}
	}
	
	@dirty
	public float getHeat() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getHeat();
		}
	}
	
	@dirty
	public float getCold() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getCold();
		}
	}
	
	@dirty
	public float getAcid() {
		if( isPet() ){
			return resist;
		}
		else{
			return super.getAcid();
		}
	}
	
	@dirty
	public float getLightSaber() {
		if( isPet() ){
			return -1; // Pet droids never have lightsaber resistance
		}
		else{
			return super.getLightSaber();
		}				
	}	
}
