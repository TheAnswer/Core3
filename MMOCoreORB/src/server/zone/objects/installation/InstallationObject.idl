/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.installation;

import server.zone.objects.structure.StructureObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.packets.scene.AttributeListMessage;
include templates.SharedObjectTemplate;
import server.zone.objects.installation.InstallationTickTask;
import system.lang.Time;
import server.zone.objects.scene.SceneObject;
include server.zone.CloseObjectsVector;
import server.zone.objects.tangible.wearables.ArmorObject;
include server.zone.objects.scene.SceneObjectType;
include server.zone.objects.installation.HopperList;

@json
class InstallationObject extends StructureObject {
	protected transient InstallationTickTask tickTask;
	
	@dereferenced
	protected Time lastTickTime;

	protected boolean activated;
	protected int installationType;
	protected float power;
	protected float powerRate;
	
	@dereferenced
	protected HopperList resourceHopper; // No longer used, this is just here for conversion

	public InstallationObject() {
		Logger.setLoggingName("InstallationObject");

		super.closeobjects = new CloseObjectsVector();
		super.closeobjects.setNoDuplicateInsertPlan();
		activated = false;

		installationType = 0;
		power = 0.f;
		powerRate = 0.f;
	}

	public native void initializeTransientMembers();

	@dirty
	public native void sendBaselinesTo(SceneObject player);

	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param destroyContainedObjects if true, will destroy from database all its contained objects
	 */
	@preLocked
	public native void destroyObjectFromDatabase(boolean destroyContainedObjects = false);

	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage alm, CreatureObject object);

	/**
	 * Reads and sets the template data from a SharedObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { SceneObject members are initialized }
	 * @param templateData templateData points to the LuaObject that is used to initialize SceneObejct members
	 */
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);

	@preLocked
	public abstract native void doTick();
	
	@preLocked
	public abstract void scheduleTickTask(boolean immediate = false) {
		return;
	}
	
	@preLocked
	public native void activate(CreatureObject player = null);
	
	@preLocked
	public native void deactivate();

	@dirty
	public boolean isInstallationObject() {
		return true;
	}

	@read
	public boolean isActive() {
		return activated;
	}

	@read
	public int getInstallationType() {
		return installationType;
	}

	@dirty
	public abstract boolean isHarvesterObject() {
		return false;
	}
	
	@dirty
	public boolean isGenerator() {
		return getGameObjectType() == SceneObjectType.GENERATOR;
	}
	
	@dirty
	public boolean isFactory() {
		return getGameObjectType() == SceneObjectType.FACTORY;
	}
	
	@dirty
	public boolean isMinefield() {
		return getGameObjectType() == SceneObjectType.MINEFIELD;
	}

	@dirty
	public boolean isShuttleInstallation() {
		return getGameObjectType() == SceneObjectType.SHUTTLEINSTALLATION;
	}
	
	@dirty
	public boolean isTurretInstallation() {
		return getGameObjectType() == SceneObjectType.DESTRUCTIBLE;
	}

	@dirty
	public native boolean isAggressiveTo(CreatureObject object);
	
	public native unsigned long getOutOfPowerTime();

	/**
	* Evaluates if this can be attacked by object
	* @pre { }
	* @post { }
	* @return returns true if object can attack this
	*/
	@dirty
	public native boolean isAttackableBy(CreatureObject object);

	@preLocked
	public native void createChildObjects();

	@read
	public native float getHitChance();

	@read
	public abstract int getReceiverFlags() {
		return CloseObjectsVector.INSTALLATIONTYPE | super.getReceiverFlags();
	}
	
	@preLocked
	public void updateLastTickTime() {
		lastTickTime.updateToCurrentTime();
	}
	
	@read
	public float getPower() {
		return power;
	}
	
	@read
	public float getPowerRate() {
		return powerRate;
	}
	
	@preLocked
	public void setPower(float newPower) {
		power = newPower;
	}
	
	@preLocked
	public void setPowerRate(float newRate) {
		powerRate = newRate;
	}
}
