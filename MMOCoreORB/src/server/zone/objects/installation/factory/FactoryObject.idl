package server.zone.objects.installation.factory;

import server.zone.objects.installation.InstallationObject;
import server.zone.objects.manufactureschematic.ManufactureSchematic;
import server.zone.objects.factorycrate.FactoryCrate;
import server.zone.objects.tangible.TangibleObject;
import server.zone.objects.area.ActiveArea;
import server.zone.objects.installation.factory.FactoryHopperObserver;
import engine.util.Observable;
import engine.core.ManagedObject;
include server.zone.objects.manufactureschematic.factoryblueprint.BlueprintEntry;

class FactoryObject extends InstallationObject {
	@dereferenced
	protected Vector<int> craftingTabsSupported;

	protected int timer;

	protected string currentUserName;
	protected int currentRunCount;

	protected transient FactoryHopperObserver hopperObserver;

	public FactoryObject() {
		Logger.setLoggingName("FactoryObject");
		hopperObserver = null;
	}

	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);

	public native void initializeTransientMembers();

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	public void notifyLoadFromDatabase() {
		super.notifyLoadFromDatabase();

		if (super.operating) {
			startFactory();
		}
	}

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	@dirty
	public boolean isFactory() {
		return true;
	}

	/**
	 * Handles creating the hoppers
	 */
	public native void createChildObjects();

	/**
	 * Handles sending the SUI full of manufacturing schematics
	 * that will work in this station
	 */
	@dirty
	public native void sendInsertManuSui(CreatureObject player);

	@dirty
	public native void sendIngredientsNeededSui(CreatureObject player);

	@dirty
	public native void sendIngredientHopper(CreatureObject player);

	@dirty
	public native void sendOutputHopper(CreatureObject player);

	@dirty
	public native void openHopper(Observable observable, ManagedObject arg1);

	@dirty
	public native void closeHopper(Observable observable, ManagedObject arg1);

	/**
	 * Handles inputting the schematic to the 
	 * factory
	 */
	@preLocked
	public native void handleInsertFactorySchem(CreatureObject player, ManufactureSchematic schematic);

	/**
	 * Handles inputting the schematic to the 
	 * factory
	 */
	@preLocked
	public native void handleRemoveFactorySchem(CreatureObject player);

	@preLocked
	public native void handleOperateToggle(CreatureObject player);

	@preLocked
	private native boolean startFactory(); 

	private native void stopFactory(final string message, final string tt, final string to, final int di);

	private native void stopFactory(string type, string displayedName);

	@preLocked
	public native void createNewObject();

	@preLocked
	private native FactoryCrate locateCrateInOutputHopper(TangibleObject prototype);

	@preLocked
	private native FactoryCrate createNewFactoryCrate(TangibleObject prototype);

	private native boolean populateSchematicBlueprint(ManufactureSchematic schematic);

	private native void collectMatchesInInputHopper(BlueprintEntry entry, SceneObject inputHopper);

	@dirty
	public native string getRedeedMessage();
}
