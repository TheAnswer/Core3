/*
 *	server/zone/objects/installation/garage/GarageInstallation.cpp generated by engine3 IDL compiler 0.60
 */

#include "GarageInstallation.h"

/*
 *	GarageInstallationStub
 */

GarageInstallation::GarageInstallation() : InstallationObject(DummyConstructorParameter::instance()) {
	GarageInstallationImplementation* _implementation = new GarageInstallationImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("GarageInstallation");
}

GarageInstallation::GarageInstallation(DummyConstructorParameter* param) : InstallationObject(param) {
	_setClassName("GarageInstallation");
}

GarageInstallation::~GarageInstallation() {
}



DistributedObjectServant* GarageInstallation::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* GarageInstallation::_getImplementationForRead() {
	return _impl;
}

void GarageInstallation::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GarageInstallationImplementation
 */

GarageInstallationImplementation::GarageInstallationImplementation(DummyConstructorParameter* param) : InstallationObjectImplementation(param) {
	_initializeImplementation();
}


GarageInstallationImplementation::~GarageInstallationImplementation() {
}


void GarageInstallationImplementation::finalize() {
}

void GarageInstallationImplementation::_initializeImplementation() {
	_setClassHelper(GarageInstallationHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void GarageInstallationImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<GarageInstallation*>(stub);
	InstallationObjectImplementation::_setStub(stub);
}

DistributedObjectStub* GarageInstallationImplementation::_getStub() {
	return _this.get();
}

GarageInstallationImplementation::operator const GarageInstallation*() {
	return _this.get();
}

void GarageInstallationImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void GarageInstallationImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void GarageInstallationImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void GarageInstallationImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void GarageInstallationImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void GarageInstallationImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void GarageInstallationImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void GarageInstallationImplementation::_serializationHelperMethod() {
	InstallationObjectImplementation::_serializationHelperMethod();

	_setClassName("GarageInstallation");

}

void GarageInstallationImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(GarageInstallationImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GarageInstallationImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (InstallationObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void GarageInstallationImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GarageInstallationImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GarageInstallationImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = InstallationObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

GarageInstallationImplementation::GarageInstallationImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/garage/GarageInstallation.idl():  		setLoggingName("GarageInstallation");
	setLoggingName("GarageInstallation");
}

/*
 *	GarageInstallationAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


GarageInstallationAdapter::GarageInstallationAdapter(GarageInstallation* obj) : InstallationObjectAdapter(obj) {
}

void GarageInstallationAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	default:
		throw Exception("Method does not exists");
	}
}

/*
 *	GarageInstallationHelper
 */

GarageInstallationHelper* GarageInstallationHelper::staticInitializer = GarageInstallationHelper::instance();

GarageInstallationHelper::GarageInstallationHelper() {
	className = "GarageInstallation";

	Core::getObjectBroker()->registerClass(className, this);
}

void GarageInstallationHelper::finalizeHelper() {
	GarageInstallationHelper::finalize();
}

DistributedObject* GarageInstallationHelper::instantiateObject() {
	return new GarageInstallation(DummyConstructorParameter::instance());
}

DistributedObjectServant* GarageInstallationHelper::instantiateServant() {
	return new GarageInstallationImplementation();
}

DistributedObjectAdapter* GarageInstallationHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GarageInstallationAdapter(static_cast<GarageInstallation*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

