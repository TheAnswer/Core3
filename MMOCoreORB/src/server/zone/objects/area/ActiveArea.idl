/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
*/

package server.zone.objects.area;

include engine.util.u3d.QuadTreeEntry;

import server.zone.Zone;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.area.areashapes.AreaShape;

class ActiveArea extends SceneObject {	
	protected boolean noBuildArea;

	protected boolean campingPermitted;

	protected boolean municipalZone;

	protected unsigned long cellObjectID;

	protected boolean noSpawnArea;

	protected AreaShape areaShape;

	protected transient SceneObject attachedScenery;

	public ActiveArea() {		
		cellObjectID = 0;
		
		noBuildArea = false;

		// By default camping is not permitted, in PlanetManagerImplementation::loadClientRegions it's changed to true around city no builds
		campingPermitted = false;
		
		municipalZone = false;
		
		noSpawnArea = false;
		
		areaShape = null;
		
		Logger.setLoggingName("ActiveArea");
	}
	
	/**
	 * Sends the necessary messages to player in order to create this object
	 * @pre { this object is locked }
	 * @post { this object is locked, player received this object }
	 * @param player SceneObject that will receive the messages
	 * @param doClose if true a SceneObjectCloseMessage is sent to finish the object
	 */
	@dirty
	public native void sendTo(SceneObject player, boolean doClose) {
		
	}
	
	public native abstract void enqueueEnterEvent(SceneObject obj);
	public native abstract void enqueueExitEvent(SceneObject obj);
	
	public native abstract void notifyEnter(SceneObject object);
	public native abstract void notifyExit(SceneObject object);
	
	@dirty
	public boolean isActiveArea() {
		return true;
	}
	
	@dirty
	public abstract boolean isRegion() {
		return false;
	}
	
	@dirty
	public abstract boolean isCityRegion() {
		return false;
	}

	@read
	public boolean isNoBuildArea() {
		return noBuildArea;
	}

	@read
	public boolean isCampingPermitted() {
		return campingPermitted;
	}
	
	@dirty
	public native boolean containsPoint(float x, float y);
		
	@dirty
	public float getRadius2() {
		if (areaShape != null) {
			return areaShape.getRadius() * areaShape.getRadius();
		} else {
			return super.getRadius() * super.getRadius();
		}
	}
	
	public void setNoBuildArea(boolean val) {
		noBuildArea = val;
	}
	
	public void setCampingPermitted(boolean val) {
		campingPermitted = val;
	}
	
	public void setMunicipalZone(boolean val) {
		municipalZone = val;
	}
	
	public void setRadius(float r) {
		if (areaShape != null && r < areaShape.getRadius()) {
			r = areaShape.getRadius();
		}
			
		super.setRadius(r);
	}
	
	@dirty
	public abstract boolean isCampArea() {
		return false;
	}
	
	public void setNoSpawnArea(boolean val) {
		noSpawnArea = val;
	}
	
	@read
	public boolean isNoSpawnArea() {
		return noSpawnArea;
	}
	
	@read
	public boolean isMunicipalZone() {
		return municipalZone;
	}
	
	@read
	public unsigned long getCellObjectID() {
		return cellObjectID;
	}
	
	public void setCellObjectID(unsigned long celloid) {
		cellObjectID = celloid;
	}
	
	public void setAreaShape(AreaShape area) {
		areaShape = area;
		
		if (areaShape != null) {
			setRadius(areaShape.getRadius());
		}
	}
	
	@read
	public AreaShape getAreaShape() {
		return areaShape;
	}
	
	@dirty
	public native boolean intersectsWith(ActiveArea area);

	public void attachScenery(SceneObject scene) {
		attachedScenery = scene;
	}
}
