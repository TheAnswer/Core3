/*
 *	server/zone/objects/area/areashapes/RingAreaShape.h generated by engine3 IDL compiler 0.60
 */

#ifndef RINGAREASHAPE_H_
#define RINGAREASHAPE_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace area {
namespace areashapes {

class CircularAreaShape;

} // namespace areashapes
} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area::areashapes;

#include "server/zone/objects/area/areashapes/AreaShape.h"

namespace server {
namespace zone {
namespace objects {
namespace area {
namespace areashapes {

class RingAreaShape : public AreaShape {
public:
	RingAreaShape();

	void setInnerRadius(float r);

	void setOuterRadius(float r);

	float getInnerRadius();

	float getInnerRadius2();

	float getOuterRadius();

	float getOuterRadius2();

	bool containsPoint(float x, float y);

	bool containsPoint(const Vector3& point);

	Vector3 getRandomPosition();

	Vector3 getRandomPosition(const Vector3& origin, float minDistance, float maxDistance);

	bool isRingAreaShape();

	bool isCircularAreaShape();

	bool isRectangularAreaShape();

	bool intersectsWith(AreaShape* areaShape);

	float getArea();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	RingAreaShape(DummyConstructorParameter* param);

	virtual ~RingAreaShape();

	friend class RingAreaShapeHelper;
};

} // namespace areashapes
} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area::areashapes;

namespace server {
namespace zone {
namespace objects {
namespace area {
namespace areashapes {

class RingAreaShapeImplementation : public AreaShapeImplementation {
protected:
	float innerRadius;

	float outerRadius;

	float innerRadius2;

	float outerRadius2;

public:
	RingAreaShapeImplementation();

	RingAreaShapeImplementation(DummyConstructorParameter* param);

	void setInnerRadius(float r);

	void setOuterRadius(float r);

	virtual float getInnerRadius();

	float getInnerRadius2();

	virtual float getOuterRadius();

	float getOuterRadius2();

	virtual bool containsPoint(float x, float y);

	virtual bool containsPoint(const Vector3& point);

	virtual Vector3 getRandomPosition();

	virtual Vector3 getRandomPosition(const Vector3& origin, float minDistance, float maxDistance);

	virtual bool isRingAreaShape();

	virtual bool isCircularAreaShape();

	virtual bool isRectangularAreaShape();

	virtual bool intersectsWith(AreaShape* areaShape);

private:
	bool intersectsWithCircle(CircularAreaShape* circle);

	bool intersectsWithRing(RingAreaShape* ring);

public:
	virtual float getArea();

	WeakReference<RingAreaShape*> _this;

	operator const RingAreaShape*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~RingAreaShapeImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class RingAreaShape;
};

class RingAreaShapeAdapter : public AreaShapeAdapter {
public:
	RingAreaShapeAdapter(RingAreaShape* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setInnerRadius(float r);

	void setOuterRadius(float r);

	float getInnerRadius();

	float getInnerRadius2();

	float getOuterRadius();

	float getOuterRadius2();

	bool containsPoint(float x, float y);

	bool isRingAreaShape();

	bool isCircularAreaShape();

	bool isRectangularAreaShape();

	bool intersectsWith(AreaShape* areaShape);

	float getArea();

};

class RingAreaShapeHelper : public DistributedObjectClassHelper, public Singleton<RingAreaShapeHelper> {
	static RingAreaShapeHelper* staticInitializer;

public:
	RingAreaShapeHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<RingAreaShapeHelper>;
};

} // namespace areashapes
} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area::areashapes;

#endif /*RINGAREASHAPE_H_*/
