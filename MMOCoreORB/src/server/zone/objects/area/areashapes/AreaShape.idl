/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.area.areashapes;

include engine.core.ManagedObject;
include engine.util.u3d.Vector3;

@mock
class AreaShape extends ManagedObject {

	/** The center coordinate of the area. */
	@dereferenced
	protected Vector3 areaCenter;

	/** Constructor */
	public AreaShape() {
		areaCenter.set(0, 0, 0);
	}

	/**
	 * Set the area center.
	 * @param x the x coordinate.
	 * @param y the y coordinate.
	 */
	@preLocked
	public void setAreaCenter(float x, float y) {
		areaCenter.set(x, 0, y);
	}

	/**
	 * Get the area center.
	 * @return the area center.
	 */
	@dereferenced
	@local
	@read
	public native Vector3 getAreaCenter();

	/**
	 * Check if the coordinate is within the area shape.
	 * @param x the x coordinate.
	 * @param y the y coordinate.
	 * @return true if the coordinate is within the area shape.
	 */
	@read
	public abstract boolean containsPoint(float x, float y) {
		return false;
	}

	/**
	 * Check if the coordinate is within the area shape.
	 * @param point the point to check if it is within the area shape.
	 * @return true if the coordinate is within the area shape.
	 */
	@dereferenced
	@local
	@mock
	@read
	public abstract boolean containsPoint(@dereferenced final Vector3 point) {
		return false;
	}

	/**
	 * Get the minimum radius of a circle bounding the area shape.
	 * @return the minimum bonding radius.
	 */
	@read
	public abstract float getRadius() {
		return 0;
	}

	/**
	 * Generate a random position within the area.
	 * @return a random position within the area.
	 */
	@dereferenced
	@local
	@read
	public native abstract Vector3 getRandomPosition();

	/**
	 * Generate a random position within the area with the supplied origin and radius as limits.
	 * @param origin the origin coordinate to generate the random position from.
	 * @param minDistance the minimum distance from the origin.
	 * @param maxDistance the maximum distance from the origin.
	 * @return a random position within the area.
	 */
	@dereferenced
	@local
	@read
	public native abstract Vector3 getRandomPosition(@dereferenced final Vector3 origin, float minDistance, float maxDistance);

	/**
	 * Check if this is a circular area shape.
	 * @return true if it is a circular area shape.
	 */
	@read
	public abstract boolean isCircularAreaShape() {
		return false;
	}

	/**
	 * Check if this is a rectangular area shape.
	 * @return true if it is a rectangular area shape.
	 */
	@read
	public abstract boolean isRectangularAreaShape() {
		return false;
	}

	/**
	 * Check if this is a ring area shape.
	 * @return true if it is a ring area shape.
	 */
	@read
	public abstract boolean isRingAreaShape() {
		return false;
	}

	/**
	 * Check if this area shape intersects with the supplied area shape.
	 * @param areaShape the area shape to check for intersections with.
	 * @return true if the area shapes intersects each other.
	 */
	@read
	public abstract boolean intersectsWith(AreaShape areaShape) {
		return false;
	}

	/**
	 * Get the area of the areaShape.
	 * @return the area of the area shape.
	 */
	@read
	public abstract float getArea() {
		return 0;
	}
}
