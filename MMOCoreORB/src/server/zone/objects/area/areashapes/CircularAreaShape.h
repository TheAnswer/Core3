/*
 *	server/zone/objects/area/areashapes/CircularAreaShape.h generated by engine3 IDL compiler 0.60
 */

#ifndef CIRCULARAREASHAPE_H_
#define CIRCULARAREASHAPE_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "server/zone/objects/area/areashapes/AreaShape.h"

namespace server {
namespace zone {
namespace objects {
namespace area {
namespace areashapes {

class CircularAreaShape : public AreaShape {
public:
	CircularAreaShape();

	void setRadius(float r);

	float getRadius();

	float getRadius2();

	bool containsPoint(float x, float y);

	bool containsPoint(const Vector3& point);

	Vector3 getRandomPosition();

	Vector3 getRandomPosition(const Vector3& origin, float minDistance, float maxDistance);

	bool isCircularAreaShape();

	bool isRectangularAreaShape();

	bool isRingAreaShape();

	bool intersectsWith(AreaShape* areaShape);

	float getArea();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	CircularAreaShape(DummyConstructorParameter* param);

	virtual ~CircularAreaShape();

	friend class CircularAreaShapeHelper;
};

} // namespace areashapes
} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area::areashapes;

namespace server {
namespace zone {
namespace objects {
namespace area {
namespace areashapes {

class CircularAreaShapeImplementation : public AreaShapeImplementation {
protected:
	float radius;

	float radius2;

public:
	CircularAreaShapeImplementation();

	CircularAreaShapeImplementation(DummyConstructorParameter* param);

	void setRadius(float r);

	virtual float getRadius();

	float getRadius2();

	virtual bool containsPoint(float x, float y);

	virtual bool containsPoint(const Vector3& point);

	virtual Vector3 getRandomPosition();

	virtual Vector3 getRandomPosition(const Vector3& origin, float minDistance, float maxDistance);

	virtual bool isCircularAreaShape();

	virtual bool isRectangularAreaShape();

	virtual bool isRingAreaShape();

	virtual bool intersectsWith(AreaShape* areaShape);

private:
	bool intersectsWithCircle(CircularAreaShape* circle);

public:
	virtual float getArea();

	WeakReference<CircularAreaShape*> _this;

	operator const CircularAreaShape*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CircularAreaShapeImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class CircularAreaShape;
};

class CircularAreaShapeAdapter : public AreaShapeAdapter {
public:
	CircularAreaShapeAdapter(CircularAreaShape* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void setRadius(float r);

	float getRadius();

	float getRadius2();

	bool containsPoint(float x, float y);

	bool isCircularAreaShape();

	bool isRectangularAreaShape();

	bool isRingAreaShape();

	bool intersectsWith(AreaShape* areaShape);

	float getArea();

};

class CircularAreaShapeHelper : public DistributedObjectClassHelper, public Singleton<CircularAreaShapeHelper> {
	static CircularAreaShapeHelper* staticInitializer;

public:
	CircularAreaShapeHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CircularAreaShapeHelper>;
};

} // namespace areashapes
} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area::areashapes;

#endif /*CIRCULARAREASHAPE_H_*/
