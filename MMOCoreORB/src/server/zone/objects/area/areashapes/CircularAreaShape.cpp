/*
 *	server/zone/objects/area/areashapes/CircularAreaShape.cpp generated by engine3 IDL compiler 0.60
 */

#include "CircularAreaShape.h"

/*
 *	CircularAreaShapeStub
 */

enum {RPC_SETRADIUS__FLOAT_ = 6,RPC_GETRADIUS__,RPC_GETRADIUS2__,RPC_CONTAINSPOINT__FLOAT_FLOAT_,RPC_ISCIRCULARAREASHAPE__,RPC_ISRECTANGULARAREASHAPE__,RPC_ISRINGAREASHAPE__,RPC_INTERSECTSWITH__AREASHAPE_,RPC_GETAREA__};

CircularAreaShape::CircularAreaShape() : AreaShape(DummyConstructorParameter::instance()) {
	CircularAreaShapeImplementation* _implementation = new CircularAreaShapeImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("CircularAreaShape");
}

CircularAreaShape::CircularAreaShape(DummyConstructorParameter* param) : AreaShape(param) {
	_setClassName("CircularAreaShape");
}

CircularAreaShape::~CircularAreaShape() {
}



void CircularAreaShape::setRadius(float r) {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRADIUS__FLOAT_);
		method.addFloatParameter(r);

		method.executeWithVoidReturn();
	} else
		_implementation->setRadius(r);
}

float CircularAreaShape::getRadius() {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRADIUS__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getRadius();
}

float CircularAreaShape::getRadius2() {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRADIUS2__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getRadius2();
}

bool CircularAreaShape::containsPoint(float x, float y) {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSPOINT__FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->containsPoint(x, y);
}

bool CircularAreaShape::containsPoint(const Vector3& point) {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->containsPoint(point);
}

Vector3 CircularAreaShape::getRandomPosition() {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getRandomPosition();
}

Vector3 CircularAreaShape::getRandomPosition(const Vector3& origin, float minDistance, float maxDistance) {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getRandomPosition(origin, minDistance, maxDistance);
}

bool CircularAreaShape::isCircularAreaShape() {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCIRCULARAREASHAPE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCircularAreaShape();
}

bool CircularAreaShape::isRectangularAreaShape() {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRECTANGULARAREASHAPE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRectangularAreaShape();
}

bool CircularAreaShape::isRingAreaShape() {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRINGAREASHAPE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRingAreaShape();
}

bool CircularAreaShape::intersectsWith(AreaShape* areaShape) {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INTERSECTSWITH__AREASHAPE_);
		method.addObjectParameter(areaShape);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->intersectsWith(areaShape);
}

float CircularAreaShape::getArea() {
	CircularAreaShapeImplementation* _implementation = static_cast<CircularAreaShapeImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETAREA__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getArea();
}

DistributedObjectServant* CircularAreaShape::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* CircularAreaShape::_getImplementationForRead() {
	return _impl;
}

void CircularAreaShape::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CircularAreaShapeImplementation
 */

CircularAreaShapeImplementation::CircularAreaShapeImplementation(DummyConstructorParameter* param) : AreaShapeImplementation(param) {
	_initializeImplementation();
}


CircularAreaShapeImplementation::~CircularAreaShapeImplementation() {
}


void CircularAreaShapeImplementation::finalize() {
}

void CircularAreaShapeImplementation::_initializeImplementation() {
	_setClassHelper(CircularAreaShapeHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CircularAreaShapeImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CircularAreaShape*>(stub);
	AreaShapeImplementation::_setStub(stub);
}

DistributedObjectStub* CircularAreaShapeImplementation::_getStub() {
	return _this.get();
}

CircularAreaShapeImplementation::operator const CircularAreaShape*() {
	return _this.get();
}

void CircularAreaShapeImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void CircularAreaShapeImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void CircularAreaShapeImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void CircularAreaShapeImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void CircularAreaShapeImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void CircularAreaShapeImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void CircularAreaShapeImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void CircularAreaShapeImplementation::_serializationHelperMethod() {
	AreaShapeImplementation::_serializationHelperMethod();

	_setClassName("CircularAreaShape");

}

void CircularAreaShapeImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(CircularAreaShapeImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CircularAreaShapeImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (AreaShapeImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xe30f4a86: //CircularAreaShape.radius
		TypeInfo<float >::parseFromBinaryStream(&radius, stream);
		return true;

	case 0xabe79015: //CircularAreaShape.radius2
		TypeInfo<float >::parseFromBinaryStream(&radius2, stream);
		return true;

	}

	return false;
}

void CircularAreaShapeImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CircularAreaShapeImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CircularAreaShapeImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = AreaShapeImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xe30f4a86; //CircularAreaShape.radius
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&radius, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xabe79015; //CircularAreaShape.radius2
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&radius2, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

CircularAreaShapeImplementation::CircularAreaShapeImplementation() : AreaShapeImplementation() {
	_initializeImplementation();
	// server/zone/objects/area/areashapes/CircularAreaShape.idl():  		radius = 0;
	radius = 0;
	// server/zone/objects/area/areashapes/CircularAreaShape.idl():  		radius2 = 0;
	radius2 = 0;
}

void CircularAreaShapeImplementation::setRadius(float r) {
	// server/zone/objects/area/areashapes/CircularAreaShape.idl():  		radius = r;
	radius = r;
	// server/zone/objects/area/areashapes/CircularAreaShape.idl():  		radius2 = r * r;
	radius2 = r * r;
}

float CircularAreaShapeImplementation::getRadius() {
	// server/zone/objects/area/areashapes/CircularAreaShape.idl():  		return radius;
	return radius;
}

float CircularAreaShapeImplementation::getRadius2() {
	// server/zone/objects/area/areashapes/CircularAreaShape.idl():  		return radius2;
	return radius2;
}

bool CircularAreaShapeImplementation::isCircularAreaShape() {
	// server/zone/objects/area/areashapes/CircularAreaShape.idl():  		return true;
	return true;
}

bool CircularAreaShapeImplementation::isRectangularAreaShape() {
	// server/zone/objects/area/areashapes/CircularAreaShape.idl():  		return false;
	return false;
}

bool CircularAreaShapeImplementation::isRingAreaShape() {
	// server/zone/objects/area/areashapes/CircularAreaShape.idl():  		return false;
	return false;
}

/*
 *	CircularAreaShapeAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


CircularAreaShapeAdapter::CircularAreaShapeAdapter(CircularAreaShape* obj) : AreaShapeAdapter(obj) {
}

void CircularAreaShapeAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETRADIUS__FLOAT_:
		{
			setRadius(inv->getFloatParameter());
		}
		break;
	case RPC_GETRADIUS__:
		{
			resp->insertFloat(getRadius());
		}
		break;
	case RPC_GETRADIUS2__:
		{
			resp->insertFloat(getRadius2());
		}
		break;
	case RPC_CONTAINSPOINT__FLOAT_FLOAT_:
		{
			resp->insertBoolean(containsPoint(inv->getFloatParameter(), inv->getFloatParameter()));
		}
		break;
	case RPC_ISCIRCULARAREASHAPE__:
		{
			resp->insertBoolean(isCircularAreaShape());
		}
		break;
	case RPC_ISRECTANGULARAREASHAPE__:
		{
			resp->insertBoolean(isRectangularAreaShape());
		}
		break;
	case RPC_ISRINGAREASHAPE__:
		{
			resp->insertBoolean(isRingAreaShape());
		}
		break;
	case RPC_INTERSECTSWITH__AREASHAPE_:
		{
			resp->insertBoolean(intersectsWith(static_cast<AreaShape*>(inv->getObjectParameter())));
		}
		break;
	case RPC_GETAREA__:
		{
			resp->insertFloat(getArea());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void CircularAreaShapeAdapter::setRadius(float r) {
	(static_cast<CircularAreaShape*>(stub))->setRadius(r);
}

float CircularAreaShapeAdapter::getRadius() {
	return (static_cast<CircularAreaShape*>(stub))->getRadius();
}

float CircularAreaShapeAdapter::getRadius2() {
	return (static_cast<CircularAreaShape*>(stub))->getRadius2();
}

bool CircularAreaShapeAdapter::containsPoint(float x, float y) {
	return (static_cast<CircularAreaShape*>(stub))->containsPoint(x, y);
}

bool CircularAreaShapeAdapter::isCircularAreaShape() {
	return (static_cast<CircularAreaShape*>(stub))->isCircularAreaShape();
}

bool CircularAreaShapeAdapter::isRectangularAreaShape() {
	return (static_cast<CircularAreaShape*>(stub))->isRectangularAreaShape();
}

bool CircularAreaShapeAdapter::isRingAreaShape() {
	return (static_cast<CircularAreaShape*>(stub))->isRingAreaShape();
}

bool CircularAreaShapeAdapter::intersectsWith(AreaShape* areaShape) {
	return (static_cast<CircularAreaShape*>(stub))->intersectsWith(areaShape);
}

float CircularAreaShapeAdapter::getArea() {
	return (static_cast<CircularAreaShape*>(stub))->getArea();
}

/*
 *	CircularAreaShapeHelper
 */

CircularAreaShapeHelper* CircularAreaShapeHelper::staticInitializer = CircularAreaShapeHelper::instance();

CircularAreaShapeHelper::CircularAreaShapeHelper() {
	className = "CircularAreaShape";

	Core::getObjectBroker()->registerClass(className, this);
}

void CircularAreaShapeHelper::finalizeHelper() {
	CircularAreaShapeHelper::finalize();
}

DistributedObject* CircularAreaShapeHelper::instantiateObject() {
	return new CircularAreaShape(DummyConstructorParameter::instance());
}

DistributedObjectServant* CircularAreaShapeHelper::instantiateServant() {
	return new CircularAreaShapeImplementation();
}

DistributedObjectAdapter* CircularAreaShapeHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CircularAreaShapeAdapter(static_cast<CircularAreaShape*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

