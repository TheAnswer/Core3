/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.area.areashapes;

import server.zone.objects.area.areashapes.AreaShape;
include engine.util.u3d.Vector3;

class RectangularAreaShape extends AreaShape {

	/** The bottom left corner of the rectangle. */
	protected float blX;
	protected float blY;
	
	/** The upper right corner of the rectangle. */
	protected float urX;
	protected float urY;

	/** Constructor */
	public RectangularAreaShape() {
		super();
		blX = 0;
		blY = 0;
		urX = 0;
		urY = 0;
	}

	/**
	 * Set the dimensions of the rectangle.
	 * @param h the height of the rectangle.
	 * @param w the width of the rectangle.
	 */
	@preLocked
	public void setDimensions(float x1, float y1, float x2, float y2) {
		blX = x1;
		blY = y1;
		urX = x2;
		urY = y2;
	}

	/**
	 * Get the height of the rectangle.
	 * @return height of the rectangle.
	 */
	@dirty
	public abstract float getHeight() {
		return urY - blY;
	}

	/**
	 * Get the width of the rectangle.
	 * @return width of the rectangle.
	 */
	@dirty
	public abstract float getWidth() {
		return urX - blX;
	}

	/**
	 * Check if the coordinate is within the area shape.
	 * @param x the x coordinate.
	 * @param y the y coordinate.
	 * @return true if the coordinate is within the area shape.
	 */
	@dirty
	public native abstract boolean containsPoint(float x, float y);

	/**
	 * Check if the coordinate is within the area shape.
	 * @param point the point to check if it is within the area shape.
	 * @return true if the coordinate is within the area shape.
	 */
	@dereferenced
	@local
	@dirty
	public native abstract boolean containsPoint(@dereferenced final Vector3 point);

	/**
	 * Generate a random position within the area.
	 * @return a random position within the area.
	 */
	@dereferenced
	@local
	@dirty
	public native abstract Vector3 getRandomPosition();

	/**
	 * Generate a random position within the area with the supplied origin and radius as limits.
	 * @param origin the origin coordinate to generate the random position from.
	 * @param minDistance the minimum distance from the origin.
	 * @param maxDistance the maximum distance from the origin.
	 * @return a random position within the area.
	 */
	@dereferenced
	@local
	@dirty
	public native abstract Vector3 getRandomPosition(@dereferenced final Vector3 origin, float minDistance, float maxDistance);

	/**
	 * Check if this is a rectangular area shape.
	 * @return true if it is a rectangular area shape.
	 */
	@dirty
	public abstract boolean isRectangularAreaShape() {
		return true;
	}

	/**
	 * Check if this area shape intersects with the supplied area shape.
	 * @param areaShape the area shape to check for intersections with.s
	 * @return true if the area shapes intersects each other.
	 */
	@dirty
	public native abstract boolean intersectsWith(AreaShape areaShape);

	/**
	 * Calculates the point in the area that has the shortest distance to the supplied
	 * position.
	 * @param position the position to find the closest point towards.
	 * @return the closest point inside the area.
	 */
	@dereferenced
	@local
	@dirty
	private native Vector3 getClosestPoint(@dereferenced final Vector3 position);

	/**
	 * Calculates the point in the area that has the longest distance to the supplied
	 * position.
	 * @param position the position to find the closest point towards.
	 * @return the farthest point inside the area.
	 */
	@dereferenced
	@local
	@dirty
	private native Vector3 getFarthestPoint(@dereferenced final Vector3 position);

	/**
	 * Get the area of the areaShape.
	 * @return the area of the area shape.
	 */
	@dirty
	public abstract float getArea() {
		return getHeight() * getWidth();
	}
}
