/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.area.areashapes;

import server.zone.objects.area.areashapes.AreaShape;
include engine.util.u3d.Vector3;

class CircularAreaShape extends AreaShape {

	/** The radius of the circle. */
	protected float radius;

	/** The squared radius of the circle */
	protected float radius2;

	/** Constructor */
	public CircularAreaShape() {
		super();
		radius = 0;
		radius2 = 0;
	}

	/**
	 * Set the radius of the cirle.
	 * @param r the new radius of the circle.
	 */
	@preLocked
	public void setRadius(float r) {
		radius = r;
		radius2 = r * r;
	}

	/**
	 * Get the radius of the circle.
	 * @return radius of the circle
	 */
	@read
	public float getRadius() {
		return radius;
	}

	/**
	 * Get the squared radius of the circle.
	 * @return squared radius of the circle
	 */
	@read
	public float getRadius2() {
		return radius2;
	}

	/**
	 * Check if the coordinate is within the area shape.
	 * @param x the x coordinate.
	 * @param y the y coordinate.
	 * @return true if the coordinate is within the area shape.
	 */
	@read
	public native boolean containsPoint(float x, float y);

	/**
	 * Check if the coordinate is within the area shape.
	 * @param point the point to check if it is within the area shape.
	 * @return true if the coordinate is within the area shape.
	 */
	@dereferenced
	@local
	@read
	public native boolean containsPoint(@dereferenced final Vector3 point);

	/**
	 * Generate a random position within the area.
	 * @return a random position within the area.
	 */
	@dereferenced
	@local
	@read
	public native Vector3 getRandomPosition();

	/**
	 * Generate a random position within the area with the supplied origin and radius as limits.
	 * @param origin the origin coordinate to generate the random position from.
	 * @param minDistance the minimum distance from the origin.
	 * @param maxDistance the maximum distance from the origin.
	 * @return a random position within the area.
	 */
	@dereferenced
	@local
	@read
	public native Vector3 getRandomPosition(@dereferenced final Vector3 origin, float minDistance, float maxDistance);

	/**
	 * Check if this is a circular area shape.
	 * @return true if it is a circular area shape.
	 */
	@read
	public boolean isCircularAreaShape() {
		return true;
	}

	/**
	 * Check if this area shape intersects with the supplied area shape.
	 * @param areaShape the area shape to check for intersections with.s
	 * @return true if the area shapes intersects each other.
	 */
	@read
	public native boolean intersectsWith(AreaShape areaShape);

	/**
	 * Check if this area shape intersects with the supplied circular area shape.
	 * @param circle the circular area shape to check for intersections with.
	 * @return true if the circles intersect with each other.
	 */
	@read
	private native boolean intersectsWithCircle(CircularAreaShape circle);

	/**
	 * Get the area of the areaShape.
	 * @return the area of the area shape.
	 */
	@read
	public native float getArea();
}
