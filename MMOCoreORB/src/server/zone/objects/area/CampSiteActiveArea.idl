/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.area;

import server.zone.objects.scene.SceneObject;
import server.zone.objects.staticobject.StaticObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.structure.StructureObject;
import server.zone.objects.tangible.terminal.Terminal;
import server.zone.objects.area.ActiveArea;
import server.zone.objects.area.CampSiteObserver;
import server.zone.objects.area.events.CampDespawnTask;
import server.zone.objects.area.events.CampAbandonTask;
include templates.building.CampStructureTemplate;
include system.thread.Mutex;
import system.lang.Time;
include templates.TemplateReference;
include system.lang.System;
include system.util.Vector;

class CampSiteActiveArea extends ActiveArea {

	protected StructureObject camp;
	protected Terminal terminal;
	protected transient StaticObject campFire;

	@dereferenced
	protected transient Mutex taskMutex;

	@dereferenced
	transient protected Vector<unsigned long> visitors;

	protected CampSiteObserver campObserver;

	protected CampAbandonTask abandonTask;
	protected CampDespawnTask despawnTask;

	protected CreatureObject campOwner;

	protected transient unsigned int timeCreated;
	protected transient boolean abandoned;

	protected transient int currentXp;

	@dereferenced
	protected TemplateReference<CampStructureTemplate> campStructureData;

	// 1 Hour
	public final static int DESPAWNTIME = 6000000;

	// 1 minute
	public final static int ABANDONTIME = 60000;

	public CampSiteActiveArea() {
		Logger.setLoggingName("CampsiteActiveArea");
		timeCreated = System.getTime();
		abandoned = false;
		currentXp = 0;
		campOwner = null;
		camp = null;
		terminal = null;
		abandonTask = null;
		despawnTask = null;
		campFire = null;
	}

	public native void initializeTransientMembers();

	@local
	@preLocked
	public native void init(CampStructureTemplate campData);

	private native void startTasks();

	public native void notifyEnter(SceneObject player);

	public native void notifyExit(SceneObject player);

	@preLocked
	public void setTerminal(Terminal term) {
		terminal = term;
	}

	@preLocked
	public native void setOwner(CreatureObject player);

	@preLocked
	public void setCamp(StructureObject c) {
		camp = c;
	}

	@read
	public StructureObject getCamp() {
		return camp;
	}

	@dirty
	public int getMedicalRating() {
		return campStructureData.get().getMedicalRating();
	}

	@dirty
	public int getHealthWoundRegenRate() {
		return campStructureData.get().getHealthWoundRegenRate();
	}

	@dirty
	public int getActionWoundRegenRate() {
		return campStructureData.get().getActionWoundRegenRate();
	}

	@dirty
	public int getMindWoundRegenRate() {
		return campStructureData.get().getMindWoundRegenRate();
	}

	@dirty
	public float getAggroMod() {
		return campStructureData.get().getAggroMod();
	}

	@dirty
	public abstract boolean isCampArea() {
		return true;
	}

	@read
	public int getVisitorCount() {
		return visitors.size();
	}

	@dereferenced
	@dirty
	public unsigned int getUptime() {
		return System.getTime() - timeCreated;
	}

	@read
	public boolean isAbandoned() {
		return abandoned;
	}

	public native int notifyHealEvent(long quantity);

	public native int notifyCombatEvent();

	@preLocked
	public native void abandonCamp();
	
	@preLocked
	public native void setAbandoned(boolean isAbandoned);

	public native boolean despawnCamp();

	@preLocked
	public native void assumeOwnership(CreatureObject player);

	@read
	public CreatureObject getOwner() {
		return campOwner;
	}
}
