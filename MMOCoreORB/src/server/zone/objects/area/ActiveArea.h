/*
 *	server/zone/objects/area/ActiveArea.h generated by engine3 IDL compiler 0.60
 */

#ifndef ACTIVEAREA_H_
#define ACTIVEAREA_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace area {
namespace areashapes {

class AreaShape;

} // namespace areashapes
} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area::areashapes;

#include "engine/util/u3d/QuadTreeEntry.h"

#include "server/zone/objects/scene/SceneObject.h"

namespace server {
namespace zone {
namespace objects {
namespace area {

class ActiveArea : public SceneObject {
public:
	ActiveArea();

	void sendTo(SceneObject* player, bool doClose);

	void enqueueEnterEvent(SceneObject* obj);

	void enqueueExitEvent(SceneObject* obj);

	void notifyEnter(SceneObject* object);

	void notifyExit(SceneObject* object);

	bool isActiveArea();

	bool isRegion();

	bool isCityRegion();

	bool isNoBuildArea();

	bool isCampingPermitted();

	bool containsPoint(float x, float y);

	float getRadius2();

	void setNoBuildArea(bool val);

	void setCampingPermitted(bool val);

	void setMunicipalZone(bool val);

	void setRadius(float r);

	bool isCampArea();

	void setNoSpawnArea(bool val);

	bool isNoSpawnArea();

	bool isMunicipalZone();

	unsigned long long getCellObjectID();

	void setCellObjectID(unsigned long long celloid);

	void setAreaShape(AreaShape* area);

	AreaShape* getAreaShape();

	bool intersectsWith(ActiveArea* area);

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	ActiveArea(DummyConstructorParameter* param);

	virtual ~ActiveArea();

	friend class ActiveAreaHelper;
};

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

namespace server {
namespace zone {
namespace objects {
namespace area {

class ActiveAreaImplementation : public SceneObjectImplementation {
protected:
	bool noBuildArea;

	bool campingPermitted;

	bool municipalZone;

	unsigned long long cellObjectID;

	bool noSpawnArea;

<<<<<<< HEAD
	ManagedReference<AreaShape* > areaShape;

=======
>>>>>>> origin/stable
public:
	ActiveAreaImplementation();

	ActiveAreaImplementation(DummyConstructorParameter* param);

	void sendTo(SceneObject* player, bool doClose);

	virtual void enqueueEnterEvent(SceneObject* obj);

	virtual void enqueueExitEvent(SceneObject* obj);

	virtual void notifyEnter(SceneObject* object);

	virtual void notifyExit(SceneObject* object);

	bool isActiveArea();

	virtual bool isRegion();

	virtual bool isCityRegion();

	bool isNoBuildArea();

	bool isCampingPermitted();

	bool containsPoint(float x, float y);

	float getRadius2();

	void setNoBuildArea(bool val);

	void setCampingPermitted(bool val);

	void setMunicipalZone(bool val);

	void setRadius(float r);

	virtual bool isCampArea();

	void setNoSpawnArea(bool val);

	bool isNoSpawnArea();

	bool isMunicipalZone();

	unsigned long long getCellObjectID();

	void setCellObjectID(unsigned long long celloid);

	void setAreaShape(AreaShape* area);

	AreaShape* getAreaShape();

	bool intersectsWith(ActiveArea* area);

	WeakReference<ActiveArea*> _this;

	operator const ActiveArea*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~ActiveAreaImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class ActiveArea;
};

class ActiveAreaAdapter : public SceneObjectAdapter {
public:
	ActiveAreaAdapter(ActiveArea* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendTo(SceneObject* player, bool doClose);

	void enqueueEnterEvent(SceneObject* obj);

	void enqueueExitEvent(SceneObject* obj);

	void notifyEnter(SceneObject* object);

	void notifyExit(SceneObject* object);

	bool isActiveArea();

	bool isRegion();

	bool isCityRegion();

	bool isNoBuildArea();

	bool isCampingPermitted();

	bool containsPoint(float x, float y);

	float getRadius2();

	void setNoBuildArea(bool val);

	void setCampingPermitted(bool val);

	void setMunicipalZone(bool val);

	void setRadius(float r);

	bool isCampArea();

	void setNoSpawnArea(bool val);

	bool isNoSpawnArea();

	bool isMunicipalZone();

	unsigned long long getCellObjectID();

	void setCellObjectID(unsigned long long celloid);

	void setAreaShape(AreaShape* area);

	AreaShape* getAreaShape();

	bool intersectsWith(ActiveArea* area);

};

class ActiveAreaHelper : public DistributedObjectClassHelper, public Singleton<ActiveAreaHelper> {
	static ActiveAreaHelper* staticInitializer;

public:
	ActiveAreaHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<ActiveAreaHelper>;
};

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

#endif /*ACTIVEAREA_H_*/
