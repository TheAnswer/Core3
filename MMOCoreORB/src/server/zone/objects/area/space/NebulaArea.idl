/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.
*/

package server.zone.objects.area.space;

import server.zone.TreeEntry;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.area.space.SpaceActiveArea;
import system.lang.Time;

include system.thread.atomic.AtomicInteger;
include server.zone.objects.ship.ShipObject;
include engine.util.u3d.Vector3;

@json
class NebulaArea extends SpaceActiveArea {
	private static final int LIGHTNINGDELAY = 20; // Random amount in seconds
	public static final float LIGHTNING_DIST_MIN = 50;
	public static final float LIGHTNING_DAMAGE_RAD = 200;

	protected float nebulaDensity;

	protected string ambientSound;
	protected string lightningAppearance;
	protected string lightningSound;
	protected string lightningSoundLoop;
	protected string lightningHitEffectClient;
	protected string lightningHitEffectServer;

	protected float lightningDamageMin;
	protected float lightningDamageMax;
	protected float lightningFrequency;
	protected float lightningDurationMax;

	@dereferenced
	protected AtomicInteger numberOfShipsInRange;

	@dereferenced
	protected AtomicInteger lightningCount;

	@dereferenced
	protected Time lastLightning;

	protected int nebulaID;

	public NebulaArea() {
		Logger.setLoggingName("NebulaArea");

		lastLightning.updateToCurrentTime();
	}

	// Mutators
	public void setNebulaDensity(float density) {
		nebulaDensity = density;
	}

	public void setAmbientSound(final string sound) {
		ambientSound = sound;
	}

	public void setLightningAppearance(final string appearance) {
		lightningAppearance = appearance;
	}

	public void setLightningSound(final string sound) {
		lightningSound = sound;
	}

	public void setLightningSoundLoop(final string sound) {
		lightningSoundLoop = sound;
	}

	public void setLightningHitEffectClient(final string effect) {
		lightningHitEffectClient = effect;
	}

	public void setLightningHitEffectServer(final string effect) {
		lightningHitEffectServer = effect;
	}

	public void setLightningDamageMin(float damage) {
		lightningDamageMin = damage;
	}

	public void setLightningDamageMax(float damage) {
		lightningDamageMax = damage;
	}

	public void setLightningFrequency(int frequency) {
		lightningFrequency = frequency;
	}

	public void setLightningDurationMax(int maxDuration) {
		lightningDurationMax = maxDuration;
	}

	public void setNebulaID(int nebulaId) {
		nebulaID = nebulaId;
	}

	// Accessors
	public float getNebulaDensity() {
		return nebulaDensity;
	}

	public float getMaxLightningDuration() {
		return lightningDurationMax;
	}

	public int getNebulaID() {
		return nebulaID;
	}

	public float getLightningDamageMin() {
		return lightningDamageMin;
	}

	public float getLightningDamageMax() {
		return lightningDamageMax;
	}

	// Functions

	@dirty
	public native void notifyPositionUpdate(TreeEntry entry);

	@dirty
	public native abstract void notifyEnter(SceneObject object);

	@dirty
	public native abstract void notifyExit(SceneObject object);

	private native void createNewLightning(ShipObject ship);

	private native void shipLightningDamage(ShipObject ship, @dereferenced final Vector3 startPoint, @dereferenced final Vector3 endPoint, float distance, int startTime, int endTime);
}