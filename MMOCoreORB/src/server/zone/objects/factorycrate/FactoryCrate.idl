/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.factorycrate;

import server.zone.objects.scene.SceneObject;
import server.zone.objects.tangible.TangibleObject;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
import server.zone.packets.object.ObjectMenuResponse;
include templates.SharedObjectTemplate;
import server.zone.objects.scene.variables.ContainerPermissions;

class FactoryCrate extends TangibleObject {

	protected int maxCapacity;

	public FactoryCrate() {
		Logger.setLoggingName("FactoryCrate");

		maxCapacity = 100;

		super.setContainerInheritPermissionsFromParent(false);
		super.setContainerDefaultDenyPermission(ContainerPermissions.OPEN);
		super.setContainerDefaultDenyPermission(ContainerPermissions.MOVEIN);
		super.setContainerDefaultDenyPermission(ContainerPermissions.MOVEOUT);
	}

	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);

	public native void initializeTransientMembers();

	@dirty
	public native void sendBaselinesTo(SceneObject player);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	/**
	 * Fills the radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	@local
	@dirty
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	@preLocked
	@arg1preLocked
	public native int handleObjectMenuSelect(CreatureObject player, byte selectedID);

	@dirty
	public abstract boolean isFactoryCrate() {
		return true;
	}

	@read
	public int getMaxCapacity() {
		return maxCapacity;
	}

	@preLocked
	public void setMaxCapacity(int value) {
		maxCapacity = value;
	}

	@preLocked
	public native void setUseCount(unsigned int newUseCount, boolean notifyClient = true);

	@reference
	@dirty
	public native TangibleObject getPrototype();

	@dirty
	public native string getCraftersName();

	@dirty
	public native string getSerialNumber();

	public native boolean extractObjectToInventory(CreatureObject player);

	@reference
	public native TangibleObject extractObject(int count = 1);

	@preLocked
	public native void split(int newStackSize);

	@dirty
	public abstract native int getCountableObjectsRecursive() {
		return 0;
	}

	@dirty
	public abstract native int getSizeOnVendorRecursive() {
		return 1;
	}
}
