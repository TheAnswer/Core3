/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.pathfinding;

import server.zone.objects.area.ActiveArea;
import server.zone.objects.scene.SceneObject;
import engine.util.u3d.AABB;
import engine.util.u3d.Vector3;
import system.thread.ReadWriteLock;
include pathfinding.RecastNavMesh;
include system.util.HashSet;

class NavArea extends ActiveArea {

	protected string meshName;

	@dereferenced
	protected RecastNavMesh recastNavMesh;

	// Disables notifyEnter/Exit updates for static cities
	protected boolean disableUpdates;

	// Original bounds of the recastNavMesh, this is absolutely required to stay constant in order to rebuild tiles correctly
	@dereferenced
	protected AABB meshBounds;

	// List of objects this navmesh currently has built in it's scene.
	@dereferenced
	protected HashSet<unsigned long> containedObjects;
	
	@dereferenced
	protected transient ReadWriteLock containedLock;

	protected transient float terrainHeight;

	public NavArea() {
		super();
		disableUpdates = false;
		meshName = "navmesh";

		terrainHeight = 0;
	}

	@local
	@preLocked
	public native void initializeNavArea(@dereferenced Vector3 position, float radius, Zone zone, final string name, boolean forceRebuild = false);

	@preLocked
	public native void initialize();

	public native void notifyEnter(SceneObject object);

	public native void notifyExit(SceneObject object);

	/**
	 * Destroys the object from the world
	 */
	public native void destroyObjectFromWorld(boolean sendSelfDestroy);

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	public native void notifyLoadFromDatabase();

	@local
	@dirty
	public final AABB getMeshBounds() {
		return meshBounds;
	}

	@local
	@dirty
	public RecastNavMesh getNavMesh() {
		return recastNavMesh;
	}

	@local
	@preLocked
	public void disableMeshUpdates(boolean disable) {
		disableUpdates = disable;
	}

	@dirty
	public boolean isNavArea() {
		return true;
	}

	@dirty
	public native NavArea asNavArea();

	@dirty
	public native boolean objectInMesh(SceneObject obj);

	@dirty
	public string getMeshName() {
		return meshName;
	}

	@preLocked
	public void setMeshName(final string name) {
		meshName = name;
	}

	@dirty
	public native boolean isInRange(float x, float y, float range);

	// Update a navmesh using the specified bounds
	// The bounds will be expanded to a minimum of the terrain chunk size (generally 32m)
	// Bounding boxes will be merged automatically during build time if they completely contain another area
	@local
	public native void updateNavMesh(@dereferenced final AABB area);

	// Updates a navmesh using the specified scene object
	// toRemove specifies whether we are adding or removing to the navmesh
	public native void updateNavMesh(SceneObject object, boolean toRemove);

	@local
	@preLocked
	public native void setRadius(float f);

	@local
	@dirty
	@dereferenced
	public native AABB getBoundingBox();

	@dirty
	public abstract native boolean containsPoint(float x, float y);

	@read
	public boolean isNavMeshLoaded() {
		return recastNavMesh.isLoaded();
	}

	@dirty
	public int getContainedObjectsCount() {
		return containedObjects.size();
	}

	@read
	public float getAreaTerrainHeight() {
		return terrainHeight;
	}

	@dirty
	public void setAreaTerrainHeight(float value) {
		terrainHeight = value;
	}
}

