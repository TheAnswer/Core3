/*
 *	server/zone/objects/structure/StructureObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef STRUCTUREOBJECT_H_
#define STRUCTUREOBJECT_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace structure {
namespace events {

class StructureMaintenanceTask;

} // namespace events
} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure::events;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerObject;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace templates {

class SharedObjectTemplate;

} // namespace templates
} // namespace zone
} // namespace server

using namespace server::zone::templates;

namespace server {
namespace zone {
namespace objects {
namespace area {

class ActiveArea;

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

#include "server/zone/objects/structure/StructurePermissionList.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/util/u3d/AABBTree.h"

#include "engine/util/u3d/AABBNode.h"

#include "engine/util/u3d/Vector3.h"

#include "system/lang/Time.h"

namespace server {
namespace zone {
namespace objects {
namespace structure {

class StructureObject : public TangibleObject {
public:
	StructureObject();

	void initializeTransientMembers();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void notifyInsertToZone(Zone* zone);

	void createChildObjects();

	int notifyStructurePlaced(CreatureObject* creature);

	bool checkRequisitesForPlacement(CreatureObject* player);

	String getTimeString(unsigned int timestamp);

	void scheduleMaintenanceExpirationEvent();

	void scheduleMaintenanceTask(int timeFromNow);

	void updateStructureStatus();

	bool isOnAdminList(CreatureObject* player);

	bool isOnAdminList(const String& firstName, bool caseSensitive = false);

	bool isOnEntryList(CreatureObject* player);

	bool isOnBanList(CreatureObject* player);

	bool isOnBanList(const String& firstName, bool caseSensitive = false);

	bool isOnHopperList(CreatureObject* player);

	bool isOnPermissionList(const String& listName, CreatureObject* player);

	bool isOnPermissionList(const String& listName, const String& firstName, bool caseSensitive = false);

	bool isOwnerOf(SceneObject* obj);

	bool isOwnerOf(unsigned long long oid);

	bool isOnAccessList(SceneObject* obj);

	bool isOnAccessList(unsigned long long oid);

	void sendPermissionListTo(CreatureObject* creature, const String& listName);

	bool hasPermissionList(const String& listName);

	bool isPermissionListFull(const String& listName);

	int togglePermission(const String& listName, const String& targetName, bool caseSensitive = false);

	int grantPermission(const String& listName, const String& targetName, bool caseSensitive = false);

	int revokePermission(const String& listName, const String& targetName, bool caseSensitive = false);

	int revokeAllPermissions(const String& targetName, bool caseSensitive = false);

	void setOwnerName(const String& ownerName);

	int getRedeedCost();

	CreatureObject* getOwnerCreatureObject();

	unsigned long long getOwnerObjectID();

	unsigned long long getDeedObjectID();

	int getLotSize();

	void setMaintenanceReduced(bool value);

	float getMaintenanceRate();

	String getMaintenanceMods();

	int getBaseMaintenanceRate();

	int getBasePowerRate();

	int getSurplusMaintenance();

	int getSurplusPower();

	bool isPublicStructure();

	bool isPrivateStructure();

	void setOwnerObjectID(unsigned long long objectID);

	void setDeedObjectID(unsigned long long deedID);

	void setBaseMaintenanceRate(int rate);

	void setBasePowerRate(int rate);

	void setSurplusMaintenance(int surplus);

	void addMaintenance(float add);

	void payMaintenance(int maintenance, CreatureObject* payer, bool cashFirst);

	void setSurplusPower(int surplus);

	void addPower(float add);

	bool isDecaying();

	bool isDecayed();

	int getDecayPercentage();

	bool isCondemned();

	void setPublicStructure(bool privacy);

	bool isStructureObject();

	bool isCampStructure();

	bool isRedeedable();

	AABBTree* getAABBTree();

	void addTemplateSkillMods(TangibleObject* targetObject);

	void removeTemplateSkillMods(TangibleObject* tangibleObject);

	String getRedeedMessage();

	bool isCivicStructure();

	bool isCityHall();

	bool isCommercialStructure();

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead();

	void _setImplementation(DistributedObjectServant* servant);

protected:
	StructureObject(DummyConstructorParameter* param);

	virtual ~StructureObject();

	friend class StructureObjectHelper;
};

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

namespace server {
namespace zone {
namespace objects {
namespace structure {

class StructureObjectImplementation : public TangibleObjectImplementation {
protected:
	Reference<StructureMaintenanceTask* > structureMaintenanceTask;

	StructurePermissionList structurePermissionList;

	Time lastMaintenanceTime;

	Time maintenanceExpires;

	Time powerExpires;

	unsigned long long ownerObjectID;

	unsigned long long deedObjectID;

	int baseMaintenanceRate;

	int basePowerRate;

	float surplusMaintenance;

	float surplusPower;

	bool maintenanceReduced;

public:
	StructureObjectImplementation();

	StructureObjectImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void finalize();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void notifyInsertToZone(Zone* zone);

	void createChildObjects();

	virtual int notifyStructurePlaced(CreatureObject* creature);

	virtual bool checkRequisitesForPlacement(CreatureObject* player);

	String getTimeString(unsigned int timestamp);

	void scheduleMaintenanceExpirationEvent();

	void scheduleMaintenanceTask(int timeFromNow);

	virtual void updateStructureStatus();

	bool isOnAdminList(CreatureObject* player);

	bool isOnAdminList(const String& firstName, bool caseSensitive = false);

	bool isOnEntryList(CreatureObject* player);

	bool isOnBanList(CreatureObject* player);

	bool isOnBanList(const String& firstName, bool caseSensitive = false);

	bool isOnHopperList(CreatureObject* player);

	bool isOnPermissionList(const String& listName, CreatureObject* player);

	bool isOnPermissionList(const String& listName, const String& firstName, bool caseSensitive = false);

	bool isOwnerOf(SceneObject* obj);

	bool isOwnerOf(unsigned long long oid);

	bool isOnAccessList(SceneObject* obj);

	bool isOnAccessList(unsigned long long oid);

	void sendPermissionListTo(CreatureObject* creature, const String& listName);

	bool hasPermissionList(const String& listName);

	bool isPermissionListFull(const String& listName);

	int togglePermission(const String& listName, const String& targetName, bool caseSensitive = false);

	int grantPermission(const String& listName, const String& targetName, bool caseSensitive = false);

	int revokePermission(const String& listName, const String& targetName, bool caseSensitive = false);

	int revokeAllPermissions(const String& targetName, bool caseSensitive = false);

	void setOwnerName(const String& ownerName);

	int getRedeedCost();

	CreatureObject* getOwnerCreatureObject();

	unsigned long long getOwnerObjectID();

	unsigned long long getDeedObjectID();

	int getLotSize();

	void setMaintenanceReduced(bool value);

	float getMaintenanceRate();

	String getMaintenanceMods();

	int getBaseMaintenanceRate();

	int getBasePowerRate();

	int getSurplusMaintenance();

	int getSurplusPower();

	virtual bool isPublicStructure();

	virtual bool isPrivateStructure();

	void setOwnerObjectID(unsigned long long objectID);

	void setDeedObjectID(unsigned long long deedID);

	void setBaseMaintenanceRate(int rate);

	void setBasePowerRate(int rate);

	void setSurplusMaintenance(int surplus);

	void addMaintenance(float add);

	void payMaintenance(int maintenance, CreatureObject* payer, bool cashFirst);

	void setSurplusPower(int surplus);

	void addPower(float add);

	bool isDecaying();

	bool isDecayed();

	int getDecayPercentage();

	virtual bool isCondemned();

	virtual void setPublicStructure(bool privacy);

	bool isStructureObject();

	bool isCampStructure();

	bool isRedeedable();

	AABBTree* getAABBTree();

	void addTemplateSkillMods(TangibleObject* targetObject);

	void removeTemplateSkillMods(TangibleObject* tangibleObject);

	virtual String getRedeedMessage();

	bool isCivicStructure();

	bool isCityHall();

	bool isCommercialStructure();

	WeakReference<StructureObject*> _this;

	operator const StructureObject*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~StructureObjectImplementation();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class StructureObject;
};

class StructureObjectAdapter : public TangibleObjectAdapter {
public:
	StructureObjectAdapter(StructureObject* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void finalize();

	void notifyInsertToZone(Zone* zone);

	void createChildObjects();

	int notifyStructurePlaced(CreatureObject* creature);

	bool checkRequisitesForPlacement(CreatureObject* player);

	String getTimeString(unsigned int timestamp);

	void scheduleMaintenanceExpirationEvent();

	void scheduleMaintenanceTask(int timeFromNow);

	void updateStructureStatus();

	bool isOnAdminList(CreatureObject* player);

	bool isOnAdminList(const String& firstName, bool caseSensitive);

	bool isOnEntryList(CreatureObject* player);

	bool isOnBanList(CreatureObject* player);

	bool isOnBanList(const String& firstName, bool caseSensitive);

	bool isOnHopperList(CreatureObject* player);

	bool isOnPermissionList(const String& listName, CreatureObject* player);

	bool isOnPermissionList(const String& listName, const String& firstName, bool caseSensitive);

	bool isOwnerOf(SceneObject* obj);

	bool isOwnerOf(unsigned long long oid);

	bool isOnAccessList(SceneObject* obj);

	bool isOnAccessList(unsigned long long oid);

	void sendPermissionListTo(CreatureObject* creature, const String& listName);

	bool hasPermissionList(const String& listName);

	bool isPermissionListFull(const String& listName);

	int togglePermission(const String& listName, const String& targetName, bool caseSensitive);

	int grantPermission(const String& listName, const String& targetName, bool caseSensitive);

	int revokePermission(const String& listName, const String& targetName, bool caseSensitive);

	int revokeAllPermissions(const String& targetName, bool caseSensitive);

	void setOwnerName(const String& ownerName);

	int getRedeedCost();

	CreatureObject* getOwnerCreatureObject();

	unsigned long long getOwnerObjectID();

	unsigned long long getDeedObjectID();

	int getLotSize();

	void setMaintenanceReduced(bool value);

	float getMaintenanceRate();

	String getMaintenanceMods();

	int getBaseMaintenanceRate();

	int getBasePowerRate();

	int getSurplusMaintenance();

	int getSurplusPower();

	bool isPublicStructure();

	bool isPrivateStructure();

	void setOwnerObjectID(unsigned long long objectID);

	void setDeedObjectID(unsigned long long deedID);

	void setBaseMaintenanceRate(int rate);

	void setBasePowerRate(int rate);

	void setSurplusMaintenance(int surplus);

	void addMaintenance(float add);

	void payMaintenance(int maintenance, CreatureObject* payer, bool cashFirst);

	void setSurplusPower(int surplus);

	void addPower(float add);

	bool isDecaying();

	bool isDecayed();

	int getDecayPercentage();

	bool isCondemned();

	void setPublicStructure(bool privacy);

	bool isStructureObject();

	bool isCampStructure();

	bool isRedeedable();

	String getRedeedMessage();

	bool isCivicStructure();

	bool isCityHall();

	bool isCommercialStructure();

};

class StructureObjectHelper : public DistributedObjectClassHelper, public Singleton<StructureObjectHelper> {
	static StructureObjectHelper* staticInitializer;

public:
	StructureObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<StructureObjectHelper>;
};

} // namespace structure
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::structure;

#endif /*STRUCTUREOBJECT_H_*/
