/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.group;

import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.CreatureObject;
import system.util.Vector;
import server.chat.room.ChatRoom;
import engine.lua.LuaObject;
import engine.service.proto.BaseMessage;
include server.zone.objects.group.GroupList;
include server.zone.managers.mission.MissionManager;
include server.zone.managers.group.GroupManager;
import server.zone.objects.group.tasks.UpdateNearestMissionForGroupTask;
import server.zone.Zone;
include server.chat.StringIdChatParameter;

class GroupObject extends SceneObject {	
	@dereferenced
	GroupList groupMembers;
	
	@dereferenced	
	VectorMap<unsigned int, Reference<UpdateNearestMissionForGroupTask> > updateNearestMissionForGroupTasks;
	
	ChatRoom chatRoom;
	
	int groupLevel;

	protected string bandSong;

	int lootRule;

	unsigned long masterLooterID;
	
	public GroupObject() {		
		groupLevel = 0;
		
		Logger.setLoggingName("GroupObject");
		
		chatRoom = null;

		bandSong = "";

		lootRule = GroupManager.FREEFORALL;
		masterLooterID = 0;
		
	}
	
	@dirty
	public native void sendBaselinesTo(SceneObject player);
	
	@dirty
	public native void broadcastMessage(BaseMessage msg);
	
	@dirty
	public native void broadcastMessage(CreatureObject player, BaseMessage msg, boolean sendSelf = false);


	/*public native void sendSystemMessage(SceneObject player, final string message, boolean sendToSelf = false);
	public native void sendSystemMessage(SceneObject player, final string file, final string str, unsigned long targetid = 0, boolean sendToSelf = false);
	public native void sendSystemMessage(SceneObject player, final string file, final string str, StfParameter param, boolean sendToSelf = false);
*/
	@local
	@dirty
	public native void sendSystemMessage(@dereferenced StringIdChatParameter param, boolean sendLeader = true);
	@dirty
	public native void sendSystemMessage(final string fullPath, boolean sendLeader = true);
	
	public native void addMember(SceneObject newMember);
	public native void removeMember(SceneObject member);

	public native void disband();
	public native void makeLeader(SceneObject player);

	@dirty
	public native boolean hasMember(SceneObject member);
	@dirty
	public native boolean hasMember(unsigned long member);

	public native void startChatRoom();
	public native void destroyChatRoom();

	@dirty
	public native float getGroupHarvestModifier(CreatureObject player);

	/*public native void addSquadLeaderBonuses(CreatureObject groupMember);
	public native void removeSquadLeaderBonuses(CreatureObject groupMember);*/

	@dirty
	public native void calcGroupLevel();

	@read
	public int getGroupLevel() {
		return groupLevel;
	}

	@read
	public ChatRoom getGroupChannel() {
		return chatRoom;
	}

	@dirty
	public int getGroupSize() {
		return groupMembers.size();
	}

	@reference
	@dirty
	public SceneObject getGroupMember(int index) {
		return groupMembers.getSafe(index);
	}

	public void initializeLeader(SceneObject player) {
		groupMembers.add(player);
	}

	@reference
	@dirty
	public SceneObject getLeader() {
		if (groupMembers.size() == 0) {
			return null;
		} else {
			return groupMembers.getSafe(0);
		}
	}
	
	@local
	@dirty
	public GroupList getGroupList() {
		return groupMembers;
	}

	@dirty
	public boolean isGroupObject() {
		return true;
	}
	
	@dirty
	public native boolean hasSquadLeader();
	
	public native void addGroupModifiers();
	
	public native void removeGroupModifiers();
	
	public native void addGroupModifiers(CreatureObject player);
	
	public native void removeGroupModifiers(CreatureObject player);

	@dirty
	public native boolean isOtherMemberPlayingMusic(CreatureObject player);

	@read
	public string getBandSong() {
		return bandSong;
	}

	public void setBandSong(final string song) {
		bandSong = song;
	}

	@read
	public int getLootRule() {
		return lootRule;
	}

	public void setLootRule(int newRule) {
		lootRule = newRule;
	}

	@read
	public unsigned long getMasterLooterID() {
		return masterLooterID;
	}

	public void setMasterLooterID(unsigned long newID) {
		masterLooterID = newID;
	}

	public boolean checkMasterLooter(SceneObject object) {
		return object.getObjectID() == masterLooterID;
	}

	public native void scheduleUpdateNearestMissionForGroup(unsigned int planetCRC);

	public native void updateLootRules();
}
