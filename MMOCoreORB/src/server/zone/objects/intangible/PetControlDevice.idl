/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.intangible;

import engine.lua.LuaObject;
import server.zone.objects.intangible.IntangibleObject;
import server.zone.objects.intangible.ControlDevice;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.AiAgent;
import server.zone.objects.player.PlayerObject;
import server.zone.objects.tangible.TangibleObject;
import server.zone.objects.scene.SceneObject;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.Zone;
import system.lang.System;
import system.util.VectorMap;
include server.zone.managers.radial.RadialOptions;
import server.zone.objects.intangible.PetControlObserver;

class PetControlDevice extends ControlDevice {

	PetControlObserver petControlObserver;

	protected int vitality;
	protected int maxVitality;

	protected int petType;

	// Trained command strings <commandid, chatstring>
	@dereferenced 
	protected VectorMap<unsigned int, string> trainedCommands;
	
	// Command to be trained
	protected unsigned int trainingCommand;

	// The most recent name used in command training
	protected string futureName;

	// keeps track of the number of commands taught with futureName
	// once it reaches 4, the pet is named
	protected unsigned int namingProgress;

	protected int growthStage;

	@dereferenced
	protected Time lastGrowth;

	protected boolean trainedAsMount;
	
	@dereferenced
	protected Vector<unsigned int> namingCommands;

	public PetControlDevice() {
		Logger.setLoggingName("PetControlDevice");
		Logger.setLogging(false);
		Logger.setGlobalLogging(true);
		vitality = 1;
		maxVitality = 1;
		petType = 0;
		trainingCommand = 0;
		namingProgress = 0;
		futureName = "";
		growthStage = 0;
		trainedAsMount = false;

		lastGrowth.updateToCurrentTime();

		trainedCommands.setAllowOverwriteInsertPlan();
		trainedCommands.setNullValue("");
	}

	public native void storeObject(CreatureObject player, boolean force = false);
	
	public native void callObject(CreatureObject player);

	public native void spawnObject(CreatureObject player);
	
	public native void cancelSpawnObject(CreatureObject player);

	public native boolean growPet(CreatureObject player, boolean force = false);

	public native void arrestGrowth();

	public native void trainAsMount(CreatureObject player);

	public boolean isTrainedAsMount() {
		return trainedAsMount;
	}

	public int handleObjectMenuSelect(CreatureObject player, byte selectedID) {
		Logger.info("selected call");

		TangibleObject strongRef = super.controlledObject;

		if (strongRef == null)
			return 1;

		AiAgent pet = (AiAgent) strongRef;
		PlayerObject ghost = player.getPlayerObject();
		
		if (selectedID == 44) {
			
			if (pet == null) {
				Logger.error("null controlled object in pet control device");
				return 1;
			} else {
				this.callObject(player);
			}
		} else if (selectedID == 59) {
			if (pet == null) {
				Logger.error("null controlled object in pet control device");
				return 1;
			} else {
				if (super.status == 1 && !ghost.hasActivePet(pet)) {
					this.callObject(player);
				} else {
					this.storeObject(player);
				}
			}
		}
		
		return 0;
	}
	
	/**
	 * Destroys this object from database
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @param destroyContainedObjects if true, will destroy from database all its contained objects
	 */
	public native void destroyObjectFromDatabase(boolean destroyContainedObjects = false);
	
	/**
	 * Checks if the object can be destroyed
	 * @pre { this is locked }
	 * @post { this is locked }
	 * @returns 0 on succes, != 0 on error
	 */
	public native int canBeDestroyed(CreatureObject player);

	public native boolean canBeTradedTo(CreatureObject player, CreatureObject receiver, int numberInTrade);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	/**
	 * Sets default trained commands and command strings for the pet
	 * @pre { }
	 * @post { }
	 */
	@local
	public native void setDefaultCommands();	
	
	/**
	 * Sets default trained commands and command strings for the pet
	 * @pre { }
	 * @post { }
	 */	
	@local
	public native void setTrainingCommand( unsigned int commandID );

	public unsigned int getTrainingCommand() {
		return trainingCommand;
	}

	public boolean hasTrainedCommand(unsigned int command) {
		return trainedCommands.contains(command);
	}

	public boolean hasTrainedCommandString(final string message) {
		for (int i = 0; i < trainedCommands.size(); i++) {
			if (trainedCommands.get(i) == message)
				return true;
		}

		return false;
	}

	public boolean hasUsedNamingCommand(unsigned int command) {
		if (namingCommands.contains(command))
			return true;

		return false;
	}

	public string getTrainedCommand(unsigned int command) {
		return trainedCommands.get(command);
	}

	public void addTrainedCommand(unsigned int command, final string message) {
		trainedCommands.put(command, message);
	}

	public string getFutureName() {
		return futureName;
	}

	public void setFutureName(string name) {
		futureName = name;
	}

	public unsigned int getNamingProgress() {
		return namingProgress;
	}

	public void incrementNamingProgress(unsigned int command) {
		namingProgress++;
		namingCommands.add(command);
	}

	public void resetNamingProgress() {
		namingProgress = 0;
		resetNamingCommands();
	}

	native public void resetNamingCommands();

	public boolean isPetControlDevice() {
		return true;
	}

	public int getVitality() {
		return vitality;
	}

	public int getMaxVitality() {
		return maxVitality;
	}

	public void setVitality(int vit) {
		vitality = vit;
	}

	public void setMaxVitality(int vit) {
		maxVitality = vit;
	}

	public int getPetType() {
		return petType;
	}

	public void setPetType(int type) {
		petType = type;
	}

	public void setGrowthStage(int stage) {
		growthStage = stage;
	}
	
}
