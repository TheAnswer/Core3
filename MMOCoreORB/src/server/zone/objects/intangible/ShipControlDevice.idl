/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.
*/

package server.zone.objects.intangible;

import server.zone.objects.intangible.ControlDevice;
import server.zone.objects.creature.CreatureObject;
import server.zone.packets.object.ObjectMenuResponse;
include server.zone.managers.radial.RadialOptions;

class ShipControlDevice extends ControlDevice {
	public ShipControlDevice() {
		Logger.setLoggingName("ShipControlDevice");
	}

	@preLocked
	@arg1preLocked
	public native void storeObject(CreatureObject player, boolean force = false);

	@preLocked
	@arg1preLocked
	public native void generateObject(CreatureObject player);

	@preLocked
	@arg1preLocked
	public int handleObjectMenuSelect(CreatureObject player, byte selectedID) {
		Logger.info("selected call");

		if (selectedID == RadialOptions.VEHICLE_GENERATE) {

			if (super.controlledObject == null) {
				Logger.error("null controlled object in vehicle control device");
				return 1;
			} else if (player.getParent() == null) {
				this.generateObject(player);
			}
		} else if (selectedID == RadialOptions.VEHICLE_STORE) {
			if (super.controlledObject == null) {
				Logger.error("null controlled object in vehicle control device");
				return 1;
			} else {
				if (super.status == 1 && !super.controlledObject.isInQuadTree()) {
					this.generateObject(player);
				} else {
					this.storeObject(player);
				}
			}
		}

		return 0;
	}

	/**
	 * Fills the radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	@local
	@dirty
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);

	@dirty
	public native boolean canBeTradedTo(CreatureObject player, CreatureObject receiver, int numberInTrade);

	@dirty
	public boolean isShipControlDevice() {
		return true;
	}
}
