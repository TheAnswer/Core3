/*
 *	server/zone/objects/intangible/VehicleControlObserver.cpp generated by engine3 IDL compiler 0.60
 */

#include "VehicleControlObserver.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/intangible/VehicleControlDevice.h"

/*
 *	VehicleControlObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 6};

VehicleControlObserver::VehicleControlObserver(VehicleControlDevice* device) : Observer(DummyConstructorParameter::instance()) {
	VehicleControlObserverImplementation* _implementation = new VehicleControlObserverImplementation(device);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("VehicleControlObserver");
}

VehicleControlObserver::VehicleControlObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("VehicleControlObserver");
}

VehicleControlObserver::~VehicleControlObserver() {
}



int VehicleControlObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	VehicleControlObserverImplementation* _implementation = static_cast<VehicleControlObserverImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
}

DistributedObjectServant* VehicleControlObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* VehicleControlObserver::_getImplementationForRead() {
	return _impl;
}

void VehicleControlObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	VehicleControlObserverImplementation
 */

VehicleControlObserverImplementation::VehicleControlObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


VehicleControlObserverImplementation::~VehicleControlObserverImplementation() {
}


void VehicleControlObserverImplementation::finalize() {
}

void VehicleControlObserverImplementation::_initializeImplementation() {
	_setClassHelper(VehicleControlObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void VehicleControlObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<VehicleControlObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* VehicleControlObserverImplementation::_getStub() {
	return _this.get();
}

VehicleControlObserverImplementation::operator const VehicleControlObserver*() {
	return _this.get();
}

void VehicleControlObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void VehicleControlObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void VehicleControlObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void VehicleControlObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void VehicleControlObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void VehicleControlObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void VehicleControlObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void VehicleControlObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("VehicleControlObserver");

}

void VehicleControlObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(VehicleControlObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool VehicleControlObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x215ae115: //VehicleControlObserver.vehicleControlDevice
		TypeInfo<ManagedWeakReference<VehicleControlDevice* > >::parseFromBinaryStream(&vehicleControlDevice, stream);
		return true;

	}

	return false;
}

void VehicleControlObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = VehicleControlObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int VehicleControlObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x215ae115; //VehicleControlObserver.vehicleControlDevice
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<VehicleControlDevice* > >::toBinaryStream(&vehicleControlDevice, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

VehicleControlObserverImplementation::VehicleControlObserverImplementation(VehicleControlDevice* device) {
	_initializeImplementation();
	// server/zone/objects/intangible/VehicleControlObserver.idl():  		vehicleControlDevice = device;
	vehicleControlDevice = device;
}

int VehicleControlObserverImplementation::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	// server/zone/objects/intangible/VehicleControlObserver.idl():  		VehicleControlDevice 
	if (eventType != ObserverEventType::STARTCOMBAT){
	// server/zone/objects/intangible/VehicleControlObserver.idl():  			return 1;
	return 1;
}
	// server/zone/objects/intangible/VehicleControlObserver.idl():  		VehicleControlDevice dev = vehicleControlDevice;
	ManagedReference<VehicleControlDevice* > dev = vehicleControlDevice;
	// server/zone/objects/intangible/VehicleControlObserver.idl():  		return 
	if (dev != NULL){
	// server/zone/objects/intangible/VehicleControlObserver.idl():  			CreatureObject creature = (CreatureObject) observable;
	ManagedReference<CreatureObject* > creature = (CreatureObject*) observable;
	// server/zone/objects/intangible/VehicleControlObserver.idl():  			dev.cancelSpawnObject(creature);
	dev->cancelSpawnObject(creature);
}
	// server/zone/objects/intangible/VehicleControlObserver.idl():  		return 1;
	return 1;
}

/*
 *	VehicleControlObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


VehicleControlObserverAdapter::VehicleControlObserverAdapter(VehicleControlObserver* obj) : ObserverAdapter(obj) {
}

void VehicleControlObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int VehicleControlObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<VehicleControlObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

/*
 *	VehicleControlObserverHelper
 */

VehicleControlObserverHelper* VehicleControlObserverHelper::staticInitializer = VehicleControlObserverHelper::instance();

VehicleControlObserverHelper::VehicleControlObserverHelper() {
	className = "VehicleControlObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void VehicleControlObserverHelper::finalizeHelper() {
	VehicleControlObserverHelper::finalize();
}

DistributedObject* VehicleControlObserverHelper::instantiateObject() {
	return new VehicleControlObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* VehicleControlObserverHelper::instantiateServant() {
	return new VehicleControlObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* VehicleControlObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VehicleControlObserverAdapter(static_cast<VehicleControlObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

