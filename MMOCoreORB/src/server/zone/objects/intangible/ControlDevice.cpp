/*
 *	server/zone/objects/intangible/ControlDevice.cpp generated by engine3 IDL compiler 0.60
 */

#include "ControlDevice.h"

#include "server/zone/objects/creature/VehicleObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	ControlDeviceStub
 */

enum {RPC_UPDATETODATABASEALLOBJECTS__BOOL_ = 6,RPC_STOREOBJECT__CREATUREOBJECT_,RPC_GENERATEOBJECT__CREATUREOBJECT_,RPC_CALLOBJECT__CREATUREOBJECT_,RPC_SETCONTROLLEDOBJECT__TANGIBLEOBJECT_,RPC_GETCONTROLLEDOBJECT__,RPC_ISCONTROLDEVICE__};

ControlDevice::ControlDevice() : IntangibleObject(DummyConstructorParameter::instance()) {
	ControlDeviceImplementation* _implementation = new ControlDeviceImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ControlDevice");
}

ControlDevice::ControlDevice(DummyConstructorParameter* param) : IntangibleObject(param) {
	_setClassName("ControlDevice");
}

ControlDevice::~ControlDevice() {
}



void ControlDevice::updateToDatabaseAllObjects(bool startTask) {
	ControlDeviceImplementation* _implementation = static_cast<ControlDeviceImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATETODATABASEALLOBJECTS__BOOL_);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		_implementation->updateToDatabaseAllObjects(startTask);
}

void ControlDevice::storeObject(CreatureObject* player) {
	ControlDeviceImplementation* _implementation = static_cast<ControlDeviceImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_STOREOBJECT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->storeObject(player);
}

void ControlDevice::generateObject(CreatureObject* player) {
	ControlDeviceImplementation* _implementation = static_cast<ControlDeviceImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GENERATEOBJECT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->generateObject(player);
}

void ControlDevice::callObject(CreatureObject* player) {
	ControlDeviceImplementation* _implementation = static_cast<ControlDeviceImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CALLOBJECT__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->callObject(player);
}

void ControlDevice::setControlledObject(TangibleObject* object) {
	ControlDeviceImplementation* _implementation = static_cast<ControlDeviceImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTROLLEDOBJECT__TANGIBLEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->setControlledObject(object);
}

TangibleObject* ControlDevice::getControlledObject() {
	ControlDeviceImplementation* _implementation = static_cast<ControlDeviceImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTROLLEDOBJECT__);

		return static_cast<TangibleObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getControlledObject();
}

bool ControlDevice::isControlDevice() {
	ControlDeviceImplementation* _implementation = static_cast<ControlDeviceImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCONTROLDEVICE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isControlDevice();
}

DistributedObjectServant* ControlDevice::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ControlDevice::_getImplementationForRead() {
	return _impl;
}

void ControlDevice::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ControlDeviceImplementation
 */

ControlDeviceImplementation::ControlDeviceImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


ControlDeviceImplementation::~ControlDeviceImplementation() {
}


void ControlDeviceImplementation::finalize() {
}

void ControlDeviceImplementation::_initializeImplementation() {
	_setClassHelper(ControlDeviceHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ControlDeviceImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ControlDevice*>(stub);
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ControlDeviceImplementation::_getStub() {
	return _this.get();
}

ControlDeviceImplementation::operator const ControlDevice*() {
	return _this.get();
}

void ControlDeviceImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ControlDeviceImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ControlDeviceImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ControlDeviceImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ControlDeviceImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ControlDeviceImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ControlDeviceImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ControlDeviceImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("ControlDevice");

}

void ControlDeviceImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ControlDeviceImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ControlDeviceImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (IntangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xebeb9376: //ControlDevice.controlledObject
		TypeInfo<ManagedWeakReference<TangibleObject* > >::parseFromBinaryStream(&controlledObject, stream);
		return true;

	}

	return false;
}

void ControlDeviceImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ControlDeviceImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ControlDeviceImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = IntangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xebeb9376; //ControlDevice.controlledObject
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<TangibleObject* > >::toBinaryStream(&controlledObject, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 1;
}

ControlDeviceImplementation::ControlDeviceImplementation() {
	_initializeImplementation();
	// server/zone/objects/intangible/ControlDevice.idl():  		controlledObject = null;
	controlledObject = NULL;
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.setLoggingName("ControlDevice");
	Logger::setLoggingName("ControlDevice");
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.setLogging(false);
	Logger::setLogging(false);
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.setGlobalLogging(true);
	Logger::setGlobalLogging(true);
	// server/zone/objects/intangible/ControlDevice.idl():  		super.getContainerPermissions().setInheritPermissionsFromParent(true);
	IntangibleObjectImplementation::getContainerPermissions()->setInheritPermissionsFromParent(true);
	// server/zone/objects/intangible/ControlDevice.idl():  		ContainerPermissions permissions = super.getContainerPermissions();
	ContainerPermissions* permissions = IntangibleObjectImplementation::getContainerPermissions();
	// server/zone/objects/intangible/ControlDevice.idl():  		permissions.clearDefaultDenyPermission(ContainerPermissions.MOVECONTAINER);
	permissions->clearDefaultDenyPermission(ContainerPermissions::MOVECONTAINER);
	// server/zone/objects/intangible/ControlDevice.idl():  		permissions.clearDenyPermission("owner", ContainerPermissions.MOVECONTAINER);
	permissions->clearDenyPermission("owner", ContainerPermissions::MOVECONTAINER);
}

void ControlDeviceImplementation::updateToDatabaseAllObjects(bool startTask) {
	// server/zone/objects/intangible/ControlDevice.idl():  		TangibleObject obj = controlledObject;
	ManagedReference<TangibleObject* > obj = controlledObject;
	// server/zone/objects/intangible/ControlDevice.idl():  		}
	if (obj != NULL){
	// server/zone/objects/intangible/ControlDevice.idl():  			obj.updateToDatabaseWithoutChildren();
	obj->updateToDatabaseWithoutChildren();
	// server/zone/objects/intangible/ControlDevice.idl():  			super.updateToDatabaseAllObjects(startTask);
	IntangibleObjectImplementation::updateToDatabaseAllObjects(startTask);
}

	else {
	// server/zone/objects/intangible/ControlDevice.idl():  			super.updateToDatabaseAllObjects(startTask);
	IntangibleObjectImplementation::updateToDatabaseAllObjects(startTask);
}
}

void ControlDeviceImplementation::storeObject(CreatureObject* player) {
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.error("called storeObject on an abstract method");
	Logger::error("called storeObject on an abstract method");
}

void ControlDeviceImplementation::generateObject(CreatureObject* player) {
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.error("called generateObject on an abstract method");
	Logger::error("called generateObject on an abstract method");
}

void ControlDeviceImplementation::callObject(CreatureObject* player) {
	// server/zone/objects/intangible/ControlDevice.idl():  		Logger.error("called callObject on an abstract method");
	Logger::error("called callObject on an abstract method");
}

void ControlDeviceImplementation::setControlledObject(TangibleObject* object) {
	// server/zone/objects/intangible/ControlDevice.idl():  		controlledObject = object;
	controlledObject = object;
}

TangibleObject* ControlDeviceImplementation::getControlledObject() {
	// server/zone/objects/intangible/ControlDevice.idl():  		TangibleObject obj = controlledObject;
	ManagedReference<TangibleObject* > obj = controlledObject;
	// server/zone/objects/intangible/ControlDevice.idl():  		return obj;
	return obj;
}

bool ControlDeviceImplementation::isControlDevice() {
	// server/zone/objects/intangible/ControlDevice.idl():  		return true;
	return true;
}

/*
 *	ControlDeviceAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ControlDeviceAdapter::ControlDeviceAdapter(ControlDevice* obj) : IntangibleObjectAdapter(obj) {
}

void ControlDeviceAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_UPDATETODATABASEALLOBJECTS__BOOL_:
		{
			updateToDatabaseAllObjects(inv->getBooleanParameter());
		}
		break;
	case RPC_STOREOBJECT__CREATUREOBJECT_:
		{
			storeObject(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GENERATEOBJECT__CREATUREOBJECT_:
		{
			generateObject(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CALLOBJECT__CREATUREOBJECT_:
		{
			callObject(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SETCONTROLLEDOBJECT__TANGIBLEOBJECT_:
		{
			setControlledObject(static_cast<TangibleObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETCONTROLLEDOBJECT__:
		{
			resp->insertLong(getControlledObject()->_getObjectID());
		}
		break;
	case RPC_ISCONTROLDEVICE__:
		{
			resp->insertBoolean(isControlDevice());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void ControlDeviceAdapter::updateToDatabaseAllObjects(bool startTask) {
	(static_cast<ControlDevice*>(stub))->updateToDatabaseAllObjects(startTask);
}

void ControlDeviceAdapter::storeObject(CreatureObject* player) {
	(static_cast<ControlDevice*>(stub))->storeObject(player);
}

void ControlDeviceAdapter::generateObject(CreatureObject* player) {
	(static_cast<ControlDevice*>(stub))->generateObject(player);
}

void ControlDeviceAdapter::callObject(CreatureObject* player) {
	(static_cast<ControlDevice*>(stub))->callObject(player);
}

void ControlDeviceAdapter::setControlledObject(TangibleObject* object) {
	(static_cast<ControlDevice*>(stub))->setControlledObject(object);
}

TangibleObject* ControlDeviceAdapter::getControlledObject() {
	return (static_cast<ControlDevice*>(stub))->getControlledObject();
}

bool ControlDeviceAdapter::isControlDevice() {
	return (static_cast<ControlDevice*>(stub))->isControlDevice();
}

/*
 *	ControlDeviceHelper
 */

ControlDeviceHelper* ControlDeviceHelper::staticInitializer = ControlDeviceHelper::instance();

ControlDeviceHelper::ControlDeviceHelper() {
	className = "ControlDevice";

	Core::getObjectBroker()->registerClass(className, this);
}

void ControlDeviceHelper::finalizeHelper() {
	ControlDeviceHelper::finalize();
}

DistributedObject* ControlDeviceHelper::instantiateObject() {
	return new ControlDevice(DummyConstructorParameter::instance());
}

DistributedObjectServant* ControlDeviceHelper::instantiateServant() {
	return new ControlDeviceImplementation();
}

DistributedObjectAdapter* ControlDeviceHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ControlDeviceAdapter(static_cast<ControlDevice*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

const char LuaControlDevice::className[] = "LuaControlDevice";

Luna<LuaControlDevice>::RegType LuaControlDevice::Register[] = {
	{ "_setObject", &LuaControlDevice::_setObject },
	{ "_getObject", &LuaControlDevice::_getObject },
	{ "updateToDatabaseAllObjects", &LuaControlDevice::updateToDatabaseAllObjects },
	{ "storeObject", &LuaControlDevice::storeObject },
	{ "generateObject", &LuaControlDevice::generateObject },
	{ "callObject", &LuaControlDevice::callObject },
	{ "setControlledObject", &LuaControlDevice::setControlledObject },
	{ "getControlledObject", &LuaControlDevice::getControlledObject },
	{ "isControlDevice", &LuaControlDevice::isControlDevice },
	{ 0, 0 }
};

LuaControlDevice::LuaControlDevice(lua_State *L) {
	realObject = static_cast<ControlDevice*>(lua_touserdata(L, 1));
}

LuaControlDevice::~LuaControlDevice() {
}

int LuaControlDevice::_setObject(lua_State* L) {
	realObject = static_cast<ControlDevice*>(lua_touserdata(L, -1));

	return 0;
}

int LuaControlDevice::_getObject(lua_State* L) {
	lua_pushlightuserdata(L, realObject.get());

	return 1;
}

int LuaControlDevice::updateToDatabaseAllObjects(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isboolean(L, -1)) {
		if (parameterCount == 1) {
			bool startTask = lua_toboolean(L, -1);

			realObject->updateToDatabaseAllObjects(startTask);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ControlDevice:updateToDatabaseAllObjects(boolean)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ControlDevice:updateToDatabaseAllObjects(boolean)'");
	}
	return 0;
}

int LuaControlDevice::storeObject(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (parameterCount == 1) {
			CreatureObject* player = static_cast<CreatureObject*>(lua_touserdata(L, -1));

			realObject->storeObject(player);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ControlDevice:storeObject(userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ControlDevice:storeObject(userdata)'");
	}
	return 0;
}

int LuaControlDevice::generateObject(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (parameterCount == 1) {
			CreatureObject* player = static_cast<CreatureObject*>(lua_touserdata(L, -1));

			realObject->generateObject(player);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ControlDevice:generateObject(userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ControlDevice:generateObject(userdata)'");
	}
	return 0;
}

int LuaControlDevice::callObject(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (parameterCount == 1) {
			CreatureObject* player = static_cast<CreatureObject*>(lua_touserdata(L, -1));

			realObject->callObject(player);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ControlDevice:callObject(userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ControlDevice:callObject(userdata)'");
	}
	return 0;
}

int LuaControlDevice::setControlledObject(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (lua_isuserdata(L, -1)) {
		if (parameterCount == 1) {
			TangibleObject* object = static_cast<TangibleObject*>(lua_touserdata(L, -1));

			realObject->setControlledObject(object);

			return 0;
		} else {
			throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ControlDevice:setControlledObject(userdata)'");
		}
	} else {
		throw LuaCallbackException(L, "invalid argument at 0 for lua method 'ControlDevice:setControlledObject(userdata)'");
	}
	return 0;
}

int LuaControlDevice::getControlledObject(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		TangibleObject* result = realObject->getControlledObject();

		if (result != NULL)
			lua_pushlightuserdata(L, result);
		else
			lua_pushnil(L);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ControlDevice:getControlledObject()'");
	}
	return 0;
}

int LuaControlDevice::isControlDevice(lua_State *L) {
	int parameterCount = lua_gettop(L) - 1;
	
	if (parameterCount == 0) {
		bool result = realObject->isControlDevice();

		lua_pushboolean(L, result);
		return 1;
	} else {
		throw LuaCallbackException(L, "invalid argument count " + String::valueOf(parameterCount) + " for lua method 'ControlDevice:isControlDevice()'");
	}
	return 0;
}

