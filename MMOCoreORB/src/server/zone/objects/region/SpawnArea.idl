/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.region;

import server.zone.objects.region.Region;
import system.util.HashTable;
import engine.core.ManagedObject;
import server.zone.objects.region.SpawnAreaObserver;
import engine.util.Observable;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.CreatureObject;
import system.lang.Time;
import engine.log.Logger;
import server.zone.QuadTreeEntry;

include server.zone.managers.creature.LairSpawn;
include system.util.Vector;
include engine.util.u3d.Vector3;
include system.thread.atomic.AtomicInteger;

@json
class SpawnArea extends Region {
	@dereferenced
	protected transient AtomicInteger numberOfPlayersInRange;

	@dereferenced
	@rawTemplate(value = "Reference<LairSpawn*>")
	protected transient Vector possibleSpawns;

	protected int totalWeighting;

	protected int totalSpawnCount;
	protected int maxSpawnLimit;

	@dereferenced
	protected HashTable<unsigned int, int> spawnCountByType;

	@dereferenced
	protected HashTable<unsigned long, unsigned int> spawnTypes;

	@dereferenced
	protected Time lastSpawn;

	protected SpawnAreaObserver spawnAreaObserver;

	@dereferenced
	@rawTemplate(value = "ManagedWeakReference<SpawnArea*>")
	protected Vector noSpawnAreas;

	public final static int MINSPAWNINTERVAL = 500; //msec

	public SpawnArea() {
		totalWeighting = 0;
		totalSpawnCount = 0;
		maxSpawnLimit = 0;
		spawnTypes.setNullValue(0);
		spawnAreaObserver = null;

		setLoggingName("SpawnArea");
	}

	@dirty
	public native void notifyPositionUpdate(QuadTreeEntry entry);

	@dirty
	public native abstract void notifyEnter(SceneObject object);

	@dirty
	public native abstract void notifyExit(SceneObject object);

	@local
	@dereferenced
	@dirty
	public native Vector3 getRandomPosition(SceneObject player);

	public native int notifyObserverEvent(unsigned int eventType, Observable observable, ManagedObject arg1, long arg2);

	@local
	@preLocked
	public native void buildSpawnList(Vector<unsigned int> groupCRCs);

	@local
	@rawTemplate(value = "Reference<LairSpawn*>")
	@read
	public final Vector getSpawnList() {
		return possibleSpawns;
	}

	@read
	public int getTotalWeighting() {
		return totalWeighting;
	}

	@preLocked
	public void setMaxSpawnLimit(int n) {
		maxSpawnLimit = n;
	}

	@preLocked
	public void addNoSpawnArea(SpawnArea area) {
		noSpawnAreas.add(area);
	}

	public native void tryToSpawn(CreatureObject player);

	public native int getPlayerSpawnLevel(CreatureObject player);

	@dirty
	public boolean isSpawnAreaObject() {
		return true;
	}
}
