/*
 *	server/zone/objects/region/CityRegion.cpp generated by engine3 IDL compiler 0.60
 */

#include "CityRegion.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/region/Region.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/structure/StructureObject.h"

#include "server/zone/Zone.h"

#include "server/zone/managers/city/CityManager.h"

/*
 *	CityRegionStub
 */

enum {RPC_INITIALIZE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_NOTIFYLOADFROMDATABASE__,RPC_NOTIFYENTER__SCENEOBJECT_,RPC_NOTIFYEXIT__SCENEOBJECT_,RPC_ADDREGION__FLOAT_FLOAT_FLOAT_BOOL_,RPC_RESCHEDULEUPDATEEVENT__INT_,RPC_DESTROYACTIVEAREAS__,RPC_ADDMILITIAMEMBER__LONG_,RPC_REMOVEMILITIAMEMBER__LONG_,RPC_ISMILITIAMEMBER__LONG_,RPC_ADDZONINGRIGHTS__LONG_INT_,RPC_REMOVEZONINGRIGHTS__LONG_,RPC_HASZONINGRIGHTS__LONG_,RPC_CONTAINSPOINT__FLOAT_FLOAT_,RPC_CLEANUPCITIZENS__,RPC_GETCURRENTPLAYERCOUNT__,RPC_ADDCITIZEN__LONG_,RPC_REMOVECITIZEN__LONG_,RPC_ADDBANNEDPLAYER__LONG_,RPC_REMOVEBANNEDPLAYER__LONG_,RPC_ISCITIZEN__LONG_,RPC_GETTIMETOUPDATE__,RPC_GETCITIZENCOUNT__,RPC_GETCITYRANK__,RPC_ISBANNED__LONG_,RPC_ISREGISTERED__,RPC_GETZONE__,RPC_GETREGIONNAME__,RPC_GETMAYORID__,RPC_GETPOSITIONX__,RPC_GETPOSITIONY__,RPC_GETRADIUS__,RPC_GETREGION__INT_,RPC_GETREGIONSCOUNT__,RPC_GETSTRUCTURESCOUNT__,RPC_GETCOMMERCIALSTRUCTURESCOUNT__,RPC_GETALLSTRUCTURESCOUNT__,RPC_GETCITYSPECIALIZATION__,RPC_GETCITYTREASURY__,RPC_ISMAYOR__LONG_,RPC_ISZONINGENABLED__,RPC_ISCLIENTREGION__,RPC_GETCITYHALL__,RPC_SETZONE__ZONE_,RPC_SETCUSTOMREGIONNAME__STRING_,RPC_SETCITYSPECIALIZATION__STRING_,RPC_SETREGIONNAME__STRING_,RPC_SETCITYTREASURY__FLOAT_,RPC_ADDTOCITYTREASURY__FLOAT_,RPC_SUBTRACTFROMCITYTREASURY__FLOAT_,RPC_GETMAXWITHDRAWAL__,RPC_SETCITYRANK__BYTE_,RPC_SETMAYORID__LONG_,RPC_SETREGISTERED__BOOL_,RPC_SETZONINGENABLED__BOOL_,RPC_SETRADIUS__FLOAT_,RPC_SETCITYHALL__STRUCTUREOBJECT_,RPC_REMOVESHUTTLEINSTALLATION__,RPC_HASSHUTTLEINSTALLATION__,RPC_SETSHUTTLEID__LONG_,RPC_GETMISSIONTERMINALCOUNT__,RPC_GETDECORATIONCOUNT__,RPC_GETSKILLTRAINERCOUNT__,RPC_ADDMISSIONTERMINAL__SCENEOBJECT_,RPC_ADDDECORATION__SCENEOBJECT_,RPC_ADDSKILLTRAINER__SCENEOBJECT_,RPC_REMOVEMISSIONTERMINAL__SCENEOBJECT_,RPC_REMOVEDECORATION__SCENEOBJECT_,RPC_REMOVESKILLTRAINERS__SCENEOBJECT_,RPC_ADDBAZAAR__TANGIBLEOBJECT_,RPC_GETBAZAAR__INT_,RPC_GETBAZAARCOUNT__,RPC_REMOVEALLSKILLTRAINERS__,RPC_REMOVEALLTERMINALS__,RPC_REMOVEALLDECORATIONS__,RPC_UPDATEMILITIA__,RPC_ADDSTRUCTURE__STRUCTUREOBJECT_,RPC_ADDCOMMERCIALSTRUCTURE__STRUCTUREOBJECT_,RPC_REMOVESTRUCTURE__STRUCTUREOBJECT_,RPC_REMOVECOMMERCIALSTRUCTURE__STRUCTUREOBJECT_,RPC_HASUNIQUESTRUCTURE__INT_,RPC_DESTROYALLSTRUCTURESFORRANK__BYTE_,RPC_ADDCANDIDATE__LONG_,RPC_SETMAYORALVOTE__LONG_LONG_,RPC_GETCANDIDATEVOTES__LONG_,RPC_RESETCANDIDATES__,RPC_RESETMAYORALVOTES__,RPC_REMOVECANDIDATE__LONG_,RPC_ISCANDIDATE__LONG_,RPC_ISVOTINGPERIODOVER__,RPC_ISVOTINGPERIOD__,RPC_ISVOTINGLOCKED__,RPC_RESETVOTINGPERIOD__,RPC_ISLOADED__,RPC_SETLOADED__,RPC_APPLYSPECIALIZATIONMODIFIERS__CREATUREOBJECT_,RPC_REMOVESPECIALIZATIONMODIFIERS__CREATUREOBJECT_,RPC_GETPROPERTYTAX__,RPC_GETINCOMETAX__,RPC_GETSALESTAX__,RPC_GETTRAVELTAX__,RPC_GETGARAGETAX__,RPC_GETTAX__INT_,RPC_SETTAX__INT_INT_,RPC_TRANSFERCIVICSTRUCTURESTOMAYOR__,RPC_CLEANUPDUPLICATECITYSTRUCTURES__,RPC_REMOVEDECORATIONSOUTSIDECITY__INT_,RPC_REMOVETRAINERSOUTSIDECITY__INT_,RPC_REMOVETERMINALSOUTSIDECITY__INT_,RPC_REMOVESTRUCTURESOUTSIDECITY__INT_,RPC_ISINSIDERADIUS__SCENEOBJECT_INT_,RPC_REMOVEAMENITIESOUTSIDECITY__INT_};

CityRegion::CityRegion() : ManagedObject(DummyConstructorParameter::instance()) {
	CityRegionImplementation* _implementation = new CityRegionImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("CityRegion");
}

CityRegion::CityRegion(DummyConstructorParameter* param) : ManagedObject(param) {
	_setClassName("CityRegion");
}

CityRegion::~CityRegion() {
}



void CityRegion::initialize() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZE__);

		method.executeWithVoidReturn();
	} else
		_implementation->initialize();
}

void CityRegion::initializeTransientMembers() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void CityRegion::notifyLoadFromDatabase() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYLOADFROMDATABASE__);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyLoadFromDatabase();
}

void CityRegion::notifyEnter(SceneObject* object) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYENTER__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyEnter(object);
}

void CityRegion::notifyExit(SceneObject* object) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYEXIT__SCENEOBJECT_);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		_implementation->notifyExit(object);
}

Region* CityRegion::addRegion(float x, float y, float radius, bool persistent) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDREGION__FLOAT_FLOAT_FLOAT_BOOL_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);
		method.addFloatParameter(radius);
		method.addBooleanParameter(persistent);

		return static_cast<Region*>(method.executeWithObjectReturn());
	} else
		return _implementation->addRegion(x, y, radius, persistent);
}

void CityRegion::rescheduleUpdateEvent(unsigned int seconds) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESCHEDULEUPDATEEVENT__INT_);
		method.addUnsignedIntParameter(seconds);

		method.executeWithVoidReturn();
	} else
		_implementation->rescheduleUpdateEvent(seconds);
}

void CityRegion::destroyActiveAreas() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYACTIVEAREAS__);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyActiveAreas();
}

void CityRegion::addMilitiaMember(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMILITIAMEMBER__LONG_);
		method.addUnsignedLongParameter(objectid);

		method.executeWithVoidReturn();
	} else
		_implementation->addMilitiaMember(objectid);
}

void CityRegion::removeMilitiaMember(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMILITIAMEMBER__LONG_);
		method.addUnsignedLongParameter(objectid);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMilitiaMember(objectid);
}

bool CityRegion::isMilitiaMember(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMILITIAMEMBER__LONG_);
		method.addUnsignedLongParameter(objectid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMilitiaMember(objectid);
}

void CityRegion::addZoningRights(unsigned long long objectid, unsigned int duration) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDZONINGRIGHTS__LONG_INT_);
		method.addUnsignedLongParameter(objectid);
		method.addUnsignedIntParameter(duration);

		method.executeWithVoidReturn();
	} else
		_implementation->addZoningRights(objectid, duration);
}

void CityRegion::removeZoningRights(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEZONINGRIGHTS__LONG_);
		method.addUnsignedLongParameter(objectid);

		method.executeWithVoidReturn();
	} else
		_implementation->removeZoningRights(objectid);
}

bool CityRegion::hasZoningRights(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASZONINGRIGHTS__LONG_);
		method.addUnsignedLongParameter(objectid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasZoningRights(objectid);
}

bool CityRegion::containsPoint(float x, float y) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONTAINSPOINT__FLOAT_FLOAT_);
		method.addFloatParameter(x);
		method.addFloatParameter(y);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->containsPoint(x, y);
}

void CityRegion::cleanupCitizens() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEANUPCITIZENS__);

		method.executeWithVoidReturn();
	} else
		_implementation->cleanupCitizens();
}

Time* CityRegion::getNextUpdateTime() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getNextUpdateTime();
}

int CityRegion::getCurrentPlayerCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCURRENTPLAYERCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getCurrentPlayerCount();
}

void CityRegion::addCitizen(unsigned long long citizenID) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCITIZEN__LONG_);
		method.addUnsignedLongParameter(citizenID);

		method.executeWithVoidReturn();
	} else
		_implementation->addCitizen(citizenID);
}

void CityRegion::removeCitizen(unsigned long long citizenID) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVECITIZEN__LONG_);
		method.addUnsignedLongParameter(citizenID);

		method.executeWithVoidReturn();
	} else
		_implementation->removeCitizen(citizenID);
}

void CityRegion::addBannedPlayer(unsigned long long playerid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBANNEDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerid);

		method.executeWithVoidReturn();
	} else
		_implementation->addBannedPlayer(playerid);
}

void CityRegion::removeBannedPlayer(unsigned long long playerid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEBANNEDPLAYER__LONG_);
		method.addUnsignedLongParameter(playerid);

		method.executeWithVoidReturn();
	} else
		_implementation->removeBannedPlayer(playerid);
}

bool CityRegion::isCitizen(unsigned long long citizenID) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCITIZEN__LONG_);
		method.addUnsignedLongParameter(citizenID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCitizen(citizenID);
}

int CityRegion::getTimeToUpdate() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTIMETOUPDATE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTimeToUpdate();
}

int CityRegion::getCitizenCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITIZENCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getCitizenCount();
}

byte CityRegion::getCityRank() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYRANK__);

		return method.executeWithByteReturn();
	} else
		return _implementation->getCityRank();
}

bool CityRegion::isBanned(unsigned long long playerID) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBANNED__LONG_);
		method.addUnsignedLongParameter(playerID);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBanned(playerID);
}

CitizenList* CityRegion::getCitizenList() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCitizenList();
}

CitizenList* CityRegion::getMilitiaMembers() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getMilitiaMembers();
}

CitizenList* CityRegion::getBannedPlayers() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getBannedPlayers();
}

bool CityRegion::isRegistered() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREGISTERED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRegistered();
}

Zone* CityRegion::getZone() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONE__);

		return static_cast<Zone*>(method.executeWithObjectReturn());
	} else
		return _implementation->getZone();
}

String CityRegion::getRegionName() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGIONNAME__);

		String _return_getRegionName;
		method.executeWithAsciiReturn(_return_getRegionName);
		return _return_getRegionName;
	} else
		return _implementation->getRegionName();
}

unsigned long long CityRegion::getMayorID() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAYORID__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getMayorID();
}

float CityRegion::getPositionX() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOSITIONX__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getPositionX();
}

float CityRegion::getPositionY() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOSITIONY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getPositionY();
}

float CityRegion::getRadius() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETRADIUS__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getRadius();
}

Region* CityRegion::getRegion(int idx) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGION__INT_);
		method.addSignedIntParameter(idx);

		return static_cast<Region*>(method.executeWithObjectReturn());
	} else
		return _implementation->getRegion(idx);
}

int CityRegion::getRegionsCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETREGIONSCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getRegionsCount();
}

int CityRegion::getStructuresCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTRUCTURESCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getStructuresCount();
}

int CityRegion::getCommercialStructuresCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOMMERCIALSTRUCTURESCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getCommercialStructuresCount();
}

int CityRegion::getAllStructuresCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETALLSTRUCTURESCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getAllStructuresCount();
}

String CityRegion::getCitySpecialization() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYSPECIALIZATION__);

		String _return_getCitySpecialization;
		method.executeWithAsciiReturn(_return_getCitySpecialization);
		return _return_getCitySpecialization;
	} else
		return _implementation->getCitySpecialization();
}

float CityRegion::getCityTreasury() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYTREASURY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getCityTreasury();
}

bool CityRegion::isMayor(unsigned long long objectid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISMAYOR__LONG_);
		method.addUnsignedLongParameter(objectid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isMayor(objectid);
}

bool CityRegion::isZoningEnabled() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISZONINGENABLED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isZoningEnabled();
}

bool CityRegion::isClientRegion() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCLIENTREGION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isClientRegion();
}

StructureObject* CityRegion::getCityHall() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCITYHALL__);

		return static_cast<StructureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getCityHall();
}

void CityRegion::setZone(Zone* zne) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONE__ZONE_);
		method.addObjectParameter(zne);

		method.executeWithVoidReturn();
	} else
		_implementation->setZone(zne);
}

void CityRegion::setCustomRegionName(const String& name) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMREGIONNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomRegionName(name);
}

void CityRegion::setCitySpecialization(const String& spec) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYSPECIALIZATION__STRING_);
		method.addAsciiParameter(spec);

		method.executeWithVoidReturn();
	} else
		_implementation->setCitySpecialization(spec);
}

void CityRegion::setRegionName(const String& fullPath) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREGIONNAME__STRING_);
		method.addAsciiParameter(fullPath);

		method.executeWithVoidReturn();
	} else
		_implementation->setRegionName(fullPath);
}

void CityRegion::setCityTreasury(float val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYTREASURY__FLOAT_);
		method.addFloatParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityTreasury(val);
}

float CityRegion::addToCityTreasury(float val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDTOCITYTREASURY__FLOAT_);
		method.addFloatParameter(val);

		return method.executeWithFloatReturn();
	} else
		return _implementation->addToCityTreasury(val);
}

float CityRegion::subtractFromCityTreasury(float val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SUBTRACTFROMCITYTREASURY__FLOAT_);
		method.addFloatParameter(val);

		return method.executeWithFloatReturn();
	} else
		return _implementation->subtractFromCityTreasury(val);
}

int CityRegion::getMaxWithdrawal() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXWITHDRAWAL__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxWithdrawal();
}

Vector<ManagedReference<TangibleObject* > >* CityRegion::getVendorsInCity() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getVendorsInCity();
}

void CityRegion::setRegionName(const StringId& name) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->setRegionName(name);
}

void CityRegion::setCityRank(byte rank) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYRANK__BYTE_);
		method.addByteParameter(rank);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityRank(rank);
}

void CityRegion::setMayorID(unsigned long long id) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAYORID__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setMayorID(id);
}

void CityRegion::setRegistered(bool val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETREGISTERED__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setRegistered(val);
}

void CityRegion::setZoningEnabled(bool val) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONINGENABLED__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setZoningEnabled(val);
}

void CityRegion::setRadius(float rad) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRADIUS__FLOAT_);
		method.addFloatParameter(rad);

		method.executeWithVoidReturn();
	} else
		_implementation->setRadius(rad);
}

void CityRegion::setCityHall(StructureObject* building) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCITYHALL__STRUCTUREOBJECT_);
		method.addObjectParameter(building);

		method.executeWithVoidReturn();
	} else
		_implementation->setCityHall(building);
}

void CityRegion::removeShuttleInstallation() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESHUTTLEINSTALLATION__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeShuttleInstallation();
}

bool CityRegion::hasShuttleInstallation() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASSHUTTLEINSTALLATION__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasShuttleInstallation();
}

void CityRegion::setShuttleID(unsigned long long id) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSHUTTLEID__LONG_);
		method.addUnsignedLongParameter(id);

		method.executeWithVoidReturn();
	} else
		_implementation->setShuttleID(id);
}

int CityRegion::getMissionTerminalCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMISSIONTERMINALCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMissionTerminalCount();
}

int CityRegion::getDecorationCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDECORATIONCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDecorationCount();
}

int CityRegion::getSkillTrainerCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSKILLTRAINERCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSkillTrainerCount();
}

void CityRegion::addMissionTerminal(SceneObject* mt) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDMISSIONTERMINAL__SCENEOBJECT_);
		method.addObjectParameter(mt);

		method.executeWithVoidReturn();
	} else
		_implementation->addMissionTerminal(mt);
}

void CityRegion::addDecoration(SceneObject* deco) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDDECORATION__SCENEOBJECT_);
		method.addObjectParameter(deco);

		method.executeWithVoidReturn();
	} else
		_implementation->addDecoration(deco);
}

void CityRegion::addSkillTrainer(SceneObject* trainer) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSKILLTRAINER__SCENEOBJECT_);
		method.addObjectParameter(trainer);

		method.executeWithVoidReturn();
	} else
		_implementation->addSkillTrainer(trainer);
}

void CityRegion::removeMissionTerminal(SceneObject* mt) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEMISSIONTERMINAL__SCENEOBJECT_);
		method.addObjectParameter(mt);

		method.executeWithVoidReturn();
	} else
		_implementation->removeMissionTerminal(mt);
}

void CityRegion::removeDecoration(SceneObject* deco) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEDECORATION__SCENEOBJECT_);
		method.addObjectParameter(deco);

		method.executeWithVoidReturn();
	} else
		_implementation->removeDecoration(deco);
}

void CityRegion::removeSkillTrainers(SceneObject* trainer) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESKILLTRAINERS__SCENEOBJECT_);
		method.addObjectParameter(trainer);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSkillTrainers(trainer);
}

void CityRegion::addBazaar(TangibleObject* ter) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDBAZAAR__TANGIBLEOBJECT_);
		method.addObjectParameter(ter);

		method.executeWithVoidReturn();
	} else
		_implementation->addBazaar(ter);
}

TangibleObject* CityRegion::getBazaar(int idx) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBAZAAR__INT_);
		method.addSignedIntParameter(idx);

		return static_cast<TangibleObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getBazaar(idx);
}

int CityRegion::getBazaarCount() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETBAZAARCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getBazaarCount();
}

void CityRegion::removeAllSkillTrainers() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLSKILLTRAINERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeAllSkillTrainers();
}

void CityRegion::removeAllTerminals() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLTERMINALS__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeAllTerminals();
}

void CityRegion::removeAllDecorations() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLDECORATIONS__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeAllDecorations();
}

void CityRegion::updateMilitia() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_UPDATEMILITIA__);

		method.executeWithVoidReturn();
	} else
		_implementation->updateMilitia();
}

void CityRegion::addStructure(StructureObject* structure) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSTRUCTURE__STRUCTUREOBJECT_);
		method.addObjectParameter(structure);

		method.executeWithVoidReturn();
	} else
		_implementation->addStructure(structure);
}

void CityRegion::addCommercialStructure(StructureObject* structure) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCOMMERCIALSTRUCTURE__STRUCTUREOBJECT_);
		method.addObjectParameter(structure);

		method.executeWithVoidReturn();
	} else
		_implementation->addCommercialStructure(structure);
}

void CityRegion::removeStructure(StructureObject* structure) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESTRUCTURE__STRUCTUREOBJECT_);
		method.addObjectParameter(structure);

		method.executeWithVoidReturn();
	} else
		_implementation->removeStructure(structure);
}

void CityRegion::removeCommercialStructure(StructureObject* structure) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVECOMMERCIALSTRUCTURE__STRUCTUREOBJECT_);
		method.addObjectParameter(structure);

		method.executeWithVoidReturn();
	} else
		_implementation->removeCommercialStructure(structure);
}

bool CityRegion::hasUniqueStructure(unsigned int crc) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASUNIQUESTRUCTURE__INT_);
		method.addUnsignedIntParameter(crc);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasUniqueStructure(crc);
}

void CityRegion::destroyAllStructuresForRank(byte rank) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYALLSTRUCTURESFORRANK__BYTE_);
		method.addByteParameter(rank);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyAllStructuresForRank(rank);
}

void CityRegion::addCandidate(unsigned long long candidateoid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCANDIDATE__LONG_);
		method.addUnsignedLongParameter(candidateoid);

		method.executeWithVoidReturn();
	} else
		_implementation->addCandidate(candidateoid);
}

void CityRegion::setMayoralVote(unsigned long long voteroid, unsigned long long candidateoid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAYORALVOTE__LONG_LONG_);
		method.addUnsignedLongParameter(voteroid);
		method.addUnsignedLongParameter(candidateoid);

		method.executeWithVoidReturn();
	} else
		_implementation->setMayoralVote(voteroid, candidateoid);
}

int CityRegion::getCandidateVotes(unsigned long long candidateoid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCANDIDATEVOTES__LONG_);
		method.addUnsignedLongParameter(candidateoid);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getCandidateVotes(candidateoid);
}

VectorMap<unsigned long long, int>* CityRegion::getCandidates() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCandidates();
}

VectorMap<unsigned long long, unsigned long long>* CityRegion::getMayoralVotes() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getMayoralVotes();
}

void CityRegion::resetCandidates() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESETCANDIDATES__);

		method.executeWithVoidReturn();
	} else
		_implementation->resetCandidates();
}

void CityRegion::resetMayoralVotes() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESETMAYORALVOTES__);

		method.executeWithVoidReturn();
	} else
		_implementation->resetMayoralVotes();
}

void CityRegion::removeCandidate(unsigned long long candidateoid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVECANDIDATE__LONG_);
		method.addUnsignedLongParameter(candidateoid);

		method.executeWithVoidReturn();
	} else
		_implementation->removeCandidate(candidateoid);
}

bool CityRegion::isCandidate(unsigned long long candidateoid) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISCANDIDATE__LONG_);
		method.addUnsignedLongParameter(candidateoid);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isCandidate(candidateoid);
}

bool CityRegion::isVotingPeriodOver() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVOTINGPERIODOVER__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVotingPeriodOver();
}

bool CityRegion::isVotingPeriod() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVOTINGPERIOD__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVotingPeriod();
}

bool CityRegion::isVotingLocked() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISVOTINGLOCKED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isVotingLocked();
}

void CityRegion::resetVotingPeriod() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESETVOTINGPERIOD__);

		method.executeWithVoidReturn();
	} else
		_implementation->resetVotingPeriod();
}

bool CityRegion::isLoaded() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISLOADED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isLoaded();
}

void CityRegion::setLoaded() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLOADED__);

		method.executeWithVoidReturn();
	} else
		_implementation->setLoaded();
}

void CityRegion::applySpecializationModifiers(CreatureObject* creature) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYSPECIALIZATIONMODIFIERS__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		_implementation->applySpecializationModifiers(creature);
}

void CityRegion::removeSpecializationModifiers(CreatureObject* creature) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESPECIALIZATIONMODIFIERS__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSpecializationModifiers(creature);
}

int CityRegion::getPropertyTax() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPROPERTYTAX__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPropertyTax();
}

int CityRegion::getIncomeTax() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETINCOMETAX__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getIncomeTax();
}

int CityRegion::getSalesTax() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSALESTAX__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSalesTax();
}

int CityRegion::getTravelTax() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTRAVELTAX__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTravelTax();
}

int CityRegion::getGarageTax() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGARAGETAX__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getGarageTax();
}

int CityRegion::getTax(int tax) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTAX__INT_);
		method.addSignedIntParameter(tax);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getTax(tax);
}

void CityRegion::setTax(int tax, int value) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTAX__INT_INT_);
		method.addSignedIntParameter(tax);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setTax(tax, value);
}

StructureObject* CityRegion::getCivicStructure(int indx) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCivicStructure(indx);
}

StructureObject* CityRegion::getCommercialStructure(int indx) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCommercialStructure(indx);
}

SceneObject* CityRegion::getCityDecoration(int indx) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCityDecoration(indx);
}

SceneObject* CityRegion::getCityMissionTerminal(int indx) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCityMissionTerminal(indx);
}

SceneObject* CityRegion::getCitySkillTrainer(int indx) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCitySkillTrainer(indx);
}

void CityRegion::transferCivicStructuresToMayor() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_TRANSFERCIVICSTRUCTURESTOMAYOR__);

		method.executeWithVoidReturn();
	} else
		_implementation->transferCivicStructuresToMayor();
}

void CityRegion::cleanupDuplicateCityStructures() {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEANUPDUPLICATECITYSTRUCTURES__);

		method.executeWithVoidReturn();
	} else
		_implementation->cleanupDuplicateCityStructures();
}

void CityRegion::removeDecorationsOutsideCity(int newRadius) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEDECORATIONSOUTSIDECITY__INT_);
		method.addSignedIntParameter(newRadius);

		method.executeWithVoidReturn();
	} else
		_implementation->removeDecorationsOutsideCity(newRadius);
}

void CityRegion::removeTrainersOutsideCity(int newRadius) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVETRAINERSOUTSIDECITY__INT_);
		method.addSignedIntParameter(newRadius);

		method.executeWithVoidReturn();
	} else
		_implementation->removeTrainersOutsideCity(newRadius);
}

void CityRegion::removeTerminalsOutsideCity(int newRadius) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVETERMINALSOUTSIDECITY__INT_);
		method.addSignedIntParameter(newRadius);

		method.executeWithVoidReturn();
	} else
		_implementation->removeTerminalsOutsideCity(newRadius);
}

void CityRegion::removeStructuresOutsideCity(int newRadius) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESTRUCTURESOUTSIDECITY__INT_);
		method.addSignedIntParameter(newRadius);

		method.executeWithVoidReturn();
	} else
		_implementation->removeStructuresOutsideCity(newRadius);
}

bool CityRegion::isInsideRadius(SceneObject* obj, int radiusToUse) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISINSIDERADIUS__SCENEOBJECT_INT_);
		method.addObjectParameter(obj);
		method.addSignedIntParameter(radiusToUse);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isInsideRadius(obj, radiusToUse);
}

void CityRegion::removeAmenitiesOutsideCity(int newRadius) {
	CityRegionImplementation* _implementation = static_cast<CityRegionImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEAMENITIESOUTSIDECITY__INT_);
		method.addSignedIntParameter(newRadius);

		method.executeWithVoidReturn();
	} else
		_implementation->removeAmenitiesOutsideCity(newRadius);
}

DistributedObjectServant* CityRegion::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* CityRegion::_getImplementationForRead() {
	return _impl;
}

void CityRegion::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CityRegionImplementation
 */

CityRegionImplementation::CityRegionImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


CityRegionImplementation::~CityRegionImplementation() {
}


void CityRegionImplementation::finalize() {
}

void CityRegionImplementation::_initializeImplementation() {
	_setClassHelper(CityRegionHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CityRegionImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CityRegion*>(stub);
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CityRegionImplementation::_getStub() {
	return _this.get();
}

CityRegionImplementation::operator const CityRegion*() {
	return _this.get();
}

void CityRegionImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void CityRegionImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void CityRegionImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void CityRegionImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void CityRegionImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void CityRegionImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void CityRegionImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void CityRegionImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("CityRegion");

}

void CityRegionImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(CityRegionImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CityRegionImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x51c159e3: //CityRegion.cityRank
		TypeInfo<byte >::parseFromBinaryStream(&cityRank, stream);
		return true;

	case 0xd59bc17f: //CityRegion.regionName
		TypeInfo<StringId >::parseFromBinaryStream(&regionName, stream);
		return true;

	case 0x74fa6e86: //CityRegion.candidates
		TypeInfo<VectorMap<unsigned long long, int> >::parseFromBinaryStream(&candidates, stream);
		return true;

	case 0x96c36f66: //CityRegion.mayoralVotes
		TypeInfo<VectorMap<unsigned long long, unsigned long long> >::parseFromBinaryStream(&mayoralVotes, stream);
		return true;

	case 0xeeca21d7: //CityRegion.currentPlayers
		TypeInfo<AtomicInteger >::parseFromBinaryStream(&currentPlayers, stream);
		return true;

	case 0x1030233a: //CityRegion.customRegionName
		TypeInfo<String >::parseFromBinaryStream(&customRegionName, stream);
		return true;

	case 0xd2834f08: //CityRegion.zone
		TypeInfo<ZoneReference >::parseFromBinaryStream(&zone, stream);
		return true;

	case 0x49b559d0: //CityRegion.zoningRights
		TypeInfo<VectorMap<unsigned long long, unsigned int> >::parseFromBinaryStream(&zoningRights, stream);
		return true;

	case 0xeb545c8c: //CityRegion.militiaMembers
		TypeInfo<CitizenList >::parseFromBinaryStream(&militiaMembers, stream);
		return true;

	case 0xb4adc6be: //CityRegion.citizenList
		TypeInfo<CitizenList >::parseFromBinaryStream(&citizenList, stream);
		return true;

	case 0xe1b3f52f: //CityRegion.bannedList
		TypeInfo<CitizenList >::parseFromBinaryStream(&bannedList, stream);
		return true;

	case 0xbc710eef: //CityRegion.cityTreasury
		TypeInfo<float >::parseFromBinaryStream(&cityTreasury, stream);
		return true;

	case 0xe585d060: //CityRegion.mayorID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&mayorID, stream);
		return true;

	case 0xf35904ab: //CityRegion.zoningEnabled
		TypeInfo<bool >::parseFromBinaryStream(&zoningEnabled, stream);
		return true;

	case 0x64059cf1: //CityRegion.registered
		TypeInfo<bool >::parseFromBinaryStream(&registered, stream);
		return true;

	case 0xe036a55b: //CityRegion.hasShuttle
		TypeInfo<bool >::parseFromBinaryStream(&hasShuttle, stream);
		return true;

	case 0xed05d518: //CityRegion.shuttleID
		TypeInfo<unsigned long long >::parseFromBinaryStream(&shuttleID, stream);
		return true;

	case 0x140d97d9: //CityRegion.taxes
		TypeInfo<Vector<int> >::parseFromBinaryStream(&taxes, stream);
		return true;

	case 0x1e3755fc: //CityRegion.nextUpdateTime
		TypeInfo<Time >::parseFromBinaryStream(&nextUpdateTime, stream);
		return true;

	case 0x38fb00e0: //CityRegion.nextInauguration
		TypeInfo<Time >::parseFromBinaryStream(&nextInauguration, stream);
		return true;

	case 0x176872b4: //CityRegion.citySpecialization
		TypeInfo<String >::parseFromBinaryStream(&citySpecialization, stream);
		return true;

	case 0x5d900a99: //CityRegion.cityHall
		TypeInfo<ManagedReference<StructureObject* > >::parseFromBinaryStream(&cityHall, stream);
		return true;

	case 0x8cdd8a3f: //CityRegion.regions
		TypeInfo<SortedVector<ManagedReference<Region* > > >::parseFromBinaryStream(&regions, stream);
		return true;

	case 0x2d3bc58b: //CityRegion.structures
		TypeInfo<SortedVector<ManagedReference<StructureObject* > > >::parseFromBinaryStream(&structures, stream);
		return true;

	case 0x98dfa969: //CityRegion.commercialStructures
		TypeInfo<SortedVector<ManagedReference<StructureObject* > > >::parseFromBinaryStream(&commercialStructures, stream);
		return true;

	case 0xb9951777: //CityRegion.cityMissionTerminals
		TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::parseFromBinaryStream(&cityMissionTerminals, stream);
		return true;

	case 0xa1dbb5c3: //CityRegion.cityDecorations
		TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::parseFromBinaryStream(&cityDecorations, stream);
		return true;

	case 0x33ae2bac: //CityRegion.citySkillTrainers
		TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::parseFromBinaryStream(&citySkillTrainers, stream);
		return true;

	}

	return false;
}

void CityRegionImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CityRegionImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CityRegionImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x51c159e3; //CityRegion.cityRank
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&cityRank, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd59bc17f; //CityRegion.regionName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<StringId >::toBinaryStream(&regionName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x74fa6e86; //CityRegion.candidates
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, int> >::toBinaryStream(&candidates, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x96c36f66; //CityRegion.mayoralVotes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, unsigned long long> >::toBinaryStream(&mayoralVotes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xeeca21d7; //CityRegion.currentPlayers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<AtomicInteger >::toBinaryStream(&currentPlayers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1030233a; //CityRegion.customRegionName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&customRegionName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd2834f08; //CityRegion.zone
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ZoneReference >::toBinaryStream(&zone, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x49b559d0; //CityRegion.zoningRights
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<unsigned long long, unsigned int> >::toBinaryStream(&zoningRights, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xeb545c8c; //CityRegion.militiaMembers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<CitizenList >::toBinaryStream(&militiaMembers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb4adc6be; //CityRegion.citizenList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<CitizenList >::toBinaryStream(&citizenList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe1b3f52f; //CityRegion.bannedList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<CitizenList >::toBinaryStream(&bannedList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xbc710eef; //CityRegion.cityTreasury
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&cityTreasury, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe585d060; //CityRegion.mayorID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&mayorID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf35904ab; //CityRegion.zoningEnabled
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&zoningEnabled, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x64059cf1; //CityRegion.registered
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&registered, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe036a55b; //CityRegion.hasShuttle
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&hasShuttle, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xed05d518; //CityRegion.shuttleID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&shuttleID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x140d97d9; //CityRegion.taxes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<int> >::toBinaryStream(&taxes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1e3755fc; //CityRegion.nextUpdateTime
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&nextUpdateTime, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x38fb00e0; //CityRegion.nextInauguration
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Time >::toBinaryStream(&nextInauguration, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x176872b4; //CityRegion.citySpecialization
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&citySpecialization, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5d900a99; //CityRegion.cityHall
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<StructureObject* > >::toBinaryStream(&cityHall, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8cdd8a3f; //CityRegion.regions
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<Region* > > >::toBinaryStream(&regions, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x2d3bc58b; //CityRegion.structures
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<StructureObject* > > >::toBinaryStream(&structures, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x98dfa969; //CityRegion.commercialStructures
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<StructureObject* > > >::toBinaryStream(&commercialStructures, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb9951777; //CityRegion.cityMissionTerminals
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::toBinaryStream(&cityMissionTerminals, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa1dbb5c3; //CityRegion.cityDecorations
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::toBinaryStream(&cityDecorations, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x33ae2bac; //CityRegion.citySkillTrainers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SortedVector<ManagedReference<SceneObject* > > >::toBinaryStream(&citySkillTrainers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 28;
}

CityRegionImplementation::CityRegionImplementation() {
	_initializeImplementation();
	// server/zone/objects/region/CityRegion.idl():  		loaded = false;
	loaded = false;
	// server/zone/objects/region/CityRegion.idl():  		initialize();
	initialize();
	// server/zone/objects/region/CityRegion.idl():  		taxes.add(0);
	(&taxes)->add(0);
	// server/zone/objects/region/CityRegion.idl():  		taxes.add(0);
	(&taxes)->add(0);
	// server/zone/objects/region/CityRegion.idl():  		taxes.add(0);
	(&taxes)->add(0);
	// server/zone/objects/region/CityRegion.idl():  		taxes.add(0);
	(&taxes)->add(0);
	// server/zone/objects/region/CityRegion.idl():  		taxes.add(0);
	(&taxes)->add(0);
	// server/zone/objects/region/CityRegion.idl():  		candidates.setAllowOverwriteInsertPlan();
	(&candidates)->setAllowOverwriteInsertPlan();
	// server/zone/objects/region/CityRegion.idl():  		candidates.setNullValue(0);
	(&candidates)->setNullValue(0);
	// server/zone/objects/region/CityRegion.idl():  		mayoralVotes.setAllowOverwriteInsertPlan();
	(&mayoralVotes)->setAllowOverwriteInsertPlan();
	// server/zone/objects/region/CityRegion.idl():  		mayoralVotes.setNullValue(0);
	(&mayoralVotes)->setNullValue(0);
	// server/zone/objects/region/CityRegion.idl():  		structures.setNoDuplicateInsertPlan();
	(&structures)->setNoDuplicateInsertPlan();
	// server/zone/objects/region/CityRegion.idl():  		commercialStructures.setNoDuplicateInsertPlan();
	(&commercialStructures)->setNoDuplicateInsertPlan();
	// server/zone/objects/region/CityRegion.idl():  		completeStructureList.setNoDuplicateInsertPlan();
	(&completeStructureList)->setNoDuplicateInsertPlan();
}

void CityRegionImplementation::addMilitiaMember(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		militiaMembers.put(objectid);
	(&militiaMembers)->put(objectid);
}

void CityRegionImplementation::removeMilitiaMember(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		militiaMembers.drop(objectid);
	(&militiaMembers)->drop(objectid);
}

bool CityRegionImplementation::isMilitiaMember(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		return (militiaMembers.contains(objectid) || mayorID == objectid);
	return ((&militiaMembers)->contains(objectid) || mayorID == objectid);
}

void CityRegionImplementation::removeZoningRights(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		zoningRights.drop(objectid);
	(&zoningRights)->drop(objectid);
}

bool CityRegionImplementation::containsPoint(float x, float y) {
	// server/zone/objects/region/CityRegion.idl():  		}
	for (	// server/zone/objects/region/CityRegion.idl():  		for (int i = 0;
	int i = 0;
	i < (&regions)->size();
 ++i) {
	// server/zone/objects/region/CityRegion.idl():  			Region aa = regions.get(i);
	ManagedReference<Region* > aa = (&regions)->get(i);
	// server/zone/objects/region/CityRegion.idl():  		}
	if (aa->containsPoint(x, y))	// server/zone/objects/region/CityRegion.idl():  				return true;
	return true;
}
	// server/zone/objects/region/CityRegion.idl():  		return false;
	return false;
}

Time* CityRegionImplementation::getNextUpdateTime() {
	// server/zone/objects/region/CityRegion.idl():  		return nextUpdateTime;
	return (&nextUpdateTime);
}

int CityRegionImplementation::getCurrentPlayerCount() {
	// server/zone/objects/region/CityRegion.idl():  		return currentPlayers.get();
	return (&currentPlayers)->get();
}

void CityRegionImplementation::addCitizen(unsigned long long citizenID) {
	// server/zone/objects/region/CityRegion.idl():  		citizenList.put(citizenID);
	(&citizenList)->put(citizenID);
}

void CityRegionImplementation::removeCitizen(unsigned long long citizenID) {
	// server/zone/objects/region/CityRegion.idl():  		}
{
	Locker _locker((&structureListMutex));
	// server/zone/objects/region/CityRegion.idl():  			citizenList.drop(citizenID);
	(&citizenList)->drop(citizenID);
	// server/zone/objects/region/CityRegion.idl():  		}
	if (isLoaded()){
	// server/zone/objects/region/CityRegion.idl():  				militiaMembers.drop(citizenID);
	(&militiaMembers)->drop(citizenID);
}
}
}

void CityRegionImplementation::addBannedPlayer(unsigned long long playerid) {
	// server/zone/objects/region/CityRegion.idl():  		bannedList.put(playerid);
	(&bannedList)->put(playerid);
}

void CityRegionImplementation::removeBannedPlayer(unsigned long long playerid) {
	// server/zone/objects/region/CityRegion.idl():  		bannedList.drop(playerid);
	(&bannedList)->drop(playerid);
}

bool CityRegionImplementation::isCitizen(unsigned long long citizenID) {
	// server/zone/objects/region/CityRegion.idl():  		return citizenList.contains(citizenID);
	return (&citizenList)->contains(citizenID);
}

int CityRegionImplementation::getCitizenCount() {
	// server/zone/objects/region/CityRegion.idl():  		return citizenList.size();
	return (&citizenList)->size();
}

byte CityRegionImplementation::getCityRank() {
	// server/zone/objects/region/CityRegion.idl():  		return cityRank;
	return cityRank;
}

bool CityRegionImplementation::isBanned(unsigned long long playerID) {
	// server/zone/objects/region/CityRegion.idl():  		return bannedList.contains(playerID);
	return (&bannedList)->contains(playerID);
}

CitizenList* CityRegionImplementation::getCitizenList() {
	// server/zone/objects/region/CityRegion.idl():  		return citizenList;
	return (&citizenList);
}

CitizenList* CityRegionImplementation::getMilitiaMembers() {
	// server/zone/objects/region/CityRegion.idl():  		return militiaMembers;
	return (&militiaMembers);
}

CitizenList* CityRegionImplementation::getBannedPlayers() {
	// server/zone/objects/region/CityRegion.idl():  		return bannedList;
	return (&bannedList);
}

bool CityRegionImplementation::isRegistered() {
	// server/zone/objects/region/CityRegion.idl():  		return registered;
	return registered;
}

Zone* CityRegionImplementation::getZone() {
	// server/zone/objects/region/CityRegion.idl():  		return zone.get();
	return (&zone)->get();
}

unsigned long long CityRegionImplementation::getMayorID() {
	// server/zone/objects/region/CityRegion.idl():  		return mayorID;
	return mayorID;
}

float CityRegionImplementation::getPositionX() {
	// server/zone/objects/region/CityRegion.idl():  		Region aa = regions.get(0);
	ManagedReference<Region* > aa = (&regions)->get(0);
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (aa == NULL)	// server/zone/objects/region/CityRegion.idl():  			return 0.0;
	return 0.0;
	// server/zone/objects/region/CityRegion.idl():  		return aa.getPositionX();
	return aa->getPositionX();
}

float CityRegionImplementation::getPositionY() {
	// server/zone/objects/region/CityRegion.idl():  		Region aa = regions.get(0);
	ManagedReference<Region* > aa = (&regions)->get(0);
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (aa == NULL)	// server/zone/objects/region/CityRegion.idl():  			return 0.0;
	return 0.0;
	// server/zone/objects/region/CityRegion.idl():  		return aa.getPositionY();
	return aa->getPositionY();
}

float CityRegionImplementation::getRadius() {
	// server/zone/objects/region/CityRegion.idl():  		Region 
	if ((&regions)->size() == 0){
	// server/zone/objects/region/CityRegion.idl():  			Logger.error("getRadius called with 0 regions for stringid:" + regionName.getFullPath() + " customName:" + customRegionName);
	Logger::error("getRadius called with 0 regions for stringid:" + (&regionName)->getFullPath() + " customName:" + customRegionName);
	// server/zone/objects/region/CityRegion.idl():  			return 0.0;
	return 0.0;
}
	// server/zone/objects/region/CityRegion.idl():  		Region aa = regions.get(0);
	ManagedReference<Region* > aa = (&regions)->get(0);
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (aa == NULL)	// server/zone/objects/region/CityRegion.idl():  			return 0.0;
	return 0.0;
	// server/zone/objects/region/CityRegion.idl():  		return aa.getRadius();
	return aa->getRadius();
}

Region* CityRegionImplementation::getRegion(int idx) {
	// server/zone/objects/region/CityRegion.idl():  		return regions.get(idx);
	return (&regions)->get(idx);
}

int CityRegionImplementation::getRegionsCount() {
	// server/zone/objects/region/CityRegion.idl():  		return regions.size();
	return (&regions)->size();
}

int CityRegionImplementation::getStructuresCount() {
	// server/zone/objects/region/CityRegion.idl():  		return structures.size();
	return (&structures)->size();
}

int CityRegionImplementation::getCommercialStructuresCount() {
	// server/zone/objects/region/CityRegion.idl():  		return commercialStructures.size();
	return (&commercialStructures)->size();
}

int CityRegionImplementation::getAllStructuresCount() {
	// server/zone/objects/region/CityRegion.idl():  		return completeStructureList.size();
	return (&completeStructureList)->size();
}

String CityRegionImplementation::getCitySpecialization() {
	// server/zone/objects/region/CityRegion.idl():  		return citySpecialization;
	return citySpecialization;
}

float CityRegionImplementation::getCityTreasury() {
	// server/zone/objects/region/CityRegion.idl():  		return cityTreasury;
	return cityTreasury;
}

bool CityRegionImplementation::isMayor(unsigned long long objectid) {
	// server/zone/objects/region/CityRegion.idl():  		return mayorID == objectid;
	return mayorID == objectid;
}

bool CityRegionImplementation::isZoningEnabled() {
	// server/zone/objects/region/CityRegion.idl():  		return zoningEnabled;
	return zoningEnabled;
}

bool CityRegionImplementation::isClientRegion() {
	// server/zone/objects/region/CityRegion.idl():  		return cityRank == RANK_CLIENT;
	return cityRank == RANK_CLIENT;
}

StructureObject* CityRegionImplementation::getCityHall() {
	// server/zone/objects/region/CityRegion.idl():  		return cityHall;
	return cityHall;
}

void CityRegionImplementation::setCustomRegionName(const String& name) {
	// server/zone/objects/region/CityRegion.idl():  		customRegionName = name;
	customRegionName = name;
}

void CityRegionImplementation::setCitySpecialization(const String& spec) {
	// server/zone/objects/region/CityRegion.idl():  		citySpecialization = spec;
	citySpecialization = spec;
}

void CityRegionImplementation::setRegionName(const String& fullPath) {
	// server/zone/objects/region/CityRegion.idl():  		regionName.setStringId(fullPath);
	(&regionName)->setStringId(fullPath);
}

void CityRegionImplementation::setCityTreasury(float val) {
	// server/zone/objects/region/CityRegion.idl():  		cityTreasury = val;
	cityTreasury = val;
}

float CityRegionImplementation::addToCityTreasury(float val) {
	// server/zone/objects/region/CityRegion.idl():  		cityTreasury = cityTreasury + val;
	cityTreasury = cityTreasury + val;
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (cityTreasury < 0){
	// server/zone/objects/region/CityRegion.idl():  			cityTreasury = 0;
	cityTreasury = 0;
}
	// server/zone/objects/region/CityRegion.idl():  		return cityTreasury;
	return cityTreasury;
}

float CityRegionImplementation::subtractFromCityTreasury(float val) {
	// server/zone/objects/region/CityRegion.idl():  		cityTreasury = cityTreasury - val;
	cityTreasury = cityTreasury - val;
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (cityTreasury < 0){
	// server/zone/objects/region/CityRegion.idl():  			cityTreasury = 0;
	cityTreasury = 0;
}
	// server/zone/objects/region/CityRegion.idl():  		return cityTreasury;
	return cityTreasury;
}

int CityRegionImplementation::getMaxWithdrawal() {
	// server/zone/objects/region/CityRegion.idl():  		return 50000;
	return 50000;
}

void CityRegionImplementation::setCityRank(byte rank) {
	// server/zone/objects/region/CityRegion.idl():  		cityRank = rank;
	cityRank = rank;
}

void CityRegionImplementation::setMayorID(unsigned long long id) {
	// server/zone/objects/region/CityRegion.idl():  		mayorID = id;
	mayorID = id;
}

void CityRegionImplementation::setRegistered(bool val) {
	// server/zone/objects/region/CityRegion.idl():  		registered = val;
	registered = val;
}

void CityRegionImplementation::setZoningEnabled(bool val) {
	// server/zone/objects/region/CityRegion.idl():  		zoningEnabled = val;
	zoningEnabled = val;
}

void CityRegionImplementation::setCityHall(StructureObject* building) {
	// server/zone/objects/region/CityRegion.idl():  		cityHall = building;
	cityHall = building;
}

void CityRegionImplementation::removeShuttleInstallation() {
	// server/zone/objects/region/CityRegion.idl():  		hasShuttle = false;
	hasShuttle = false;
	// server/zone/objects/region/CityRegion.idl():  		shuttleID = 0;
	shuttleID = 0;
}

bool CityRegionImplementation::hasShuttleInstallation() {
	// server/zone/objects/region/CityRegion.idl():  		return hasShuttle;
	return hasShuttle;
}

void CityRegionImplementation::setShuttleID(unsigned long long id) {
	// server/zone/objects/region/CityRegion.idl():  		shuttleID = id;
	shuttleID = id;
	// server/zone/objects/region/CityRegion.idl():  		hasShuttle = true;
	hasShuttle = true;
}

int CityRegionImplementation::getMissionTerminalCount() {
	// server/zone/objects/region/CityRegion.idl():  		return cityMissionTerminals.size();
	return (&cityMissionTerminals)->size();
}

int CityRegionImplementation::getDecorationCount() {
	// server/zone/objects/region/CityRegion.idl():  		return cityDecorations.size();
	return (&cityDecorations)->size();
}

int CityRegionImplementation::getSkillTrainerCount() {
	// server/zone/objects/region/CityRegion.idl():  		return citySkillTrainers.size();
	return (&citySkillTrainers)->size();
}

void CityRegionImplementation::addMissionTerminal(SceneObject* mt) {
	// server/zone/objects/region/CityRegion.idl():  		cityMissionTerminals.put(mt);
	(&cityMissionTerminals)->put(mt);
}

void CityRegionImplementation::addDecoration(SceneObject* deco) {
	// server/zone/objects/region/CityRegion.idl():  		}
{
	Locker _locker((&structureListMutex));
	// server/zone/objects/region/CityRegion.idl():  			cityDecorations.put(deco);
	(&cityDecorations)->put(deco);
}
}

void CityRegionImplementation::addSkillTrainer(SceneObject* trainer) {
	// server/zone/objects/region/CityRegion.idl():  		citySkillTrainers.put(trainer);
	(&citySkillTrainers)->put(trainer);
}

void CityRegionImplementation::removeMissionTerminal(SceneObject* mt) {
	// server/zone/objects/region/CityRegion.idl():  		cityMissionTerminals.drop(mt);
	(&cityMissionTerminals)->drop(mt);
}

void CityRegionImplementation::removeDecoration(SceneObject* deco) {
	// server/zone/objects/region/CityRegion.idl():  		}
{
	Locker _locker((&structureListMutex));
	// server/zone/objects/region/CityRegion.idl():  			cityDecorations.drop(deco);
	(&cityDecorations)->drop(deco);
}
}

void CityRegionImplementation::removeSkillTrainers(SceneObject* trainer) {
	// server/zone/objects/region/CityRegion.idl():  		citySkillTrainers.drop(trainer);
	(&citySkillTrainers)->drop(trainer);
}

void CityRegionImplementation::addBazaar(TangibleObject* ter) {
	// server/zone/objects/region/CityRegion.idl():  		bazaars.put(ter.getObjectID(), ter);
	(&bazaars)->put(ter->getObjectID(), ter);
}

TangibleObject* CityRegionImplementation::getBazaar(int idx) {
	// server/zone/objects/region/CityRegion.idl():  		return bazaars.get(idx);
	return (&bazaars)->get(idx);
}

int CityRegionImplementation::getBazaarCount() {
	// server/zone/objects/region/CityRegion.idl():  		return bazaars.size();
	return (&bazaars)->size();
}

void CityRegionImplementation::addStructure(StructureObject* structure) {
	// server/zone/objects/region/CityRegion.idl():  		}
{
	Locker _locker((&structureListMutex));
	// server/zone/objects/region/CityRegion.idl():  			structures.put(structure);
	(&structures)->put(structure);
}
}

void CityRegionImplementation::addCommercialStructure(StructureObject* structure) {
	// server/zone/objects/region/CityRegion.idl():  		}
{
	Locker _locker((&structureListMutex));
	// server/zone/objects/region/CityRegion.idl():  			commercialStructures.put(structure);
	(&commercialStructures)->put(structure);
}
}

void CityRegionImplementation::removeStructure(StructureObject* structure) {
	// server/zone/objects/region/CityRegion.idl():  		}
{
	Locker _locker((&structureListMutex));
	// server/zone/objects/region/CityRegion.idl():  			structures.drop(structure);
	(&structures)->drop(structure);
}
}

void CityRegionImplementation::removeCommercialStructure(StructureObject* structure) {
	// server/zone/objects/region/CityRegion.idl():  		}
{
	Locker _locker((&structureListMutex));
	// server/zone/objects/region/CityRegion.idl():  			commercialStructures.drop(structure);
	(&commercialStructures)->drop(structure);
}
}

void CityRegionImplementation::addCandidate(unsigned long long candidateoid) {
	// server/zone/objects/region/CityRegion.idl():  		candidates.put(candidateoid, 0);
	(&candidates)->put(candidateoid, 0);
}

void CityRegionImplementation::setMayoralVote(unsigned long long voteroid, unsigned long long candidateoid) {
	// server/zone/objects/region/CityRegion.idl():  		unsigned long currentoid = mayoralVotes.get(voteroid);
	unsigned long long currentoid = (&mayoralVotes)->get(voteroid);
	// server/zone/objects/region/CityRegion.idl():  		if 
	if (currentoid == candidateoid)	// server/zone/objects/region/CityRegion.idl():  			return;
	return;
	// server/zone/objects/region/CityRegion.idl():  		mayoralVotes.
	if (currentoid != 0 && (&candidates)->contains(currentoid))	// server/zone/objects/region/CityRegion.idl():  			candidates.put(currentoid, candidates.get(currentoid) - 1);
	(&candidates)->put(currentoid, (&candidates)->get(currentoid) - 1);
	// server/zone/objects/region/CityRegion.idl():  		mayoralVotes.put(voteroid, candidateoid);
	(&mayoralVotes)->put(voteroid, candidateoid);
	// server/zone/objects/region/CityRegion.idl():  		candidates.put(candidateoid, candidates.get(candidateoid) + 1);
	(&candidates)->put(candidateoid, (&candidates)->get(candidateoid) + 1);
}

int CityRegionImplementation::getCandidateVotes(unsigned long long candidateoid) {
	// server/zone/objects/region/CityRegion.idl():  		return candidates.get(candidateoid);
	return (&candidates)->get(candidateoid);
}

VectorMap<unsigned long long, int>* CityRegionImplementation::getCandidates() {
	// server/zone/objects/region/CityRegion.idl():  		return candidates;
	return (&candidates);
}

VectorMap<unsigned long long, unsigned long long>* CityRegionImplementation::getMayoralVotes() {
	// server/zone/objects/region/CityRegion.idl():  		return mayoralVotes;
	return (&mayoralVotes);
}

void CityRegionImplementation::resetCandidates() {
	// server/zone/objects/region/CityRegion.idl():  		candidates.removeAll();
	(&candidates)->removeAll();
}

void CityRegionImplementation::resetMayoralVotes() {
	// server/zone/objects/region/CityRegion.idl():  		mayoralVotes.removeAll();
	(&mayoralVotes)->removeAll();
}

void CityRegionImplementation::removeCandidate(unsigned long long candidateoid) {
	// server/zone/objects/region/CityRegion.idl():  		candidates.drop(candidateoid);
	(&candidates)->drop(candidateoid);
}

bool CityRegionImplementation::isCandidate(unsigned long long candidateoid) {
	// server/zone/objects/region/CityRegion.idl():  		return candidates.contains(candidateoid);
	return (&candidates)->contains(candidateoid);
}

bool CityRegionImplementation::isVotingPeriodOver() {
	// server/zone/objects/region/CityRegion.idl():  		return nextInauguration.isPast();
	return (&nextInauguration)->isPast();
}

bool CityRegionImplementation::isVotingPeriod() {
	// server/zone/objects/region/CityRegion.idl():  		return !nextInauguration.isPast();
	return !(&nextInauguration)->isPast();
}

bool CityRegionImplementation::isLoaded() {
	// server/zone/objects/region/CityRegion.idl():  		return loaded;
	return loaded;
}

void CityRegionImplementation::setLoaded() {
	// server/zone/objects/region/CityRegion.idl():  		loaded = true;
	loaded = true;
}

int CityRegionImplementation::getPropertyTax() {
	// server/zone/objects/region/CityRegion.idl():  		return taxes.get(TAX_PROPERTY);
	return (&taxes)->get(TAX_PROPERTY);
}

int CityRegionImplementation::getIncomeTax() {
	// server/zone/objects/region/CityRegion.idl():  		return taxes.get(TAX_INCOME);
	return (&taxes)->get(TAX_INCOME);
}

int CityRegionImplementation::getSalesTax() {
	// server/zone/objects/region/CityRegion.idl():  		return taxes.get(TAX_SALES);
	return (&taxes)->get(TAX_SALES);
}

int CityRegionImplementation::getTravelTax() {
	// server/zone/objects/region/CityRegion.idl():  		return taxes.get(TAX_TRAVEL);
	return (&taxes)->get(TAX_TRAVEL);
}

int CityRegionImplementation::getGarageTax() {
	// server/zone/objects/region/CityRegion.idl():  		return taxes.get(TAX_GARAGE);
	return (&taxes)->get(TAX_GARAGE);
}

int CityRegionImplementation::getTax(int tax) {
	// server/zone/objects/region/CityRegion.idl():  		return 
	if (tax > (&taxes)->size() - 1 || tax < 0)	// server/zone/objects/region/CityRegion.idl():  			return 0;
	return 0;
	// server/zone/objects/region/CityRegion.idl():  		return taxes.get(tax);
	return (&taxes)->get(tax);
}

void CityRegionImplementation::setTax(int tax, int value) {
	// server/zone/objects/region/CityRegion.idl():  		taxes.
	if (tax > (&taxes)->size() - 1 || tax < 0)	// server/zone/objects/region/CityRegion.idl():  			return;
	return;
	// server/zone/objects/region/CityRegion.idl():  		taxes.set(tax, value);
	(&taxes)->set(tax, value);
}

StructureObject* CityRegionImplementation::getCivicStructure(int indx) {
	// server/zone/objects/region/CityRegion.idl():  		return structures.get(indx);
	return (&structures)->get(indx);
}

StructureObject* CityRegionImplementation::getCommercialStructure(int indx) {
	// server/zone/objects/region/CityRegion.idl():  		return commercialStructures.get(indx);
	return (&commercialStructures)->get(indx);
}

SceneObject* CityRegionImplementation::getCityDecoration(int indx) {
	// server/zone/objects/region/CityRegion.idl():  		return cityDecorations.get(indx);
	return (&cityDecorations)->get(indx);
}

SceneObject* CityRegionImplementation::getCityMissionTerminal(int indx) {
	// server/zone/objects/region/CityRegion.idl():  		return cityMissionTerminals.get(indx);
	return (&cityMissionTerminals)->get(indx);
}

SceneObject* CityRegionImplementation::getCitySkillTrainer(int indx) {
	// server/zone/objects/region/CityRegion.idl():  		return citySkillTrainers.get(indx);
	return (&citySkillTrainers)->get(indx);
}

void CityRegionImplementation::removeAmenitiesOutsideCity(int newRadius) {
	// server/zone/objects/region/CityRegion.idl():  		removeStructuresOutsideCity(newRadius);
	removeStructuresOutsideCity(newRadius);
	// server/zone/objects/region/CityRegion.idl():  		removeDecorationsOutsideCity(newRadius);
	removeDecorationsOutsideCity(newRadius);
	// server/zone/objects/region/CityRegion.idl():  		removeTrainersOutsideCity(newRadius);
	removeTrainersOutsideCity(newRadius);
	// server/zone/objects/region/CityRegion.idl():  		removeTerminalsOutsideCity(newRadius);
	removeTerminalsOutsideCity(newRadius);
}

/*
 *	CityRegionAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


CityRegionAdapter::CityRegionAdapter(CityRegion* obj) : ManagedObjectAdapter(obj) {
}

void CityRegionAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZE__:
		{
			initialize();
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_NOTIFYLOADFROMDATABASE__:
		{
			notifyLoadFromDatabase();
		}
		break;
	case RPC_NOTIFYENTER__SCENEOBJECT_:
		{
			notifyEnter(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_NOTIFYEXIT__SCENEOBJECT_:
		{
			notifyExit(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ADDREGION__FLOAT_FLOAT_FLOAT_BOOL_:
		{
			resp->insertLong(addRegion(inv->getFloatParameter(), inv->getFloatParameter(), inv->getFloatParameter(), inv->getBooleanParameter())->_getObjectID());
		}
		break;
	case RPC_RESCHEDULEUPDATEEVENT__INT_:
		{
			rescheduleUpdateEvent(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_DESTROYACTIVEAREAS__:
		{
			destroyActiveAreas();
		}
		break;
	case RPC_ADDMILITIAMEMBER__LONG_:
		{
			addMilitiaMember(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_REMOVEMILITIAMEMBER__LONG_:
		{
			removeMilitiaMember(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_ISMILITIAMEMBER__LONG_:
		{
			resp->insertBoolean(isMilitiaMember(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_ADDZONINGRIGHTS__LONG_INT_:
		{
			addZoningRights(inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_REMOVEZONINGRIGHTS__LONG_:
		{
			removeZoningRights(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_HASZONINGRIGHTS__LONG_:
		{
			resp->insertBoolean(hasZoningRights(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_CONTAINSPOINT__FLOAT_FLOAT_:
		{
			resp->insertBoolean(containsPoint(inv->getFloatParameter(), inv->getFloatParameter()));
		}
		break;
	case RPC_CLEANUPCITIZENS__:
		{
			cleanupCitizens();
		}
		break;
	case RPC_GETCURRENTPLAYERCOUNT__:
		{
			resp->insertSignedInt(getCurrentPlayerCount());
		}
		break;
	case RPC_ADDCITIZEN__LONG_:
		{
			addCitizen(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_REMOVECITIZEN__LONG_:
		{
			removeCitizen(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_ADDBANNEDPLAYER__LONG_:
		{
			addBannedPlayer(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_REMOVEBANNEDPLAYER__LONG_:
		{
			removeBannedPlayer(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_ISCITIZEN__LONG_:
		{
			resp->insertBoolean(isCitizen(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_GETTIMETOUPDATE__:
		{
			resp->insertSignedInt(getTimeToUpdate());
		}
		break;
	case RPC_GETCITIZENCOUNT__:
		{
			resp->insertSignedInt(getCitizenCount());
		}
		break;
	case RPC_GETCITYRANK__:
		{
			resp->insertByte(getCityRank());
		}
		break;
	case RPC_ISBANNED__LONG_:
		{
			resp->insertBoolean(isBanned(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_ISREGISTERED__:
		{
			resp->insertBoolean(isRegistered());
		}
		break;
	case RPC_GETZONE__:
		{
			resp->insertLong(getZone()->_getObjectID());
		}
		break;
	case RPC_GETREGIONNAME__:
		{
			resp->insertAscii(getRegionName());
		}
		break;
	case RPC_GETMAYORID__:
		{
			resp->insertLong(getMayorID());
		}
		break;
	case RPC_GETPOSITIONX__:
		{
			resp->insertFloat(getPositionX());
		}
		break;
	case RPC_GETPOSITIONY__:
		{
			resp->insertFloat(getPositionY());
		}
		break;
	case RPC_GETRADIUS__:
		{
			resp->insertFloat(getRadius());
		}
		break;
	case RPC_GETREGION__INT_:
		{
			resp->insertLong(getRegion(inv->getSignedIntParameter())->_getObjectID());
		}
		break;
	case RPC_GETREGIONSCOUNT__:
		{
			resp->insertSignedInt(getRegionsCount());
		}
		break;
	case RPC_GETSTRUCTURESCOUNT__:
		{
			resp->insertSignedInt(getStructuresCount());
		}
		break;
	case RPC_GETCOMMERCIALSTRUCTURESCOUNT__:
		{
			resp->insertSignedInt(getCommercialStructuresCount());
		}
		break;
	case RPC_GETALLSTRUCTURESCOUNT__:
		{
			resp->insertSignedInt(getAllStructuresCount());
		}
		break;
	case RPC_GETCITYSPECIALIZATION__:
		{
			resp->insertAscii(getCitySpecialization());
		}
		break;
	case RPC_GETCITYTREASURY__:
		{
			resp->insertFloat(getCityTreasury());
		}
		break;
	case RPC_ISMAYOR__LONG_:
		{
			resp->insertBoolean(isMayor(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_ISZONINGENABLED__:
		{
			resp->insertBoolean(isZoningEnabled());
		}
		break;
	case RPC_ISCLIENTREGION__:
		{
			resp->insertBoolean(isClientRegion());
		}
		break;
	case RPC_GETCITYHALL__:
		{
			resp->insertLong(getCityHall()->_getObjectID());
		}
		break;
	case RPC_SETZONE__ZONE_:
		{
			setZone(static_cast<Zone*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SETCUSTOMREGIONNAME__STRING_:
		{
			String name; 
			setCustomRegionName(inv->getAsciiParameter(name));
		}
		break;
	case RPC_SETCITYSPECIALIZATION__STRING_:
		{
			String spec; 
			setCitySpecialization(inv->getAsciiParameter(spec));
		}
		break;
	case RPC_SETREGIONNAME__STRING_:
		{
			String fullPath; 
			setRegionName(inv->getAsciiParameter(fullPath));
		}
		break;
	case RPC_SETCITYTREASURY__FLOAT_:
		{
			setCityTreasury(inv->getFloatParameter());
		}
		break;
	case RPC_ADDTOCITYTREASURY__FLOAT_:
		{
			resp->insertFloat(addToCityTreasury(inv->getFloatParameter()));
		}
		break;
	case RPC_SUBTRACTFROMCITYTREASURY__FLOAT_:
		{
			resp->insertFloat(subtractFromCityTreasury(inv->getFloatParameter()));
		}
		break;
	case RPC_GETMAXWITHDRAWAL__:
		{
			resp->insertSignedInt(getMaxWithdrawal());
		}
		break;
	case RPC_SETCITYRANK__BYTE_:
		{
			setCityRank(inv->getByteParameter());
		}
		break;
	case RPC_SETMAYORID__LONG_:
		{
			setMayorID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_SETREGISTERED__BOOL_:
		{
			setRegistered(inv->getBooleanParameter());
		}
		break;
	case RPC_SETZONINGENABLED__BOOL_:
		{
			setZoningEnabled(inv->getBooleanParameter());
		}
		break;
	case RPC_SETRADIUS__FLOAT_:
		{
			setRadius(inv->getFloatParameter());
		}
		break;
	case RPC_SETCITYHALL__STRUCTUREOBJECT_:
		{
			setCityHall(static_cast<StructureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVESHUTTLEINSTALLATION__:
		{
			removeShuttleInstallation();
		}
		break;
	case RPC_HASSHUTTLEINSTALLATION__:
		{
			resp->insertBoolean(hasShuttleInstallation());
		}
		break;
	case RPC_SETSHUTTLEID__LONG_:
		{
			setShuttleID(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_GETMISSIONTERMINALCOUNT__:
		{
			resp->insertSignedInt(getMissionTerminalCount());
		}
		break;
	case RPC_GETDECORATIONCOUNT__:
		{
			resp->insertSignedInt(getDecorationCount());
		}
		break;
	case RPC_GETSKILLTRAINERCOUNT__:
		{
			resp->insertSignedInt(getSkillTrainerCount());
		}
		break;
	case RPC_ADDMISSIONTERMINAL__SCENEOBJECT_:
		{
			addMissionTerminal(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ADDDECORATION__SCENEOBJECT_:
		{
			addDecoration(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ADDSKILLTRAINER__SCENEOBJECT_:
		{
			addSkillTrainer(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVEMISSIONTERMINAL__SCENEOBJECT_:
		{
			removeMissionTerminal(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVEDECORATION__SCENEOBJECT_:
		{
			removeDecoration(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVESKILLTRAINERS__SCENEOBJECT_:
		{
			removeSkillTrainers(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ADDBAZAAR__TANGIBLEOBJECT_:
		{
			addBazaar(static_cast<TangibleObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETBAZAAR__INT_:
		{
			resp->insertLong(getBazaar(inv->getSignedIntParameter())->_getObjectID());
		}
		break;
	case RPC_GETBAZAARCOUNT__:
		{
			resp->insertSignedInt(getBazaarCount());
		}
		break;
	case RPC_REMOVEALLSKILLTRAINERS__:
		{
			removeAllSkillTrainers();
		}
		break;
	case RPC_REMOVEALLTERMINALS__:
		{
			removeAllTerminals();
		}
		break;
	case RPC_REMOVEALLDECORATIONS__:
		{
			removeAllDecorations();
		}
		break;
	case RPC_UPDATEMILITIA__:
		{
			updateMilitia();
		}
		break;
	case RPC_ADDSTRUCTURE__STRUCTUREOBJECT_:
		{
			addStructure(static_cast<StructureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ADDCOMMERCIALSTRUCTURE__STRUCTUREOBJECT_:
		{
			addCommercialStructure(static_cast<StructureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVESTRUCTURE__STRUCTUREOBJECT_:
		{
			removeStructure(static_cast<StructureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVECOMMERCIALSTRUCTURE__STRUCTUREOBJECT_:
		{
			removeCommercialStructure(static_cast<StructureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_HASUNIQUESTRUCTURE__INT_:
		{
			resp->insertBoolean(hasUniqueStructure(inv->getUnsignedIntParameter()));
		}
		break;
	case RPC_DESTROYALLSTRUCTURESFORRANK__BYTE_:
		{
			destroyAllStructuresForRank(inv->getByteParameter());
		}
		break;
	case RPC_ADDCANDIDATE__LONG_:
		{
			addCandidate(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_SETMAYORALVOTE__LONG_LONG_:
		{
			setMayoralVote(inv->getUnsignedLongParameter(), inv->getUnsignedLongParameter());
		}
		break;
	case RPC_GETCANDIDATEVOTES__LONG_:
		{
			resp->insertSignedInt(getCandidateVotes(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_RESETCANDIDATES__:
		{
			resetCandidates();
		}
		break;
	case RPC_RESETMAYORALVOTES__:
		{
			resetMayoralVotes();
		}
		break;
	case RPC_REMOVECANDIDATE__LONG_:
		{
			removeCandidate(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_ISCANDIDATE__LONG_:
		{
			resp->insertBoolean(isCandidate(inv->getUnsignedLongParameter()));
		}
		break;
	case RPC_ISVOTINGPERIODOVER__:
		{
			resp->insertBoolean(isVotingPeriodOver());
		}
		break;
	case RPC_ISVOTINGPERIOD__:
		{
			resp->insertBoolean(isVotingPeriod());
		}
		break;
	case RPC_ISVOTINGLOCKED__:
		{
			resp->insertBoolean(isVotingLocked());
		}
		break;
	case RPC_RESETVOTINGPERIOD__:
		{
			resetVotingPeriod();
		}
		break;
	case RPC_ISLOADED__:
		{
			resp->insertBoolean(isLoaded());
		}
		break;
	case RPC_SETLOADED__:
		{
			setLoaded();
		}
		break;
	case RPC_APPLYSPECIALIZATIONMODIFIERS__CREATUREOBJECT_:
		{
			applySpecializationModifiers(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVESPECIALIZATIONMODIFIERS__CREATUREOBJECT_:
		{
			removeSpecializationModifiers(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETPROPERTYTAX__:
		{
			resp->insertSignedInt(getPropertyTax());
		}
		break;
	case RPC_GETINCOMETAX__:
		{
			resp->insertSignedInt(getIncomeTax());
		}
		break;
	case RPC_GETSALESTAX__:
		{
			resp->insertSignedInt(getSalesTax());
		}
		break;
	case RPC_GETTRAVELTAX__:
		{
			resp->insertSignedInt(getTravelTax());
		}
		break;
	case RPC_GETGARAGETAX__:
		{
			resp->insertSignedInt(getGarageTax());
		}
		break;
	case RPC_GETTAX__INT_:
		{
			resp->insertSignedInt(getTax(inv->getSignedIntParameter()));
		}
		break;
	case RPC_SETTAX__INT_INT_:
		{
			setTax(inv->getSignedIntParameter(), inv->getSignedIntParameter());
		}
		break;
	case RPC_TRANSFERCIVICSTRUCTURESTOMAYOR__:
		{
			transferCivicStructuresToMayor();
		}
		break;
	case RPC_CLEANUPDUPLICATECITYSTRUCTURES__:
		{
			cleanupDuplicateCityStructures();
		}
		break;
	case RPC_REMOVEDECORATIONSOUTSIDECITY__INT_:
		{
			removeDecorationsOutsideCity(inv->getSignedIntParameter());
		}
		break;
	case RPC_REMOVETRAINERSOUTSIDECITY__INT_:
		{
			removeTrainersOutsideCity(inv->getSignedIntParameter());
		}
		break;
	case RPC_REMOVETERMINALSOUTSIDECITY__INT_:
		{
			removeTerminalsOutsideCity(inv->getSignedIntParameter());
		}
		break;
	case RPC_REMOVESTRUCTURESOUTSIDECITY__INT_:
		{
			removeStructuresOutsideCity(inv->getSignedIntParameter());
		}
		break;
	case RPC_ISINSIDERADIUS__SCENEOBJECT_INT_:
		{
			resp->insertBoolean(isInsideRadius(static_cast<SceneObject*>(inv->getObjectParameter()), inv->getSignedIntParameter()));
		}
		break;
	case RPC_REMOVEAMENITIESOUTSIDECITY__INT_:
		{
			removeAmenitiesOutsideCity(inv->getSignedIntParameter());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void CityRegionAdapter::initialize() {
	(static_cast<CityRegion*>(stub))->initialize();
}

void CityRegionAdapter::initializeTransientMembers() {
	(static_cast<CityRegion*>(stub))->initializeTransientMembers();
}

void CityRegionAdapter::notifyLoadFromDatabase() {
	(static_cast<CityRegion*>(stub))->notifyLoadFromDatabase();
}

void CityRegionAdapter::notifyEnter(SceneObject* object) {
	(static_cast<CityRegion*>(stub))->notifyEnter(object);
}

void CityRegionAdapter::notifyExit(SceneObject* object) {
	(static_cast<CityRegion*>(stub))->notifyExit(object);
}

Region* CityRegionAdapter::addRegion(float x, float y, float radius, bool persistent) {
	return (static_cast<CityRegion*>(stub))->addRegion(x, y, radius, persistent);
}

void CityRegionAdapter::rescheduleUpdateEvent(unsigned int seconds) {
	(static_cast<CityRegion*>(stub))->rescheduleUpdateEvent(seconds);
}

void CityRegionAdapter::destroyActiveAreas() {
	(static_cast<CityRegion*>(stub))->destroyActiveAreas();
}

void CityRegionAdapter::addMilitiaMember(unsigned long long objectid) {
	(static_cast<CityRegion*>(stub))->addMilitiaMember(objectid);
}

void CityRegionAdapter::removeMilitiaMember(unsigned long long objectid) {
	(static_cast<CityRegion*>(stub))->removeMilitiaMember(objectid);
}

bool CityRegionAdapter::isMilitiaMember(unsigned long long objectid) {
	return (static_cast<CityRegion*>(stub))->isMilitiaMember(objectid);
}

void CityRegionAdapter::addZoningRights(unsigned long long objectid, unsigned int duration) {
	(static_cast<CityRegion*>(stub))->addZoningRights(objectid, duration);
}

void CityRegionAdapter::removeZoningRights(unsigned long long objectid) {
	(static_cast<CityRegion*>(stub))->removeZoningRights(objectid);
}

bool CityRegionAdapter::hasZoningRights(unsigned long long objectid) {
	return (static_cast<CityRegion*>(stub))->hasZoningRights(objectid);
}

bool CityRegionAdapter::containsPoint(float x, float y) {
	return (static_cast<CityRegion*>(stub))->containsPoint(x, y);
}

void CityRegionAdapter::cleanupCitizens() {
	(static_cast<CityRegion*>(stub))->cleanupCitizens();
}

int CityRegionAdapter::getCurrentPlayerCount() {
	return (static_cast<CityRegion*>(stub))->getCurrentPlayerCount();
}

void CityRegionAdapter::addCitizen(unsigned long long citizenID) {
	(static_cast<CityRegion*>(stub))->addCitizen(citizenID);
}

void CityRegionAdapter::removeCitizen(unsigned long long citizenID) {
	(static_cast<CityRegion*>(stub))->removeCitizen(citizenID);
}

void CityRegionAdapter::addBannedPlayer(unsigned long long playerid) {
	(static_cast<CityRegion*>(stub))->addBannedPlayer(playerid);
}

void CityRegionAdapter::removeBannedPlayer(unsigned long long playerid) {
	(static_cast<CityRegion*>(stub))->removeBannedPlayer(playerid);
}

bool CityRegionAdapter::isCitizen(unsigned long long citizenID) {
	return (static_cast<CityRegion*>(stub))->isCitizen(citizenID);
}

int CityRegionAdapter::getTimeToUpdate() {
	return (static_cast<CityRegion*>(stub))->getTimeToUpdate();
}

int CityRegionAdapter::getCitizenCount() {
	return (static_cast<CityRegion*>(stub))->getCitizenCount();
}

byte CityRegionAdapter::getCityRank() {
	return (static_cast<CityRegion*>(stub))->getCityRank();
}

bool CityRegionAdapter::isBanned(unsigned long long playerID) {
	return (static_cast<CityRegion*>(stub))->isBanned(playerID);
}

bool CityRegionAdapter::isRegistered() {
	return (static_cast<CityRegion*>(stub))->isRegistered();
}

Zone* CityRegionAdapter::getZone() {
	return (static_cast<CityRegion*>(stub))->getZone();
}

String CityRegionAdapter::getRegionName() {
	return (static_cast<CityRegion*>(stub))->getRegionName();
}

unsigned long long CityRegionAdapter::getMayorID() {
	return (static_cast<CityRegion*>(stub))->getMayorID();
}

float CityRegionAdapter::getPositionX() {
	return (static_cast<CityRegion*>(stub))->getPositionX();
}

float CityRegionAdapter::getPositionY() {
	return (static_cast<CityRegion*>(stub))->getPositionY();
}

float CityRegionAdapter::getRadius() {
	return (static_cast<CityRegion*>(stub))->getRadius();
}

Region* CityRegionAdapter::getRegion(int idx) {
	return (static_cast<CityRegion*>(stub))->getRegion(idx);
}

int CityRegionAdapter::getRegionsCount() {
	return (static_cast<CityRegion*>(stub))->getRegionsCount();
}

int CityRegionAdapter::getStructuresCount() {
	return (static_cast<CityRegion*>(stub))->getStructuresCount();
}

int CityRegionAdapter::getCommercialStructuresCount() {
	return (static_cast<CityRegion*>(stub))->getCommercialStructuresCount();
}

int CityRegionAdapter::getAllStructuresCount() {
	return (static_cast<CityRegion*>(stub))->getAllStructuresCount();
}

String CityRegionAdapter::getCitySpecialization() {
	return (static_cast<CityRegion*>(stub))->getCitySpecialization();
}

float CityRegionAdapter::getCityTreasury() {
	return (static_cast<CityRegion*>(stub))->getCityTreasury();
}

bool CityRegionAdapter::isMayor(unsigned long long objectid) {
	return (static_cast<CityRegion*>(stub))->isMayor(objectid);
}

bool CityRegionAdapter::isZoningEnabled() {
	return (static_cast<CityRegion*>(stub))->isZoningEnabled();
}

bool CityRegionAdapter::isClientRegion() {
	return (static_cast<CityRegion*>(stub))->isClientRegion();
}

StructureObject* CityRegionAdapter::getCityHall() {
	return (static_cast<CityRegion*>(stub))->getCityHall();
}

void CityRegionAdapter::setZone(Zone* zne) {
	(static_cast<CityRegion*>(stub))->setZone(zne);
}

void CityRegionAdapter::setCustomRegionName(const String& name) {
	(static_cast<CityRegion*>(stub))->setCustomRegionName(name);
}

void CityRegionAdapter::setCitySpecialization(const String& spec) {
	(static_cast<CityRegion*>(stub))->setCitySpecialization(spec);
}

void CityRegionAdapter::setRegionName(const String& fullPath) {
	(static_cast<CityRegion*>(stub))->setRegionName(fullPath);
}

void CityRegionAdapter::setCityTreasury(float val) {
	(static_cast<CityRegion*>(stub))->setCityTreasury(val);
}

float CityRegionAdapter::addToCityTreasury(float val) {
	return (static_cast<CityRegion*>(stub))->addToCityTreasury(val);
}

float CityRegionAdapter::subtractFromCityTreasury(float val) {
	return (static_cast<CityRegion*>(stub))->subtractFromCityTreasury(val);
}

int CityRegionAdapter::getMaxWithdrawal() {
	return (static_cast<CityRegion*>(stub))->getMaxWithdrawal();
}

void CityRegionAdapter::setCityRank(byte rank) {
	(static_cast<CityRegion*>(stub))->setCityRank(rank);
}

void CityRegionAdapter::setMayorID(unsigned long long id) {
	(static_cast<CityRegion*>(stub))->setMayorID(id);
}

void CityRegionAdapter::setRegistered(bool val) {
	(static_cast<CityRegion*>(stub))->setRegistered(val);
}

void CityRegionAdapter::setZoningEnabled(bool val) {
	(static_cast<CityRegion*>(stub))->setZoningEnabled(val);
}

void CityRegionAdapter::setRadius(float rad) {
	(static_cast<CityRegion*>(stub))->setRadius(rad);
}

void CityRegionAdapter::setCityHall(StructureObject* building) {
	(static_cast<CityRegion*>(stub))->setCityHall(building);
}

void CityRegionAdapter::removeShuttleInstallation() {
	(static_cast<CityRegion*>(stub))->removeShuttleInstallation();
}

bool CityRegionAdapter::hasShuttleInstallation() {
	return (static_cast<CityRegion*>(stub))->hasShuttleInstallation();
}

void CityRegionAdapter::setShuttleID(unsigned long long id) {
	(static_cast<CityRegion*>(stub))->setShuttleID(id);
}

int CityRegionAdapter::getMissionTerminalCount() {
	return (static_cast<CityRegion*>(stub))->getMissionTerminalCount();
}

int CityRegionAdapter::getDecorationCount() {
	return (static_cast<CityRegion*>(stub))->getDecorationCount();
}

int CityRegionAdapter::getSkillTrainerCount() {
	return (static_cast<CityRegion*>(stub))->getSkillTrainerCount();
}

void CityRegionAdapter::addMissionTerminal(SceneObject* mt) {
	(static_cast<CityRegion*>(stub))->addMissionTerminal(mt);
}

void CityRegionAdapter::addDecoration(SceneObject* deco) {
	(static_cast<CityRegion*>(stub))->addDecoration(deco);
}

void CityRegionAdapter::addSkillTrainer(SceneObject* trainer) {
	(static_cast<CityRegion*>(stub))->addSkillTrainer(trainer);
}

void CityRegionAdapter::removeMissionTerminal(SceneObject* mt) {
	(static_cast<CityRegion*>(stub))->removeMissionTerminal(mt);
}

void CityRegionAdapter::removeDecoration(SceneObject* deco) {
	(static_cast<CityRegion*>(stub))->removeDecoration(deco);
}

void CityRegionAdapter::removeSkillTrainers(SceneObject* trainer) {
	(static_cast<CityRegion*>(stub))->removeSkillTrainers(trainer);
}

void CityRegionAdapter::addBazaar(TangibleObject* ter) {
	(static_cast<CityRegion*>(stub))->addBazaar(ter);
}

TangibleObject* CityRegionAdapter::getBazaar(int idx) {
	return (static_cast<CityRegion*>(stub))->getBazaar(idx);
}

int CityRegionAdapter::getBazaarCount() {
	return (static_cast<CityRegion*>(stub))->getBazaarCount();
}

void CityRegionAdapter::removeAllSkillTrainers() {
	(static_cast<CityRegion*>(stub))->removeAllSkillTrainers();
}

void CityRegionAdapter::removeAllTerminals() {
	(static_cast<CityRegion*>(stub))->removeAllTerminals();
}

void CityRegionAdapter::removeAllDecorations() {
	(static_cast<CityRegion*>(stub))->removeAllDecorations();
}

void CityRegionAdapter::updateMilitia() {
	(static_cast<CityRegion*>(stub))->updateMilitia();
}

void CityRegionAdapter::addStructure(StructureObject* structure) {
	(static_cast<CityRegion*>(stub))->addStructure(structure);
}

void CityRegionAdapter::addCommercialStructure(StructureObject* structure) {
	(static_cast<CityRegion*>(stub))->addCommercialStructure(structure);
}

void CityRegionAdapter::removeStructure(StructureObject* structure) {
	(static_cast<CityRegion*>(stub))->removeStructure(structure);
}

void CityRegionAdapter::removeCommercialStructure(StructureObject* structure) {
	(static_cast<CityRegion*>(stub))->removeCommercialStructure(structure);
}

bool CityRegionAdapter::hasUniqueStructure(unsigned int crc) {
	return (static_cast<CityRegion*>(stub))->hasUniqueStructure(crc);
}

void CityRegionAdapter::destroyAllStructuresForRank(byte rank) {
	(static_cast<CityRegion*>(stub))->destroyAllStructuresForRank(rank);
}

void CityRegionAdapter::addCandidate(unsigned long long candidateoid) {
	(static_cast<CityRegion*>(stub))->addCandidate(candidateoid);
}

void CityRegionAdapter::setMayoralVote(unsigned long long voteroid, unsigned long long candidateoid) {
	(static_cast<CityRegion*>(stub))->setMayoralVote(voteroid, candidateoid);
}

int CityRegionAdapter::getCandidateVotes(unsigned long long candidateoid) {
	return (static_cast<CityRegion*>(stub))->getCandidateVotes(candidateoid);
}

void CityRegionAdapter::resetCandidates() {
	(static_cast<CityRegion*>(stub))->resetCandidates();
}

void CityRegionAdapter::resetMayoralVotes() {
	(static_cast<CityRegion*>(stub))->resetMayoralVotes();
}

void CityRegionAdapter::removeCandidate(unsigned long long candidateoid) {
	(static_cast<CityRegion*>(stub))->removeCandidate(candidateoid);
}

bool CityRegionAdapter::isCandidate(unsigned long long candidateoid) {
	return (static_cast<CityRegion*>(stub))->isCandidate(candidateoid);
}

bool CityRegionAdapter::isVotingPeriodOver() {
	return (static_cast<CityRegion*>(stub))->isVotingPeriodOver();
}

bool CityRegionAdapter::isVotingPeriod() {
	return (static_cast<CityRegion*>(stub))->isVotingPeriod();
}

bool CityRegionAdapter::isVotingLocked() {
	return (static_cast<CityRegion*>(stub))->isVotingLocked();
}

void CityRegionAdapter::resetVotingPeriod() {
	(static_cast<CityRegion*>(stub))->resetVotingPeriod();
}

bool CityRegionAdapter::isLoaded() {
	return (static_cast<CityRegion*>(stub))->isLoaded();
}

void CityRegionAdapter::setLoaded() {
	(static_cast<CityRegion*>(stub))->setLoaded();
}

void CityRegionAdapter::applySpecializationModifiers(CreatureObject* creature) {
	(static_cast<CityRegion*>(stub))->applySpecializationModifiers(creature);
}

void CityRegionAdapter::removeSpecializationModifiers(CreatureObject* creature) {
	(static_cast<CityRegion*>(stub))->removeSpecializationModifiers(creature);
}

int CityRegionAdapter::getPropertyTax() {
	return (static_cast<CityRegion*>(stub))->getPropertyTax();
}

int CityRegionAdapter::getIncomeTax() {
	return (static_cast<CityRegion*>(stub))->getIncomeTax();
}

int CityRegionAdapter::getSalesTax() {
	return (static_cast<CityRegion*>(stub))->getSalesTax();
}

int CityRegionAdapter::getTravelTax() {
	return (static_cast<CityRegion*>(stub))->getTravelTax();
}

int CityRegionAdapter::getGarageTax() {
	return (static_cast<CityRegion*>(stub))->getGarageTax();
}

int CityRegionAdapter::getTax(int tax) {
	return (static_cast<CityRegion*>(stub))->getTax(tax);
}

void CityRegionAdapter::setTax(int tax, int value) {
	(static_cast<CityRegion*>(stub))->setTax(tax, value);
}

void CityRegionAdapter::transferCivicStructuresToMayor() {
	(static_cast<CityRegion*>(stub))->transferCivicStructuresToMayor();
}

void CityRegionAdapter::cleanupDuplicateCityStructures() {
	(static_cast<CityRegion*>(stub))->cleanupDuplicateCityStructures();
}

void CityRegionAdapter::removeDecorationsOutsideCity(int newRadius) {
	(static_cast<CityRegion*>(stub))->removeDecorationsOutsideCity(newRadius);
}

void CityRegionAdapter::removeTrainersOutsideCity(int newRadius) {
	(static_cast<CityRegion*>(stub))->removeTrainersOutsideCity(newRadius);
}

void CityRegionAdapter::removeTerminalsOutsideCity(int newRadius) {
	(static_cast<CityRegion*>(stub))->removeTerminalsOutsideCity(newRadius);
}

void CityRegionAdapter::removeStructuresOutsideCity(int newRadius) {
	(static_cast<CityRegion*>(stub))->removeStructuresOutsideCity(newRadius);
}

bool CityRegionAdapter::isInsideRadius(SceneObject* obj, int radiusToUse) {
	return (static_cast<CityRegion*>(stub))->isInsideRadius(obj, radiusToUse);
}

void CityRegionAdapter::removeAmenitiesOutsideCity(int newRadius) {
	(static_cast<CityRegion*>(stub))->removeAmenitiesOutsideCity(newRadius);
}

/*
 *	CityRegionHelper
 */

CityRegionHelper* CityRegionHelper::staticInitializer = CityRegionHelper::instance();

CityRegionHelper::CityRegionHelper() {
	className = "CityRegion";

	Core::getObjectBroker()->registerClass(className, this);
}

void CityRegionHelper::finalizeHelper() {
	CityRegionHelper::finalize();
}

DistributedObject* CityRegionHelper::instantiateObject() {
	return new CityRegion(DummyConstructorParameter::instance());
}

DistributedObjectServant* CityRegionHelper::instantiateServant() {
	return new CityRegionImplementation();
}

DistributedObjectAdapter* CityRegionHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CityRegionAdapter(static_cast<CityRegion*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

