/*
 * CityRegion.h
 *
 *  Created on: Feb 9, 2012
 *      Author: xyborn
 */


package server.zone.objects.region;

import server.zone.objects.creature.CreatureObject;
import server.zone.objects.region.Region;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.tangible.TangibleObject;
import server.zone.objects.structure.StructureObject;
import server.zone.Zone;
import server.zone.managers.city.CityManager;
include server.zone.managers.planet.PlanetTravelPoint;
include server.chat.StringIdChatParameter;
include server.zone.ZoneReference;
include server.zone.objects.scene.variables.StringId;
include system.lang.Time;
include server.zone.objects.region.CitizenList;
include server.zone.objects.region.events.CityUpdateEvent;
include server.zone.objects.region.CityStructureInventory;
include system.thread.atomic.AtomicInteger;
import system.thread.Mutex;

@lua
class CityRegion extends ManagedObject implements Logger {

	protected byte cityRank;

	@dereferenced
	protected StringId regionName;

	@dereferenced
	protected VectorMap<unsigned long, int> candidates;

	@dereferenced
	protected VectorMap<unsigned long, unsigned long> mayoralVotes;

	@dereferenced
	protected AtomicInteger currentPlayers;

	protected string customRegionName;

	@dereferenced
	protected ZoneReference zone;

	@dereferenced
	protected VectorMap<unsigned long, unsigned int> zoningRights;

	@dereferenced
	protected CitizenList militiaMembers;

	@dereferenced
	protected CitizenList citizenList;

	@dereferenced
	protected CitizenList bannedList;

	@dereferenced
	protected transient SortedVector<unsigned long> completeStructureList;

	@dereferenced
	protected transient Mutex structureListMutex;

	protected double cityTreasury;

	protected unsigned long mayorID;

	protected boolean zoningEnabled;

	protected boolean registered;

	protected boolean hasShuttle;

	protected unsigned long shuttleID;

	protected transient boolean loaded;

	@dereferenced
	protected Vector<int> taxes;

	@dereferenced
	protected Time nextUpdateTime;

	@dereferenced
	protected Time nextInauguration;

	protected transient CityUpdateEvent cityUpdateEvent;

	protected string citySpecialization; //We want to implement this with skill mods.

	protected StructureObject cityHall;

	@dereferenced
	protected SortedVector<Region> regions;

	@dereferenced
	protected SortedVector<StructureObject> structures;

	@dereferenced
	protected SortedVector<StructureObject> commercialStructures;

	@dereferenced
	protected SortedVector<SceneObject> cityMissionTerminals;

	@dereferenced
	protected SortedVector<SceneObject> cityDecorations;

	@dereferenced
	protected SortedVector<SceneObject> citySkillTrainers;

	@dereferenced
	protected transient VectorMap<unsigned long, TangibleObject> bazaars;

	public static final byte RANK_CLIENT = 0;
	public static final byte RANK_OUTPOST = 1;
	public static final byte RANK_VILLAGE = 2;
	public static final byte RANK_TOWNSHIP = 3;
	public static final byte RANK_CITY = 4;
	public static final byte RANK_METROPOLIS = 5;

	public static final byte TAX_PROPERTY = 0;
	public static final byte TAX_INCOME = 1;
	public static final byte TAX_SALES = 2;
	public static final byte TAX_TRAVEL = 3;
	public static final byte TAX_GARAGE = 4;

	public CityRegion(boolean newCity = false) {
		loaded = newCity;

		initialize();

		taxes.add(0); //Property Tax
		taxes.add(0); //Income Tax
		taxes.add(0); //Sales Tax
		taxes.add(0); //Travel Fee
		taxes.add(0); //Garage Fee

		candidates.setAllowOverwriteInsertPlan();
		candidates.setNullValue(0);

		mayoralVotes.setAllowOverwriteInsertPlan();
		mayoralVotes.setNullValue(0);

		structures.setNoDuplicateInsertPlan();
		commercialStructures.setNoDuplicateInsertPlan();
		completeStructureList.setNoDuplicateInsertPlan();
	}

	public native void initialize();
	public native void initializeTransientMembers();

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	public native void notifyLoadFromDatabase();

	public native void notifyEnter(SceneObject object);
	public native void notifyExit(SceneObject object);

	public native Region addRegion(float x, float y, float radius, boolean persistent);

	public native void rescheduleUpdateEvent(unsigned int seconds);

	public native void destroyActiveAreas();

	public void addMilitiaMember(unsigned long objectid) {
		militiaMembers.put(objectid);
	}

	public void removeMilitiaMember(unsigned long objectid) {
		militiaMembers.drop(objectid);
	}

	public boolean isMilitiaMember(unsigned long objectid) {
		return (militiaMembers.contains(objectid) || mayorID == objectid);
	}

	public native void addZoningRights(unsigned long objectid, unsigned int duration = 86400);

	public void removeZoningRights(unsigned long objectid) {
		zoningRights.drop(objectid);
	}

	public native boolean hasZoningRights(unsigned long objectid);

	public boolean containsPoint(float x, float y) {
		for (int i = 0; i < regions.size(); ++i) {
			Region aa = regions.get(i);

			if (aa.containsPoint(x, y))
				return true;
		}

		return false;
	}

	public native void cleanupCitizens();

	@local
	public Time getNextUpdateTime() {
		return nextUpdateTime;
	}

	public int getCurrentPlayerCount() {
		return currentPlayers.get();
	}

	public void addCitizen(unsigned long citizenID) {
		citizenList.put(citizenID);
	}

	public void removeCitizen(unsigned long citizenID) {
		synchronized (structureListMutex) {
			citizenList.drop(citizenID);

			if (isLoaded()) {
				militiaMembers.drop(citizenID);
			}
		}
	}

	public void addBannedPlayer(unsigned long playerid) {
		bannedList.put(playerid);
	}

	public void removeBannedPlayer(unsigned long playerid) {
		bannedList.drop(playerid);
	}

	public boolean isCitizen(unsigned long citizenID) {
		return citizenList.contains(citizenID);
	}

	public native int getTimeToUpdate();

	public int getCitizenCount() {
		return citizenList.size();
	}

	public byte getCityRank() {
		return cityRank;
	}

	public boolean isBanned(unsigned long playerID) {
		return bannedList.contains(playerID);
	}

	@local
	public CitizenList getCitizenList() {
		return citizenList;
	}

	@local
	public CitizenList getMilitiaMembers() {
		return militiaMembers;
	}

	@local
	public CitizenList getBannedPlayers() {
		return bannedList;
	}

	public boolean isRegistered() {
		return registered;
	}

	public Zone getZone() {
		return zone.get();
	}

	public native string getRegionName();

	public unsigned long getMayorID() {
		return mayorID;
	}

	public float getPositionX() {
		Region aa = regions.get(0);

		if (aa == null)
			return 0.0;

		return aa.getPositionX();
	}

	public float getPositionY() {
		Region aa = regions.get(0);

		if (aa == null)
			return 0.0;

		return aa.getPositionY();
	}

	public float getRadius() {
		if (regions.size() == 0) {
			Logger.error("getRadius called with 0 regions for stringid:" + regionName.getFullPath() + " customName:" + customRegionName);

			return 0.0;
		}

		Region aa = regions.get(0);

		if (aa == null)
			return 0.0;

		return aa.getRadius();
	}

	public Region getRegion(int idx) {
		return regions.get(idx);
	}

	public int getRegionsCount() {
		return regions.size();
	}

	public int getStructuresCount() {
		return structures.size();
	}

	public int getCommercialStructuresCount() {
		return commercialStructures.size();
	}

	public int getAllStructuresCount(){
		return completeStructureList.size();
	}

	public string getCitySpecialization() {
		return citySpecialization;
	}

	@local
	public double getCityTreasury() {
		return cityTreasury;
	}

	public boolean isMayor(unsigned long objectid) {
		return mayorID == objectid;
	}

	public boolean isZoningEnabled() {
		return zoningEnabled;
	}

	public boolean isClientRegion() {
		return cityRank == RANK_CLIENT;
	}

	public StructureObject getCityHall() {
		return cityHall;
	}

	//Setters
	public native void setZone(Zone zne);

	public void setCustomRegionName(final string name) {
		customRegionName = name;
	}

	public void setCitySpecialization(final string spec) {
		citySpecialization = spec;
	}

	public void setRegionName(final string fullPath) {
		regionName.setStringId(fullPath);
	}

	@local
	public void setCityTreasury(double val) {
		cityTreasury = val;
	}

	@local
	public float addToCityTreasury(double val) {
		cityTreasury = cityTreasury + val;

		if (cityTreasury < 0) {
			cityTreasury = 0;
		}

		if (cityTreasury > 100000000) {
			cityTreasury = 100000000;
		}

		return cityTreasury;
	}

	@local
	public double subtractFromCityTreasury(double val) {
		cityTreasury = cityTreasury - val;

		if (cityTreasury < 0) {
			cityTreasury = 0;
		}

		return cityTreasury;
	}

	public int getMaxWithdrawal() {
		return 50000;
	}

	@local
	public native Vector<TangibleObject> getVendorsInCity();

	@local
	public native void setRegionName(@dereferenced final StringId name);

	public void setCityRank(byte rank) {
		cityRank = rank;
	}

	public void setMayorID(unsigned long id) {
		mayorID = id;
	}

	public void setRegistered(boolean val) {
		registered = val;
	}

	public void setZoningEnabled(boolean val) {
		zoningEnabled = val;
	}

	public native void setRadius(float rad);

	public void setCityHall(StructureObject building) {
		cityHall = building;
	}

	public void removeShuttleInstallation(){
		hasShuttle = false;
		shuttleID = 0;
	}
	public boolean hasShuttleInstallation(){
		return hasShuttle;
	}

	public void setShuttleID(unsigned long id){
		shuttleID = id;
		hasShuttle = true;
	}

	public int getMissionTerminalCount(){
		return cityMissionTerminals.size();
	}

	public int getDecorationCount(){
		return cityDecorations.size();
	}

	public int getSkillTrainerCount(){
		return citySkillTrainers.size();
	}

	public void addMissionTerminal(SceneObject mt){
		cityMissionTerminals.put(mt);
	}

	public void addDecoration(SceneObject deco){
		 synchronized (structureListMutex) {
			cityDecorations.put(deco);
		}
	}

	public void addSkillTrainer(SceneObject trainer){
		citySkillTrainers.put(trainer);
	}

	public void removeMissionTerminal(SceneObject mt){
		cityMissionTerminals.drop(mt);
	}

	public void removeDecoration(SceneObject deco){
		synchronized (structureListMutex) {
			cityDecorations.drop(deco);
		}
	}

	public void removeSkillTrainers(SceneObject trainer){
		citySkillTrainers.drop(trainer);
	}

	public void addBazaar(TangibleObject ter) {
		bazaars.put(ter.getObjectID(), ter);
	}

	public TangibleObject getBazaar(int idx) {
		return bazaars.get(idx);
	}

	public int getBazaarCount() {
		return bazaars.size();
	}

	public native void removeAllSkillTrainers();

	public native void removeAllTerminals();

	public native void removeAllDecorations();

	public native void updateMilitia();

	public void addStructure(StructureObject structure) {
		synchronized (structureListMutex) {
			structures.put(structure);
		}
	}

	public void addCommercialStructure(StructureObject structure) {
		synchronized (structureListMutex) {
			commercialStructures.put(structure);
		}
	}

	public void removeStructure(StructureObject structure) {
		synchronized (structureListMutex) {
			structures.drop(structure);
		}
	}

	public void removeCommercialStructure(StructureObject structure) {
		synchronized (structureListMutex) {
			commercialStructures.drop(structure);
		}
	}

	/**
	 * Checks if the city has a structure in it's structures list of a particular template type.
	 * @param crc The crc of the template of the structure to search for.
	 * @return True if the city has a structure of this type.
	 */
	public native boolean hasUniqueStructure(unsigned int crc);

	public native void destroyAllStructuresForRank(byte rank);

	/**
	 * Adds a candidate to the ballot.
	 */
	public void addCandidate(unsigned long candidateoid) {
		candidates.put(candidateoid, 0);
	}

	/**
	 * This method does not check to see if they have previously voted. That logic should be contained in the Manager.
	 * This is just a data container.
	 */
	public void setMayoralVote(unsigned long voteroid, unsigned long candidateoid) {
		unsigned long currentoid = mayoralVotes.get(voteroid);

		//Check if they are voting for same person
		if (currentoid == candidateoid)
			return;

		//Remove the current vote for the current candidate
		if (currentoid != 0 && candidates.contains(currentoid))
			candidates.put(currentoid, candidates.get(currentoid) - 1);

		mayoralVotes.put(voteroid, candidateoid);
		candidates.put(candidateoid, candidates.get(candidateoid) + 1);
	}

	public int getCandidateVotes(unsigned long candidateoid) {
		return candidates.get(candidateoid);
	}

	@local
	public VectorMap<unsigned long, int> getCandidates() {
		return candidates;
	}

	@local
	public VectorMap<unsigned long, unsigned long> getMayoralVotes() {
		return mayoralVotes;
	}

	/**
	 * At the end of a voting term, all candidates are removed from the ballot.
	 */
	public void resetCandidates() {
		candidates.removeAll();
	}

	/**
	 * All votes are removed from the ballot.
	 */
	public void resetMayoralVotes() {
		mayoralVotes.removeAll();
	}

	public void removeCandidate(unsigned long candidateoid) {
		candidates.drop(candidateoid);
	}

	public boolean isCandidate(unsigned long candidateoid) {
		return candidates.contains(candidateoid);
	}

	public boolean isVotingPeriodOver() {
		return nextInauguration.isPast();
	}

	public boolean isVotingPeriod() {
		return !nextInauguration.isPast();
	}

	public native boolean isVotingLocked();

	public native void resetVotingPeriod();

	public boolean isLoaded() {
		return loaded;
	}

	public void setLoaded() {
		loaded = true;
	}

	public native void applySpecializationModifiers(CreatureObject creature);
	public native void removeSpecializationModifiers(CreatureObject creature);

	public int getPropertyTax() {
		return taxes.get(TAX_PROPERTY);
	}

	public int getIncomeTax() {
		return taxes.get(TAX_INCOME);
	}

	public int getSalesTax() {
		return taxes.get(TAX_SALES);
	}

	public int getTravelTax() {
		return taxes.get(TAX_TRAVEL);
	}

	public int getGarageTax() {
		return taxes.get(TAX_GARAGE);
	}

	public int getTax(int tax) {
		if (tax > taxes.size() - 1 || tax < 0)
			return 0;

		return taxes.get(tax);
	}

	public void setTax(int tax, int value) {
		if (tax > taxes.size() - 1 || tax < 0)
			return;

		taxes.set(tax, value);
	}

	@local
	public StructureObject getCivicStructure(int indx){
		return structures.get(indx);
	}

	@local
	public StructureObject getCommercialStructure(int indx){
		return commercialStructures.get(indx);
	}

	@local
	public SceneObject getCityDecoration(int indx){
		return cityDecorations.get(indx);
	}

	@local
	public SceneObject getCityMissionTerminal(int indx){
		return cityMissionTerminals.get(indx);
	}

	@local
	public SceneObject getCitySkillTrainer(int indx){
		return citySkillTrainers.get(indx);
	}

	public native void transferCivicStructuresToMayor();

	public native void cleanupDuplicateCityStructures();

	public native void removeDecorationsOutsideCity(int newRadius);

	public native void removeTrainersOutsideCity(int newRadius);

	public native void removeTerminalsOutsideCity(int newRadius);

	public native void removeStructuresOutsideCity(int newRadius);

	public native boolean isInsideRadius(SceneObject obj, int radiusToUse);


	public void removeAmenitiesOutsideCity(int newRadius){
		removeStructuresOutsideCity(newRadius);
		removeDecorationsOutsideCity(newRadius);
		removeTrainersOutsideCity(newRadius);
		removeTerminalsOutsideCity(newRadius);
	}

	public native void cleanupDecorations(int decorationLimit);

	public native unsigned long getObjectID();

}
