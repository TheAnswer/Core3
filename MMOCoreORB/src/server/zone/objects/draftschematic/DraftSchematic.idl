/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.draftschematic;

import engine.service.proto.BaseMessage;
import server.zone.objects.scene.SceneObject;
import server.zone.packets.scene.AttributeListMessage;
include server.zone.packets.object.ObjectControllerMessage;
import server.zone.objects.intangible.IntangibleObject;
include server.zone.templates.intangible.DraftSchematicObjectTemplate;
include server.zone.objects.draftschematic.draftslot.DraftSlot;
include server.zone.objects.draftschematic.resourceweight.ResourceWeight;
import server.zone.templates.SharedObjectTemplate;
import server.zone.objects.creature.CreatureObject;
import system.util.Vector;

class DraftSchematic extends IntangibleObject {

	/// Name of schematic group this belongs to
	private transient string groupName;

	/// SharedDraftSchematicTemplate
	private transient DraftSchematicObjectTemplate schematicTemplate;

	public DraftSchematic() {
		schematicTemplate = null;
		groupName = "";

		Logger.setLoggingName("DraftSchematic");
	}

	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();

	@local
	@preLocked
	public native void loadTemplateData(SharedObjectTemplate templateData);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	/**
	 * Sends the baseline messages of this object to the specified player
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the baselines
	 */
	@dirty
	public native void sendBaselinesTo(SceneObject player);

	/**
	 * Sends the ingredients of this object to the specified player
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the ingredients
	 */
	@dirty
	public native void sendDraftSlotsTo(CreatureObject player);

	@dirty
	@local
	private native void insertIngredients(ObjectControllerMessage msg);

	/**
	 * Sends the resource weights of this object to the specified player
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the baseline messages }
	 * @param player SceneObject that will receive the ingredients
	 */
	@dirty
	public native void sendResourceWeightsTo(CreatureObject player);

	@reference
	public native SceneObject createManufactureSchematic(SceneObject craftingTool = null);

	@preLocked
	public void setGroupName(string name) {
		groupName = name;
	}

	@dirty
	public string getGroupName() {
		return groupName;
	}

	@dirty
	public native int getDraftSlotCount();

	@dirty
	public boolean isValidDraftSchematic() {
		return schematicTemplate != null;
	}

	@local
	public native DraftSlot getDraftSlot(int i);

	@dirty
	public native int getResourceWeightCount();

	@local
	@dirty
	public native ResourceWeight getResourceWeight(int i);

	/**
	 * Getter for complexity
	 * \return complexity
	 */
	@dirty
	public native float getComplexity();

	/**
	 * Getter for the crafting tool tab mask
	 * \return toolTab
	 */
	@dirty
	public native unsigned int getToolTab();

	/**
	 * getter for the schematic size
	 * \return size
	 */
	@dirty
	public native float getSize();

	/**
	 * getter for xpType
	 * \return size
	 */
	@dirty
	public native string getXpType();

	/**
	 * getter for the xpAmount
	 * \return xpAmount
	 */
	@dirty
	public native int getXpAmount();

	/**
	 * getter for assemblyMod
	 * \return assemblyMod
	 */
	@dirty
	public native string getAssemblySkill();

	/**
	 * getter for experiementationMod
	 * \return experiementationMod
	 */
	@dirty
	public native string getExperimentationSkill();

	@dirty
	public native string getCustomizationSkill();

	@dirty
	public native string getCustomName();

	@dirty
	public native unsigned int getTanoCRC();

	@dirty
	public int getTemplateListSize() {
		return schematicTemplate.getTemplateListSize();
	}

	@dirty
	public string getTemplate(int i) {
		return schematicTemplate.getTemplate(i);
	}

	@dirty
	public string getAppearance(int i) {
		return schematicTemplate.getIngredientAppearance(i);
	}

	@local
	@dirty
	public DraftSchematicObjectTemplate getDraftSchematicTemplate() {
		return schematicTemplate;
	}

	@dirty
	public native int getLabratory();

	@dirty
	public native boolean allowFactoryRun();
}
