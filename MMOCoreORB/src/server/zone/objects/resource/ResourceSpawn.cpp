/*
 *	server/zone/objects/resource/ResourceSpawn.cpp generated by engine3 IDL compiler 0.60
 */

#include "ResourceSpawn.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/sui/listbox/SuiListBox.h"

#include "server/zone/objects/area/ActiveArea.h"

#include "server/zone/objects/resource/ResourceContainer.h"

/*
 *	ResourceSpawnStub
 */

enum {RPC_FINALIZE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_DECREASECONTAINERREFERENCECOUNT__,RPC_ISRESOURCESPAWN__,RPC_SETNAME__STRING_,RPC_SETTYPE__STRING_,RPC_SETSPAWNPOOL__INT_STRING_,RPC_SETZONERESTRICTION__STRING_,RPC_ADDCLASS__STRING_,RPC_ADDSTFCLASS__STRING_,RPC_ADDATTRIBUTE__STRING_INT_,RPC_ISTYPE__STRING_,RPC_SETSURVEYTOOLTYPE__INT_,RPC_SETISENERGY__BOOL_,RPC_GETNAME__,RPC_GETTYPE__,RPC_GETCLASS__INT_,RPC_GETSTFCLASS__INT_,RPC_GETFINALCLASS__,RPC_GETFAMILYNAME__,RPC_GETSURVEYMISSIONSPAWNFAMILYNAME__,RPC_SETSPAWNED__LONG_,RPC_SETDESPAWNED__LONG_,RPC_GETDESPAWNED__,RPC_SETCONTAINERCRC__INT_,RPC_GETCONTAINERCRC__,RPC_GETSPAWNPOOL__,RPC_GETPOOLSLOT__,RPC_ISENERGY__,RPC_GETZONERESTRICTION__,RPC_GETSURVEYTOOLTYPE__,RPC_GETSPAWNMAPSIZE__,RPC_EXTRACTRESOURCE__STRING_INT_,RPC_CREATERESOURCE__INT_,RPC_GETPLANETCRC__,RPC_GETATTRIBUTEVALUE__INT_,RPC_GETVALUEOF__INT_,RPC_ADDSTATSTODEEDLISTBOX__SUILISTBOX_,};

ResourceSpawn::ResourceSpawn() : SceneObject(DummyConstructorParameter::instance()) {
	ResourceSpawnImplementation* _implementation = new ResourceSpawnImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ResourceSpawn");
}

ResourceSpawn::ResourceSpawn(DummyConstructorParameter* param) : SceneObject(param) {
	_setClassName("ResourceSpawn");
}

ResourceSpawn::~ResourceSpawn() {
}



void ResourceSpawn::initializeTransientMembers() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void ResourceSpawn::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

void ResourceSpawn::decreaseContainerReferenceCount() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECREASECONTAINERREFERENCECOUNT__);

		method.executeWithVoidReturn();
	} else
		_implementation->decreaseContainerReferenceCount();
}

bool ResourceSpawn::isResourceSpawn() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISRESOURCESPAWN__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isResourceSpawn();
}

void ResourceSpawn::setName(const String& name) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setName(name);
}

void ResourceSpawn::setType(const String& type) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETTYPE__STRING_);
		method.addAsciiParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setType(type);
}

void ResourceSpawn::setSpawnPool(int pool, const String& slot) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPAWNPOOL__INT_STRING_);
		method.addSignedIntParameter(pool);
		method.addAsciiParameter(slot);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpawnPool(pool, slot);
}

void ResourceSpawn::setZoneRestriction(const String& zoneName) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETZONERESTRICTION__STRING_);
		method.addAsciiParameter(zoneName);

		method.executeWithVoidReturn();
	} else
		_implementation->setZoneRestriction(zoneName);
}

void ResourceSpawn::addClass(const String& newclass) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDCLASS__STRING_);
		method.addAsciiParameter(newclass);

		method.executeWithVoidReturn();
	} else
		_implementation->addClass(newclass);
}

void ResourceSpawn::addStfClass(const String& newclass) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSTFCLASS__STRING_);
		method.addAsciiParameter(newclass);

		method.executeWithVoidReturn();
	} else
		_implementation->addStfClass(newclass);
}

void ResourceSpawn::addAttribute(const String& attribute, int value) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDATTRIBUTE__STRING_INT_);
		method.addAsciiParameter(attribute);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->addAttribute(attribute, value);
}

bool ResourceSpawn::isType(const String& type) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTYPE__STRING_);
		method.addAsciiParameter(type);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isType(type);
}

void ResourceSpawn::setSurveyToolType(int type) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSURVEYTOOLTYPE__INT_);
		method.addSignedIntParameter(type);

		method.executeWithVoidReturn();
	} else
		_implementation->setSurveyToolType(type);
}

void ResourceSpawn::setIsEnergy(bool val) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETISENERGY__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setIsEnergy(val);
}

String ResourceSpawn::getName() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNAME__);

		String _return_getName;
		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return _implementation->getName();
}

String ResourceSpawn::getType() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTYPE__);

		String _return_getType;
		method.executeWithAsciiReturn(_return_getType);
		return _return_getType;
	} else
		return _implementation->getType();
}

String ResourceSpawn::getClass(int index) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCLASS__INT_);
		method.addSignedIntParameter(index);

		String _return_getClass;
		method.executeWithAsciiReturn(_return_getClass);
		return _return_getClass;
	} else
		return _implementation->getClass(index);
}

String ResourceSpawn::getStfClass(int index) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSTFCLASS__INT_);
		method.addSignedIntParameter(index);

		String _return_getStfClass;
		method.executeWithAsciiReturn(_return_getStfClass);
		return _return_getStfClass;
	} else
		return _implementation->getStfClass(index);
}

String ResourceSpawn::getFinalClass() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFINALCLASS__);

		String _return_getFinalClass;
		method.executeWithAsciiReturn(_return_getFinalClass);
		return _return_getFinalClass;
	} else
		return _implementation->getFinalClass();
}

String ResourceSpawn::getFamilyName() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFAMILYNAME__);

		String _return_getFamilyName;
		method.executeWithAsciiReturn(_return_getFamilyName);
		return _return_getFamilyName;
	} else
		return _implementation->getFamilyName();
}

String ResourceSpawn::getSurveyMissionSpawnFamilyName() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURVEYMISSIONSPAWNFAMILYNAME__);

		String _return_getSurveyMissionSpawnFamilyName;
		method.executeWithAsciiReturn(_return_getSurveyMissionSpawnFamilyName);
		return _return_getSurveyMissionSpawnFamilyName;
	} else
		return _implementation->getSurveyMissionSpawnFamilyName();
}

void ResourceSpawn::setSpawned(unsigned long long t) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPAWNED__LONG_);
		method.addUnsignedLongParameter(t);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpawned(t);
}

void ResourceSpawn::setDespawned(unsigned long long t) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDESPAWNED__LONG_);
		method.addUnsignedLongParameter(t);

		method.executeWithVoidReturn();
	} else
		_implementation->setDespawned(t);
}

unsigned long long ResourceSpawn::getDespawned() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDESPAWNED__);

		return method.executeWithUnsignedLongReturn();
	} else
		return _implementation->getDespawned();
}

void ResourceSpawn::setContainerCRC(unsigned int crc) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONTAINERCRC__INT_);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		_implementation->setContainerCRC(crc);
}

unsigned int ResourceSpawn::getContainerCRC() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONTAINERCRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getContainerCRC();
}

int ResourceSpawn::getSpawnPool() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPAWNPOOL__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSpawnPool();
}

String ResourceSpawn::getPoolSlot() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPOOLSLOT__);

		String _return_getPoolSlot;
		method.executeWithAsciiReturn(_return_getPoolSlot);
		return _return_getPoolSlot;
	} else
		return _implementation->getPoolSlot();
}

bool ResourceSpawn::isEnergy() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISENERGY__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isEnergy();
}

String ResourceSpawn::getZoneRestriction() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETZONERESTRICTION__);

		String _return_getZoneRestriction;
		method.executeWithAsciiReturn(_return_getZoneRestriction);
		return _return_getZoneRestriction;
	} else
		return _implementation->getZoneRestriction();
}

int ResourceSpawn::getSurveyToolType() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSURVEYTOOLTYPE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSurveyToolType();
}

int ResourceSpawn::getSpawnMapSize() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSPAWNMAPSIZE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSpawnMapSize();
}

void ResourceSpawn::extractResource(const String& zoneName, int units) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_EXTRACTRESOURCE__STRING_INT_);
		method.addAsciiParameter(zoneName);
		method.addSignedIntParameter(units);

		method.executeWithVoidReturn();
	} else
		_implementation->extractResource(zoneName, units);
}

Reference<ResourceContainer* > ResourceSpawn::createResource(int units) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATERESOURCE__INT_);
		method.addSignedIntParameter(units);

		return static_cast<ResourceContainer*>(method.executeWithObjectReturn());
	} else
		return _implementation->createResource(units);
}

String ResourceSpawn::getSpawnMapZone(int i) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getSpawnMapZone(i);
}

bool ResourceSpawn::isUnknownType() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->isUnknownType();
}

void ResourceSpawn::createSpawnMaps(bool jtl, int minpool, int maxpool, const String& zonerestriction, Vector<String>& activeZones) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->createSpawnMaps(jtl, minpool, maxpool, zonerestriction, activeZones);
}

unsigned int ResourceSpawn::getPlanetCRC() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLANETCRC__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getPlanetCRC();
}

float ResourceSpawn::getDensityAt(const String& zoneName, float x, float y) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDensityAt(zoneName, x, y);
}

bool ResourceSpawn::inShift() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->inShift();
}

int ResourceSpawn::getAttributeAndValue(String& attribute, int index) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getAttributeAndValue(attribute, index);
}

int ResourceSpawn::getAttributeValue(int index) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETATTRIBUTEVALUE__INT_);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getAttributeValue(index);
}

int ResourceSpawn::getValueOf(int index) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVALUEOF__INT_);
		method.addSignedIntParameter(index);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getValueOf(index);
}

void ResourceSpawn::addStatsToDeedListBox(SuiListBox* suil) {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSTATSTODEEDLISTBOX__SUILISTBOX_);
		method.addObjectParameter(suil);

		method.executeWithVoidReturn();
	} else
		_implementation->addStatsToDeedListBox(suil);
}

void ResourceSpawn::print() {
	ResourceSpawnImplementation* _implementation = static_cast<ResourceSpawnImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->print();
}

DistributedObjectServant* ResourceSpawn::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ResourceSpawn::_getImplementationForRead() {
	return _impl;
}

void ResourceSpawn::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ResourceSpawnImplementation
 */

ResourceSpawnImplementation::ResourceSpawnImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


ResourceSpawnImplementation::~ResourceSpawnImplementation() {
	ResourceSpawnImplementation::finalize();
}


void ResourceSpawnImplementation::_initializeImplementation() {
	_setClassHelper(ResourceSpawnHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ResourceSpawnImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ResourceSpawn*>(stub);
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ResourceSpawnImplementation::_getStub() {
	return _this.get();
}

ResourceSpawnImplementation::operator const ResourceSpawn*() {
	return _this.get();
}

void ResourceSpawnImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ResourceSpawnImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ResourceSpawnImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ResourceSpawnImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ResourceSpawnImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ResourceSpawnImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ResourceSpawnImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ResourceSpawnImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("ResourceSpawn");

}

void ResourceSpawnImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ResourceSpawnImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ResourceSpawnImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SceneObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x64bf9f27: //ResourceSpawn.spawnType
		TypeInfo<String >::parseFromBinaryStream(&spawnType, stream);
		return true;

	case 0xc830962b: //ResourceSpawn.spawnName
		TypeInfo<String >::parseFromBinaryStream(&spawnName, stream);
		return true;

	case 0x4c6462c0: //ResourceSpawn.spawnClasses
		TypeInfo<Vector<String> >::parseFromBinaryStream(&spawnClasses, stream);
		return true;

	case 0x975988f9: //ResourceSpawn.stfSpawnClasses
		TypeInfo<Vector<String> >::parseFromBinaryStream(&stfSpawnClasses, stream);
		return true;

	case 0x18da759d: //ResourceSpawn.spawnAttributes
		TypeInfo<VectorMap<String, int> >::parseFromBinaryStream(&spawnAttributes, stream);
		return true;

	case 0xb1bc58cd: //ResourceSpawn.poolSlot
		TypeInfo<String >::parseFromBinaryStream(&poolSlot, stream);
		return true;

	case 0x8e0ca674: //ResourceSpawn.spawnPool
		TypeInfo<int >::parseFromBinaryStream(&spawnPool, stream);
		return true;

	case 0x895b3fce: //ResourceSpawn.zoneRestriction
		TypeInfo<String >::parseFromBinaryStream(&zoneRestriction, stream);
		return true;

	case 0x7f76595d: //ResourceSpawn.surveyToolType
		TypeInfo<int >::parseFromBinaryStream(&surveyToolType, stream);
		return true;

	case 0x6458e9e6: //ResourceSpawn.containerCRC
		TypeInfo<unsigned int >::parseFromBinaryStream(&containerCRC, stream);
		return true;

	case 0x309fa8e6: //ResourceSpawn.spawned
		TypeInfo<unsigned long long >::parseFromBinaryStream(&spawned, stream);
		return true;

	case 0xa5f8c907: //ResourceSpawn.despawned
		TypeInfo<unsigned long long >::parseFromBinaryStream(&despawned, stream);
		return true;

	case 0xf3f48ab3: //ResourceSpawn.spawnMaps
		TypeInfo<SpawnMap >::parseFromBinaryStream(&spawnMaps, stream);
		return true;

	case 0xad93bc4: //ResourceSpawn.maxUnitsSpawned
		TypeInfo<unsigned long long >::parseFromBinaryStream(&maxUnitsSpawned, stream);
		return true;

	case 0x4443a30e: //ResourceSpawn.unitsInCirculation
		TypeInfo<unsigned long long >::parseFromBinaryStream(&unitsInCirculation, stream);
		return true;

	case 0xcc6e7c3f: //ResourceSpawn.containerReferenceCount
		TypeInfo<int >::parseFromBinaryStream(&containerReferenceCount, stream);
		return true;

	case 0xef3b250a: //ResourceSpawn.dbDestroyed
		TypeInfo<bool >::parseFromBinaryStream(&dbDestroyed, stream);
		return true;

	case 0x1e6aab53: //ResourceSpawn.energy
		TypeInfo<bool >::parseFromBinaryStream(&energy, stream);
		return true;

	}

	return false;
}

void ResourceSpawnImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ResourceSpawnImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ResourceSpawnImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SceneObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x64bf9f27; //ResourceSpawn.spawnType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&spawnType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc830962b; //ResourceSpawn.spawnName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&spawnName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4c6462c0; //ResourceSpawn.spawnClasses
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&spawnClasses, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x975988f9; //ResourceSpawn.stfSpawnClasses
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<Vector<String> >::toBinaryStream(&stfSpawnClasses, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x18da759d; //ResourceSpawn.spawnAttributes
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, int> >::toBinaryStream(&spawnAttributes, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb1bc58cd; //ResourceSpawn.poolSlot
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&poolSlot, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8e0ca674; //ResourceSpawn.spawnPool
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&spawnPool, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x895b3fce; //ResourceSpawn.zoneRestriction
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&zoneRestriction, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7f76595d; //ResourceSpawn.surveyToolType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&surveyToolType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6458e9e6; //ResourceSpawn.containerCRC
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&containerCRC, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x309fa8e6; //ResourceSpawn.spawned
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&spawned, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa5f8c907; //ResourceSpawn.despawned
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&despawned, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf3f48ab3; //ResourceSpawn.spawnMaps
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<SpawnMap >::toBinaryStream(&spawnMaps, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xad93bc4; //ResourceSpawn.maxUnitsSpawned
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&maxUnitsSpawned, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4443a30e; //ResourceSpawn.unitsInCirculation
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned long long >::toBinaryStream(&unitsInCirculation, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xcc6e7c3f; //ResourceSpawn.containerReferenceCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&containerReferenceCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xef3b250a; //ResourceSpawn.dbDestroyed
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&dbDestroyed, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1e6aab53; //ResourceSpawn.energy
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&energy, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 18;
}

ResourceSpawnImplementation::ResourceSpawnImplementation() {
	_initializeImplementation();
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnType = "";
	spawnType = "";
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnPool = 0;
	spawnPool = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	poolSlot = "";
	poolSlot = "";
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnAttributes.setNoDuplicateInsertPlan();
	(&spawnAttributes)->setNoDuplicateInsertPlan();
	// server/zone/objects/resource/ResourceSpawn.idl():   	containerReferenceCount = 0;
	containerReferenceCount = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	unitsInCirculation = 0;
	unitsInCirculation = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	maxUnitsSpawned = 0;
	maxUnitsSpawned = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	containerCRC = 0;
	containerCRC = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawned = 0;
	spawned = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	despawned = 0;
	despawned = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	surveyToolType = 0;
	surveyToolType = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	zoneRestriction = "";
	zoneRestriction = "";
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnPool = 0;
	spawnPool = 0;
	// server/zone/objects/resource/ResourceSpawn.idl():   	dbDestroyed = false;
	dbDestroyed = false;
	// server/zone/objects/resource/ResourceSpawn.idl():   	energy = false;
	energy = false;
	// server/zone/objects/resource/ResourceSpawn.idl():   	setLoggingName("ResourceSpawn");
	setLoggingName("ResourceSpawn");
}

void ResourceSpawnImplementation::finalize() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	Logger.info("trying to delete ResourceSpawn: " + spawnName);
	Logger::info("trying to delete ResourceSpawn: " + spawnName);
}

bool ResourceSpawnImplementation::isResourceSpawn() {
	// server/zone/objects/resource/ResourceSpawn.idl():  		return true;
	return true;
}

void ResourceSpawnImplementation::setName(const String& name) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnName = name;
	spawnName = name;
}

void ResourceSpawnImplementation::setType(const String& type) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnType = type;
	spawnType = type;
}

void ResourceSpawnImplementation::setSpawnPool(int pool, const String& slot) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnPool = pool;
	spawnPool = pool;
	// server/zone/objects/resource/ResourceSpawn.idl():   	poolSlot = slot;
	poolSlot = slot;
	// server/zone/objects/resource/ResourceSpawn.idl():   }
	if (spawnPool == 0){
	// server/zone/objects/resource/ResourceSpawn.idl():   		spawnMaps.removeAll();
	(&spawnMaps)->removeAll();
	// server/zone/objects/resource/ResourceSpawn.idl():   		poolSlot = "";
	poolSlot = "";
}
}

void ResourceSpawnImplementation::setZoneRestriction(const String& zoneName) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	zoneRestriction = zoneName;
	zoneRestriction = zoneName;
}

void ResourceSpawnImplementation::addClass(const String& newclass) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawnClasses.add(newclass);
	(&spawnClasses)->add(newclass);
}

void ResourceSpawnImplementation::addStfClass(const String& newclass) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	stfSpawnClasses.add(newclass);
	(&stfSpawnClasses)->add(newclass);
}

bool ResourceSpawnImplementation::isType(const String& type) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		}
	for (	// server/zone/objects/resource/ResourceSpawn.idl():  		for(int i = 0;
	int i = 0;
	i < (&stfSpawnClasses)->size();
 ++i) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		}
	if ((&stfSpawnClasses)->get(i) == type)	// server/zone/objects/resource/ResourceSpawn.idl():  				return true;
	return true;
}
	// server/zone/objects/resource/ResourceSpawn.idl():  		}
	for (	// server/zone/objects/resource/ResourceSpawn.idl():  		for(int i = 0;
	int i = 0;
	i < (&spawnClasses)->size();
 ++i) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		}
	if ((&spawnClasses)->get(i) == type)	// server/zone/objects/resource/ResourceSpawn.idl():  				return true;
	return true;
}
	// server/zone/objects/resource/ResourceSpawn.idl():  		return false;
	return false;
}

void ResourceSpawnImplementation::setSurveyToolType(int type) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		surveyToolType = type;
	surveyToolType = type;
}

void ResourceSpawnImplementation::setIsEnergy(bool val) {
	// server/zone/objects/resource/ResourceSpawn.idl():  		energy = val;
	energy = val;
}

String ResourceSpawnImplementation::getName() {
	// server/zone/objects/resource/ResourceSpawn.idl():  		return spawnName;
	return spawnName;
}

String ResourceSpawnImplementation::getType() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return spawnType;
	return spawnType;
}

String ResourceSpawnImplementation::getClass(int index) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	}
	if (index < (&spawnClasses)->size()){
	// server/zone/objects/resource/ResourceSpawn.idl():   		return spawnClasses.get(index);
	return (&spawnClasses)->get(index);
}

	else {
	// server/zone/objects/resource/ResourceSpawn.idl():   		return "";
	return "";
}
}

String ResourceSpawnImplementation::getStfClass(int index) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	}
	if (index < (&stfSpawnClasses)->size()){
	// server/zone/objects/resource/ResourceSpawn.idl():   		return stfSpawnClasses.get(index);
	return (&stfSpawnClasses)->get(index);
}

	else {
	// server/zone/objects/resource/ResourceSpawn.idl():   		return "";
	return "";
}
}

String ResourceSpawnImplementation::getFinalClass() {
	// server/zone/objects/resource/ResourceSpawn.idl():   		return "";
	if ((&spawnClasses)->size() > 1)	// server/zone/objects/resource/ResourceSpawn.idl():   		return spawnClasses.get(spawnClasses.size() - 1);
	return (&spawnClasses)->get((&spawnClasses)->size() - 1);

	else 	// server/zone/objects/resource/ResourceSpawn.idl():   		return "";
	return "";
}

void ResourceSpawnImplementation::setSpawned(unsigned long long t) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	spawned = t;
	spawned = t;
}

void ResourceSpawnImplementation::setDespawned(unsigned long long t) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	despawned = t;
	despawned = t;
}

unsigned long long ResourceSpawnImplementation::getDespawned() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return despawned;
	return despawned;
}

void ResourceSpawnImplementation::setContainerCRC(unsigned int crc) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	containerCRC = crc;
	containerCRC = crc;
}

unsigned int ResourceSpawnImplementation::getContainerCRC() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return containerCRC;
	return containerCRC;
}

int ResourceSpawnImplementation::getSpawnPool() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return spawnPool;
	return spawnPool;
}

String ResourceSpawnImplementation::getPoolSlot() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return poolSlot;
	return poolSlot;
}

bool ResourceSpawnImplementation::isEnergy() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return energy;
	return energy;
}

String ResourceSpawnImplementation::getZoneRestriction() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return zoneRestriction;
	return zoneRestriction;
}

int ResourceSpawnImplementation::getSurveyToolType() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return surveyToolType;
	return surveyToolType;
}

int ResourceSpawnImplementation::getSpawnMapSize() {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return spawnMaps.size();
	return (&spawnMaps)->size();
}

int ResourceSpawnImplementation::getAttributeValue(int index) {
	// server/zone/objects/resource/ResourceSpawn.idl():   	return spawnAttributes.get(index);
	return (&spawnAttributes)->get(index);
}

/*
 *	ResourceSpawnAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ResourceSpawnAdapter::ResourceSpawnAdapter(ResourceSpawn* obj) : SceneObjectAdapter(obj) {
}

void ResourceSpawnAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_FINALIZE__:
		{
			finalize();
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_DECREASECONTAINERREFERENCECOUNT__:
		{
			decreaseContainerReferenceCount();
		}
		break;
	case RPC_ISRESOURCESPAWN__:
		{
			resp->insertBoolean(isResourceSpawn());
		}
		break;
	case RPC_SETNAME__STRING_:
		{
			String name; 
			setName(inv->getAsciiParameter(name));
		}
		break;
	case RPC_SETTYPE__STRING_:
		{
			String type; 
			setType(inv->getAsciiParameter(type));
		}
		break;
	case RPC_SETSPAWNPOOL__INT_STRING_:
		{
			String slot; 
			setSpawnPool(inv->getSignedIntParameter(), inv->getAsciiParameter(slot));
		}
		break;
	case RPC_SETZONERESTRICTION__STRING_:
		{
			String zoneName; 
			setZoneRestriction(inv->getAsciiParameter(zoneName));
		}
		break;
	case RPC_ADDCLASS__STRING_:
		{
			String newclass; 
			addClass(inv->getAsciiParameter(newclass));
		}
		break;
	case RPC_ADDSTFCLASS__STRING_:
		{
			String newclass; 
			addStfClass(inv->getAsciiParameter(newclass));
		}
		break;
	case RPC_ADDATTRIBUTE__STRING_INT_:
		{
			String attribute; 
			addAttribute(inv->getAsciiParameter(attribute), inv->getSignedIntParameter());
		}
		break;
	case RPC_ISTYPE__STRING_:
		{
			String type; 
			resp->insertBoolean(isType(inv->getAsciiParameter(type)));
		}
		break;
	case RPC_SETSURVEYTOOLTYPE__INT_:
		{
			setSurveyToolType(inv->getSignedIntParameter());
		}
		break;
	case RPC_SETISENERGY__BOOL_:
		{
			setIsEnergy(inv->getBooleanParameter());
		}
		break;
	case RPC_GETNAME__:
		{
			resp->insertAscii(getName());
		}
		break;
	case RPC_GETTYPE__:
		{
			resp->insertAscii(getType());
		}
		break;
	case RPC_GETCLASS__INT_:
		{
			resp->insertAscii(getClass(inv->getSignedIntParameter()));
		}
		break;
	case RPC_GETSTFCLASS__INT_:
		{
			resp->insertAscii(getStfClass(inv->getSignedIntParameter()));
		}
		break;
	case RPC_GETFINALCLASS__:
		{
			resp->insertAscii(getFinalClass());
		}
		break;
	case RPC_GETFAMILYNAME__:
		{
			resp->insertAscii(getFamilyName());
		}
		break;
	case RPC_GETSURVEYMISSIONSPAWNFAMILYNAME__:
		{
			resp->insertAscii(getSurveyMissionSpawnFamilyName());
		}
		break;
	case RPC_SETSPAWNED__LONG_:
		{
			setSpawned(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_SETDESPAWNED__LONG_:
		{
			setDespawned(inv->getUnsignedLongParameter());
		}
		break;
	case RPC_GETDESPAWNED__:
		{
			resp->insertLong(getDespawned());
		}
		break;
	case RPC_SETCONTAINERCRC__INT_:
		{
			setContainerCRC(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETCONTAINERCRC__:
		{
			resp->insertInt(getContainerCRC());
		}
		break;
	case RPC_GETSPAWNPOOL__:
		{
			resp->insertSignedInt(getSpawnPool());
		}
		break;
	case RPC_GETPOOLSLOT__:
		{
			resp->insertAscii(getPoolSlot());
		}
		break;
	case RPC_ISENERGY__:
		{
			resp->insertBoolean(isEnergy());
		}
		break;
	case RPC_GETZONERESTRICTION__:
		{
			resp->insertAscii(getZoneRestriction());
		}
		break;
	case RPC_GETSURVEYTOOLTYPE__:
		{
			resp->insertSignedInt(getSurveyToolType());
		}
		break;
	case RPC_GETSPAWNMAPSIZE__:
		{
			resp->insertSignedInt(getSpawnMapSize());
		}
		break;
	case RPC_EXTRACTRESOURCE__STRING_INT_:
		{
			String zoneName; 
			extractResource(inv->getAsciiParameter(zoneName), inv->getSignedIntParameter());
		}
		break;
	case RPC_CREATERESOURCE__INT_:
		{
			resp->insertLong(createResource(inv->getSignedIntParameter())->_getObjectID());
		}
		break;
	case RPC_GETPLANETCRC__:
		{
			resp->insertInt(getPlanetCRC());
		}
		break;
	case RPC_GETATTRIBUTEVALUE__INT_:
		{
			resp->insertSignedInt(getAttributeValue(inv->getSignedIntParameter()));
		}
		break;
	case RPC_GETVALUEOF__INT_:
		{
			resp->insertSignedInt(getValueOf(inv->getSignedIntParameter()));
		}
		break;
	case RPC_ADDSTATSTODEEDLISTBOX__SUILISTBOX_:
		{
			addStatsToDeedListBox(static_cast<SuiListBox*>(inv->getObjectParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void ResourceSpawnAdapter::finalize() {
	(static_cast<ResourceSpawn*>(stub))->finalize();
}

void ResourceSpawnAdapter::initializeTransientMembers() {
	(static_cast<ResourceSpawn*>(stub))->initializeTransientMembers();
}

void ResourceSpawnAdapter::decreaseContainerReferenceCount() {
	(static_cast<ResourceSpawn*>(stub))->decreaseContainerReferenceCount();
}

bool ResourceSpawnAdapter::isResourceSpawn() {
	return (static_cast<ResourceSpawn*>(stub))->isResourceSpawn();
}

void ResourceSpawnAdapter::setName(const String& name) {
	(static_cast<ResourceSpawn*>(stub))->setName(name);
}

void ResourceSpawnAdapter::setType(const String& type) {
	(static_cast<ResourceSpawn*>(stub))->setType(type);
}

void ResourceSpawnAdapter::setSpawnPool(int pool, const String& slot) {
	(static_cast<ResourceSpawn*>(stub))->setSpawnPool(pool, slot);
}

void ResourceSpawnAdapter::setZoneRestriction(const String& zoneName) {
	(static_cast<ResourceSpawn*>(stub))->setZoneRestriction(zoneName);
}

void ResourceSpawnAdapter::addClass(const String& newclass) {
	(static_cast<ResourceSpawn*>(stub))->addClass(newclass);
}

void ResourceSpawnAdapter::addStfClass(const String& newclass) {
	(static_cast<ResourceSpawn*>(stub))->addStfClass(newclass);
}

void ResourceSpawnAdapter::addAttribute(const String& attribute, int value) {
	(static_cast<ResourceSpawn*>(stub))->addAttribute(attribute, value);
}

bool ResourceSpawnAdapter::isType(const String& type) {
	return (static_cast<ResourceSpawn*>(stub))->isType(type);
}

void ResourceSpawnAdapter::setSurveyToolType(int type) {
	(static_cast<ResourceSpawn*>(stub))->setSurveyToolType(type);
}

void ResourceSpawnAdapter::setIsEnergy(bool val) {
	(static_cast<ResourceSpawn*>(stub))->setIsEnergy(val);
}

String ResourceSpawnAdapter::getName() {
	return (static_cast<ResourceSpawn*>(stub))->getName();
}

String ResourceSpawnAdapter::getType() {
	return (static_cast<ResourceSpawn*>(stub))->getType();
}

String ResourceSpawnAdapter::getClass(int index) {
	return (static_cast<ResourceSpawn*>(stub))->getClass(index);
}

String ResourceSpawnAdapter::getStfClass(int index) {
	return (static_cast<ResourceSpawn*>(stub))->getStfClass(index);
}

String ResourceSpawnAdapter::getFinalClass() {
	return (static_cast<ResourceSpawn*>(stub))->getFinalClass();
}

String ResourceSpawnAdapter::getFamilyName() {
	return (static_cast<ResourceSpawn*>(stub))->getFamilyName();
}

String ResourceSpawnAdapter::getSurveyMissionSpawnFamilyName() {
	return (static_cast<ResourceSpawn*>(stub))->getSurveyMissionSpawnFamilyName();
}

void ResourceSpawnAdapter::setSpawned(unsigned long long t) {
	(static_cast<ResourceSpawn*>(stub))->setSpawned(t);
}

void ResourceSpawnAdapter::setDespawned(unsigned long long t) {
	(static_cast<ResourceSpawn*>(stub))->setDespawned(t);
}

unsigned long long ResourceSpawnAdapter::getDespawned() {
	return (static_cast<ResourceSpawn*>(stub))->getDespawned();
}

void ResourceSpawnAdapter::setContainerCRC(unsigned int crc) {
	(static_cast<ResourceSpawn*>(stub))->setContainerCRC(crc);
}

unsigned int ResourceSpawnAdapter::getContainerCRC() {
	return (static_cast<ResourceSpawn*>(stub))->getContainerCRC();
}

int ResourceSpawnAdapter::getSpawnPool() {
	return (static_cast<ResourceSpawn*>(stub))->getSpawnPool();
}

String ResourceSpawnAdapter::getPoolSlot() {
	return (static_cast<ResourceSpawn*>(stub))->getPoolSlot();
}

bool ResourceSpawnAdapter::isEnergy() {
	return (static_cast<ResourceSpawn*>(stub))->isEnergy();
}

String ResourceSpawnAdapter::getZoneRestriction() {
	return (static_cast<ResourceSpawn*>(stub))->getZoneRestriction();
}

int ResourceSpawnAdapter::getSurveyToolType() {
	return (static_cast<ResourceSpawn*>(stub))->getSurveyToolType();
}

int ResourceSpawnAdapter::getSpawnMapSize() {
	return (static_cast<ResourceSpawn*>(stub))->getSpawnMapSize();
}

void ResourceSpawnAdapter::extractResource(const String& zoneName, int units) {
	(static_cast<ResourceSpawn*>(stub))->extractResource(zoneName, units);
}

Reference<ResourceContainer* > ResourceSpawnAdapter::createResource(int units) {
	return (static_cast<ResourceSpawn*>(stub))->createResource(units);
}

unsigned int ResourceSpawnAdapter::getPlanetCRC() {
	return (static_cast<ResourceSpawn*>(stub))->getPlanetCRC();
}

int ResourceSpawnAdapter::getAttributeValue(int index) {
	return (static_cast<ResourceSpawn*>(stub))->getAttributeValue(index);
}

int ResourceSpawnAdapter::getValueOf(int index) {
	return (static_cast<ResourceSpawn*>(stub))->getValueOf(index);
}

void ResourceSpawnAdapter::addStatsToDeedListBox(SuiListBox* suil) {
	(static_cast<ResourceSpawn*>(stub))->addStatsToDeedListBox(suil);
}

/*
 *	ResourceSpawnHelper
 */

ResourceSpawnHelper* ResourceSpawnHelper::staticInitializer = ResourceSpawnHelper::instance();

ResourceSpawnHelper::ResourceSpawnHelper() {
	className = "ResourceSpawn";

	Core::getObjectBroker()->registerClass(className, this);
}

void ResourceSpawnHelper::finalizeHelper() {
	ResourceSpawnHelper::finalize();
}

DistributedObject* ResourceSpawnHelper::instantiateObject() {
	return new ResourceSpawn(DummyConstructorParameter::instance());
}

DistributedObjectServant* ResourceSpawnHelper::instantiateServant() {
	return new ResourceSpawnImplementation();
}

DistributedObjectAdapter* ResourceSpawnHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceSpawnAdapter(static_cast<ResourceSpawn*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

