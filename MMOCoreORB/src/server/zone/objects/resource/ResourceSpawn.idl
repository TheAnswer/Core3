/*
Copyright (C) 2010 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.resource;

import engine.log.Logger;
import system.util.VectorMap;
import system.util.Vector;

import engine.core.ManagedObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.player.sui.listbox.SuiListBox;
import server.zone.objects.area.ActiveArea;
include server.zone.packets.scene.AttributeListMessage;

import server.zone.objects.resource.ResourceContainer;
include server.zone.objects.resource.SpawnDensityMap;
include server.zone.objects.resource.SpawnMap;
import server.zone.objects.scene.SceneObject;

class ResourceSpawn extends SceneObject {

	protected string spawnType;
	protected string spawnName;
	
	@dereferenced
	protected Vector<string> spawnClasses;
	
	@dereferenced
	protected Vector<string> stfSpawnClasses;
	
	@dereferenced
	protected VectorMap<string, int> spawnAttributes;

	protected string poolSlot;
	protected int spawnPool;
	
	protected string zoneRestriction;
	
	protected int surveyToolType;
	protected unsigned int containerCRC;
	
	protected unsigned long spawned;
	protected unsigned long despawned;

	@dereferenced 
	protected SpawnMap spawnMaps;
		
	protected unsigned long maxUnitsSpawned;
	protected unsigned long unitsInCirculation;
	
	protected int containerReferenceCount;
	protected boolean dbDestroyed;
	protected boolean energy;

    public ResourceSpawn() {
       	spawnType = "";
       	spawnPool = 0;
       	poolSlot = "";
       	spawnAttributes.setNoDuplicateInsertPlan();
       	
       	containerReferenceCount = 0;
       	unitsInCirculation = 0;
       	maxUnitsSpawned = 0;
       	containerCRC = 0;
       	spawned = 0;
       	despawned = 0;
       	surveyToolType = 0;
       	zoneRestriction = "";
       	spawnPool = 0;
       	dbDestroyed = false;
       	energy = false;
       	
       	setLoggingName("ResourceSpawn");
    }
    
    public native void finalize() {
    	Logger.info("trying to delete ResourceSpawn: " + spawnName);
    	//if (!dbDestroyed && (containerReferenceCount == 0))
    	//	decreaseContainerReferenceCount();
    }
    
    public native void initializeTransientMembers();
        
   /**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);
	
	public native void decreaseContainerReferenceCount();
        
	
	public boolean isResourceSpawn() {
		return true;
	}
    /**
	 * Sets the resource spawn with the system generated name
	 * @pre { }
	 * @post { }
	 * @param name generated name to set this object with
	 */
    public void setName(final string name) {
    	spawnName = name;
    }
    
    public void setType(final string type) {
    	spawnType = type;
    }
    
    public void setSpawnPool(int pool, final string slot) {
    	spawnPool = pool;
    	poolSlot = slot;
    	if(spawnPool == 0) {
    		spawnMaps.removeAll();
    		poolSlot = "";
    	}
    }
    
    public void setZoneRestriction(final string zoneName) {
    	zoneRestriction = zoneName;
    }

    /**
	 * adds a class to the resource
	 * @pre { }
	 * @post { }
	 * @param class string added to spawn
	 */
    public void addClass(final string newclass) {
    	spawnClasses.add(newclass);
    }
    
    public void addStfClass(final string newclass) {
    	stfSpawnClasses.add(newclass);
    }

	public native void addAttribute(final string attribute, int value);
	
	public boolean isType(final string type) {
		for(int i = 0; i < stfSpawnClasses.size(); ++i) {
			if(stfSpawnClasses.get(i) == type)
				return true;	
		}
		for(int i = 0; i < spawnClasses.size(); ++i) {
			if(spawnClasses.get(i) == type)
				return true;	
		}
		return false;
	}
	
	public void setSurveyToolType(int type) {
		surveyToolType = type;
	}
	
	public void setIsEnergy(boolean val) {
		energy = val;
	}

    // getters
	public string getName() {
		return spawnName;
	}

    public string getType() {
    	return spawnType;
    }

    public string getClass(int index) {
    	if(index < spawnClasses.size()) {
    		return spawnClasses.get(index);
    	} else {
    		return "";
    	}
    }
    
    public string getStfClass(int index) {
    	if(index < stfSpawnClasses.size()) {
    		return stfSpawnClasses.get(index);
    	} else {
    		return "";
    	}
    }
    
    public string getFinalClass() {
    	if(spawnClasses.size() > 1)
    		return spawnClasses.get(spawnClasses.size() - 1);
    	else
    		return "";
    }
    
    public native string getFamilyName();
    
    public native string getSurveyMissionSpawnFamilyName();
    
    public void setSpawned(unsigned long t) {
    	spawned = t;
    }
    
    public void setDespawned(unsigned long t) {
    	despawned = t;
    }
    
    public unsigned long getDespawned() {
    	return despawned;
    }
    
    public void setContainerCRC(unsigned int crc) {
    	containerCRC = crc;
    }
    
    public unsigned int getContainerCRC() {
    	return containerCRC;
    }
    
    public int getSpawnPool() {
    	return spawnPool;
    }
    
    public string getPoolSlot() {
    	return poolSlot;
    }
    
    public boolean isEnergy() {
    	return energy;
    }
    
    public string getZoneRestriction() {
    	return zoneRestriction;
    }
    
    public int getSurveyToolType() {
    	return surveyToolType;
    }
    
    public int getSpawnMapSize() {
    	return spawnMaps.size();
    }
    
    public native void extractResource(final string zoneName, int units);
    
    @reference
    public native ResourceContainer createResource(int units);

    @local
    public native string getSpawnMapZone(int i);
    
    @local 	
	public native boolean isUnknownType();
    
    @local
    public native void createSpawnMaps(boolean jtl, int minpool, int maxpool, final string zonerestriction, @dereferenced Vector<string> activeZones);
    
    @local 	
	private native int getConcentration(boolean jtl);
    
    public native unsigned int getPlanetCRC();
	
	@local 	
	@dereferenced
	private native Vector<string> getSpawnZones(int minpool, int maxpool, final string zonerestriction, @dereferenced Vector<string> activeZones);
    
    @local
    public native float getDensityAt(final string zoneName, float x, float y);
    
    @local
    public native boolean inShift();
    
    @local
    public native int getAttributeAndValue(string attribute, int index);
    
    public int getAttributeValue(int index) {
    	return spawnAttributes.get(index);
    }
    
    public native int getValueOf(int index);
    
    public native void addStatsToDeedListBox(SuiListBox suil);

	@local
    public native void print();
}
