/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.cell;

import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.building.BuildingObject;
include server.zone.objects.scene.variables.ContainerPermissions;
include templates.SharedObjectTemplate;
include system.thread.atomic.AtomicInteger;
include engine.log.Logger;

@lua
class CellObject extends SceneObject {
	protected int cellNumber;

	@dereferenced
	protected AtomicInteger forceLoadObjectCount;

	public CellObject() {
		Logger.setLoggingName("CellObject");

		cellNumber = 0;

		forceLoadObjectCount.set(0);
	}

	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);

	@preLocked
	public void setAllowEntryPermissionGroup(final string group) {
		super.setContainerInheritPermissionsFromParent(false);
		super.setContainerDefaultDenyPermission(ContainerPermissions.WALKIN);
		super.setContainerAllowPermission(group, ContainerPermissions.WALKIN);
	}

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	public native void notifyLoadFromDatabase();

	// Gets called when delayed-load containerObjects is loaded
	public native void onContainerLoaded();

	@read
	public boolean hasForceLoadObject() {
		return forceLoadObjectCount.get() > 0;
	}

	public native void onBuildingInsertedToZone(BuildingObject building);
	/**
	 * Sends the contained non slotted objects to the specified player
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the container objects }
	 * @param player SceneObject that will receive the objects
	 */
	@dirty
	public native void sendContainerObjectsTo(SceneObject player, boolean forceLoad);

	@dirty
	public native void sendPermissionsTo(CreatureObject object, boolean allowEntry);

	/**
	 * Evaluates if this object has the necessary free slots to be able to add the specified SceneObject
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param object SceneObject that will be checked
	 * @param error error string that the player will receive on error
	 * @return returns 0 on success, or error code
	 */
	@dirty
	public native int canAddObject(SceneObject object, int containmentType, string errorDescription);

	/**
	 * Tries to add/link object
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param object SceneObject that will be added to the current object
	 * @param containmentType arrangement type that will be used to add the object
	 * @param notifyClient if true in range objects will be updated with the change
	 * @return returns true if the object has been successfully added
	 */
	public native boolean transferObject(SceneObject object, int containmentType, boolean notifyClient = false, boolean allowOverflow = false, boolean notifyRoot = true);

	/**
	 * Tries to remove/unlink object
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param object SceneObject that will be removed from the current object
	 * @param destination SceneObject that will be the new destination of the object.
	 * @param notifyClient not used currently
	 * @return returns true if the object has been successfully removed
	 */
	public native boolean removeObject(SceneObject object, SceneObject destination, boolean notifyClient = false);

	public native void initializeTransientMembers();

	@dirty
	public native void sendBaselinesTo(SceneObject player);

	@dirty
	public native int getCurrentNumberOfPlayerItems();

	/**
	 * This method loops through all items in the cell and attempts to destroy them from the database.
	 */
	public native void destroyAllPlayerItems();

	@read
	public int getCellNumber() {
		return cellNumber;
	}

	@preLocked
	public void setCellNumber(int number) {
		cellNumber = number;
	}

	@dirty
	public boolean isCellObject() {
		return true;
	}
}
