/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.cell;

import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.CreatureObject;
import engine.lua.LuaObject;
import system.util.VectorMap;
import server.zone.Zone;
include server.zone.objects.scene.variables.ContainerPermissions;
import server.zone.templates.SharedObjectTemplate;

@lua
class CellObject extends SceneObject {
	protected int cellNumber;
	
	protected int currentNumberOfItems;
	
	public CellObject() {
		Logger.setLoggingName("CellObject");

		cellNumber = 0;
		
		currentNumberOfItems = 0;
	}
	
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);
	
	public void setAllowEntryPermissionGroup(final string group) {
		super.setContainerInheritPermissionsFromParent(false);
		super.setContainerDefaultDenyPermission(ContainerPermissions.WALKIN);
		super.setContainerAllowPermission(group, ContainerPermissions.WALKIN);
	}
	
	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	public native void notifyLoadFromDatabase();
	
	/**
	 * Sends the contained non slotted objects to the specified player
	 * @pre { this object is locked }
	 * @post { this object is locked, player received the container objects }
	 * @param player SceneObject that will receive the objects 
	 */
	public native void sendContainerObjectsTo(SceneObject player);
	
	public native void sendPermissionsTo(CreatureObject object, boolean allowEntry);
	
	/**
	 * Evaluates if this object has the necessary free slots to be able to add the specified SceneObject
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param object SceneObject that will be checked
	 * @param error error string that the player will receive on error
	 * @return returns 0 on success, or error code
	 */
	public native int canAddObject(SceneObject object, int containmentType, string errorDescription);
	
	/**
	 * Tries to add/link object
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param object SceneObject that will be added to the current object
	 * @param containmentType arrangement type that will be used to add the object
	 * @param notifyClient if true in range objects will be updated with the change
	 * @return returns true if the object has been successfully added
	 */
	public native boolean transferObject(SceneObject object, int containmentType, boolean notifyClient = false);
	
	/**
	 * Sends the necessary messages to player in order to create this object
	 * @pre { this object is locked }
	 * @post { this object is locked, player received this object }
	 * @param player SceneObject that will receive the messages
	 * @param doClose if true a SceneObjectCloseMessage is sent to finish the object
	 */
	//public native void sendTo(SceneObject player, boolean doClose);
	
	public native void initializeTransientMembers();
	
	public native void sendBaselinesTo(SceneObject player);
	
	/*public void resetCurrentNumerOfPlayerItems() {
		currentNumberOfItems = 0;
	}*/
	
	public native int getCurrentNumberOfPlayerItems();
	
	/**
	 * This method loops through all items in the cell and attempts to destroy them from the database.
	 */
	public native void destroyAllPlayerItems();
	
	public int getCellNumber() {
		return cellNumber;
	}
	
	public void setCellNumber(int number) {
		cellNumber = number;
	}
	
	public boolean isCellObject() {
		return true;
	}
}