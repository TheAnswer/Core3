/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.player.sui;

import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.player.PlayerObject;
import engine.service.proto.BaseMessage;

include server.zone.packets.ui.SuiCreatePageMessage;
include server.zone.objects.player.sui.SuiWindowType;
include server.zone.objects.player.sui.SuiCallback;

class SuiBox extends ManagedObject implements Logger {
	@weakReference
	protected CreatureObject player;

	@local
	protected SuiCallback suiCallback;

	protected unsigned int boxID;

	@weakReference
	protected SceneObject usingObject;

	protected string handlerStr;

	protected string cancelButtonText;
	protected boolean cancelButton;
	protected string okButtonText;
	protected boolean okButton;

	protected string otherButtonText;
	protected boolean otherButton;

	protected string promptTitle;
	protected string promptText;

	protected int boxType;

	protected unsigned int windowType;

	protected float forceCloseDistance;

	@dereferenced
	protected Vector<string> headerSets;

	@dereferenced
	protected Vector<string> optionSets;

	protected int hdrOptCount; //header option count

	protected boolean hasGenerated;

	public static final int INPUTBOX = 0;
	public static final int LISTBOX = 1;
	public static final int MESSAGEBOX = 2;
	public static final int TRANSFERBOX = 3;
	public static final int COLORPICKER = 4;
	public static final int BANKTRANSFERBOX = 5;

	public static final int BANKTIPCONFIRMBOX = 10;

	public static final int SLICINGBOX = 20;
	public static final int KEYPAD = 21;

	public static final int QUESTPOPUP = 30;

	public SuiBox(CreatureObject play, unsigned int windowtype, unsigned int boxtype) {
		player = play;
	
		forceCloseDistance = 32;

		boxType = boxtype;

		windowType = windowtype;

		initialize();
	}

	public void initialize() {
		Logger.setLoggingName("SuiBox");

		CreatureObject strongRef = player;

		if (strongRef != null) {
			PlayerObject ghost = strongRef.getPlayerObject();

			if (ghost != null) {
				boxID = ghost.getNewSuiBoxID(windowType);
			}
		}

		handlerStr = "msgSelected";

		cancelButtonText = "@cancel";
		cancelButton = false;

		otherButtonText = "@back";
		otherButton = false;

		okButtonText = "@ok";
		okButton = true;

		hdrOptCount = 0; //header option count
		hasGenerated = false;

		suiCallback = null;
	}

	public void finalize() {
		//Logger.info("deleting sui box", true);
	}

	public void initializeTransientMembers() {
		super.initializeTransientMembers();
		
		//Logger.setLoggingName("SuiBox");
	}


	/**
	 * Call after all Header settings have been added with addHeader()
	 * Generates the UI-Header of the packet, SuiCreatePageMessage, based on the headerSets vector.
	 * If you are reusing the SuiBox and rebuilding with different variables, make sure you reset
	 * the object with clearOptions()
	 * \sa addHeader(), clearOptions()
	 */
	public native void generateHeader(SuiCreatePageMessage message);

	/**
	 * Call after all Body Settings have been added with addSetting() and the header has been generated
	 * Generates the UI-Body of the packet, SuiCreatePageMessage, based on the optionSets vector.
	 * If you are reusing the SuiBox and rebuilding with different variables, make sure you
	 * reset the object with clearOptions()
	 * \sa addSetting(), clearOptions()
	 */
	public native void generateBody(SuiCreatePageMessage message);


	/**
	 * Call after generating both the header and body.
	 * Footer of SuiCreatePageMessage is largely unknown. Subject to change based on research. See trac
	 * \param type Type of footer to place into packet
	 */
	public native void generateFooter(SuiCreatePageMessage message, int type = 0);

	public abstract BaseMessage generateMessage() {
		return null;
	}

	/**
	 * Use to close the UI object on the client.
	 * Sends the SuiForceClosePage packet to the client.
	 */
	public native BaseMessage generateCloseMessage();

	/**
	 * Use to add a UI-body option that will be included in UI generation
	 * See trac documentation of SuiCreatePageMessage for when to use
	 * Variables are concated into a string and placed in a vector (optionSets) of all the body settings
	 * for the SuiBoxImplementation object. Each string separates variables with a tilde (~) character.
	 * \param optType Type of setting to add. See packet docs for info
	 * \param variable UI Classpath in the script to access
	 * \param setting SWG UI setting to modify
	 * \param value The value of the setting being modified
	 */
	public native void addSetting(final string optType, final string variable, final string setting, final string value);

	/**
	 * Use to add a UI-Header that will eventually be included in the UI generation.
	 * See trac documentation of SuiCreatePageMessage for when to use
	 * Variables are concated into a string and placed in a vector (headerSets) of all the header settings
	 * for the SuiBoxImplementation object. Each string separates variables with a tilde (~) character.
	 * \param variable UI Variable to declare header for
	 * \param type Data type of the UI variable being declared
	 */
	public native void addHeader(final string variable, final string type);

	public void clearOptions() {
		headerSets.removeAll();
		hdrOptCount = 0;
		optionSets.removeAll();
	}

	public int compareTo(SuiBox obj) {
		unsigned int id = obj.getBoxID();

		if (boxID < id)
			return 1;
		else if (boxID > id)
			return -1;
		else
			return 0;
	}

	public boolean hasGeneratedMessage() {
		return hasGenerated;
	}

	public void setPromptTitle(final string name) {
		promptTitle = name;
	}

	public void setPromptText(final string name) {
		promptText = name;
	}

	public string getPromptTitle() {
		return promptTitle;
	}

	public void setHandlerText(final string text) {
		handlerStr = text;
	}

	public void setWindowType(unsigned int type) {
		windowType = type;
	}

	public void setBoxType(int type) {
		boxType = type;
	}

	public abstract boolean isInputBox() {
		return false;
	}

	public abstract boolean isListBox() {
		return false;
	}

	public abstract boolean isFireworkDelayBox() {
		return false;
	}

	public abstract boolean isMessageBox() {
		return false;
	}

	public abstract boolean isTransferBox() {
		return false;
	}

	public abstract boolean isBankTransferBox() {
		return false;
	}

	public abstract boolean isSlicingBox() {
		return false;
	}

	public abstract boolean isCharacterBuilderBox() {
		return false;
	}

	public abstract boolean isColorPicker() {
		return false;
	}

	public native void setCancelButton(boolean value, final string cancelText);

	public native void setOtherButton(boolean value, final string backText);

	public native void setOkButton(boolean value, final string okText);

	public native void setForceCloseDistance(float dist);

	public native void setForceCloseDisabled();

	@weakReference
	public CreatureObject getPlayer() {
		return player;
	}

	public unsigned int getBoxID() {
		return boxID;
	}

	public int getWindowType() {
		return windowType;
	}

	@weakReference
	public SceneObject getUsingObject() {
		return usingObject;
	}

	public void setUsingObject(SceneObject object) {
		usingObject = object;
	}

	@local
	public void setCallback(SuiCallback callback) {
		suiCallback = callback;
	}

	@local
	public SuiCallback getCallback() {
		return suiCallback;
	}

	public abstract boolean isSuiBoxPage() {
		return false;
	}
}
