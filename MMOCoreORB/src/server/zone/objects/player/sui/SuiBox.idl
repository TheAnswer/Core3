/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.player.sui;


import engine.lua.LuaObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.player.PlayerObject;
import server.zone.objects.creature.CreatureObject;
import system.io.StringTokenizer;
import engine.service.proto.BaseMessage;

include server.zone.packets.ui.SuiCreatePageMessage;
include server.zone.objects.player.sui.SuiWindowType;
include server.zone.objects.player.sui.SuiCallback;

class SuiBox extends ManagedObject implements Logger {
	@weakReference
	protected CreatureObject player;
	
	@local
	protected SuiCallback suiCallback;

	protected unsigned int boxID;
	
	@weakReference
	protected SceneObject usingObject;

	protected string handlerStr;
	
	protected string cancelButtonText;
	protected boolean cancelButton;
	protected string okButtonText;
	protected boolean okButton;
	
	protected string otherButtonText;
	protected boolean otherButton;

	protected string promptTitle;
	protected string promptText;

	protected int boxType;

	protected unsigned int windowType;

	protected float forceCloseDistance;

	@dereferenced
	protected Vector<string> headerSets;
	
	@dereferenced
	protected Vector<string> optionSets;
	
	protected int hdrOptCount; //header option count
	
	protected boolean hasGenerated;
	
	public static final int INPUTBOX = 0;
	public static final int LISTBOX = 1;
	public static final int MESSAGEBOX = 2;
	public static final int TRANSFERBOX = 3;
	public static final int COLORPICKER = 4;
	public static final int BANKTRANSFERBOX = 5;

	public static final int BANKTIPCONFIRMBOX = 10;

	public static final int SLICINGBOX = 20;
	public static final int KEYPAD = 21;
	
	public SuiBox(CreatureObject play, unsigned int windowtype, unsigned int boxtype) {
		player = play;
		
		forceCloseDistance = 32;

		boxType = boxtype;

		windowType = windowtype;
		
		initialize();
	}
	
	public void initialize() {
		Logger.setLoggingName("SuiBox");
		
		PlayerObject ghost = player.getPlayerObject();

		boxID = ghost.getNewSuiBoxID(windowType);

		handlerStr = "msgSelected";
		
		cancelButtonText = "@cancel";
		cancelButton = false;

		otherButtonText = "@back";
		otherButton = false;

		okButtonText = "@ok";
		okButton = true;

		hdrOptCount = 0; //header option count
		hasGenerated = false;
		
		suiCallback = null;
	}
	
	public void finalize() {
		//Logger.info("deleting sui box", true);
	}
	
	public void initializeTransientMembers() {
		super.initializeTransientMembers();
		
		//Logger.setLoggingName("SuiBox");
	}
	

	/**
	 * Call after all Header settings have been added with addHeader()
	 * Generates the UI-Header of the packet, SuiCreatePageMessage, based on the headerSets vector.
	 * If you are reusing the SuiBox and rebuilding with different variables, make sure you reset
	 * the object with clearOptions()
	 * \sa addHeader(), clearOptions()
	 */
	public native void generateHeader(SuiCreatePageMessage message);
	
	/**
	 * Call after all Body Settings have been added with addSetting() and the header has been generated
	 * Generates the UI-Body of the packet, SuiCreatePageMessage, based on the optionSets vector.
	 * If you are reusing the SuiBox and rebuilding with different variables, make sure you
	 * reset the object with clearOptions()
	 * \sa addSetting(), clearOptions()
	 */
	public native void generateBody(SuiCreatePageMessage message);
	

	/**
	 * Call after generating both the header and body.
	 * Footer of SuiCreatePageMessage is largely unknown. Subject to change based on research. See trac
	 * \param type Type of footer to place into packet
	 */
	public native void generateFooter(SuiCreatePageMessage message, int type = 0);
	
	public abstract BaseMessage generateMessage() {
		return null;
	}

	/**
	 * Use to close the UI object on the client.
	 * Sends the SuiForceClosePage packet to the client.
	 */
	public native BaseMessage generateCloseMessage();
	
	/**
	 * Use to add a UI-body option that will be included in UI generation
	 * See trac documentation of SuiCreatePageMessage for when to use
	 * Variables are concated into a string and placed in a vector (optionSets) of all the body settings
	 * for the SuiBoxImplementation object. Each string separates variables with a tilde (~) character.
	 * \param optType Type of setting to add. See packet docs for info
	 * \param variable UI Classpath in the script to access
	 * \param setting SWG UI setting to modify
	 * \param value The value of the setting being modified
	 */
	public native void addSetting(final string optType, final string variable, final string setting, final string value);
	
	/**
	 * Use to add a UI-Header that will eventually be included in the UI generation.
	 * See trac documentation of SuiCreatePageMessage for when to use
	 * Variables are concated into a string and placed in a vector (headerSets) of all the header settings
	 * for the SuiBoxImplementation object. Each string separates variables with a tilde (~) character.
	 * \param variable UI Variable to declare header for
	 * \param type Data type of the UI variable being declared
	 */
	public native void addHeader(final string variable, final string type);
	
	public void clearOptions() {
		headerSets.removeAll();
		hdrOptCount = 0;
		optionSets.removeAll();
	}
	
	public int compareTo(SuiBox obj) {
		unsigned int id = obj.getBoxID();

		if (boxID < id)
			return 1;
		else if (boxID > id)
			return -1;
		else
			return 0;
	}
	
	public boolean hasGeneratedMessage() {
		return hasGenerated;
	}
	
	public void setPromptTitle(final string name) {
		promptTitle = name;
	}

	public void setPromptText(final string name) {
		promptText = name;
	}
	
	public string getPromptTitle() {
		return promptTitle;
	}
	
	public void setHandlerText(final string text) {
		handlerStr = text;
	}

	public void setWindowType(unsigned int type) {
		windowType = type;
	}
	
	public void setBoxType(int type) {
		boxType = type;
	}

	public abstract boolean isInputBox() {
		return false;
	}

	public abstract boolean isListBox() {
		return false;
	}

	public abstract boolean isFireworkDelayBox() {
		return false;
	}

	public abstract boolean isMessageBox() {
		return false;
	}

	public abstract boolean isTransferBox() {
		return false;
	}

	public abstract boolean isBankTransferBox() {
		return false;
	}

	public abstract boolean isSlicingBox() {
		return false;
	}
	
	public abstract boolean isCharacterBuilderBox() {
		return false;
	}

	public boolean isColorPicker() {
		return false;
	}

	public native void setCancelButton(boolean value, final string cancelText);

	public native void setOtherButton(boolean value, final string backText);

	public native void setOkButton(boolean value, final string okText);
	
	public native void setForceCloseDistance(float dist);

	public native void setForceCloseDisabled();

	@weakReference
	public CreatureObject getPlayer() {
		return player;
	}

	public unsigned int getBoxID() {
		return boxID;
	}

	public int getWindowType() {
		return windowType;
	}
	
	@weakReference
	public SceneObject getUsingObject() {
		return usingObject;
	}
	
	public void setUsingObject(SceneObject object) {
		usingObject = object;
	}
	
	@local
	public void setCallback(SuiCallback callback) {
		suiCallback = callback;
	}
	
	@local
	public SuiCallback getCallback() {
		return suiCallback;
	}
}
