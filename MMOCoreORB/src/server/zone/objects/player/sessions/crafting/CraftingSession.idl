package server.zone.objects.player.sessions.crafting;

import engine.util.Facade;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.player.PlayerObject;
import server.zone.objects.tangible.tool.CraftingTool;
import server.zone.objects.tangible.tool.CraftingStation;
import server.zone.objects.tangible.TangibleObject;
include server.zone.objects.manufactureschematic.ManufactureSchematic;
import server.zone.objects.draftschematic.DraftSchematic;

import server.zone.managers.crafting.CraftingManager;
include templates.customization.CustomizationVariable;

class CraftingSession extends Facade {
	@weakReference
	protected transient CreatureObject crafter;
	
	@weakReference
	protected transient PlayerObject crafterGhost;
	
	@weakReference
	protected transient CraftingTool craftingTool;
	
	@weakReference
	protected transient CraftingStation craftingStation;

	@weakReference
	protected transient CraftingManager craftingManager;
	
	@weakReference
	protected transient ManufactureSchematic manufactureSchematic;
	
	@weakReference
	protected transient TangibleObject prototype;

	protected transient int experimentationPointsTotal;
	protected transient int experimentationPointsUsed;
	
	protected transient byte state;
	
	@dereferenced
	protected transient Vector<DraftSchematic> currentSchematicList;
	
	protected transient byte assemblyResult;
	protected transient byte experimentationResult;

	/// For experiment hacking attempts
	protected transient unsigned long lastExperimentTime;
	
	@dereferenced
	protected transient VectorMap<string, Reference<CustomizationVariable> > variables;
	
	public CraftingSession(CreatureObject creature) {
		Logger.setLoggingName("CraftingSession");
		Logger.setLogging(true);
		
		crafter = creature;
		craftingManager = null;
	}

	/**
	 * The crafting tool and station have been identified pre calling initializeSession
	 */
	public native int initializeSession(CraftingTool tool, CraftingStation station);
	
	/**
	 * Sends the packets and creates the objects to start
	 * the crafting session
	 */
	private native int startSession();
	
	/**
	 * Cancels the current session
	 */
	public native int cancelSession();
	
	/**
	 * 
	 */
	public native int clearSession();
	
	@weakReference
	public ManufactureSchematic getSchematic() {
		return manufactureSchematic;
	}

	/**
	 * Closes an open crafting windows
	 */
	private native void closeCraftingWindow(int clientCounter);

	/**
	 * Sends various crafting messages
	 */
	
	private native void sendSlotMessage(int counter, int message);

	
	/**
	 * The SelectDraftSchematicCommand uses this
	 */
	@preLocked
	public native void selectDraftSchematic(int index);

	/**
	 * Creates the needed objects when a schematic is selected
	 */
	private native boolean createSessionObjects(DraftSchematic draftSchematic);
	
	/**
	 * Creates the manufacture schematic
	 */
	private native boolean createManufactureSchematic(DraftSchematic draftschematic);
	
	/**
	 * Creates the prototype to be crafted
	 */
	private native boolean createPrototypeObject(DraftSchematic draftschematic);
	
	/**
	 * Sends ingredients on ManufactureSchematic::synchronizedUIListen
	 */
	@preLocked
	public native void sendIngredientForUIListen();
	
	/**
	 * The CraftingAddIngredientCallback executes this method
	 * when an object is added in the crafting window
	 */
	@preLocked
	public native void addIngredient(TangibleObject tano, int slotUpdated, int clientCounter);

	/**
	 * The CraftingRemoveIngredientCallback executes this method
	 * when an object is removed from the crafting window
	 */
	@preLocked
	public native void removeIngredient(TangibleObject tano, int slotUpdated, int clientCounter);

	/**
	 * The NextCraftingStageCommand uses this
	 */
	@preLocked
	public native void nextCraftingStage(int clientCounter);

	/**
	 * Ends the ingredient phase, resources/components are
	 * unrecoverable
	 */
	private native void initialAssembly(int clientCounter);
	
	/**
	 * Sends the crafting process to customization
	 */
	private native void finishAssembly(int clientCounter);

	
	/**
	 * The CraftingExperimentCallback executes this method
	 * when a player experiments in a crafting tool
	 */
	@preLocked
	public native void experiment(int rowsAttempted, final string expAttempt, int clientCounter);

	/**
	 * The CraftingCustomizationCallback executes this method 
	 * a user customizes a tano in the crafting tool
	 */
	@preLocked
	public native void customization(final string name, byte templateChoice, int schematicCount, final string customizationString);

	/**
	 * 
	 */
	private native void finishStage1(int clientCounter);

	/**
	 * 
	 */
	private native void finishStage2(int clientCounter);
	
	/**
	 * CreatePrototypeCommand calls this
	 */
	@preLocked
	public native void createPrototype(int clientCounter, boolean practice);
	
	/**
	 * CreateManfSchematicCommand calls this
	 */
	@preLocked
	public native void createManufactureSchematic(int clientCounter);

	/**
	 * Starts tasks for counting down and creating item
	 * based on complexity
	 */
	private native void startCreationTasks(int timer, boolean practice);

	public int getState() {
		return state;
	}
	
	private native void addSkillMods();

	private native void addWeaponDots();

	private native boolean checkPrototype();
}
