/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
 */

package server.zone.objects.player.sessions;

include engine.core.ManagedObject;

import engine.log.Logger;
import engine.core.ManagedReference;
import system.lang.ref.Reference;

import engine.util.Facade;
import system.util.SortedVector;
import system.util.VectorMap;


include server.zone.objects.scene.SceneObject;
include server.zone.objects.group.GroupObject;
include server.zone.objects.creature.CreatureObject;

include server.zone.objects.creature.AiAgent;
include server.zone.objects.player.sessions.LootLotteryBallot;
include server.zone.objects.scene.SessionFacadeType;


class LootLotterySession extends Facade {
	@managedReference
	protected AiAgent corpse;

	protected boolean lotteryFinished;

	protected unsigned long groupID; 

	@dereferenced
	protected SortedVector<CreatureObject> eligiblePlayers; 

	@dereferenced
	protected SortedVector<LootLotteryBallot> playerSelections; 
	
	public LootLotterySession(unsigned long id, AiAgent ai) {
		groupID = id;		
		corpse = ai;
		lotteryFinished = false;

		eligiblePlayers.removeAll();
		playerSelections.removeAll();

		//initializeSession();

		Logger.setLoggingName("LootLotterySession");
		Logger.setLogging(true);
	}
	
	public native int initializeSession();
	
	public int cancelSession() {
		//corpse.dropActiveSession(SessionFacadeType.LOOTLOTTERY);
		
		return 0;
	}
	
	public int clearSession() {
		return 0;
	}

	public void addEligiblePlayer(CreatureObject player) {
		eligiblePlayers.put(player);
	}

	//Once we receive their item selections, player is removed from eligible entrants list.
	//If there are no eligible entrants left (everyone has made selections), start the draw.
	public void removeEligiblePlayer(CreatureObject player) {
		eligiblePlayers.drop(player);
		if (eligiblePlayers.size() < 1)
			doLotteryDraw();
	}

	public boolean containsEligiblePlayer(CreatureObject player) {
		return eligiblePlayers.contains(player);
	}

	public boolean isLotteryFinished() {
		return lotteryFinished;
	}

	public void setLotteryFinished(boolean value) {
		lotteryFinished = value;
	}

	@managedReference
	public AiAgent getCorpse() {
		return corpse;
	}

	@local
	public native void addPlayerSelections(CreatureObject player, LootLotteryBallot ballot);

	public native void doLotteryDraw();

	public native void transferLoot(GroupObject group, CreatureObject winner, SceneObject object, boolean stillGrouped);




}

