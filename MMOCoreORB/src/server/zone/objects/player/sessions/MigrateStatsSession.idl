/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions. */

package server.zone.objects.player.sessions;

import engine.log.Logger;
import engine.util.Facade;
import server.zone.objects.creature.CreatureObject;
include server.zone.objects.scene.SessionFacadeType;

class MigrateStatsSession extends Facade {
	@weakReference
	protected CreatureObject creature;
	
	@dereferenced
	protected Vector<int> attributesToModify;
	
	public MigrateStatsSession(CreatureObject parent) {
		creature = parent;
					
		Logger.setLoggingName("MigrateStatsSession");
		Logger.setLogging(false);
	
		for (int i = 0; i < 9; i = i + 1) {
			attributesToModify.add(0);
		}	
	}
	
	public int initializeSession() {
		return 0;
	}
	
	public int cancelSession() {
		CreatureObject creo = creature;
		if (creo != null) {
			creo.dropActiveSession(SessionFacadeType.MIGRATESTATS);
		}
		
		return 0;
	}
	
	public int clearSession() {
		attributesToModify.removeAll();
		
		return 0;
	}
	
	public int getAttributeToModifyCount() {
		return attributesToModify.size();
	}
	
	public void setAttributeToModify(int attribute, int value) {
		attributesToModify.set(attribute, value);
	}
	
	public int getAttribtueToModify(int attribute) {
		return attributesToModify.get(attribute);
	}
	
	public void migrateStats() {
		CreatureObject creo = creature;

		if (creo == null) {
			cancelSession();
			return;
		}

		for (int i = 0; i < 9; i = i + 1) {
			int newValue = attributesToModify.get(i);
			
			int originalAmount = creo.getBaseHAM(i);
			
			creo.setBaseHAM(i, newValue);
			creo.setHAM(i, creo.getHAM(i) + (newValue - originalAmount));
			creo.setMaxHAM(i, creo.getMaxHAM(i) + (newValue - originalAmount));
			
			//setAttributeBar(attribute, getAttribute(attribute) + (value - originalAmount));
			//setMaxAttributeBar(attribute, getAttributeMax(attribute) + (value - originalAmount), updateClient);
		}
		
		cancelSession();
	}

}
