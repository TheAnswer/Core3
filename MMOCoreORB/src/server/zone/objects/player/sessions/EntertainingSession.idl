/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions. */

package server.zone.objects.player.sessions;

import engine.log.Logger;
import engine.util.Facade;
import system.util.SortedVector;
include system.util.Vector;
include server.zone.objects.player.EntertainingDataMap;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.tangible.Instrument;
import server.zone.objects.player.events.EntertainingSessionTask;
import server.zone.objects.player.EntertainingObserver;

include system.lang.Time;

class EntertainingSession extends Facade {
	@weakReference
	protected CreatureObject entertainer;
	
	protected EntertainingObserver observer;
	
	@dereferenced
	protected EntertainingDataMap patronDataMap;
	
	@dereferenced
	protected SortedVector<CreatureObject> denyServiceList;
	
	protected transient EntertainingSessionTask tickTask;
	
	@dereferenced
	protected Time nextTick;
	
	protected int performanceIndex;
	
	protected int flourishXp;
	protected int oldFlourishXp;
	protected int healingXp;
	protected int flourishCount;
	protected int applauseCount;
	protected boolean acceptingBandFlourishes;
	
	public EntertainingSession(CreatureObject ent) {
		entertainer = ent;
		
		flourishXp = 0;
		oldFlourishXp = 0;
		healingXp = 0;
		flourishCount = 0;
		applauseCount = 0;
		performanceIndex = 0;
		
		observer = null;
		
		acceptingBandFlourishes = true;
		
		Logger.setLoggingName("EntertainingSession");
		Logger.setLogging(false);
	}
	
	public native void doEntertainerPatronEffects();
	public native void doPerformanceAction();
	public native void addEntertainerFlourishBuff();
	
	public native void startDancing(int perfIndex);
	public native void startPlayingMusic(int perfIndex, Instrument instrument);
	
	public native void startEntertaining();
	
	public void finalize() {
		//Logger.info("deleted from ram", true);
	}
	
	//heals entertainer wounds
	public native void healWounds(CreatureObject creature, float woundHeal, float shockHeal);
	public native boolean isInEntertainingBuilding(CreatureObject creature);
	
	public native void doFlourish(int flourishNumber, boolean grantXp);

	public native boolean canHealBattleFatigue();
	public native boolean canGiveEntertainBuff();

	
	public void addFlourishXp(int xp) {
		flourishXp = flourishXp + xp;
	}

	public void addHealingXp(int xp) {
		healingXp = healingXp + xp;
	}
	
	public native void addHealingXpGroup(int xp);
	
	public int initializeSession() {
		return 0;
	}
	
	public int cancelSession() {
		stopPlayingMusic();
		stopDancing();
		
		return 0;
	}
	
	public int clearSession() {
		return 0;
	}
	
	public native void stopPlayingMusic();
	public native void stopDancing();
	
	public native void activateAction();
	
	public native void startTickTask();
	
	@local
	public native void addEntertainerBuffDuration(CreatureObject creature, int performanceType, float duration);
	@local
	public native void addEntertainerBuffStrength(CreatureObject creature, int performanceType, float strength);
	
	@local
	public native void setEntertainerBuffDuration(CreatureObject creature, int performanceType, float duration);
	
	@local
	public native void setEntertainerBuffStrength(CreatureObject creature, int performanceType, float strength);
	
	public native int getEntertainerBuffStrength(CreatureObject creature, int performanceType);
	public native int getEntertainerBuffDuration(CreatureObject creature, int performanceType);
	public native int getEntertainerBuffStartTime(CreatureObject creature, int performanceType);
	
	public native void sendEntertainingUpdate(CreatureObject creature, int performanceType);
	public native void sendEntertainmentUpdate(CreatureObject creature, unsigned long entid, final string mood);
	
	public native void activateEntertainerBuff(CreatureObject creature, int performanceType);

	public native string getPerformanceName();
	
	public native void addPatron(CreatureObject creature);
	public native void removePatron(CreatureObject creature);
	
	public native boolean isDancing();
	public native boolean isPlayingMusic();
	
	public boolean isAcceptingBandFlourishes() {
		return acceptingBandFlourishes;
	}
	
	public void setAcceptingBandFlourishes(boolean val) {
		acceptingBandFlourishes = val;
	}

	public native void updateEntertainerMissionStatus(boolean entertaining, final int missionType);
	
	public boolean isInDenyServiceList(CreatureObject target) {
		return denyServiceList.contains(target);
	}
	
	public void addToDenyServiceList(CreatureObject target) {
		denyServiceList.put(target);
	}
	
	public void removeFromDenyServiceList(CreatureObject target) {
		denyServiceList.drop(target);
	}
	
	public native void increaseEntertainerBuff(CreatureObject patron);
	
	public native void awardEntertainerExperience();
	
	@local
	@dereferenced
	public native SortedVector<CreatureObject> getPatrons();
	
	public native int getAudienceSize() {
		return patronDataMap.size();
	}
	
	public native int getBandAudienceSize();
	
	public void incrementApplauseCount() {
		applauseCount++;
	}
	
	public int getApplauseCount() {
		return applauseCount;
	}
	
	public int getPerformanceIndex() {
		return performanceIndex;
	}

}
