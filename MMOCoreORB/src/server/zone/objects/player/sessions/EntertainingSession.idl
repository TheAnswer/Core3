/*
Copyright (C) 2007 <SWGEmu>

This File is part of Core3.

This program is free software; you can redistribute
it and/or modify it under the terms of the GNU Lesser
General Public License as published by the Free Software
Foundation; either version 2 of the License,
or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

Linking Engine3 statically or dynamically with other modules
is making a combined work based on Engine3.
Thus, the terms and conditions of the GNU Lesser General Public License
cover the whole combination.

In addition, as a special exception, the copyright holders of Engine3
give you permission to combine Engine3 program with free software
programs or libraries that are released under the GNU LGPL and with
code included in the standard release of Core3 under the GNU LGPL
license (or modified versions of such code, with unchanged license).
You may copy and distribute such a system following the terms of the
GNU LGPL for Engine3 and the licenses of the other code concerned,
provided that you include the source code of that other code when
and as the GNU LGPL requires distribution of source code.

Note that people who make modified versions of Engine3 are not obligated
to grant this special exception for their modified versions;
it is their choice whether to do so. The GNU Lesser General Public License
gives permission to release a modified version without this exception;
this exception also makes it possible to release a modified version
which carries forward this exception.
 */

package server.zone.objects.player.sessions;

include engine.core.ManagedObject;

import engine.log.Logger;
import engine.core.ManagedReference;
import engine.util.Facade;
import system.lang.ref.Reference;
import engine.core.Task;
import system.util.SortedVector;
include server.zone.objects.player.EntertainingData;
include server.zone.objects.player.EntertainingDataMap;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.tangible.TangibleObject;
import server.zone.objects.tangible.Instrument;
import server.zone.objects.player.events.EntertainingSessionTask;
import server.zone.objects.player.EntertainingObserver;
import server.zone.objects.tangible.Instrument;

class EntertainingSession extends Facade {
	@weakReference
	protected CreatureObject entertainer;
	
	protected EntertainingObserver observer;
	
	@dereferenced
	protected EntertainingDataMap watchers;
	
	@dereferenced
	protected EntertainingDataMap listeners;
	
	@dereferenced
	protected SortedVector<CreatureObject> denyServiceList;
	
	protected transient EntertainingSessionTask tickTask;
	
	@dereferenced
	protected Time nextTick;
	
	protected string performanceName;
	protected boolean dancing;
	protected boolean playingMusic;
	
	protected int flourishXp;
	protected int healingXp;
	protected int flourishCount;
	protected boolean acceptingBandFlourishes;
	protected boolean targetInstrument;
	protected Instrument externalInstrument;
	
	public EntertainingSession(CreatureObject ent) {
		entertainer = ent;
		
		flourishXp = 0;
		healingXp = 0;
		flourishCount = 0;
		
		observer = null;
		
		dancing = false;
		playingMusic = false;
		acceptingBandFlourishes = true;
		targetInstrument = false;
		
		watchers.setNoDuplicateInsertPlan();
		listeners.setNoDuplicateInsertPlan();
		
		Logger.setLoggingName("EntertainingSession");
		Logger.setLogging(false);
	}
	
	public native void doEntertainerPatronEffects();
	public native void doPerformanceAction();
	public native void addEntertainerFlourishBuff();
	
	public native void startDancing(final string dance, final string animation);
	public native void startPlayingMusic(final string song, final string instrumentAnimation, int instrid);
	
	public native void startEntertaining();
	
	public void finalize() {
		//Logger.info("deleted from ram", true);
	}
	
	//heals entertainer wounds
	public native void healWounds(CreatureObject creature, float woundHeal, float shockHeal);
	public native boolean isInEntertainingBuilding(CreatureObject creature);
	
	public native void doFlourish(int flourishNumber);

	public native boolean canHealBattleFatigue();
	public native boolean canGiveEntertainBuff();

	
	public void addFlourishXp(int xp) {
		flourishXp = flourishXp + xp;
	}

	public void addHealingXp(int xp) {
		healingXp = healingXp + xp;
	}
	
	public native void addHealingXpGroup(int xp);
	
	public int initializeSession() {
		return 0;
	}
	
	public int cancelSession() {
		stopPlayingMusic();
		stopDancing();
		
		return 0;
	}
	
	public int clearSession() {
		return 0;
	}
	
	public native void stopPlayingMusic();
	public native void stopDancing();
	
	public native void activateAction();
	
	public native void startTickTask();
	
	@local
	public native void addEntertainerBuffDuration(CreatureObject creature, int performanceType, float duration);
	@local
	public native void addEntertainerBuffStrength(CreatureObject creature, int performanceType, float strength);
	
	@local
	public native void setEntertainerBuffDuration(CreatureObject creature, int performanceType, float duration);
	
	@local
	public native void setEntertainerBuffStrength(CreatureObject creature, int performanceType, float strength);
	
	public native int getEntertainerBuffStrength(CreatureObject creature, int performanceType);
	public native int getEntertainerBuffDuration(CreatureObject creature, int performanceType);
	public native int getEntertainerBuffStartTime(CreatureObject creature, int performanceType);
	
	public native void sendEntertainingUpdate(CreatureObject creature, float entval, final string performance, unsigned int perfcntr, int instrid);
	public native void sendEntertainmentUpdate(CreatureObject creature, unsigned long entid, final string mood, boolean updateEntValue = false);
	
	public native void activateEntertainerBuff(CreatureObject creature, int performanceType);
	
	public native Instrument getInstrument(CreatureObject creature);

	public string getPerformanceName() {
		return performanceName;
	}
	
	public native void addWatcher(CreatureObject creature);
	public native void addListener(CreatureObject listener);
	
	public boolean isDancing() {
		return dancing;
	}
	
	public boolean isPlayingMusic() {
		return playingMusic;
	}
	
	public boolean isAcceptingBandFlourishes() {
		return acceptingBandFlourishes;
	}
	
	public void setAcceptingBandFlourishes(boolean val) {
		acceptingBandFlourishes = val;
	}
	
	public void removeWatcher(CreatureObject creature) {
		watchers.drop(creature);
	}
	
	public void removeListener(CreatureObject creature) {
		listeners.drop(creature);
	}
	
	public void setPerformanceName(final string name) {
		performanceName = name;
	}
	
	public void setDancing(boolean val) {
		dancing = val;
	}
	
	public void setTargetInstrument(boolean var) {
		targetInstrument = var;
	}
	
	public native void updateEntertainerMissionStatus(boolean entertaining, final int missionType);
	
	public boolean isInDenyServiceList(CreatureObject target) {
		return denyServiceList.contains(target);
	}
	
	public void addToDenyServiceList(CreatureObject target) {
		denyServiceList.put(target);
	}
	
	public void removeFromDenyServiceList(CreatureObject target) {
		denyServiceList.drop(target);
	}
	
	public native void increaseEntertainerBuff(CreatureObject patron);
	
	public native void awardEntertainerExperience();
}
