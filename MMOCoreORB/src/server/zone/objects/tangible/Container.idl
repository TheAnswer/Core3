/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible;

import server.zone.objects.tangible.TangibleObject;
import server.zone.objects.scene.SceneObject;
import engine.lua.LuaObject;
import server.zone.Zone;
include templates.SharedObjectTemplate;
import server.zone.objects.creature.CreatureObject;
import server.zone.packets.object.ObjectMenuResponse;

class Container extends TangibleObject {

	protected boolean locked;

	protected transient boolean relocking;

	public Container() {
		Logger.setLoggingName("Container");

		locked = false;
	}
	
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);
	public native void initializeTransientMembers();
	
	@local
	public native void notifyLoadFromDatabase();
	/**
	 * Fills the radial options, needs to be overriden
	 * @pre { this object is locked }
	 * @post { this object is locked, menuResponse is complete}
	 * @param menuResponse ObjectMenuResponse that will be sent to the client
	 */
	@local
	@dirty
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public native int handleObjectMenuSelect(CreatureObject player, byte selectedID);
	
	
	
	
	/**
	 * Evaluates if this object has the necessary free slots to be able to add the specified SceneObject
	 * @pre { this object is locked, object is locked }
	 * @post {this object is locked, object is locked }
	 * @param object SceneObject that will be checked
	 * @param error error string that the player will receive on error
	 * @return returns 0 on success, or error code
	 */
	@dirty
	public native int canAddObject(SceneObject object, int containmentType, string errorDescription);
	
	//public native void sendContainerObjectsTo(SceneObject player);
	
	@dirty
	public boolean isContainerObject() {
		return true;
	}

	@read
	public boolean isContainerLocked() {
		return locked;
	}

	public void setLockedStatus(boolean lock) {
		locked = lock;
	}
	
	@dirty
	public int getLockChance() {
		return 15;	
	}

	@dirty
	public long getLockTime() {
		return 60*30*1000;	
	}
	
	@read
	public boolean isRelocking() {
		return relocking;	
	}

	public boolean setRelockingStatus(boolean relock) {
		return relocking = relock;	
	}

}
