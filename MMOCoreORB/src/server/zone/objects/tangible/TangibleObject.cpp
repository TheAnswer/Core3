/*
 *	server/zone/objects/tangible/TangibleObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "TangibleObject.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerObject.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "server/zone/objects/factorycrate/FactoryCrate.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/tangible/threat/ThreatMap.h"

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

/*
 *	TangibleObjectStub
 */

enum {RPC_INITIALIZEMEMBERS__ = 6,RPC_APPLYSKILLMODSTO__CREATUREOBJECT_BOOL_,RPC_REMOVESKILLMODSFROM__CREATUREOBJECT_,RPC_ADDSKILLMOD__INT_STRING_INT_BOOL_,RPC_REMOVESKILLMOD__INT_STRING_INT_BOOL_,RPC_REMOVEALLSKILLMODSOFTYPE__INT_BOOL_,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_,RPC_SENDBASELINESTO__SCENEOBJECT_,RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_,RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_,RPC_SETDEFENDER__SCENEOBJECT_,RPC_ADDDEFENDER__SCENEOBJECT_,RPC_REMOVEDEFENDER__SCENEOBJECT_,RPC_REMOVEDEFENDERS__,RPC_SETCOMBATSTATE__,RPC_SETUSECOUNT__INT_BOOL_,RPC_SETCOUNTDOWNTIMER__INT_BOOL_,RPC_DECREASEUSECOUNT__,RPC_CLEARCOMBATSTATE__BOOL_,RPC_HASDEFENDER__SCENEOBJECT_,RPC_ISATTACKABLEBY__CREATUREOBJECT_,RPC_ISAGGRESSIVETO__CREATUREOBJECT_,RPC_ISHEALABLEBY__CREATUREOBJECT_,RPC_SENDPVPSTATUSTO__CREATUREOBJECT_,RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_BOOL_,RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_STRING_BOOL_,RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_,RPC_SETCONDITIONDAMAGE__FLOAT_BOOL_,RPC_SETCUSTOMIZATIONVARIABLE__BYTE_SHORT_BOOL_,RPC_SETCUSTOMIZATIONVARIABLE__STRING_SHORT_BOOL_,RPC_SETOPTIONSBITMASK__INT_BOOL_,RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_,RPC_DROPFROMDEFENDERLISTS__TANGIBLEOBJECT_,RPC_GETUNKNOWNBYTE__,RPC_ISKILLER__,RPC_ISTICKETCOLLECTOR__,RPC_ISTICKETOBJECT__,RPC_GETUSECOUNT__,RPC_GETDISPLAYEDUSECOUNT__,RPC_GETMAXCONDITION__,RPC_SETMAXCONDITION__INT_BOOL_,RPC_GETCONDITIONDAMAGE__,RPC_GETVOLUME__,RPC_SETCOMPLEXITY__FLOAT_,RPC_GETCOMPLEXITY__,RPC_GETOPTIONSBITMASK__,RPC_GETLEVEL__,RPC_GETPVPSTATUSBITMASK__,RPC_ISTANGIBLEOBJECT__,RPC_GETCUSTOMIZATIONSTRING__STRING_,RPC_GETMAINDEFENDER__,RPC_ISDESTROYED__,RPC_SETFACTION__INT_,RPC_GETFACTION__,RPC_ISREBEL__,RPC_ISIMPERIAL__,RPC_ISNEUTRAL__,RPC_ISSLICEABLE__,RPC_ISSLICED__,RPC_SETSLICEABLE__BOOL_,RPC_SETSLICED__BOOL_,RPC_ISPHARMACEUTICALOBJECT__,RPC_SETCUSTOMIZATIONSTRING__STRING_,RPC_SETPVPSTATUSBITMASK__INT_BOOL_,RPC_SETCRAFTERSNAME__STRING_,RPC_GETCRAFTERSNAME__,RPC_SETSERIALNUMBER__STRING_,RPC_SETLEVEL__INT_,RPC_GETSERIALNUMBER__,RPC_SETINITIALCRAFTINGVALUES__MANUFACTURESCHEMATIC_INT_,RPC_APPLYCOMPONENTSTATS__MANUFACTURESCHEMATIC_,RPC_CREATEFACTORYCRATE__BOOL_,RPC_CANREPAIR__CREATUREOBJECT_,RPC_REPAIR__CREATUREOBJECT_,RPC_REPAIRATTEMPT__INT_,RPC_ISBROKEN__,RPC_GETHITCHANCE__,RPC_BROADCASTPVPSTATUSBITMASK__};

TangibleObject::TangibleObject() : SceneObject(DummyConstructorParameter::instance()) {
	TangibleObjectImplementation* _implementation = new TangibleObjectImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("TangibleObject");
}

TangibleObject::TangibleObject(DummyConstructorParameter* param) : SceneObject(param) {
	_setClassName("TangibleObject");
}

TangibleObject::~TangibleObject() {
}



void TangibleObject::initializeMembers() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZEMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeMembers();
}

void TangibleObject::addTemplateSkillMods(TangibleObject* targetObject) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->addTemplateSkillMods(targetObject);
}

void TangibleObject::applySkillModsTo(CreatureObject* creature, bool doCheck) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYSKILLMODSTO__CREATUREOBJECT_BOOL_);
		method.addObjectParameter(creature);
		method.addBooleanParameter(doCheck);

		method.executeWithVoidReturn();
	} else
		_implementation->applySkillModsTo(creature, doCheck);
}

void TangibleObject::removeSkillModsFrom(CreatureObject* creature) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESKILLMODSFROM__CREATUREOBJECT_);
		method.addObjectParameter(creature);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSkillModsFrom(creature);
}

void TangibleObject::addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDSKILLMOD__INT_STRING_INT_BOOL_);
		method.addSignedIntParameter(skillType);
		method.addAsciiParameter(skillMod);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->addSkillMod(skillType, skillMod, value, notifyClient);
}

void TangibleObject::removeSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVESKILLMOD__INT_STRING_INT_BOOL_);
		method.addSignedIntParameter(skillType);
		method.addAsciiParameter(skillMod);
		method.addSignedIntParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->removeSkillMod(skillType, skillMod, value, notifyClient);
}

void TangibleObject::removeAllSkillModsOfType(const int skillType, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEALLSKILLMODSOFTYPE__INT_BOOL_);
		method.addSignedIntParameter(skillType);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->removeAllSkillModsOfType(skillType, notifyClient);
}

void TangibleObject::removeTemplateSkillMods(TangibleObject* tangibleObject) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->removeTemplateSkillMods(tangibleObject);
}

VectorMap<String, int>* TangibleObject::getTemplateSkillMods() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getTemplateSkillMods();
}

void TangibleObject::loadTemplateData(SharedObjectTemplate* templateData) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void TangibleObject::initializeTransientMembers() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void TangibleObject::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_);
		method.addUnicodeParameter(name);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomObjectName(name, notifyClient);
}

void TangibleObject::sendBaselinesTo(SceneObject* player) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDBASELINESTO__SCENEOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendBaselinesTo(player);
}

void TangibleObject::synchronizedUIListen(SceneObject* player, int value) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->synchronizedUIListen(player, value);
}

void TangibleObject::synchronizedUIStopListen(SceneObject* player, int value) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->synchronizedUIStopListen(player, value);
}

void TangibleObject::setDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEFENDER__SCENEOBJECT_);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->setDefender(defender);
}

void TangibleObject::addDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDDEFENDER__SCENEOBJECT_);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->addDefender(defender);
}

void TangibleObject::removeDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEDEFENDER__SCENEOBJECT_);
		method.addObjectParameter(defender);

		method.executeWithVoidReturn();
	} else
		_implementation->removeDefender(defender);
}

void TangibleObject::removeDefenders() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEDEFENDERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->removeDefenders();
}

void TangibleObject::setCombatState() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOMBATSTATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->setCombatState();
}

void TangibleObject::setUseCount(unsigned int newUseCount, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETUSECOUNT__INT_BOOL_);
		method.addUnsignedIntParameter(newUseCount);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setUseCount(newUseCount, notifyClient);
}

void TangibleObject::setCountdownTimer(unsigned int newCount, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOUNTDOWNTIMER__INT_BOOL_);
		method.addUnsignedIntParameter(newCount);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCountdownTimer(newCount, notifyClient);
}

void TangibleObject::decreaseUseCount() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DECREASEUSECOUNT__);

		method.executeWithVoidReturn();
	} else
		_implementation->decreaseUseCount();
}

void TangibleObject::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

void TangibleObject::clearCombatState(bool clearDefenders) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CLEARCOMBATSTATE__BOOL_);
		method.addBooleanParameter(clearDefenders);

		method.executeWithVoidReturn();
	} else
		_implementation->clearCombatState(clearDefenders);
}

bool TangibleObject::hasDefender(SceneObject* defender) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HASDEFENDER__SCENEOBJECT_);
		method.addObjectParameter(defender);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->hasDefender(defender);
}

bool TangibleObject::isAttackableBy(CreatureObject* object) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISATTACKABLEBY__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAttackableBy(object);
}

bool TangibleObject::isAggressiveTo(CreatureObject* object) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISAGGRESSIVETO__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isAggressiveTo(object);
}

bool TangibleObject::isHealableBy(CreatureObject* object) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISHEALABLEBY__CREATUREOBJECT_);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isHealableBy(object);
}

void TangibleObject::sendPvpStatusTo(CreatureObject* player) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDPVPSTATUSTO__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendPvpStatusTo(player);
}

int TangibleObject::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_BOOL_);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addFloatParameter(damage);
		method.addBooleanParameter(destroy);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

int TangibleObject::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, const String& xp, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_STRING_BOOL_);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addFloatParameter(damage);
		method.addBooleanParameter(destroy);
		method.addAsciiParameter(xp);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->inflictDamage(attacker, damageType, damage, destroy, xp, notifyClient);
}

int TangibleObject::healDamage(TangibleObject* healer, int damageType, float damageToHeal, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_);
		method.addObjectParameter(healer);
		method.addSignedIntParameter(damageType);
		method.addFloatParameter(damageToHeal);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->healDamage(healer, damageType, damageToHeal, notifyClient);
}

void TangibleObject::setConditionDamage(float condDamage, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCONDITIONDAMAGE__FLOAT_BOOL_);
		method.addFloatParameter(condDamage);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setConditionDamage(condDamage, notifyClient);
}

void TangibleObject::setCustomizationVariable(byte type, short value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMIZATIONVARIABLE__BYTE_SHORT_BOOL_);
		method.addByteParameter(type);
		method.addSignedShortParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObject::setCustomizationVariable(const String& type, short value, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMIZATIONVARIABLE__STRING_SHORT_BOOL_);
		method.addAsciiParameter(type);
		method.addSignedShortParameter(value);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObject::setOptionsBitmask(unsigned int bitmask, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETOPTIONSBITMASK__INT_BOOL_);
		method.addUnsignedIntParameter(bitmask);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setOptionsBitmask(bitmask, notifyClient);
}

void TangibleObject::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(values, firstUpdate);
}

int TangibleObject::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(condition);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObjectDestructionObservers(attacker, condition);
}

void TangibleObject::dropFromDefenderLists(TangibleObject* destructor) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DROPFROMDEFENDERLISTS__TANGIBLEOBJECT_);
		method.addObjectParameter(destructor);

		method.executeWithVoidReturn();
	} else
		_implementation->dropFromDefenderLists(destructor);
}

byte TangibleObject::getUnknownByte() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETUNKNOWNBYTE__);

		return method.executeWithByteReturn();
	} else
		return _implementation->getUnknownByte();
}

bool TangibleObject::isKiller() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISKILLER__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isKiller();
}

bool TangibleObject::isTicketCollector() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTICKETCOLLECTOR__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTicketCollector();
}

bool TangibleObject::isTicketObject() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTICKETOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTicketObject();
}

CustomizationVariables* TangibleObject::getCustomizationVariables() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getCustomizationVariables();
}

int TangibleObject::getUseCount() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETUSECOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getUseCount();
}

int TangibleObject::getDisplayedUseCount() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETDISPLAYEDUSECOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getDisplayedUseCount();
}

int TangibleObject::getMaxCondition() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAXCONDITION__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getMaxCondition();
}

void TangibleObject::setMaxCondition(int maxCond, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETMAXCONDITION__INT_BOOL_);
		method.addSignedIntParameter(maxCond);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setMaxCondition(maxCond, notifyClient);
}

int TangibleObject::getConditionDamage() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCONDITIONDAMAGE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getConditionDamage();
}

int TangibleObject::getVolume() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETVOLUME__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getVolume();
}

void TangibleObject::setComplexity(float value) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOMPLEXITY__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setComplexity(value);
}

float TangibleObject::getComplexity() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCOMPLEXITY__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getComplexity();
}

unsigned int TangibleObject::getOptionsBitmask() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETOPTIONSBITMASK__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getOptionsBitmask();
}

int TangibleObject::getLevel() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETLEVEL__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getLevel();
}

unsigned int TangibleObject::getPvpStatusBitmask() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPVPSTATUSBITMASK__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getPvpStatusBitmask();
}

bool TangibleObject::isTangibleObject() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISTANGIBLEOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isTangibleObject();
}

void TangibleObject::getCustomizationString(String& variables) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCUSTOMIZATIONSTRING__STRING_);
		method.addAsciiParameter(variables);

		method.executeWithVoidReturn();
	} else
		_implementation->getCustomizationString(variables);
}

DeltaVector<ManagedReference<SceneObject* > >* TangibleObject::getDefenderList() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getDefenderList();
}

SceneObject* TangibleObject::getMainDefender() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETMAINDEFENDER__);

		return static_cast<SceneObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getMainDefender();
}

bool TangibleObject::isDestroyed() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISDESTROYED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isDestroyed();
}

void TangibleObject::setFaction(unsigned int crc) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFACTION__INT_);
		method.addUnsignedIntParameter(crc);

		method.executeWithVoidReturn();
	} else
		_implementation->setFaction(crc);
}

unsigned int TangibleObject::getFaction() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETFACTION__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getFaction();
}

bool TangibleObject::isRebel() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISREBEL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isRebel();
}

bool TangibleObject::isImperial() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISIMPERIAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isImperial();
}

bool TangibleObject::isNeutral() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISNEUTRAL__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isNeutral();
}

bool TangibleObject::isSliceable() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSLICEABLE__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSliceable();
}

bool TangibleObject::isSliced() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISSLICED__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isSliced();
}

void TangibleObject::setSliceable(bool val) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSLICEABLE__BOOL_);
		method.addBooleanParameter(val);

		method.executeWithVoidReturn();
	} else
		_implementation->setSliceable(val);
}

void TangibleObject::setSliced(bool slice) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSLICED__BOOL_);
		method.addBooleanParameter(slice);

		method.executeWithVoidReturn();
	} else
		_implementation->setSliced(slice);
}

bool TangibleObject::isPharmaceuticalObject() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISPHARMACEUTICALOBJECT__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isPharmaceuticalObject();
}

void TangibleObject::setCustomizationString(const String& vars) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCUSTOMIZATIONSTRING__STRING_);
		method.addAsciiParameter(vars);

		method.executeWithVoidReturn();
	} else
		_implementation->setCustomizationString(vars);
}

void TangibleObject::setPvpStatusBitmask(int bitmask, bool notifyClient) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPVPSTATUSBITMASK__INT_BOOL_);
		method.addSignedIntParameter(bitmask);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		_implementation->setPvpStatusBitmask(bitmask, notifyClient);
}

void TangibleObject::setCraftersName(String& name) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCRAFTERSNAME__STRING_);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->setCraftersName(name);
}

String TangibleObject::getCraftersName() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCRAFTERSNAME__);

		String _return_getCraftersName;
		method.executeWithAsciiReturn(_return_getCraftersName);
		return _return_getCraftersName;
	} else
		return _implementation->getCraftersName();
}

void TangibleObject::setSerialNumber(const String& serial) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSERIALNUMBER__STRING_);
		method.addAsciiParameter(serial);

		method.executeWithVoidReturn();
	} else
		_implementation->setSerialNumber(serial);
}

void TangibleObject::setLevel(int lev) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETLEVEL__INT_);
		method.addSignedIntParameter(lev);

		method.executeWithVoidReturn();
	} else
		_implementation->setLevel(lev);
}

String TangibleObject::getSerialNumber() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSERIALNUMBER__);

		String _return_getSerialNumber;
		method.executeWithAsciiReturn(_return_getSerialNumber);
		return _return_getSerialNumber;
	} else
		return _implementation->getSerialNumber();
}

ThreatMap* TangibleObject::getThreatMap() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getThreatMap();
}

void TangibleObject::setInitialCraftingValues(ManufactureSchematic* manufactureSchematic, int assemblySuccess) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETINITIALCRAFTINGVALUES__MANUFACTURESCHEMATIC_INT_);
		method.addObjectParameter(manufactureSchematic);
		method.addSignedIntParameter(assemblySuccess);

		method.executeWithVoidReturn();
	} else
		_implementation->setInitialCraftingValues(manufactureSchematic, assemblySuccess);
}

bool TangibleObject::applyComponentStats(ManufactureSchematic* manufactureSchematic) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_APPLYCOMPONENTSTATS__MANUFACTURESCHEMATIC_);
		method.addObjectParameter(manufactureSchematic);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->applyComponentStats(manufactureSchematic);
}

Reference<FactoryCrate* > TangibleObject::createFactoryCrate(bool insertSelf) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEFACTORYCRATE__BOOL_);
		method.addBooleanParameter(insertSelf);

		return static_cast<FactoryCrate*>(method.executeWithObjectReturn());
	} else
		return _implementation->createFactoryCrate(insertSelf);
}

bool TangibleObject::canRepair(CreatureObject* player) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CANREPAIR__CREATUREOBJECT_);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->canRepair(player);
}

void TangibleObject::repair(CreatureObject* player) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REPAIR__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->repair(player);
}

String TangibleObject::repairAttempt(int repairChance) {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REPAIRATTEMPT__INT_);
		method.addSignedIntParameter(repairChance);

		String _return_repairAttempt;
		method.executeWithAsciiReturn(_return_repairAttempt);
		return _return_repairAttempt;
	} else
		return _implementation->repairAttempt(repairChance);
}

bool TangibleObject::isBroken() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ISBROKEN__);

		return method.executeWithBooleanReturn();
	} else
		return _implementation->isBroken();
}

float TangibleObject::getHitChance() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETHITCHANCE__);

		return method.executeWithFloatReturn();
	} else
		return _implementation->getHitChance();
}

void TangibleObject::broadcastPvpStatusBitmask() {
	TangibleObjectImplementation* _implementation = static_cast<TangibleObjectImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTPVPSTATUSBITMASK__);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastPvpStatusBitmask();
}

DistributedObjectServant* TangibleObject::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* TangibleObject::_getImplementationForRead() {
	return _impl;
}

void TangibleObject::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	TangibleObjectImplementation
 */

TangibleObjectImplementation::TangibleObjectImplementation(DummyConstructorParameter* param) : SceneObjectImplementation(param) {
	_initializeImplementation();
}


TangibleObjectImplementation::~TangibleObjectImplementation() {
}


void TangibleObjectImplementation::finalize() {
}

void TangibleObjectImplementation::_initializeImplementation() {
	_setClassHelper(TangibleObjectHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void TangibleObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<TangibleObject*>(stub);
	SceneObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TangibleObjectImplementation::_getStub() {
	return _this.get();
}

TangibleObjectImplementation::operator const TangibleObject*() {
	return _this.get();
}

void TangibleObjectImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void TangibleObjectImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void TangibleObjectImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void TangibleObjectImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void TangibleObjectImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void TangibleObjectImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void TangibleObjectImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void TangibleObjectImplementation::_serializationHelperMethod() {
	SceneObjectImplementation::_serializationHelperMethod();

	_setClassName("TangibleObject");

}

void TangibleObjectImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(TangibleObjectImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool TangibleObjectImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (SceneObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x44d211d4: //TangibleObject.targetable
		TypeInfo<bool >::parseFromBinaryStream(&targetable, stream);
		return true;

	case 0x8ac8d204: //TangibleObject.complexity
		TypeInfo<float >::parseFromBinaryStream(&complexity, stream);
		return true;

	case 0x1e059da5: //TangibleObject.volume
		TypeInfo<int >::parseFromBinaryStream(&volume, stream);
		return true;

	case 0x7aa39254: //TangibleObject.faction
		TypeInfo<unsigned int >::parseFromBinaryStream(&faction, stream);
		return true;

	case 0xb56f0247: //TangibleObject.customizationVariables
		TypeInfo<CustomizationVariables >::parseFromBinaryStream(&customizationVariables, stream);
		return true;

	case 0xa4a80d3: //TangibleObject.conditionDamage
		TypeInfo<float >::parseFromBinaryStream(&conditionDamage, stream);
		return true;

	case 0x9c2e3029: //TangibleObject.maxCondition
		TypeInfo<int >::parseFromBinaryStream(&maxCondition, stream);
		return true;

	case 0xe6b8cb07: //TangibleObject.useCount
		TypeInfo<int >::parseFromBinaryStream(&useCount, stream);
		return true;

	case 0xf479fb1c: //TangibleObject.level
		TypeInfo<short >::parseFromBinaryStream(&level, stream);
		return true;

	case 0x6352a44d: //TangibleObject.optionsBitmask
		TypeInfo<unsigned int >::parseFromBinaryStream(&optionsBitmask, stream);
		return true;

	case 0x78a68bd7: //TangibleObject.pvpStatusBitmask
		TypeInfo<unsigned int >::parseFromBinaryStream(&pvpStatusBitmask, stream);
		return true;

	case 0x3dc7630b: //TangibleObject.unknownByte
		TypeInfo<byte >::parseFromBinaryStream(&unknownByte, stream);
		return true;

	case 0xf6530d9d: //TangibleObject.craftersName
		TypeInfo<String >::parseFromBinaryStream(&craftersName, stream);
		return true;

	case 0x4f048d7d: //TangibleObject.objectSerial
		TypeInfo<String >::parseFromBinaryStream(&objectSerial, stream);
		return true;

	case 0x80b5a6a4: //TangibleObject.defenderList
		TypeInfo<DeltaVector<ManagedReference<SceneObject* > > >::parseFromBinaryStream(&defenderList, stream);
		return true;

	case 0x5e49de61: //TangibleObject.sliceable
		TypeInfo<bool >::parseFromBinaryStream(&sliceable, stream);
		return true;

	case 0x85d2a69f: //TangibleObject.sliced
		TypeInfo<bool >::parseFromBinaryStream(&sliced, stream);
		return true;

	}

	return false;
}

void TangibleObjectImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = TangibleObjectImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int TangibleObjectImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = SceneObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x44d211d4; //TangibleObject.targetable
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&targetable, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8ac8d204; //TangibleObject.complexity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&complexity, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x1e059da5; //TangibleObject.volume
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&volume, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x7aa39254; //TangibleObject.faction
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&faction, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb56f0247; //TangibleObject.customizationVariables
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<CustomizationVariables >::toBinaryStream(&customizationVariables, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa4a80d3; //TangibleObject.conditionDamage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&conditionDamage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x9c2e3029; //TangibleObject.maxCondition
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&maxCondition, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe6b8cb07; //TangibleObject.useCount
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&useCount, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf479fb1c; //TangibleObject.level
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<short >::toBinaryStream(&level, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6352a44d; //TangibleObject.optionsBitmask
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&optionsBitmask, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x78a68bd7; //TangibleObject.pvpStatusBitmask
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&pvpStatusBitmask, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x3dc7630b; //TangibleObject.unknownByte
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<byte >::toBinaryStream(&unknownByte, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf6530d9d; //TangibleObject.craftersName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&craftersName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4f048d7d; //TangibleObject.objectSerial
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&objectSerial, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x80b5a6a4; //TangibleObject.defenderList
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<DeltaVector<ManagedReference<SceneObject* > > >::toBinaryStream(&defenderList, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5e49de61; //TangibleObject.sliceable
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&sliceable, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x85d2a69f; //TangibleObject.sliced
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&sliced, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 17;
}

TangibleObjectImplementation::TangibleObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/TangibleObject.idl():  		Logger.setLoggingName("TangibleObject");
	Logger::setLoggingName("TangibleObject");
	// server/zone/objects/tangible/TangibleObject.idl():  		initializeMembers();
	initializeMembers();
}

void TangibleObjectImplementation::initializeMembers() {
	// server/zone/objects/tangible/TangibleObject.idl():  		faction = 0;
	faction = 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		level = 1;
	level = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		useCount = 1;
	useCount = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		complexity = 100.f;
	complexity = 100.f;
	// server/zone/objects/tangible/TangibleObject.idl():  		volume = 1;
	volume = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		unknownByte = 1;
	unknownByte = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		useCount = 1;
	useCount = 1;
	// server/zone/objects/tangible/TangibleObject.idl():  		conditionDamage = 0;
	conditionDamage = 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		sliceable = false;
	sliceable = false;
	// server/zone/objects/tangible/TangibleObject.idl():  		sliced = false;
	sliced = false;
	// server/zone/objects/tangible/TangibleObject.idl():  		threatMap = null;
	threatMap = NULL;
}

void TangibleObjectImplementation::applySkillModsTo(CreatureObject* creature, bool doCheck) {
}

void TangibleObjectImplementation::removeSkillModsFrom(CreatureObject* creature) {
}

void TangibleObjectImplementation::addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
}

void TangibleObjectImplementation::removeSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
}

void TangibleObjectImplementation::removeAllSkillModsOfType(const int skillType, bool notifyClient) {
}

void TangibleObjectImplementation::setCombatState() {
}

void TangibleObjectImplementation::clearCombatState(bool clearDefenders) {
	// server/zone/objects/tangible/TangibleObject.idl():  	}
	if (clearDefenders)	// server/zone/objects/tangible/TangibleObject.idl():  			removeDefenders();
	removeDefenders();
}

bool TangibleObjectImplementation::hasDefender(SceneObject* defender) {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
	for (	// server/zone/objects/tangible/TangibleObject.idl():  		for (int i = 0;
	int i = 0;
	i < (&defenderList)->size();
 ++i) {
	// server/zone/objects/tangible/TangibleObject.idl():  		}
	if ((&defenderList)->get(i) == defender)	// server/zone/objects/tangible/TangibleObject.idl():  				return true;
	return true;
}
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/tangible/TangibleObject.idl():  			if 
	if (isImperial() && !(object->isRebel()))	// server/zone/objects/tangible/TangibleObject.idl():  			return false;
	return false;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  			if 
	if (isRebel() && !(object->isImperial()))	// server/zone/objects/tangible/TangibleObject.idl():  			return false;
	return false;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  			if 
	if (object->isPlayerCreature() && object->getPlayerObject())	// server/zone/objects/tangible/TangibleObject.idl():  			if 
	if (isImperial() && (object->getPlayerObject())->getFactionStatus() == 0)	// server/zone/objects/tangible/TangibleObject.idl():  				return false;
	return false;
	// server/zone/objects/tangible/TangibleObject.idl():  			return pvpStatusBitmask & CreatureFlag.ATTACKABLE;
	if (isRebel() && (object->getPlayerObject())->getFactionStatus() == 0)	// server/zone/objects/tangible/TangibleObject.idl():  				return false;
	return false;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  			return pvpStatusBitmask & CreatureFlag.ATTACKABLE;
	return pvpStatusBitmask & CreatureFlag::ATTACKABLE;
}

bool TangibleObjectImplementation::isAggressiveTo(CreatureObject* object) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isHealableBy(CreatureObject* object) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

byte TangibleObjectImplementation::getUnknownByte() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return unknownByte;
	return unknownByte;
}

bool TangibleObjectImplementation::isKiller() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isTicketCollector() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isTicketObject() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

CustomizationVariables* TangibleObjectImplementation::getCustomizationVariables() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return customizationVariables;
	return (&customizationVariables);
}

int TangibleObjectImplementation::getUseCount() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return useCount;
	return useCount;
}

int TangibleObjectImplementation::getDisplayedUseCount() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (useCount == 1)	// server/zone/objects/tangible/TangibleObject.idl():  			return 0;
	return 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		return useCount;
	return useCount;
}

int TangibleObjectImplementation::getMaxCondition() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return maxCondition;
	return maxCondition;
}

int TangibleObjectImplementation::getConditionDamage() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return (int)conditionDamage;
	return (int) conditionDamage;
}

int TangibleObjectImplementation::getVolume() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return volume;
	return volume;
}

void TangibleObjectImplementation::setComplexity(float value) {
	// server/zone/objects/tangible/TangibleObject.idl():  		complexity = value;
	complexity = value;
}

float TangibleObjectImplementation::getComplexity() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return complexity;
	return complexity;
}

unsigned int TangibleObjectImplementation::getOptionsBitmask() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return optionsBitmask;
	return optionsBitmask;
}

int TangibleObjectImplementation::getLevel() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return level;
	return level;
}

unsigned int TangibleObjectImplementation::getPvpStatusBitmask() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return pvpStatusBitmask;
	return pvpStatusBitmask;
}

bool TangibleObjectImplementation::isTangibleObject() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return true;
	return true;
}

void TangibleObjectImplementation::getCustomizationString(String& variables) {
	// server/zone/objects/tangible/TangibleObject.idl():  		customizationVariables.getData(variables);
	(&customizationVariables)->getData(variables);
}

DeltaVector<ManagedReference<SceneObject* > >* TangibleObjectImplementation::getDefenderList() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return defenderList;
	return (&defenderList);
}

SceneObject* TangibleObjectImplementation::getMainDefender() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if ((&defenderList)->size() > 0)	// server/zone/objects/tangible/TangibleObject.idl():  			return defenderList.get(0);
	return (&defenderList)->get(0);
	// server/zone/objects/tangible/TangibleObject.idl():  		return null;
	return NULL;
}

bool TangibleObjectImplementation::isDestroyed() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return conditionDamage >= maxCondition;
	return conditionDamage >= maxCondition;
}

void TangibleObjectImplementation::setFaction(unsigned int crc) {
	// server/zone/objects/tangible/TangibleObject.idl():  		faction = crc;
	faction = crc;
}

unsigned int TangibleObjectImplementation::getFaction() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return faction;
	return faction;
}

bool TangibleObjectImplementation::isRebel() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return faction == 0x16148850;
	return faction == 0x16148850;
}

bool TangibleObjectImplementation::isImperial() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return faction == 0xDB4ACC54;
	return faction == 0xDB4ACC54;
}

bool TangibleObjectImplementation::isNeutral() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return faction == 0;
	return faction == 0;
}

bool TangibleObjectImplementation::isSliceable() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (sliced)	// server/zone/objects/tangible/TangibleObject.idl():  			return false;
	return false;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isContainerObject())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isMissionTerminal())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isWeaponObject())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isArmorObject())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (SceneObjectImplementation::gameObjectType == SceneObjectType::PLAYERLOOTCRATE)	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;

	else 	// server/zone/objects/tangible/TangibleObject.idl():  		return 
	if (isSecurityTerminal())	// server/zone/objects/tangible/TangibleObject.idl():  			return sliceable;
	return sliceable;
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

bool TangibleObjectImplementation::isSliced() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return sliced;
	return sliced;
}

void TangibleObjectImplementation::setSliceable(bool val) {
	// server/zone/objects/tangible/TangibleObject.idl():  		sliceable = val;
	sliceable = val;
}

void TangibleObjectImplementation::setSliced(bool slice) {
	// server/zone/objects/tangible/TangibleObject.idl():  		sliced = slice;
	sliced = slice;
}

bool TangibleObjectImplementation::isPharmaceuticalObject() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return false;
	return false;
}

void TangibleObjectImplementation::setCustomizationString(const String& vars) {
	// server/zone/objects/tangible/TangibleObject.idl():  		customizationVariables.parseFromClientString(vars);
	(&customizationVariables)->parseFromClientString(vars);
}

void TangibleObjectImplementation::setCraftersName(String& name) {
	// server/zone/objects/tangible/TangibleObject.idl():  		craftersName = name;
	craftersName = name;
}

String TangibleObjectImplementation::getCraftersName() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return craftersName;
	return craftersName;
}

void TangibleObjectImplementation::setLevel(int lev) {
	// server/zone/objects/tangible/TangibleObject.idl():  		level = lev;
	level = lev;
}

String TangibleObjectImplementation::getSerialNumber() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return objectSerial;
	return objectSerial;
}

String TangibleObjectImplementation::repairAttempt(int repairChance) {
	// server/zone/objects/tangible/TangibleObject.idl():  		return "Repairing is not implemented for this item";
	return "Repairing is not implemented for this item";
}

bool TangibleObjectImplementation::isBroken() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return maxCondition < 2 || getConditionDamage() >= getMaxCondition();
	return maxCondition < 2 || getConditionDamage() >= getMaxCondition();
}

float TangibleObjectImplementation::getConditionReduction(float value) {
	// server/zone/objects/tangible/TangibleObject.idl():  		float 
	if (isBroken())	// server/zone/objects/tangible/TangibleObject.idl():  			return 0.95 * value;
	return 0.95 * value;
	// server/zone/objects/tangible/TangibleObject.idl():  		float ratio = (float)getConditionDamage() / (float)getMaxCondition() * 100.0;
	float ratio = (float) getConditionDamage() / (float) getMaxCondition() * 100.0;
	// server/zone/objects/tangible/TangibleObject.idl():  		float 
	if (ratio < 75.0)	// server/zone/objects/tangible/TangibleObject.idl():  			return 0;
	return 0;
	// server/zone/objects/tangible/TangibleObject.idl():  		float reductionPercent = (ratio - 75.0) / 25.0;
	float reductionPercent = (ratio - 75.0) / 25.0;
	// server/zone/objects/tangible/TangibleObject.idl():  		return reductionPercent * value;
	return reductionPercent * value;
}

float TangibleObjectImplementation::getHitChance() {
	// server/zone/objects/tangible/TangibleObject.idl():  		return 0;
	return 0;
}

/*
 *	TangibleObjectAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


TangibleObjectAdapter::TangibleObjectAdapter(TangibleObject* obj) : SceneObjectAdapter(obj) {
}

void TangibleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZEMEMBERS__:
		{
			initializeMembers();
		}
		break;
	case RPC_APPLYSKILLMODSTO__CREATUREOBJECT_BOOL_:
		{
			applySkillModsTo(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getBooleanParameter());
		}
		break;
	case RPC_REMOVESKILLMODSFROM__CREATUREOBJECT_:
		{
			removeSkillModsFrom(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ADDSKILLMOD__INT_STRING_INT_BOOL_:
		{
			String skillMod; 
			addSkillMod(inv->getSignedIntParameter(), inv->getAsciiParameter(skillMod), inv->getSignedIntParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_REMOVESKILLMOD__INT_STRING_INT_BOOL_:
		{
			String skillMod; 
			removeSkillMod(inv->getSignedIntParameter(), inv->getAsciiParameter(skillMod), inv->getSignedIntParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_REMOVEALLSKILLMODSOFTYPE__INT_BOOL_:
		{
			removeAllSkillModsOfType(inv->getSignedIntParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_SETCUSTOMOBJECTNAME__UNICODESTRING_BOOL_:
		{
			UnicodeString name; 
			setCustomObjectName(inv->getUnicodeParameter(name), inv->getBooleanParameter());
		}
		break;
	case RPC_SENDBASELINESTO__SCENEOBJECT_:
		{
			sendBaselinesTo(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SYNCHRONIZEDUILISTEN__SCENEOBJECT_INT_:
		{
			synchronizedUIListen(static_cast<SceneObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_SYNCHRONIZEDUISTOPLISTEN__SCENEOBJECT_INT_:
		{
			synchronizedUIStopListen(static_cast<SceneObject*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_SETDEFENDER__SCENEOBJECT_:
		{
			setDefender(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ADDDEFENDER__SCENEOBJECT_:
		{
			addDefender(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVEDEFENDER__SCENEOBJECT_:
		{
			removeDefender(static_cast<SceneObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVEDEFENDERS__:
		{
			removeDefenders();
		}
		break;
	case RPC_SETCOMBATSTATE__:
		{
			setCombatState();
		}
		break;
	case RPC_SETUSECOUNT__INT_BOOL_:
		{
			setUseCount(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_SETCOUNTDOWNTIMER__INT_BOOL_:
		{
			setCountdownTimer(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_DECREASEUSECOUNT__:
		{
			decreaseUseCount();
		}
		break;
	case RPC_CLEARCOMBATSTATE__BOOL_:
		{
			clearCombatState(inv->getBooleanParameter());
		}
		break;
	case RPC_HASDEFENDER__SCENEOBJECT_:
		{
			resp->insertBoolean(hasDefender(static_cast<SceneObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_ISATTACKABLEBY__CREATUREOBJECT_:
		{
			resp->insertBoolean(isAttackableBy(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_ISAGGRESSIVETO__CREATUREOBJECT_:
		{
			resp->insertBoolean(isAggressiveTo(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_ISHEALABLEBY__CREATUREOBJECT_:
		{
			resp->insertBoolean(isHealableBy(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_SENDPVPSTATUSTO__CREATUREOBJECT_:
		{
			sendPvpStatusTo(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_BOOL_:
		{
			resp->insertSignedInt(inflictDamage(static_cast<TangibleObject*>(inv->getObjectParameter()), inv->getSignedIntParameter(), inv->getFloatParameter(), inv->getBooleanParameter(), inv->getBooleanParameter()));
		}
		break;
	case RPC_INFLICTDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_STRING_BOOL_:
		{
			String xp; 
			resp->insertSignedInt(inflictDamage(static_cast<TangibleObject*>(inv->getObjectParameter()), inv->getSignedIntParameter(), inv->getFloatParameter(), inv->getBooleanParameter(), inv->getAsciiParameter(xp), inv->getBooleanParameter()));
		}
		break;
	case RPC_HEALDAMAGE__TANGIBLEOBJECT_INT_FLOAT_BOOL_:
		{
			resp->insertSignedInt(healDamage(static_cast<TangibleObject*>(inv->getObjectParameter()), inv->getSignedIntParameter(), inv->getFloatParameter(), inv->getBooleanParameter()));
		}
		break;
	case RPC_SETCONDITIONDAMAGE__FLOAT_BOOL_:
		{
			setConditionDamage(inv->getFloatParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_SETCUSTOMIZATIONVARIABLE__BYTE_SHORT_BOOL_:
		{
			setCustomizationVariable(inv->getByteParameter(), inv->getSignedShortParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_SETCUSTOMIZATIONVARIABLE__STRING_SHORT_BOOL_:
		{
			String type; 
			setCustomizationVariable(inv->getAsciiParameter(type), inv->getSignedShortParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_SETOPTIONSBITMASK__INT_BOOL_:
		{
			setOptionsBitmask(inv->getUnsignedIntParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_NOTIFYOBJECTDESTRUCTIONOBSERVERS__TANGIBLEOBJECT_INT_:
		{
			resp->insertSignedInt(notifyObjectDestructionObservers(static_cast<TangibleObject*>(inv->getObjectParameter()), inv->getSignedIntParameter()));
		}
		break;
	case RPC_DROPFROMDEFENDERLISTS__TANGIBLEOBJECT_:
		{
			dropFromDefenderLists(static_cast<TangibleObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETUNKNOWNBYTE__:
		{
			resp->insertByte(getUnknownByte());
		}
		break;
	case RPC_ISKILLER__:
		{
			resp->insertBoolean(isKiller());
		}
		break;
	case RPC_ISTICKETCOLLECTOR__:
		{
			resp->insertBoolean(isTicketCollector());
		}
		break;
	case RPC_ISTICKETOBJECT__:
		{
			resp->insertBoolean(isTicketObject());
		}
		break;
	case RPC_GETUSECOUNT__:
		{
			resp->insertSignedInt(getUseCount());
		}
		break;
	case RPC_GETDISPLAYEDUSECOUNT__:
		{
			resp->insertSignedInt(getDisplayedUseCount());
		}
		break;
	case RPC_GETMAXCONDITION__:
		{
			resp->insertSignedInt(getMaxCondition());
		}
		break;
	case RPC_SETMAXCONDITION__INT_BOOL_:
		{
			setMaxCondition(inv->getSignedIntParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_GETCONDITIONDAMAGE__:
		{
			resp->insertSignedInt(getConditionDamage());
		}
		break;
	case RPC_GETVOLUME__:
		{
			resp->insertSignedInt(getVolume());
		}
		break;
	case RPC_SETCOMPLEXITY__FLOAT_:
		{
			setComplexity(inv->getFloatParameter());
		}
		break;
	case RPC_GETCOMPLEXITY__:
		{
			resp->insertFloat(getComplexity());
		}
		break;
	case RPC_GETOPTIONSBITMASK__:
		{
			resp->insertInt(getOptionsBitmask());
		}
		break;
	case RPC_GETLEVEL__:
		{
			resp->insertSignedInt(getLevel());
		}
		break;
	case RPC_GETPVPSTATUSBITMASK__:
		{
			resp->insertInt(getPvpStatusBitmask());
		}
		break;
	case RPC_ISTANGIBLEOBJECT__:
		{
			resp->insertBoolean(isTangibleObject());
		}
		break;
	case RPC_GETCUSTOMIZATIONSTRING__STRING_:
		{
			String variables; 
			getCustomizationString(inv->getAsciiParameter(variables));
		}
		break;
	case RPC_GETMAINDEFENDER__:
		{
			resp->insertLong(getMainDefender()->_getObjectID());
		}
		break;
	case RPC_ISDESTROYED__:
		{
			resp->insertBoolean(isDestroyed());
		}
		break;
	case RPC_SETFACTION__INT_:
		{
			setFaction(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_GETFACTION__:
		{
			resp->insertInt(getFaction());
		}
		break;
	case RPC_ISREBEL__:
		{
			resp->insertBoolean(isRebel());
		}
		break;
	case RPC_ISIMPERIAL__:
		{
			resp->insertBoolean(isImperial());
		}
		break;
	case RPC_ISNEUTRAL__:
		{
			resp->insertBoolean(isNeutral());
		}
		break;
	case RPC_ISSLICEABLE__:
		{
			resp->insertBoolean(isSliceable());
		}
		break;
	case RPC_ISSLICED__:
		{
			resp->insertBoolean(isSliced());
		}
		break;
	case RPC_SETSLICEABLE__BOOL_:
		{
			setSliceable(inv->getBooleanParameter());
		}
		break;
	case RPC_SETSLICED__BOOL_:
		{
			setSliced(inv->getBooleanParameter());
		}
		break;
	case RPC_ISPHARMACEUTICALOBJECT__:
		{
			resp->insertBoolean(isPharmaceuticalObject());
		}
		break;
	case RPC_SETCUSTOMIZATIONSTRING__STRING_:
		{
			String vars; 
			setCustomizationString(inv->getAsciiParameter(vars));
		}
		break;
	case RPC_SETPVPSTATUSBITMASK__INT_BOOL_:
		{
			setPvpStatusBitmask(inv->getSignedIntParameter(), inv->getBooleanParameter());
		}
		break;
	case RPC_SETCRAFTERSNAME__STRING_:
		{
			String name; 
			setCraftersName(inv->getAsciiParameter(name));
		}
		break;
	case RPC_GETCRAFTERSNAME__:
		{
			resp->insertAscii(getCraftersName());
		}
		break;
	case RPC_SETSERIALNUMBER__STRING_:
		{
			String serial; 
			setSerialNumber(inv->getAsciiParameter(serial));
		}
		break;
	case RPC_SETLEVEL__INT_:
		{
			setLevel(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETSERIALNUMBER__:
		{
			resp->insertAscii(getSerialNumber());
		}
		break;
	case RPC_SETINITIALCRAFTINGVALUES__MANUFACTURESCHEMATIC_INT_:
		{
			setInitialCraftingValues(static_cast<ManufactureSchematic*>(inv->getObjectParameter()), inv->getSignedIntParameter());
		}
		break;
	case RPC_APPLYCOMPONENTSTATS__MANUFACTURESCHEMATIC_:
		{
			resp->insertBoolean(applyComponentStats(static_cast<ManufactureSchematic*>(inv->getObjectParameter())));
		}
		break;
	case RPC_CREATEFACTORYCRATE__BOOL_:
		{
			resp->insertLong(createFactoryCrate(inv->getBooleanParameter())->_getObjectID());
		}
		break;
	case RPC_CANREPAIR__CREATUREOBJECT_:
		{
			resp->insertBoolean(canRepair(static_cast<CreatureObject*>(inv->getObjectParameter())));
		}
		break;
	case RPC_REPAIR__CREATUREOBJECT_:
		{
			repair(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REPAIRATTEMPT__INT_:
		{
			resp->insertAscii(repairAttempt(inv->getSignedIntParameter()));
		}
		break;
	case RPC_ISBROKEN__:
		{
			resp->insertBoolean(isBroken());
		}
		break;
	case RPC_GETHITCHANCE__:
		{
			resp->insertFloat(getHitChance());
		}
		break;
	case RPC_BROADCASTPVPSTATUSBITMASK__:
		{
			broadcastPvpStatusBitmask();
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void TangibleObjectAdapter::initializeMembers() {
	(static_cast<TangibleObject*>(stub))->initializeMembers();
}

void TangibleObjectAdapter::applySkillModsTo(CreatureObject* creature, bool doCheck) {
	(static_cast<TangibleObject*>(stub))->applySkillModsTo(creature, doCheck);
}

void TangibleObjectAdapter::removeSkillModsFrom(CreatureObject* creature) {
	(static_cast<TangibleObject*>(stub))->removeSkillModsFrom(creature);
}

void TangibleObjectAdapter::addSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->addSkillMod(skillType, skillMod, value, notifyClient);
}

void TangibleObjectAdapter::removeSkillMod(const int skillType, const String& skillMod, int value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->removeSkillMod(skillType, skillMod, value, notifyClient);
}

void TangibleObjectAdapter::removeAllSkillModsOfType(const int skillType, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->removeAllSkillModsOfType(skillType, notifyClient);
}

void TangibleObjectAdapter::initializeTransientMembers() {
	(static_cast<TangibleObject*>(stub))->initializeTransientMembers();
}

void TangibleObjectAdapter::setCustomObjectName(const UnicodeString& name, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setCustomObjectName(name, notifyClient);
}

void TangibleObjectAdapter::sendBaselinesTo(SceneObject* player) {
	(static_cast<TangibleObject*>(stub))->sendBaselinesTo(player);
}

void TangibleObjectAdapter::synchronizedUIListen(SceneObject* player, int value) {
	(static_cast<TangibleObject*>(stub))->synchronizedUIListen(player, value);
}

void TangibleObjectAdapter::synchronizedUIStopListen(SceneObject* player, int value) {
	(static_cast<TangibleObject*>(stub))->synchronizedUIStopListen(player, value);
}

void TangibleObjectAdapter::setDefender(SceneObject* defender) {
	(static_cast<TangibleObject*>(stub))->setDefender(defender);
}

void TangibleObjectAdapter::addDefender(SceneObject* defender) {
	(static_cast<TangibleObject*>(stub))->addDefender(defender);
}

void TangibleObjectAdapter::removeDefender(SceneObject* defender) {
	(static_cast<TangibleObject*>(stub))->removeDefender(defender);
}

void TangibleObjectAdapter::removeDefenders() {
	(static_cast<TangibleObject*>(stub))->removeDefenders();
}

void TangibleObjectAdapter::setCombatState() {
	(static_cast<TangibleObject*>(stub))->setCombatState();
}

void TangibleObjectAdapter::setUseCount(unsigned int newUseCount, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setUseCount(newUseCount, notifyClient);
}

void TangibleObjectAdapter::setCountdownTimer(unsigned int newCount, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setCountdownTimer(newCount, notifyClient);
}

void TangibleObjectAdapter::decreaseUseCount() {
	(static_cast<TangibleObject*>(stub))->decreaseUseCount();
}

void TangibleObjectAdapter::clearCombatState(bool clearDefenders) {
	(static_cast<TangibleObject*>(stub))->clearCombatState(clearDefenders);
}

bool TangibleObjectAdapter::hasDefender(SceneObject* defender) {
	return (static_cast<TangibleObject*>(stub))->hasDefender(defender);
}

bool TangibleObjectAdapter::isAttackableBy(CreatureObject* object) {
	return (static_cast<TangibleObject*>(stub))->isAttackableBy(object);
}

bool TangibleObjectAdapter::isAggressiveTo(CreatureObject* object) {
	return (static_cast<TangibleObject*>(stub))->isAggressiveTo(object);
}

bool TangibleObjectAdapter::isHealableBy(CreatureObject* object) {
	return (static_cast<TangibleObject*>(stub))->isHealableBy(object);
}

void TangibleObjectAdapter::sendPvpStatusTo(CreatureObject* player) {
	(static_cast<TangibleObject*>(stub))->sendPvpStatusTo(player);
}

int TangibleObjectAdapter::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, bool notifyClient) {
	return (static_cast<TangibleObject*>(stub))->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

int TangibleObjectAdapter::inflictDamage(TangibleObject* attacker, int damageType, float damage, bool destroy, const String& xp, bool notifyClient) {
	return (static_cast<TangibleObject*>(stub))->inflictDamage(attacker, damageType, damage, destroy, xp, notifyClient);
}

int TangibleObjectAdapter::healDamage(TangibleObject* healer, int damageType, float damageToHeal, bool notifyClient) {
	return (static_cast<TangibleObject*>(stub))->healDamage(healer, damageType, damageToHeal, notifyClient);
}

void TangibleObjectAdapter::setConditionDamage(float condDamage, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setConditionDamage(condDamage, notifyClient);
}

void TangibleObjectAdapter::setCustomizationVariable(byte type, short value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObjectAdapter::setCustomizationVariable(const String& type, short value, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setCustomizationVariable(type, value, notifyClient);
}

void TangibleObjectAdapter::setOptionsBitmask(unsigned int bitmask, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setOptionsBitmask(bitmask, notifyClient);
}

int TangibleObjectAdapter::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	return (static_cast<TangibleObject*>(stub))->notifyObjectDestructionObservers(attacker, condition);
}

void TangibleObjectAdapter::dropFromDefenderLists(TangibleObject* destructor) {
	(static_cast<TangibleObject*>(stub))->dropFromDefenderLists(destructor);
}

byte TangibleObjectAdapter::getUnknownByte() {
	return (static_cast<TangibleObject*>(stub))->getUnknownByte();
}

bool TangibleObjectAdapter::isKiller() {
	return (static_cast<TangibleObject*>(stub))->isKiller();
}

bool TangibleObjectAdapter::isTicketCollector() {
	return (static_cast<TangibleObject*>(stub))->isTicketCollector();
}

bool TangibleObjectAdapter::isTicketObject() {
	return (static_cast<TangibleObject*>(stub))->isTicketObject();
}

int TangibleObjectAdapter::getUseCount() {
	return (static_cast<TangibleObject*>(stub))->getUseCount();
}

int TangibleObjectAdapter::getDisplayedUseCount() {
	return (static_cast<TangibleObject*>(stub))->getDisplayedUseCount();
}

int TangibleObjectAdapter::getMaxCondition() {
	return (static_cast<TangibleObject*>(stub))->getMaxCondition();
}

void TangibleObjectAdapter::setMaxCondition(int maxCond, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setMaxCondition(maxCond, notifyClient);
}

int TangibleObjectAdapter::getConditionDamage() {
	return (static_cast<TangibleObject*>(stub))->getConditionDamage();
}

int TangibleObjectAdapter::getVolume() {
	return (static_cast<TangibleObject*>(stub))->getVolume();
}

void TangibleObjectAdapter::setComplexity(float value) {
	(static_cast<TangibleObject*>(stub))->setComplexity(value);
}

float TangibleObjectAdapter::getComplexity() {
	return (static_cast<TangibleObject*>(stub))->getComplexity();
}

unsigned int TangibleObjectAdapter::getOptionsBitmask() {
	return (static_cast<TangibleObject*>(stub))->getOptionsBitmask();
}

int TangibleObjectAdapter::getLevel() {
	return (static_cast<TangibleObject*>(stub))->getLevel();
}

unsigned int TangibleObjectAdapter::getPvpStatusBitmask() {
	return (static_cast<TangibleObject*>(stub))->getPvpStatusBitmask();
}

bool TangibleObjectAdapter::isTangibleObject() {
	return (static_cast<TangibleObject*>(stub))->isTangibleObject();
}

void TangibleObjectAdapter::getCustomizationString(String& variables) {
	(static_cast<TangibleObject*>(stub))->getCustomizationString(variables);
}

SceneObject* TangibleObjectAdapter::getMainDefender() {
	return (static_cast<TangibleObject*>(stub))->getMainDefender();
}

bool TangibleObjectAdapter::isDestroyed() {
	return (static_cast<TangibleObject*>(stub))->isDestroyed();
}

void TangibleObjectAdapter::setFaction(unsigned int crc) {
	(static_cast<TangibleObject*>(stub))->setFaction(crc);
}

unsigned int TangibleObjectAdapter::getFaction() {
	return (static_cast<TangibleObject*>(stub))->getFaction();
}

bool TangibleObjectAdapter::isRebel() {
	return (static_cast<TangibleObject*>(stub))->isRebel();
}

bool TangibleObjectAdapter::isImperial() {
	return (static_cast<TangibleObject*>(stub))->isImperial();
}

bool TangibleObjectAdapter::isNeutral() {
	return (static_cast<TangibleObject*>(stub))->isNeutral();
}

bool TangibleObjectAdapter::isSliceable() {
	return (static_cast<TangibleObject*>(stub))->isSliceable();
}

bool TangibleObjectAdapter::isSliced() {
	return (static_cast<TangibleObject*>(stub))->isSliced();
}

void TangibleObjectAdapter::setSliceable(bool val) {
	(static_cast<TangibleObject*>(stub))->setSliceable(val);
}

void TangibleObjectAdapter::setSliced(bool slice) {
	(static_cast<TangibleObject*>(stub))->setSliced(slice);
}

bool TangibleObjectAdapter::isPharmaceuticalObject() {
	return (static_cast<TangibleObject*>(stub))->isPharmaceuticalObject();
}

void TangibleObjectAdapter::setCustomizationString(const String& vars) {
	(static_cast<TangibleObject*>(stub))->setCustomizationString(vars);
}

void TangibleObjectAdapter::setPvpStatusBitmask(int bitmask, bool notifyClient) {
	(static_cast<TangibleObject*>(stub))->setPvpStatusBitmask(bitmask, notifyClient);
}

void TangibleObjectAdapter::setCraftersName(String& name) {
	(static_cast<TangibleObject*>(stub))->setCraftersName(name);
}

String TangibleObjectAdapter::getCraftersName() {
	return (static_cast<TangibleObject*>(stub))->getCraftersName();
}

void TangibleObjectAdapter::setSerialNumber(const String& serial) {
	(static_cast<TangibleObject*>(stub))->setSerialNumber(serial);
}

void TangibleObjectAdapter::setLevel(int lev) {
	(static_cast<TangibleObject*>(stub))->setLevel(lev);
}

String TangibleObjectAdapter::getSerialNumber() {
	return (static_cast<TangibleObject*>(stub))->getSerialNumber();
}

void TangibleObjectAdapter::setInitialCraftingValues(ManufactureSchematic* manufactureSchematic, int assemblySuccess) {
	(static_cast<TangibleObject*>(stub))->setInitialCraftingValues(manufactureSchematic, assemblySuccess);
}

bool TangibleObjectAdapter::applyComponentStats(ManufactureSchematic* manufactureSchematic) {
	return (static_cast<TangibleObject*>(stub))->applyComponentStats(manufactureSchematic);
}

Reference<FactoryCrate* > TangibleObjectAdapter::createFactoryCrate(bool insertSelf) {
	return (static_cast<TangibleObject*>(stub))->createFactoryCrate(insertSelf);
}

bool TangibleObjectAdapter::canRepair(CreatureObject* player) {
	return (static_cast<TangibleObject*>(stub))->canRepair(player);
}

void TangibleObjectAdapter::repair(CreatureObject* player) {
	(static_cast<TangibleObject*>(stub))->repair(player);
}

String TangibleObjectAdapter::repairAttempt(int repairChance) {
	return (static_cast<TangibleObject*>(stub))->repairAttempt(repairChance);
}

bool TangibleObjectAdapter::isBroken() {
	return (static_cast<TangibleObject*>(stub))->isBroken();
}

float TangibleObjectAdapter::getHitChance() {
	return (static_cast<TangibleObject*>(stub))->getHitChance();
}

void TangibleObjectAdapter::broadcastPvpStatusBitmask() {
	(static_cast<TangibleObject*>(stub))->broadcastPvpStatusBitmask();
}

/*
 *	TangibleObjectHelper
 */

TangibleObjectHelper* TangibleObjectHelper::staticInitializer = TangibleObjectHelper::instance();

TangibleObjectHelper::TangibleObjectHelper() {
	className = "TangibleObject";

	Core::getObjectBroker()->registerClass(className, this);
}

void TangibleObjectHelper::finalizeHelper() {
	TangibleObjectHelper::finalize();
}

DistributedObject* TangibleObjectHelper::instantiateObject() {
	return new TangibleObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* TangibleObjectHelper::instantiateServant() {
	return new TangibleObjectImplementation();
}

DistributedObjectAdapter* TangibleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TangibleObjectAdapter(static_cast<TangibleObject*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

