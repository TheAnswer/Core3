/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.
*/

package server.zone.objects.tangible;

import server.zone.objects.tangible.TangibleObject;
import server.zone.objects.tangible.DespawnLairOnPlayerDisappear;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.area.space.SpaceActiveArea;

include server.zone.CloseObjectsVector;
import server.zone.TreeEntry;
include system.thread.atomic.AtomicInteger;
include engine.log.Logger;

@json
class SpaceSpawner extends TangibleObject {
	@dereferenced
	protected transient AtomicInteger numberOfPlayersInRange;
	protected boolean despawnOnNoPlayersInRange;
	protected boolean shouldFlatten;

	protected transient DespawnLairOnPlayerDisappear despawnEvent;

	@weakReference
	protected transient SpaceActiveArea spaceArea;

	public SpaceSpawner() {
		Logger.setLoggingName("SpaceSpawner");

		super.closeobjects = new CloseObjectsVector();
		super.closeobjects.setNoDuplicateInsertPlan();

		despawnOnNoPlayersInRange = false;
		shouldFlatten = false;
	}

	@dirty
	public int getNumberOfPlayersInRange() {
		return numberOfPlayersInRange.get();
	}

	@read
	public boolean getDespawnOnNoPlayersInRange() {
		return despawnOnNoPlayersInRange;
	}

	@preLocked
	public void setDespawnOnNoPlayersInRange(boolean b) {
		despawnOnNoPlayersInRange = b;
	}

	public native void notifyInsert(TreeEntry entry);

	public native void notifyDissapear(TreeEntry entry);

	public void activateDespawnEvent() {
		if (despawnEvent) {
			return;
		}

		despawnEvent = new DespawnLairOnPlayerDisappear(this);
		despawnEvent.schedule(300000);
	}

	public void clearDespawnEvent() {
		if (!despawnEvent)
			return;

		despawnEvent.cancel();
		despawnEvent = null;
	}

	@dirty
	public boolean isSpaceSpawner() {
		return true;
	}

	@preLocked
	public void setSpaceArea(SpaceActiveArea area) {
		spaceArea = area;
	}

	@weakReference
	public SpaceActiveArea getSpaceActiveArea() {
		return spaceArea;
	}
}
