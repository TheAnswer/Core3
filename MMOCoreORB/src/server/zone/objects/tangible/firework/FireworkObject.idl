/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.firework;

import server.zone.objects.tangible.TangibleObject;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
include templates.SharedObjectTemplate;

class FireworkObject extends TangibleObject {	
	protected string fireworkObject;
	protected int delay;
	
	protected boolean isShow;
	protected int capacity;
	
	public FireworkObject() {
		Logger.setLoggingName("FireworkObject");

		fireworkObject = "object/static/firework/fx_01.iff";
		
		delay = 0;
		capacity = 2;

		isShow = false;
	}
	
	public void initializeTransientMembers() {
		super.initializeTransientMembers();
		
		Logger.setLoggingName("FireworkObject");
	}
	
	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);
	
	@local
	public abstract native void updateCraftingValues(CraftingValues values, boolean firstUpdate);
	
	@dirty
	public native void fillAttributeList(AttributeListMessage alm, CreatureObject object);

	public native void destroyObjectFromDatabase(boolean destroyContainedObjects);
	
	public native void launch(CreatureObject player, int removeTime = 30);
	 
	public native void completeLaunch(CreatureObject player, int removeDelay);

	public native void beginShowLaunch(CreatureObject player);
	
	@dirty
	public native int getDisplayedUseCount();
	
	public void setDelay(int d) {
		delay = d;
	}
	
	@read
	public int getDelay() {
		return delay;
	}

	@read
	public int getCapacity() {
		return capacity;
	}
	
	@read
	public string getFireworkObjectPath() {
		return fireworkObject;
	}
	
	@dirty
	public boolean isFireworkObject() {
		return true;
	}

	@dirty
	public boolean isFireworkShow() {
		return isShow;
	}
}
