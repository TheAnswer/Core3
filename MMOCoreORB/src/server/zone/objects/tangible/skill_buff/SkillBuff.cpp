/*
 *	server/zone/objects/tangible/skill_buff/SkillBuff.cpp generated by engine3 IDL compiler 0.60
 */

#include "SkillBuff.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

/*
 *	SkillBuffStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,};

SkillBuff::SkillBuff() : TangibleObject(DummyConstructorParameter::instance()) {
	SkillBuffImplementation* _implementation = new SkillBuffImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SkillBuff");
}

SkillBuff::SkillBuff(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("SkillBuff");
}

SkillBuff::~SkillBuff() {
}



void SkillBuff::initializeTransientMembers() {
	SkillBuffImplementation* _implementation = static_cast<SkillBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

int SkillBuff::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	SkillBuffImplementation* _implementation = static_cast<SkillBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void SkillBuff::loadTemplateData(SharedObjectTemplate* templateData) {
	SkillBuffImplementation* _implementation = static_cast<SkillBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void SkillBuff::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	SkillBuffImplementation* _implementation = static_cast<SkillBuffImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

DistributedObjectServant* SkillBuff::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SkillBuff::_getImplementationForRead() {
	return _impl;
}

void SkillBuff::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SkillBuffImplementation
 */

SkillBuffImplementation::SkillBuffImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


SkillBuffImplementation::~SkillBuffImplementation() {
}


void SkillBuffImplementation::finalize() {
}

void SkillBuffImplementation::_initializeImplementation() {
	_setClassHelper(SkillBuffHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SkillBuffImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SkillBuff*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* SkillBuffImplementation::_getStub() {
	return _this.get();
}

SkillBuffImplementation::operator const SkillBuff*() {
	return _this.get();
}

void SkillBuffImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SkillBuffImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SkillBuffImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SkillBuffImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SkillBuffImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SkillBuffImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SkillBuffImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SkillBuffImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("SkillBuff");

}

void SkillBuffImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SkillBuffImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SkillBuffImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xe4627961: //SkillBuff.duration
		TypeInfo<int >::parseFromBinaryStream(&duration, stream);
		return true;

	case 0xe3ca91b5: //SkillBuff.quantity
		TypeInfo<int >::parseFromBinaryStream(&quantity, stream);
		return true;

	case 0x100d4f7: //SkillBuff.modifiers
		TypeInfo<VectorMap<String, float> >::parseFromBinaryStream(&modifiers, stream);
		return true;

	case 0xc514907e: //SkillBuff.buffName
		TypeInfo<String >::parseFromBinaryStream(&buffName, stream);
		return true;

	case 0x5fbde242: //SkillBuff.buffCRC
		TypeInfo<unsigned int >::parseFromBinaryStream(&buffCRC, stream);
		return true;

	}

	return false;
}

void SkillBuffImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SkillBuffImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SkillBuffImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xe4627961; //SkillBuff.duration
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&duration, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe3ca91b5; //SkillBuff.quantity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&quantity, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x100d4f7; //SkillBuff.modifiers
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, float> >::toBinaryStream(&modifiers, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc514907e; //SkillBuff.buffName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&buffName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5fbde242; //SkillBuff.buffCRC
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&buffCRC, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 5;
}

SkillBuffImplementation::SkillBuffImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/skill_buff/SkillBuff.idl():  		setLoggingName("SkillBuff");
	setLoggingName("SkillBuff");
	// server/zone/objects/tangible/skill_buff/SkillBuff.idl():  		duration = 300;
	duration = 300;
	// server/zone/objects/tangible/skill_buff/SkillBuff.idl():  		quantity = 1;
	quantity = 1;
	// server/zone/objects/tangible/skill_buff/SkillBuff.idl():  		modifiers.setNoDuplicateInsertPlan();
	(&modifiers)->setNoDuplicateInsertPlan();
	// server/zone/objects/tangible/skill_buff/SkillBuff.idl():  		modifiers.setNullValue(0);
	(&modifiers)->setNullValue(0);
	// server/zone/objects/tangible/skill_buff/SkillBuff.idl():  		buffCRC = 0;
	buffCRC = 0;
}

void SkillBuffImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/skill_buff/SkillBuff.idl():  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/skill_buff/SkillBuff.idl():  		Logger.setLoggingName("SkillBuff");
	Logger::setLoggingName("SkillBuff");
}

/*
 *	SkillBuffAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SkillBuffAdapter::SkillBuffAdapter(SkillBuff* obj) : TangibleObjectAdapter(obj) {
}

void SkillBuffAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void SkillBuffAdapter::initializeTransientMembers() {
	(static_cast<SkillBuff*>(stub))->initializeTransientMembers();
}

int SkillBuffAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<SkillBuff*>(stub))->handleObjectMenuSelect(player, selectedID);
}

/*
 *	SkillBuffHelper
 */

SkillBuffHelper* SkillBuffHelper::staticInitializer = SkillBuffHelper::instance();

SkillBuffHelper::SkillBuffHelper() {
	className = "SkillBuff";

	Core::getObjectBroker()->registerClass(className, this);
}

void SkillBuffHelper::finalizeHelper() {
	SkillBuffHelper::finalize();
}

DistributedObject* SkillBuffHelper::instantiateObject() {
	return new SkillBuff(DummyConstructorParameter::instance());
}

DistributedObjectServant* SkillBuffHelper::instantiateServant() {
	return new SkillBuffImplementation();
}

DistributedObjectAdapter* SkillBuffHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SkillBuffAdapter(static_cast<SkillBuff*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

