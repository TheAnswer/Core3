/*
 *	server/zone/objects/tangible/tool/recycle/RecycleTool.cpp generated by engine3 IDL compiler 0.60
 */

#include "RecycleTool.h"

#include "server/zone/objects/tangible/tool/ToolTangibleObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/Zone.h"

/*
 *	RecycleToolStub
 */

enum {RPC_INITIALIZETRANSIENTMEMBERS__ = 6,RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_,RPC_GETTOOLTYPE__,RPC_GETSELECTEDRESOURCE__,RPC_SETSELECTEDRESOURCE__INT_,RPC_GETSELECTEDTYPENAME__,RPC_SETSELECTEDTYPENAME__STRING_};

RecycleTool::RecycleTool() : Container(DummyConstructorParameter::instance()) {
	RecycleToolImplementation* _implementation = new RecycleToolImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("RecycleTool");
}

RecycleTool::RecycleTool(DummyConstructorParameter* param) : Container(param) {
	_setClassName("RecycleTool");
}

RecycleTool::~RecycleTool() {
}



void RecycleTool::initializeTransientMembers() {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void RecycleTool::loadTemplateData(SharedObjectTemplate* templateData) {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->loadTemplateData(templateData);
}

void RecycleTool::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, CreatureObject* player) {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillObjectMenuResponse(menuResponse, player);
}

int RecycleTool::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

void RecycleTool::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(values, firstUpdate);
}

int RecycleTool::getToolType() {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETTOOLTYPE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getToolType();
}

int RecycleTool::getSelectedResource() {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSELECTEDRESOURCE__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getSelectedResource();
}

void RecycleTool::setSelectedResource(int res) {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSELECTEDRESOURCE__INT_);
		method.addSignedIntParameter(res);

		method.executeWithVoidReturn();
	} else
		_implementation->setSelectedResource(res);
}

String RecycleTool::getSelectedTypeName() {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETSELECTEDTYPENAME__);

		String _return_getSelectedTypeName;
		method.executeWithAsciiReturn(_return_getSelectedTypeName);
		return _return_getSelectedTypeName;
	} else
		return _implementation->getSelectedTypeName();
}

void RecycleTool::setSelectedTypeName(String& res) {
	RecycleToolImplementation* _implementation = static_cast<RecycleToolImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSELECTEDTYPENAME__STRING_);
		method.addAsciiParameter(res);

		method.executeWithVoidReturn();
	} else
		_implementation->setSelectedTypeName(res);
}

DistributedObjectServant* RecycleTool::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* RecycleTool::_getImplementationForRead() {
	return _impl;
}

void RecycleTool::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	RecycleToolImplementation
 */

RecycleToolImplementation::RecycleToolImplementation(DummyConstructorParameter* param) : ContainerImplementation(param) {
	_initializeImplementation();
}


RecycleToolImplementation::~RecycleToolImplementation() {
}


void RecycleToolImplementation::finalize() {
}

void RecycleToolImplementation::_initializeImplementation() {
	_setClassHelper(RecycleToolHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void RecycleToolImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<RecycleTool*>(stub);
	ContainerImplementation::_setStub(stub);
}

DistributedObjectStub* RecycleToolImplementation::_getStub() {
	return _this.get();
}

RecycleToolImplementation::operator const RecycleTool*() {
	return _this.get();
}

void RecycleToolImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void RecycleToolImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void RecycleToolImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void RecycleToolImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void RecycleToolImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void RecycleToolImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void RecycleToolImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void RecycleToolImplementation::_serializationHelperMethod() {
	ContainerImplementation::_serializationHelperMethod();

	_setClassName("RecycleTool");

}

void RecycleToolImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(RecycleToolImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool RecycleToolImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ContainerImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x14ef80eb: //RecycleTool.toolType
		TypeInfo<int >::parseFromBinaryStream(&toolType, stream);
		return true;

	case 0xf1b71d17: //RecycleTool.selectedResource
		TypeInfo<int >::parseFromBinaryStream(&selectedResource, stream);
		return true;

	case 0x8af3a46a: //RecycleTool.selectedTypeName
		TypeInfo<String >::parseFromBinaryStream(&selectedTypeName, stream);
		return true;

	}

	return false;
}

void RecycleToolImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = RecycleToolImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int RecycleToolImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ContainerImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x14ef80eb; //RecycleTool.toolType
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&toolType, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf1b71d17; //RecycleTool.selectedResource
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&selectedResource, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8af3a46a; //RecycleTool.selectedTypeName
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&selectedTypeName, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 3;
}

RecycleToolImplementation::RecycleToolImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/tool/recycle/RecycleTool.idl():  		Logger.setLoggingName("RecycleTool");
	Logger::setLoggingName("RecycleTool");
	// server/zone/objects/tangible/tool/recycle/RecycleTool.idl():  		selectedResource = -1;
	selectedResource = -1;
	// server/zone/objects/tangible/tool/recycle/RecycleTool.idl():  		selectedTypeName = "";
	selectedTypeName = "";
}

void RecycleToolImplementation::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
}

int RecycleToolImplementation::getToolType() {
	// server/zone/objects/tangible/tool/recycle/RecycleTool.idl():  		return toolType;
	return toolType;
}

int RecycleToolImplementation::getSelectedResource() {
	// server/zone/objects/tangible/tool/recycle/RecycleTool.idl():  		return selectedResource;
	return selectedResource;
}

void RecycleToolImplementation::setSelectedResource(int res) {
	// server/zone/objects/tangible/tool/recycle/RecycleTool.idl():  		selectedResource = res;
	selectedResource = res;
}

String RecycleToolImplementation::getSelectedTypeName() {
	// server/zone/objects/tangible/tool/recycle/RecycleTool.idl():  		return selectedTypeName;
	return selectedTypeName;
}

void RecycleToolImplementation::setSelectedTypeName(String& res) {
	// server/zone/objects/tangible/tool/recycle/RecycleTool.idl():  		selectedTypeName = res;
	selectedTypeName = res;
}

/*
 *	RecycleToolAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


RecycleToolAdapter::RecycleToolAdapter(RecycleTool* obj) : ContainerAdapter(obj) {
}

void RecycleToolAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	case RPC_GETTOOLTYPE__:
		{
			resp->insertSignedInt(getToolType());
		}
		break;
	case RPC_GETSELECTEDRESOURCE__:
		{
			resp->insertSignedInt(getSelectedResource());
		}
		break;
	case RPC_SETSELECTEDRESOURCE__INT_:
		{
			setSelectedResource(inv->getSignedIntParameter());
		}
		break;
	case RPC_GETSELECTEDTYPENAME__:
		{
			resp->insertAscii(getSelectedTypeName());
		}
		break;
	case RPC_SETSELECTEDTYPENAME__STRING_:
		{
			String res; 
			setSelectedTypeName(inv->getAsciiParameter(res));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void RecycleToolAdapter::initializeTransientMembers() {
	(static_cast<RecycleTool*>(stub))->initializeTransientMembers();
}

int RecycleToolAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<RecycleTool*>(stub))->handleObjectMenuSelect(player, selectedID);
}

int RecycleToolAdapter::getToolType() {
	return (static_cast<RecycleTool*>(stub))->getToolType();
}

int RecycleToolAdapter::getSelectedResource() {
	return (static_cast<RecycleTool*>(stub))->getSelectedResource();
}

void RecycleToolAdapter::setSelectedResource(int res) {
	(static_cast<RecycleTool*>(stub))->setSelectedResource(res);
}

String RecycleToolAdapter::getSelectedTypeName() {
	return (static_cast<RecycleTool*>(stub))->getSelectedTypeName();
}

void RecycleToolAdapter::setSelectedTypeName(String& res) {
	(static_cast<RecycleTool*>(stub))->setSelectedTypeName(res);
}

/*
 *	RecycleToolHelper
 */

RecycleToolHelper* RecycleToolHelper::staticInitializer = RecycleToolHelper::instance();

RecycleToolHelper::RecycleToolHelper() {
	className = "RecycleTool";

	Core::getObjectBroker()->registerClass(className, this);
}

void RecycleToolHelper::finalizeHelper() {
	RecycleToolHelper::finalize();
}

DistributedObject* RecycleToolHelper::instantiateObject() {
	return new RecycleTool(DummyConstructorParameter::instance());
}

DistributedObjectServant* RecycleToolHelper::instantiateServant() {
	return new RecycleToolImplementation();
}

DistributedObjectAdapter* RecycleToolHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RecycleToolAdapter(static_cast<RecycleTool*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

