/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.tool.smuggler;

import server.zone.objects.tangible.tool.smuggler.SlicingTool;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;

class PrecisionLaserKnife extends SlicingTool {

	protected int charges;

	public PrecisionLaserKnife() {
		setLoggingName("SlicingTool");
		
		charges = 10;
	}
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public native int handleObjectMenuSelect(CreatureObject player, byte selectedID);
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	@local
	public void updateCraftingValues(CraftingValues values, boolean firstUpdate) {
		super.setUseCount(charges);
	}

	public native void updateCharges(int val);

	public void useCharge(CreatureObject player) {
		if (player == null)
			return;

		decreaseUseCount();
		updateCharges(getUseCount());
		if (charges < 1)
			player.sendSystemMessage("@slicing/slicing:used_up_knife");
		else
			player.sendSystemMessage("@slicing/slicing:used_knife");
	}

	@dirty
	public int getCharges() {
		return charges;
	}
	
}
