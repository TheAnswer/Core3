/*
 *	server/zone/objects/tangible/tool/customize/VehicleCustomKit.cpp generated by engine3 IDL compiler 0.60
 */

#include "VehicleCustomKit.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

/*
 *	VehicleCustomKitStub
 */

enum {RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_ = 6};

VehicleCustomKit::VehicleCustomKit() : TangibleObject(DummyConstructorParameter::instance()) {
	VehicleCustomKitImplementation* _implementation = new VehicleCustomKitImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("VehicleCustomKit");
}

VehicleCustomKit::VehicleCustomKit(DummyConstructorParameter* param) : TangibleObject(param) {
	_setClassName("VehicleCustomKit");
}

VehicleCustomKit::~VehicleCustomKit() {
}



int VehicleCustomKit::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	VehicleCustomKitImplementation* _implementation = static_cast<VehicleCustomKitImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->handleObjectMenuSelect(player, selectedID);
}

DistributedObjectServant* VehicleCustomKit::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* VehicleCustomKit::_getImplementationForRead() {
	return _impl;
}

void VehicleCustomKit::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	VehicleCustomKitImplementation
 */

VehicleCustomKitImplementation::VehicleCustomKitImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


VehicleCustomKitImplementation::~VehicleCustomKitImplementation() {
}


void VehicleCustomKitImplementation::finalize() {
}

void VehicleCustomKitImplementation::_initializeImplementation() {
	_setClassHelper(VehicleCustomKitHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void VehicleCustomKitImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<VehicleCustomKit*>(stub);
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* VehicleCustomKitImplementation::_getStub() {
	return _this.get();
}

VehicleCustomKitImplementation::operator const VehicleCustomKit*() {
	return _this.get();
}

void VehicleCustomKitImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void VehicleCustomKitImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void VehicleCustomKitImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void VehicleCustomKitImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void VehicleCustomKitImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void VehicleCustomKitImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void VehicleCustomKitImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void VehicleCustomKitImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("VehicleCustomKit");

}

void VehicleCustomKitImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(VehicleCustomKitImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool VehicleCustomKitImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (TangibleObjectImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	}

	return false;
}

void VehicleCustomKitImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = VehicleCustomKitImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int VehicleCustomKitImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = TangibleObjectImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;

	return _count + 0;
}

VehicleCustomKitImplementation::VehicleCustomKitImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/tool/customize/VehicleCustomKit.idl():  		setLoggingName("VehicleCustomKit");
	setLoggingName("VehicleCustomKit");
}

/*
 *	VehicleCustomKitAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


VehicleCustomKitAdapter::VehicleCustomKitAdapter(VehicleCustomKit* obj) : TangibleObjectAdapter(obj) {
}

void VehicleCustomKitAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_HANDLEOBJECTMENUSELECT__CREATUREOBJECT_BYTE_:
		{
			resp->insertSignedInt(handleObjectMenuSelect(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getByteParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

int VehicleCustomKitAdapter::handleObjectMenuSelect(CreatureObject* player, byte selectedID) {
	return (static_cast<VehicleCustomKit*>(stub))->handleObjectMenuSelect(player, selectedID);
}

/*
 *	VehicleCustomKitHelper
 */

VehicleCustomKitHelper* VehicleCustomKitHelper::staticInitializer = VehicleCustomKitHelper::instance();

VehicleCustomKitHelper::VehicleCustomKitHelper() {
	className = "VehicleCustomKit";

	Core::getObjectBroker()->registerClass(className, this);
}

void VehicleCustomKitHelper::finalizeHelper() {
	VehicleCustomKitHelper::finalize();
}

DistributedObject* VehicleCustomKitHelper::instantiateObject() {
	return new VehicleCustomKit(DummyConstructorParameter::instance());
}

DistributedObjectServant* VehicleCustomKitHelper::instantiateServant() {
	return new VehicleCustomKitImplementation();
}

DistributedObjectAdapter* VehicleCustomKitHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new VehicleCustomKitAdapter(static_cast<VehicleCustomKit*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

