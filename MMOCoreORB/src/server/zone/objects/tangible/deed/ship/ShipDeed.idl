/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.deed;

import server.zone.objects.tangible.deed.Deed;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.packets.object.ObjectMenuResponse;
import server.zone.objects.creature.CreatureObject;
include templates.SharedObjectTemplate;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
import system.util.Vector;

@lua
@json
class ShipDeed extends Deed {
	protected string controlDeviceTemplate;

	protected float hitPointsDamage;
	protected float maxHitPoints;

	protected float mass;

	protected string certRequired;
	protected string parkingLocation;

	@dereferenced
	private Vector<string> skillsRequired;

	protected int shipType;
	protected boolean createComponents;

	public ShipDeed() {
		Logger.setLoggingName("ShipDeed");

		controlDeviceTemplate = "";

		hitPointsDamage = 0.0f;
		maxHitPoints = 0.0f;
		mass = 0.0f;

		certRequired = "pilot_rebel_navy_novice";
		parkingLocation = "theed_starport";

		shipType = 0;
		createComponents = false;
	}

	public native void initializeTransientMembers();

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);

	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage alm, CreatureObject object);

	@local
	@dirty
	public native abstract void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);

	@local
	@dirty
	@preLocked
	@arg1preLocked
	public native abstract int handleObjectMenuSelect(CreatureObject player, byte selectedID);

	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate);

	// Setters
	@preLocked
	public void setControlDeviceTemplate(string templateString) {
		controlDeviceTemplate = templateString;
	}

	@preLocked
	public void setHitPointsDamage(float value) {
		hitPointsDamage = value;
	}

	@preLocked
	public void setMaxHitPoints(float value) {
		maxHitPoints = value;
	}

	@preLocked
	public void setMass(float value) {
		mass = value;
	}

	@preLocked
	public void setCertificationRequired(string cert) {
		certRequired = cert;
	}

	@preLocked
	public void setParkingLocation(string loc) {
		parkingLocation = loc;
	}

	@local
	@preLocked
	public void setShipType(int type) {
		shipType = type;
	}

	@preLocked
	public void setCreateComponents(boolean val) {
		createComponents = val;
	}

	public void addSkillRequired(string skill) {
		skillsRequired.add(skill);
	}

	// Getters
	@read
	public string getControlDeviceTemplate() {
		return controlDeviceTemplate;
	}

	@read
	public float getHitPointsDamage() {
		return hitPointsDamage;
	}

	@read
	public float getMaxHitPoints() {
		return maxHitPoints;
	}

	@read
	public float getMass() {
		return mass;
	}

	@read
	public string getParkingLocaiton() {
		return parkingLocation;
	}

	@read
	public string getCertificationRequired() {
		return certRequired;
	}

	public int getTotalSkillsRequired() {
		return skillsRequired.size();
	}

	public string getSkillRequired(int index) {
		return skillsRequired.get(index);
	}

	public boolean shouldCreateComponents() {
		return createComponents;
	}

	@read
	public int getShipType() {
		return shipType;
	}

	@dirty
	public boolean isShipDeedObject() {
		return true;
	}
}