/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.tangible.deed.pet;

import engine.lua.LuaObject;
import server.zone.objects.tangible.TangibleObject;
import server.zone.objects.tangible.deed.Deed;
import server.zone.Zone;
import server.zone.packets.object.ObjectMenuResponse;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
include server.zone.objects.creature.variables.CreatureAttackMap;
import server.zone.templates.SharedObjectTemplate;

class PetDeed extends Deed {
	// Pet Level
	protected int level;
	// Crafted pets have their own attack speed and chance to hit
	protected float chanceHit;
	protected float attackSpeed;
	// Damage min/mac for the pet
	protected int damageMin;	
	protected int damageMax;
	// Armor value of the pet
	protected int armor;
	// resists of the pet
	protected float kinResist;
	protected float energyResist;
	protected float blastResist;
	protected float coldResist;
	protected float heatResist;
	protected float elecResist;
	protected float acidResist;
	protected float stunResist;
	protected float saberResist;
	// ham of the pet
	protected int health;
	protected int action;
	protected int mind;
	// specials
	protected string special1;
	protected string special2;
	protected boolean ranged;
		
	protected string controlDeviceObjectTemplate;
	protected string mobileTemplate;
	
	@dereferenced
	protected CreatureAttackMap attacks;
	
	public PetDeed() {
		Logger.setLoggingName("PetDeed");
		damageMin = 20;
		damageMax = 20;
		armor = 0;
		kinResist = 0;
		blastResist = 0;
		coldResist = 0;
		heatResist = 0;
		elecResist = 0;
		acidResist = 0;
		stunResist = 0;
		saberResist = -1;
		health = 10;
		action = 10;
		mind = 10;
		special1 = "none";
		special2 = "none";
		ranged = false;
		chanceHit = 0;
		attackSpeed = 0;
		level = 1;
	}
	
	public native void initializeTransientMembers();
	
	@local
	public native CreatureAttackMap getAttacks();
	
	@dirty
	public int getLevel() { 
		return level; 
	}
	
	@dirty
	public float getAttackSpeed() { 
		return attackSpeed; 
	}

	@dirty
	public float getHitChance() { 
		return chanceHit; 
	}

	@dirty
	public int getHealth() { 
		return health; 
	}

	@dirty
	public int getAction() { 
		return action; 
	}

	@dirty
	public int getMind() { 
		return mind; 
	}

	@dirty
	public int getMinDamage() { 
		return damageMin; 
	}

	@dirty
	public int getMaxDamage() { 
		return damageMax; 
	}

	@dirty
	public float getKinetic() { 
		return kinResist; 
	}

	@dirty
	public float getEnergy() { 
		return energyResist; 
	}

	@dirty
	public float getBlast() { 
		return blastResist; 
	}

	@dirty
	public float getCold() { 
		return coldResist; 
	}

	@dirty
	public float getHeat() { 
		return heatResist; 
	}

	@dirty
	public float getElectric() { 
		return elecResist; 
	}

	@dirty
	public float getAcid() { 
		return acidResist; 
	}

	@dirty
	public float getStun() { 
		return stunResist; 
	}

	@dirty
	public float getSaber() { 
		return saberResist; 
	}

	@dirty
	public boolean getRanged() { 
		return ranged; 
	}

	@dirty
	public int getArmor() { 
		return armor; 
	}
	
	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);
	
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage alm, CreatureObject object);
	
	@local
	@dirty
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);
	
	/**
	 * Handles the radial selection sent by the client
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @returns 0 if successfull
	 */
	public native int handleObjectMenuSelect(CreatureObject player, byte selectedID);
	
	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate);
	
	@dirty
	public boolean isPetDeedObject() {
		return true;
	}	
}
