/*
			Copyright <SWGEmu>
	See file COPYING for copying conditions.
*/

package server.zone.objects.tangible.misc;

import server.zone.objects.tangible.TangibleObject;
import server.zone.packets.object.ObjectMenuResponse;
import server.zone.objects.creature.CreatureObject;
import server.zone.packets.scene.AttributeListMessage;
import engine.log.Logger;

include system.lang.ref.Reference;
include system.lang.Time;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include server.zone.TreeEntry;

@json
class LightObject extends TangibleObject {
	public static final unsigned int LIFESPAN_CANDLE_MIN = 604800; // 7 days in seconds
	public static final unsigned int LIFESPAN_CANDLE_MAX = 1814400; // 21 days in seconds

	public static final unsigned int LIFESPAN_LAMP_MIN = 1814400; // 21 days in seconds
	public static final unsigned int LIFESPAN_LAMP_MAX = 3628800; // 42 days in seconds

	@dereferenced
	protected Time lifespan;
	@dereferenced
	protected Time lastDecay;

	boolean burntOut;
	boolean firstUpdate;

	protected unsigned long creationMili;
	protected unsigned long lifespanMili;

	public LightObject() {
	}

	public native void initializeMembers();

	@local
	public native void notifyInsert(TreeEntry obj);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	@local
	public abstract native void updateCraftingValues(CraftingValues values, boolean firstUpdate);

	@local
	@preLocked
	public native void updateLifespan();

	@local
	@preLocked
	public native void updateTemplate();

	public void setBurntOut(boolean val) {
		burntOut = val;
	}

	@preLocked
	public native void calculateLifespan(float lifespanVar, boolean lamp = false);

	@local
	@dirty
	public Time getLifespan() {
		return lifespan;
	}

	public boolean isBurntOut() {
		return burntOut;
	}
}