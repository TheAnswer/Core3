/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.wearables;

import server.zone.objects.tangible.TangibleObject;
import server.zone.packets.scene.AttributeListMessage;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include server.zone.objects.tangible.attachment.Attachment;
import server.zone.objects.creature.CreatureObject;

class WearableObject extends TangibleObject {	

	protected int socketCount;
	protected boolean socketsGenerated;
	
	// TODO: remove this backwards compatibility fix at next wipe. Only usedSocketCount variable should be used.
	protected boolean objectCreatedPreUsedSocketCountFix;
	protected int usedSocketCount;
	
	protected int modsNotInSockets;
	
	public static final int MAXSOCKETS = 4;
	
	@dereferenced
	protected VectorMap<string, int> wearableSkillMods;
	
	public WearableObject() {
		socketsGenerated = false;
		socketCount = 0;
		objectCreatedPreUsedSocketCountFix = true;
		usedSocketCount = 0;
		modsNotInSockets = 0;
		wearableSkillMods.setAllowOverwriteInsertPlan();
		Logger.setLoggingName("WearableObject");
	}
	
	public native void initializeTransientMembers();
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);
	
	@local
	public native void updateCraftingValues(CraftingValues values, boolean initialUpdate);

	public native void applyAttachment(CreatureObject player, Attachment attachment);
	
	public abstract native void applySkillModsTo(CreatureObject creature);
	
	public abstract native void removeSkillModsFrom(CreatureObject creature);
	
	@dirty
	public boolean isWearableObject() {
		return true;
	}
	
	@dirty
	public native boolean isEquipped();
	
	@dirty
	public int getMaxSockets() {
		return socketCount;
	}
	
	@dirty
	public native int socketsUsed();
	
	@dirty
	public int socketsLeft() {
		return getMaxSockets() - socketsUsed();
	}

	private native void generateSockets(CraftingValues craftingValues);

	public native string repairAttempt(int repairChance);
	
	@local
	public VectorMap<string, int> getWearableSkillMods() {
		return wearableSkillMods;
	}
	
	public abstract void addSkillMod(final int skillType, final string skillMod, int value, boolean notifyClient = true) {
		if (wearableSkillMods.size() <= 6) {
			wearableSkillMods.put(skillMod, value);
			modsNotInSockets++;
		}
	}
	
	public void setMaxSockets(int maxSockets) {
		if (maxSockets < 0) {
			maxSockets = 0;
		} else if (maxSockets > MAXSOCKETS) {
			maxSockets = MAXSOCKETS;
		}
		socketCount = maxSockets;
		socketsGenerated = true;
	}
}
