/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.consumable;

import server.zone.objects.tangible.TangibleObject;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.creature.buffs.Buff;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
import system.util.VectorMap;
include templates.SharedObjectTemplate;
include system.util.Vector;

class Consumable extends TangibleObject {
	protected int duration;
	protected int filling;
	protected int nutrition;

	protected int effectType;

	@dereferenced
	protected Vector<int> eventTypes;

	protected int fillingMin;
	protected int fillingMax;
	protected int flavorMin;
	protected int flavorMax;
	protected int nutritionMin;
	protected int nutritionMax;
	protected int quantityMin;
	protected int quantityMax;

	@dereferenced
	protected VectorMap<string, float> modifiers;
	protected string buffName;
	//protected string modifierString;
	protected unsigned int  buffCRC;

	protected int consumableType;
	protected int foragedFood;

	protected string speciesRestriction;

	public static final int EFFECT_INSTANT = 0x00;
	public static final int EFFECT_ATTRIBUTE = 0x01;
	public static final int EFFECT_DURATION = 0x02;
	public static final int EFFECT_DELAYED = 0x03;
	public static final int EFFECT_SKILL = 0x04;
	public static final int EFFECT_SPICE = 0x05;
	public static final int EFFECT_HEALING = 0x06;

	public static final int FOOD = 0x01;
	public static final int DRINK = 0x10;

	public Consumable() {
		setLoggingName("PharmaceuticalObject");

		consumableType = 0;
		foragedFood = 0;

		duration = 30;
		filling = 0;
		effectType = EFFECT_ATTRIBUTE;

		fillingMin = 1;
		fillingMax = 1;
		flavorMin = 1;
		flavorMax = 1;
		nutritionMin = 1;
		nutritionMax = 1;
		quantityMin = 1;
		quantityMax = 1;

		modifiers.setNoDuplicateInsertPlan();
		modifiers.setNullValue(0);

		buffCRC = 0;
	}

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public native int handleObjectMenuSelect(CreatureObject player, byte selectedID);

	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate);

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	@arg1preLocked
	public native void setModifiers(Buff buff, boolean skillModifiers = false);

	@read
	public boolean isSpiceEffect() {
		return (effectType == EFFECT_SPICE);
	}

	@read
	public boolean isAttributeEffect() {
		return (effectType == EFFECT_ATTRIBUTE);
	}

	@dirty
	public boolean isDrink() {
		return (consumableType == DRINK);
	}

	@dirty
	public boolean isFood() {
		return (consumableType == FOOD);
	}

	@dirty
	public boolean isForagedFood() {
		return (foragedFood == 1);
	}

	@dirty
	public boolean isSpice() {
		return (isSpiceEffect() && isFood());
	}

	@dirty
	public boolean isConsumable() {
		return true;
	}

	@dirty
	public int getDuration(){
		return duration;
	}

	@dirty
	public string getSpeciesRestriction(){
		return speciesRestriction;
	}

}
