/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.pharmaceutical;

import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.tangible.pharmaceutical.PharmaceuticalObject;
include system.lang.Math;
include templates.params.creature.CreatureState;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include templates.tangible.CurePackTemplate;

class CurePack extends PharmaceuticalObject {
	protected float effectiveness;
	protected float area;
	protected unsigned long state;
	protected string commandToExecute;
	
	public CurePack() {
		setLoggingName("CurePack");
		
		effectiveness = 0;
		area = 0;
		state = 0;
	}
	
	@local
	public void updateCraftingValues(CraftingValues values, boolean firstUpdate) {
		effectiveness = values.getCurrentValue("power");
		super.medicineUseRequired = values.getCurrentValue("skillmodmin");
		setUseCount(values.getCurrentValue("charges"));
		
		if (values.hasProperty("area")) {
			area = values.getCurrentValue("area");
		}
	}
	
	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public void loadTemplateData(SharedObjectTemplate templateData) {
		super.loadTemplateData(templateData);

		if (!templateData.isCurePackTemplate())
			return;

		CurePackTemplate curePackTemplate = (CurePackTemplate) templateData;

		effectiveness = curePackTemplate.getEffectiveness();
		super.medicineUseRequired = curePackTemplate.getMedicineUse();
		area = curePackTemplate.getArea();
		state = curePackTemplate.getState();
		commandToExecute = curePackTemplate.getCommandToExecute();
	}
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public int handleObjectMenuSelect(CreatureObject player, byte selectedID) {

		if (!isASubChildOf(player))
			return 0;

		if (selectedID != 20)
			return 1;

		if (player.getSkillMod("healing_ability") < super.medicineUseRequired) {
			player.sendSystemMessage("@error_message:insufficient_skill"); //You lack the skill to use this item.
			
			return 0;
		} else {
			player.sendCommand(commandToExecute, String.valueOf(super.getObjectID()), player.getTargetID());
			
			return 0;
		}

	}
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public void fillAttributeList(AttributeListMessage msg, CreatureObject object) {
		super.fillAttributeList(msg, object);
		
		string eff = "@obj_attr_n:dot_type_"; 
		msg.insertAttribute("examine_dot_cure", eff + CreatureState.instance().getSpecialName(state));

		msg.insertAttribute("examine_dot_cure_power", effectiveness);
		
		if (isArea()) {
			msg.insertAttribute("examine_heal_area", Math.getPrecision(area, 0));
			msg.insertAttribute("healing_ability", super.getMedicineUseRequired());
		} else {
			msg.insertAttribute("healing_ability", super.getMedicineUseRequired());
		}
	}

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	public native void notifyLoadFromDatabase();

	@dirty
	public int calculatePower(CreatureObject creature) {
		float modSkill = (float) creature.getSkillMod("healing_wound_treatment");
		return ((100 + modSkill) / 100 * effectiveness);
	}
	
	@dirty
	public boolean isArea() {
		return area != 0;
	}
	
	@dirty
	public float getArea() {
		return area;
	}
	
	@dirty
	public unsigned long getState() {
		return state;
	}
	
	@dirty
	public float getEffectiveness() {
		return effectiveness;
	}
	
	@dirty
	public boolean isCurePack() {
		return true;
	}

}
