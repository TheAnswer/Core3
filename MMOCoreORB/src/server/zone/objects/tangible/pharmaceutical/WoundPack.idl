/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.pharmaceutical;

import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
include system.lang.Math;
import server.zone.objects.tangible.pharmaceutical.PharmaceuticalObject;
include templates.params.creature.CreatureAttribute;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include templates.tangible.WoundPackTemplate;

class WoundPack extends PharmaceuticalObject {
	protected float effectiveness;
	protected byte attribute;
	
	public WoundPack() {
		setLoggingName("WoundPack");
		
		effectiveness = 0;
		attribute = 0;
	}
	
	@local
	public void updateCraftingValues(CraftingValues values, boolean firstUpdate) {
		effectiveness = values.getCurrentValue("power");

		if (!isDroidReconstructionKit()) {
			super.medicineUseRequired = values.getCurrentValue("skillmodmin");
		}

		setUseCount(values.getCurrentValue("charges"));
	}

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public void loadTemplateData(SharedObjectTemplate templateData) {
		super.loadTemplateData(templateData);

		if (!templateData.isWoundPackTemplate())
			return;

		WoundPackTemplate woundPackTemplate = (WoundPackTemplate) templateData;

		effectiveness = woundPackTemplate.getEffectiveness();
		super.medicineUseRequired = woundPackTemplate.getMedicineUse();
		attribute = woundPackTemplate.getAttribute();
	}
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public void fillAttributeList(AttributeListMessage msg, CreatureObject object) {
		super.fillAttributeList(msg, object);

		if (isDroidReconstructionKit()) {
			msg.insertAttribute("examine_repair_power", Math.getPrecision(effectiveness, 0));
		} else {
			msg.insertAttribute("examine_heal_wound_" + CreatureAttribute.getName(attribute), Math.getPrecision(effectiveness, 0));
			msg.insertAttribute("healing_ability", super.medicineUseRequired);
		}
	}
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public int handleObjectMenuSelect(CreatureObject player, byte selectedID) {
		
		if (!isASubChildOf(player))
			return 0;

		if (selectedID != 20)
			return 1;

		if (isDroidReconstructionKit()) {
			player.sendCommand("healdroidwound", String.valueOf(super.getObjectID()), player.getTargetID());
			
			return 0;
		} else if (player.getSkillMod("healing_ability") < super.medicineUseRequired) {
			player.sendSystemMessage("@error_message:insufficient_skill"); //You lack the skill to use this item.
			
			return 0;
		} else {
			player.sendCommand("healwound", CreatureAttribute.getName(attribute) + "|" + String.valueOf(super.getObjectID()), player.getTargetID());
			
			return 0;
		}

	}
	
	@dirty
	public native unsigned int calculatePower(CreatureObject healer, CreatureObject patient, boolean applyBattleFatigue = true);
	
	@dirty
	public float getEffectiveness() {
		return effectiveness;
	}
	
	@dirty
	public boolean isWoundPack() {
		return true;
	}
	
	@dirty
	public byte getAttribute() {
		return attribute;
	}

	@dirty
	public native boolean isDroidReconstructionKit();
}
