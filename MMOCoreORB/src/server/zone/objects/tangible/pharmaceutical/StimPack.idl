/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.pharmaceutical;

import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.tangible.pharmaceutical.PharmaceuticalObject;
import system.lang.String;
import system.util.Vector;
include templates.tangible.StimPackTemplate;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;

class StimPack extends PharmaceuticalObject {
	protected float effectiveness;
	protected int medicineClass;

	public StimPack() {
		setLoggingName("StimPack");

		effectiveness = 0;
		medicineClass = 0;
	}

	@local
	public void updateCraftingValues(CraftingValues values, boolean firstUpdate) {
		if (isPetStimPack()) {
			effectiveness = values.getCurrentValue("power");
		} else if (isDroidRepairKit()) {
			effectiveness = values.getCurrentValue("energy");
		} else {
			effectiveness = values.getCurrentValue("power");
			super.medicineUseRequired = values.getCurrentValue("skillmodmin");
		}

		setUseCount(values.getCurrentValue("charges"));
	}

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public void loadTemplateData(SharedObjectTemplate templateData) {
		super.loadTemplateData(templateData);

		if (!templateData.isStimPackTemplate())
			return;

		StimPackTemplate stimPackTemplate = (StimPackTemplate) templateData;

		effectiveness = stimPackTemplate.getEffectiveness();
		super.medicineUseRequired = stimPackTemplate.getMedicineUse();
		medicineClass = stimPackTemplate.getMedicineClass();
	}

	@dirty
	public abstract unsigned int calculatePower(CreatureObject healer, CreatureObject patient, boolean applyBattleFatigue = true) {
		float power = getEffectiveness();

		if (applyBattleFatigue) {
			power *= patient.calculateBFRatio();
		}

		if (isPetStimPack() || isDroidRepairKit()) {
			return power;
		} else {
			float modSkill = (float) healer.getSkillMod("healing_injury_treatment");

			return (100 + modSkill) / 100 * power;
		}
	}

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public int handleObjectMenuSelect(CreatureObject player, byte selectedID) {

		if (!isASubChildOf(player))
			return 0;

		if (selectedID != 20)
			return 1;

		if (isPetStimPack()) {
			player.sendCommand("healpet", String.valueOf(super.getObjectID()), player.getTargetID());

			return 0;
		} else if (isDroidRepairKit()) {
			player.sendCommand("healdroiddamage", String.valueOf(super.getObjectID()), player.getTargetID());

			return 0;
		} else if (player.getSkillMod("healing_ability") < super.medicineUseRequired) {
			player.sendSystemMessage("@error_message:insufficient_skill"); //You lack the skill to use this item.

			return 0;
		} else {
			player.sendCommand("healdamage", String.valueOf(super.getObjectID()), player.getTargetID());

			return 0;
		}
	}

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	@dirty
	public float getEffectiveness() {
		return effectiveness;
	}

	/**
	 * Added so we can split a stimpack for the stimpack droid dispenser module.
	 */
	@dirty
	public native StimPack split(int charges);

	@dirty
	public boolean isStimPack() {
		return true;
	}

	@dirty
	public native boolean isPetStimPack();

	@dirty
	public native boolean isDroidRepairKit();

	@dirty
	public int getMedicineClass() {
		return medicineClass;
	}

	@dirty
	public native boolean isClassA();
	@dirty
	public native boolean isClassB();
	@dirty
	public native boolean isClassC();
	@dirty
	public native boolean isClassD();
	@dirty
	public native boolean isClassE();

	@dirty
	@dereferenced
	@local
	public native Vector<byte> getAttributes();
}
