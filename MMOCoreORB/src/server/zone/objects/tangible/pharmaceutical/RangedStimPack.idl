/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.pharmaceutical;

import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
import server.zone.objects.tangible.pharmaceutical.StimPack;
include templates.tangible.RangedStimPackTemplate;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;

class RangedStimPack extends StimPack {
	protected float range;
	protected float area;
	protected float rangeMod;

	public RangedStimPack() {
		setLoggingName("RangedStimPack");

		area = 0;
		range = 0;
		rangeMod = 0;
	}

	@local
	public void updateCraftingValues(CraftingValues values, boolean firstUpdate) {
		super.effectiveness = values.getCurrentValue("power");
		super.medicineUseRequired = values.getCurrentValue("skillmodmin");
		setUseCount(values.getCurrentValue("charges"));

		range = values.getCurrentValue("range");

		if (values.hasProperty("area")) {
			area = values.getCurrentValue("area");
		}
	}

	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public int handleObjectMenuSelect(CreatureObject player, byte selectedID) {

		if (!isASubChildOf(player))
			return 0;

		if (selectedID != 20)
			return 1;

		if (player.getSkillMod("combat_healing_ability") < super.medicineUseRequired) {
			player.sendSystemMessage("@error_message:insufficient_skill"); //You lack the skill to use this item.

			return 0;
		} else {
			player.sendCommand("healdamage", String.valueOf(super.getObjectID()), player.getTargetID());
			
			return 0;
		}
	}

	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public void loadTemplateData(SharedObjectTemplate templateData) {
		super.loadTemplateData(templateData);

		if (!templateData.isRangedStimPackTemplate())
			return;

		RangedStimPackTemplate stimPackTemplate = (RangedStimPackTemplate) templateData;

		super.effectiveness = stimPackTemplate.getEffectiveness();
		super.medicineUseRequired = stimPackTemplate.getMedicineUse();
		area = stimPackTemplate.getArea();
		range = stimPackTemplate.getRange();
		rangeMod = stimPackTemplate.getRangeMod();
	}

	@dirty
	public unsigned int calculatePower(CreatureObject healer, CreatureObject patient, boolean applyBattleFatigue = true) {
		float power = getEffectiveness();

		if (applyBattleFatigue) {
			power *= patient.calculateBFRatio();
		}

		float modSkill = (float) healer.getSkillMod("combat_medic_effectiveness");

		return (100 + modSkill) / 100 * power;
	}

	@dirty
	public float getRange(CreatureObject creature = null) {
		float modSkill = 0;

		if (creature != null) {
			modSkill = creature.getSkillMod("healing_range");
		}

		float value = (100 + rangeMod * modSkill) / 100 * range; 

		return value;
	}

	@dirty
	public float getEffectiveness() {
		return super.effectiveness;
	}

	@dirty
	public float getArea() {
		return area;
	}

	@dirty
	public boolean isArea() {
		return area != 0;
	}

	@dirty
	public float getRangeMod() {
		return rangeMod;
	}

	@dirty
	public boolean isRangedStimPack() {
		return true;
	}
}
