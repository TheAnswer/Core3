/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.pharmaceutical;

import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
include system.lang.Math;
import server.zone.objects.tangible.pharmaceutical.PharmaceuticalObject;
include templates.params.creature.CreatureState;
include templates.params.creature.CreatureAttribute;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include templates.tangible.DotPackTemplate;

class DotPack extends PharmaceuticalObject {
	protected float effectiveness;
	protected float range;
	protected float area;
	protected boolean hasArea;
	protected float rangeMod;
	protected float potency;
	protected string commandToExecute;

	protected unsigned int duration;
	protected unsigned int pool;
	protected unsigned int dotType;
	
	public DotPack() {
		area = 0;
		range = 0;
		rangeMod = 0;
		potency = 0;
		duration = 0;
		pool = 0;
		dotType = 0;
		effectiveness = 0;
		hasArea = false;
		
		setLoggingName("DotPack");
	}
	
	@local
	public void updateCraftingValues(CraftingValues values, boolean firstUpdate) {
		effectiveness = values.getCurrentValue("power");
		super.medicineUseRequired = values.getCurrentValue("skillmodmin");
		setUseCount(values.getCurrentValue("charges"));
		
		range = values.getCurrentValue("range");
		area = values.getCurrentValue("area");
		potency = values.getCurrentValue("potency");
		duration = values.getCurrentValue("duration");
	}
	
	/**
	 * Reads and sets the template data from a SharedTangibleObjectTemplate LuaObject
	 * @pre { templateData is a valid pointer }
	 * @post { TangibleObject members are initialized }
	 * @param templateData templateData points to the SharedTangibleObjectTemplate LuaObject that is used to initialize the TangibleObject members
	 */
	@local
	public void loadTemplateData(SharedObjectTemplate templateData) {
		super.loadTemplateData(templateData);

		if (!templateData.isDotPackTemplate())
			return;

		DotPackTemplate dotPackTemplate = (DotPackTemplate) templateData;

		effectiveness = dotPackTemplate.getEffectiveness();
		super.medicineUseRequired = dotPackTemplate.getMedicineUse();
		duration = dotPackTemplate.getDuration();
		area = dotPackTemplate.getArea();
		hasArea = dotPackTemplate.isArea();
		range = dotPackTemplate.getRange();
		rangeMod = dotPackTemplate.getRangeMod();
		pool = dotPackTemplate.getPool();
		dotType = dotPackTemplate.getDotType();
		potency = dotPackTemplate.getPotency();
		commandToExecute = dotPackTemplate.getCommandToExecute();
	}
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public void fillAttributeList(AttributeListMessage msg, CreatureObject object) {
		super.fillAttributeList(msg, object);
		
		msg.insertAttribute("examine_dot_attribute", CreatureAttribute.getName(pool, true));

		msg.insertAttribute("examine_dot_apply_power", Math.getPrecision(effectiveness, 0));

		if (isPoisonDeliveryUnit()) {
			msg.insertAttribute("examine_dot_apply", "Poison");
		} else {
			msg.insertAttribute("examine_dot_apply", "Diseased");
		}
		
		msg.insertAttribute("examine_dot_potency", Math.getPrecision(potency, 0));

		msg.insertAttribute("examine_heal_range", Math.getPrecision(range, 0));

		if (isArea()) {
			msg.insertAttribute("examine_heal_area", Math.getPrecision(area, 0));

			msg.insertAttribute("duration", Math.getPrecision(duration, 0));

			msg.insertAttribute("combat_healing_ability", super.getMedicineUseRequired());
		} else {

			msg.insertAttribute("duration", Math.getPrecision(duration, 0));

			msg.insertAttribute("combat_healing_ability", super.getMedicineUseRequired());
		}
	}
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public int handleObjectMenuSelect(CreatureObject player, byte selectedID) {
		
		if (!isASubChildOf(player))
			return 0;

		if (selectedID != 20)
			return 1;

		if (player.getSkillMod("combat_healing_ability") < super.medicineUseRequired) {
			player.sendSystemMessage("@error_message:insufficient_skill"); //You lack the skill to use this item.
			
			return 0;
		} else {
			player.sendCommand(commandToExecute, String.valueOf(super.getObjectID()), player.getTargetID());
			
			return 0;
		}

	}

	/**
	 * Gets called when this objects is loaded from database
	 * @pre { this locked }
	 * @post { this locked }
	 */
	public native void notifyLoadFromDatabase();

	@dirty
	public int calculatePower(CreatureObject creature) {
		float modSkill = (float) creature.getSkillMod("combat_medic_effectiveness");
		return ((100 + modSkill) / 100 * effectiveness);
	}

	@dirty
	public boolean isPoisonDeliveryUnit() {
		return dotType == CreatureState.POISONED;
	}
	
	@dirty
	public boolean isDiseaseDeliveryUnit() {
		return dotType == CreatureState.DISEASED;
	}
	
	@dirty
	public float getEffectiveness() {
		return effectiveness;
	}
	
	@dirty
	public float getRange() {
		return range;
	}
	
	@dirty
	public float getArea() {
		return area;
	}
	
	@dirty
	public float getRangeMod() {
		return rangeMod;
	}
	
	@dirty
	public float getPotency() {
		return potency;
	}
	
	@dirty
	public unsigned int getDuration() {
		return duration;
	}
	
	@dirty
	public boolean isArea() {
		return hasArea;
	}
	
	@dirty
	public unsigned int getPool() {
		return pool;
	}
	
	@dirty
	public unsigned int getDotType() {
		return dotType;
	}
}
