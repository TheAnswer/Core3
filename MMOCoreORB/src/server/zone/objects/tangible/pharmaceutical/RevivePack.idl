/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.pharmaceutical;

import server.zone.packets.scene.AttributeListMessage;
import server.zone.objects.creature.CreatureObject;
include system.lang.Math;
import server.zone.objects.tangible.pharmaceutical.PharmaceuticalObject;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include system.lang.System;

class RevivePack extends PharmaceuticalObject {
	protected float healthWoundHealed;
	protected float healthHealed;
	protected float actionWoundHealed;
	protected float actionHealed;
	protected float mindWoundHealed;
	protected float mindHealed;
	//protected float effectiveness;
	
	public RevivePack() {
		setLoggingName("RevivePack");
		
		healthWoundHealed = 100;
		healthHealed = 100;
		actionWoundHealed = 100;
		actionHealed = 100;
		mindWoundHealed = 100;
		mindHealed = 100;
	}
	
	@local
	public void updateCraftingValues(CraftingValues values, boolean firstUpdate) {
		float effectiveness = values.getCurrentValue("power");
		super.medicineUseRequired = values.getCurrentValue("skillmodmin");
		setUseCount(values.getCurrentValue("charges"));
		
		values.setHidden("power");
		
		float health = 2 * effectiveness;
		healthWoundHealed = health;
		healthHealed = 2 * effectiveness - health;
		
		float action = 2 * effectiveness;
		action = System.random(action / 4);
		action = action + effectiveness / 2;
		
		actionWoundHealed = action;
		actionHealed = 2 * effectiveness - action;
		
		float mind = 1.5 * effectiveness;
		mind = System.random(mind / 4);
		mind = mind + effectiveness / 2;
		
		mindWoundHealed = mind;
		mindHealed = 1.5 * effectiveness - mind;
	}
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public void fillAttributeList(AttributeListMessage msg, CreatureObject object) {
		super.fillAttributeList(msg, object);
	
		msg.insertAttribute("examine_heal_wound_health", Math.getPrecision(healthWoundHealed, 0));
		msg.insertAttribute("examine_heal_damage_health", Math.getPrecision(healthHealed, 0));
		
		msg.insertAttribute("examine_heal_wound_mind", Math.getPrecision(mindWoundHealed, 0));
		msg.insertAttribute("examine_heal_damage_mind", Math.getPrecision(mindHealed, 0));
		
		msg.insertAttribute("examine_heal_wound_action", Math.getPrecision(actionWoundHealed, 0));
		msg.insertAttribute("examine_heal_damage_action", Math.getPrecision(actionHealed, 0));
				
		msg.insertAttribute("healing_ability", super.medicineUseRequired);
	}
	
	/**
	 * Handles the radial selection sent by the client, must be overriden by inherited objects
	 * @pre { this object is locked, player is locked }
	 * @post { this object is locked, player is locked }
	 * @param player CreatureObject that selected the option
	 * @param selectedID selected menu id
	 * @returns 0 if successfull
	 */
	public int handleObjectMenuSelect(CreatureObject player, byte selectedID) {
		if (!isASubChildOf(player))
			return 0;
		
		if (selectedID != 20)
			return 1;

		if (player.getSkillMod("healing_ability") < super.medicineUseRequired) {
			player.sendSystemMessage("@error_message:insufficient_skill"); //You lack the skill to use this item.
			
			return 0;
		} else {
			player.sendCommand("reviveplayer", String.valueOf(super.getObjectID()), player.getTargetID());
			
			return 0;
		}

	}
	
	@dirty
	public float getHealthWoundHealed() {
		return healthWoundHealed;
	}
	
	@dirty
	public float getHealthHealed() {
		return healthHealed;
	}
	
	@dirty
	public float getActionWoundHealed() {
		return actionWoundHealed;
	}
	
	@dirty
	public float getActionHealed() {
		return actionHealed;
	}
	
	@dirty
	public float getMindWoundHealed() {
		return mindWoundHealed;
	}
	
	@dirty
	public float getMindHealed() {
		return mindHealed;
	}
	
	@dirty
	public boolean isRevivePack() {
		return true;
	}

}
