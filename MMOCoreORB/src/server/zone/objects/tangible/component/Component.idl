/*
Copyright (C) 2007 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.tangible.component;

import server.zone.objects.tangible.TangibleObject;
import engine.lua.LuaObject;
import server.zone.packets.object.ObjectMenuResponse;
import server.zone.objects.scene.SceneObject;
import server.zone.Zone;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include server.zone.packets.scene.AttributeListMessage;
import system.util.VectorMap;
import system.util.Vector;
import server.zone.objects.creature.CreatureObject;
import server.zone.packets.object.ObjectMenuResponse;

class Component extends TangibleObject {
	
	@dereferenced
	protected VectorMap<string, float> attributeMap;
	
	@dereferenced
	protected VectorMap<string, int> precisionMap;
	
	@dereferenced
	protected VectorMap<string, string> titleMap;
	
	@dereferenced
	protected VectorMap<string, boolean> hiddenMap;
	
	@dereferenced
	protected Vector<string> keyList;
	
	public Component() {
		Logger.setLoggingName("Component");

	}

	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();
	
	@local
	@dirty
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);
	
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);
	
	@dirty
	public boolean isComponent() {
		return true; 
	}
	
	public native void generateLootStats(final string lootstring, int level);

	public native boolean compare(Component inCmpo);
	
	@dirty
	public boolean hasKey(final string key) {
		for (int i = 0; i < keyList.size(); ++i)
			if (keyList.get(i) == key)
				return true;
		return false;
	}

	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate);
	
	public native void addProperty(final string attributeName, final float value,
		final int precision, final string craftingTitle, final boolean hidden);

	@dirty
	public native float getAttributeValue(final string attributeName);
	
	@dirty
	public native int getAttributePrecision(final string attributeName);
	
	@dirty
	public native string getAttributeTitle(final string attributeName);
	
	@dirty
	public native boolean getAttributeHidden(final string attributeName);

	public native void setPropertyToHidden(final string property);
	
	public native void addProperty(final string attribute, final float value, final int precision, final string title);
    
	@dirty
    public native int getPropertyCount();
	
	@dirty
    public native string getProperty(final int j);
	
	public native boolean changeAttributeValue(final string property, float value);                                                                             
}
