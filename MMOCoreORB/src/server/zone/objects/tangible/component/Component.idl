/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.component;

import server.zone.objects.tangible.TangibleObject;
import server.zone.packets.object.ObjectMenuResponse;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include server.zone.packets.scene.AttributeListMessage;
import system.util.VectorMap;
import system.util.Vector;
import server.zone.objects.creature.CreatureObject;

@lua
class Component extends TangibleObject {
	
	@dereferenced
	protected VectorMap<string, float> attributeMap;
	
	@dereferenced
	protected VectorMap<string, int> precisionMap;
	
	@dereferenced
	protected VectorMap<string, string> titleMap;
	
	@dereferenced
	protected VectorMap<string, boolean> hiddenMap;
	
	@dereferenced
	protected Vector<string> keyList;
	
	public Component() {
		Logger.setLoggingName("Component");

	}

	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();
	
	@local
	@dirty
	public native void fillObjectMenuResponse(ObjectMenuResponse menuResponse, CreatureObject player);
	
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);
	
	@dirty
	public boolean isComponent() {
		return true; 
	}
	
	public native void generateLootStats(final string lootstring, int level);

	public native boolean compare(Component inCmpo);
	
	@dirty
	public boolean hasKey(final string key) {
		for (int i = 0; i < keyList.size(); ++i)
			if (keyList.get(i) == key)
				return true;
		return false;
	}

	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate);
	
	public native void addProperty(final string attributeName, final float value,
		final int precision, final string craftingTitle, final boolean hidden);

	@dirty
	public native float getAttributeValue(final string attributeName);
	
	@dirty
	public native int getAttributePrecision(final string attributeName);
	
	@dirty
	public native string getAttributeTitle(final string attributeName);
	
	@dirty
	public native boolean getAttributeHidden(final string attributeName);

	public native void setPropertyToHidden(final string property);
	
	public native void addProperty(final string attribute, final float value, final int precision, final string title);
    
	@dirty
    public native int getPropertyCount();
	
	@dirty
    public native string getProperty(final int j);
	
	public native boolean changeAttributeValue(final string property, float value);                                                                             
}
