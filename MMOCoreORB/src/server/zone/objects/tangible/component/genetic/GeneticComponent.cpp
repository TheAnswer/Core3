/*
 *	server/zone/objects/tangible/component/genetic/GeneticComponent.cpp generated by engine3 IDL compiler 0.60
 */

#include "GeneticComponent.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/mobile/CreatureTemplate.h"

/*
 *	GeneticComponentStub
 */

enum {RPC_SETSTATS__INT_INT_INT_INT_INT_INT_INT_INT_INT_INT_ = 6,RPC_SETCLEVERNESS__INT_,RPC_SETENDURANCE__INT_,RPC_SETFIERCENESS__INT_,RPC_SETPOWER__INT_,RPC_SETINTELLECT__INT_,RPC_SETCOURAGE__INT_,RPC_SETDEPENDENCY__INT_,RPC_SETDEXTERITY__INT_,RPC_SETFORTITUDE__INT_,RPC_SETHARDINESS__INT_,RPC_SETENERGY__FLOAT_,RPC_SETBLAST__FLOAT_,RPC_SETCOLD__FLOAT_,RPC_SETHEAT__FLOAT_,RPC_SETELECTRIC__FLOAT_,RPC_SETACID__FLOAT_,RPC_SETSTUN__FLOAT_,RPC_SETSABER__FLOAT_,RPC_SETARMORRATING__INT_,RPC_SETKINETIC__FLOAT_,RPC_SETSPECIALATTACKONE__STRING_,RPC_SETSPECIALATTACKTWO__STRING_,RPC_SETRANGED__BOOL_,RPC_SETQUALITY__INT_,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_CONVERTSPECIALATTACK__STRING_,RPC_RESISTVALUE__FLOAT_};

GeneticComponent::GeneticComponent() : Component(DummyConstructorParameter::instance()) {
	GeneticComponentImplementation* _implementation = new GeneticComponentImplementation();
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("GeneticComponent");
}

GeneticComponent::GeneticComponent(DummyConstructorParameter* param) : Component(param) {
	_setClassName("GeneticComponent");
}

GeneticComponent::~GeneticComponent() {
}



void GeneticComponent::setStats(unsigned int cle, unsigned int end, unsigned int fie, unsigned int pow, unsigned int ite, unsigned int cou, unsigned int dep, unsigned int dex, unsigned int frt, unsigned int har) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTATS__INT_INT_INT_INT_INT_INT_INT_INT_INT_INT_);
		method.addUnsignedIntParameter(cle);
		method.addUnsignedIntParameter(end);
		method.addUnsignedIntParameter(fie);
		method.addUnsignedIntParameter(pow);
		method.addUnsignedIntParameter(ite);
		method.addUnsignedIntParameter(cou);
		method.addUnsignedIntParameter(dep);
		method.addUnsignedIntParameter(dex);
		method.addUnsignedIntParameter(frt);
		method.addUnsignedIntParameter(har);

		method.executeWithVoidReturn();
	} else
		_implementation->setStats(cle, end, fie, pow, ite, cou, dep, dex, frt, har);
}

void GeneticComponent::setCleverness(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCLEVERNESS__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setCleverness(value);
}

void GeneticComponent::setEndurance(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENDURANCE__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setEndurance(value);
}

void GeneticComponent::setFierceness(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFIERCENESS__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setFierceness(value);
}

void GeneticComponent::setPower(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPOWER__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setPower(value);
}

void GeneticComponent::setIntellect(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETINTELLECT__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setIntellect(value);
}

void GeneticComponent::setCourage(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOURAGE__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setCourage(value);
}

void GeneticComponent::setDependency(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEPENDENCY__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setDependency(value);
}

void GeneticComponent::setDexterity(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETDEXTERITY__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setDexterity(value);
}

void GeneticComponent::setFortitude(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETFORTITUDE__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setFortitude(value);
}

void GeneticComponent::setHardiness(unsigned int value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHARDINESS__INT_);
		method.addUnsignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setHardiness(value);
}

void GeneticComponent::setEnergy(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETENERGY__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setEnergy(value);
}

void GeneticComponent::setBlast(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETBLAST__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setBlast(value);
}

void GeneticComponent::setCold(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETCOLD__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setCold(value);
}

void GeneticComponent::setHeat(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETHEAT__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setHeat(value);
}

void GeneticComponent::setElectric(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETELECTRIC__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setElectric(value);
}

void GeneticComponent::setAcid(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETACID__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setAcid(value);
}

void GeneticComponent::setStun(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSTUN__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setStun(value);
}

void GeneticComponent::setSaber(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSABER__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setSaber(value);
}

void GeneticComponent::setArmorRating(int rating) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETARMORRATING__INT_);
		method.addSignedIntParameter(rating);

		method.executeWithVoidReturn();
	} else
		_implementation->setArmorRating(rating);
}

void GeneticComponent::setKinetic(float value) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETKINETIC__FLOAT_);
		method.addFloatParameter(value);

		method.executeWithVoidReturn();
	} else
		_implementation->setKinetic(value);
}

void GeneticComponent::setSpecialAttackOne(const String& atk) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPECIALATTACKONE__STRING_);
		method.addAsciiParameter(atk);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpecialAttackOne(atk);
}

void GeneticComponent::setSpecialAttackTwo(const String& atk) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPECIALATTACKTWO__STRING_);
		method.addAsciiParameter(atk);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpecialAttackTwo(atk);
}

void GeneticComponent::setRanged(bool b) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETRANGED__BOOL_);
		method.addBooleanParameter(b);

		method.executeWithVoidReturn();
	} else
		_implementation->setRanged(b);
}

void GeneticComponent::setQuality(int qual) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETQUALITY__INT_);
		method.addSignedIntParameter(qual);

		method.executeWithVoidReturn();
	} else
		_implementation->setQuality(qual);
}

void GeneticComponent::initializeTransientMembers() {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void GeneticComponent::updateCraftingValues(CraftingValues* values, bool firstUpdate) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->updateCraftingValues(values, firstUpdate);
}

void GeneticComponent::fillAttributeList(AttributeListMessage* msg, CreatureObject* object) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->fillAttributeList(msg, object);
}

String GeneticComponent::convertSpecialAttack(String& attackName) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CONVERTSPECIALATTACK__STRING_);
		method.addAsciiParameter(attackName);

		String _return_convertSpecialAttack;
		method.executeWithAsciiReturn(_return_convertSpecialAttack);
		return _return_convertSpecialAttack;
	} else
		return _implementation->convertSpecialAttack(attackName);
}

String GeneticComponent::resistValue(float input) {
	GeneticComponentImplementation* _implementation = static_cast<GeneticComponentImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_RESISTVALUE__FLOAT_);
		method.addFloatParameter(input);

		String _return_resistValue;
		method.executeWithAsciiReturn(_return_resistValue);
		return _return_resistValue;
	} else
		return _implementation->resistValue(input);
}

DistributedObjectServant* GeneticComponent::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* GeneticComponent::_getImplementationForRead() {
	return _impl;
}

void GeneticComponent::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	GeneticComponentImplementation
 */

GeneticComponentImplementation::GeneticComponentImplementation(DummyConstructorParameter* param) : ComponentImplementation(param) {
	_initializeImplementation();
}


GeneticComponentImplementation::~GeneticComponentImplementation() {
}


void GeneticComponentImplementation::finalize() {
}

void GeneticComponentImplementation::_initializeImplementation() {
	_setClassHelper(GeneticComponentHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void GeneticComponentImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<GeneticComponent*>(stub);
	ComponentImplementation::_setStub(stub);
}

DistributedObjectStub* GeneticComponentImplementation::_getStub() {
	return _this.get();
}

GeneticComponentImplementation::operator const GeneticComponent*() {
	return _this.get();
}

void GeneticComponentImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void GeneticComponentImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void GeneticComponentImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void GeneticComponentImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void GeneticComponentImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void GeneticComponentImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void GeneticComponentImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void GeneticComponentImplementation::_serializationHelperMethod() {
	ComponentImplementation::_serializationHelperMethod();

	_setClassName("GeneticComponent");

}

void GeneticComponentImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(GeneticComponentImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool GeneticComponentImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ComponentImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x7278be62: //GeneticComponent.cleverness
		TypeInfo<unsigned int >::parseFromBinaryStream(&cleverness, stream);
		return true;

	case 0x4e1cc05e: //GeneticComponent.endurance
		TypeInfo<unsigned int >::parseFromBinaryStream(&endurance, stream);
		return true;

	case 0xd534362b: //GeneticComponent.fierceness
		TypeInfo<unsigned int >::parseFromBinaryStream(&fierceness, stream);
		return true;

	case 0x938c0c: //GeneticComponent.power
		TypeInfo<unsigned int >::parseFromBinaryStream(&power, stream);
		return true;

	case 0xd0f31507: //GeneticComponent.intelligence
		TypeInfo<unsigned int >::parseFromBinaryStream(&intelligence, stream);
		return true;

	case 0xe7b461fd: //GeneticComponent.courage
		TypeInfo<unsigned int >::parseFromBinaryStream(&courage, stream);
		return true;

	case 0x44d0c271: //GeneticComponent.dependency
		TypeInfo<unsigned int >::parseFromBinaryStream(&dependency, stream);
		return true;

	case 0x8757b6c4: //GeneticComponent.dexterity
		TypeInfo<unsigned int >::parseFromBinaryStream(&dexterity, stream);
		return true;

	case 0x355c15db: //GeneticComponent.fortitude
		TypeInfo<unsigned int >::parseFromBinaryStream(&fortitude, stream);
		return true;

	case 0xff30367d: //GeneticComponent.hardiness
		TypeInfo<unsigned int >::parseFromBinaryStream(&hardiness, stream);
		return true;

	case 0x78bc711: //GeneticComponent.special1
		TypeInfo<String >::parseFromBinaryStream(&special1, stream);
		return true;

	case 0xac8e1c8: //GeneticComponent.special2
		TypeInfo<String >::parseFromBinaryStream(&special2, stream);
		return true;

	case 0xae313e16: //GeneticComponent.ranged
		TypeInfo<bool >::parseFromBinaryStream(&ranged, stream);
		return true;

	case 0xbe6c4102: //GeneticComponent.quality
		TypeInfo<int >::parseFromBinaryStream(&quality, stream);
		return true;

	case 0x15ed7137: //GeneticComponent.armorRating
		TypeInfo<int >::parseFromBinaryStream(&armorRating, stream);
		return true;

	case 0xc9c334c6: //GeneticComponent.kinResist
		TypeInfo<float >::parseFromBinaryStream(&kinResist, stream);
		return true;

	case 0xea4e84cd: //GeneticComponent.energyResist
		TypeInfo<float >::parseFromBinaryStream(&energyResist, stream);
		return true;

	case 0xa259d0af: //GeneticComponent.blastResist
		TypeInfo<float >::parseFromBinaryStream(&blastResist, stream);
		return true;

	case 0xc925dac1: //GeneticComponent.coldResist
		TypeInfo<float >::parseFromBinaryStream(&coldResist, stream);
		return true;

	case 0x364f80d2: //GeneticComponent.heatResist
		TypeInfo<float >::parseFromBinaryStream(&heatResist, stream);
		return true;

	case 0xb28dda63: //GeneticComponent.elecResist
		TypeInfo<float >::parseFromBinaryStream(&elecResist, stream);
		return true;

	case 0xb621b999: //GeneticComponent.acidResist
		TypeInfo<float >::parseFromBinaryStream(&acidResist, stream);
		return true;

	case 0xad82c707: //GeneticComponent.stunResist
		TypeInfo<float >::parseFromBinaryStream(&stunResist, stream);
		return true;

	case 0xa08c0561: //GeneticComponent.saberResist
		TypeInfo<float >::parseFromBinaryStream(&saberResist, stream);
		return true;

	}

	return false;
}

void GeneticComponentImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = GeneticComponentImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int GeneticComponentImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ComponentImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x7278be62; //GeneticComponent.cleverness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&cleverness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x4e1cc05e; //GeneticComponent.endurance
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&endurance, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd534362b; //GeneticComponent.fierceness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&fierceness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x938c0c; //GeneticComponent.power
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&power, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd0f31507; //GeneticComponent.intelligence
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&intelligence, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xe7b461fd; //GeneticComponent.courage
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&courage, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x44d0c271; //GeneticComponent.dependency
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&dependency, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x8757b6c4; //GeneticComponent.dexterity
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&dexterity, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x355c15db; //GeneticComponent.fortitude
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&fortitude, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xff30367d; //GeneticComponent.hardiness
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&hardiness, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x78bc711; //GeneticComponent.special1
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special1, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xac8e1c8; //GeneticComponent.special2
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&special2, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xae313e16; //GeneticComponent.ranged
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&ranged, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xbe6c4102; //GeneticComponent.quality
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&quality, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x15ed7137; //GeneticComponent.armorRating
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<int >::toBinaryStream(&armorRating, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc9c334c6; //GeneticComponent.kinResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&kinResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xea4e84cd; //GeneticComponent.energyResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&energyResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa259d0af; //GeneticComponent.blastResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&blastResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xc925dac1; //GeneticComponent.coldResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&coldResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x364f80d2; //GeneticComponent.heatResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&heatResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb28dda63; //GeneticComponent.elecResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&elecResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xb621b999; //GeneticComponent.acidResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&acidResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xad82c707; //GeneticComponent.stunResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&stunResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xa08c0561; //GeneticComponent.saberResist
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<float >::toBinaryStream(&saberResist, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 24;
}

GeneticComponentImplementation::GeneticComponentImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		Logger.setLoggingName("GeneticComponent");
	Logger::setLoggingName("GeneticComponent");
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		cleverness = 0;
	cleverness = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		endurance = 0;
	endurance = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fierceness = 0;
	fierceness = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		power = 0;
	power = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		intelligence = 0;
	intelligence = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		courage = 0;
	courage = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dependency = 0;
	dependency = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dexterity = 0;
	dexterity = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fortitude = 0;
	fortitude = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		hardiness = 0;
	hardiness = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		special1 = "none";
	special1 = "none";
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		special2 = "none";
	special2 = "none";
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		ranged = false;
	ranged = false;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		quality = 7;
	quality = 7;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		armorRating = 0;
	armorRating = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		kinResist = 0;
	kinResist = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		energyResist = 0;
	energyResist = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		blastResist = 0;
	blastResist = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		coldResist = 0;
	coldResist = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		heatResist = 0;
	heatResist = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		elecResist = 0;
	elecResist = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		acidResist = 0;
	acidResist = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		stunResist = 0;
	stunResist = 0;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		saberResist = -1;
	saberResist = -1;
}

void GeneticComponentImplementation::setStats(unsigned int cle, unsigned int end, unsigned int fie, unsigned int pow, unsigned int ite, unsigned int cou, unsigned int dep, unsigned int dex, unsigned int frt, unsigned int har) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		cleverness = cle;
	cleverness = cle;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		endurance = end;
	endurance = end;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fierceness = fie;
	fierceness = fie;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		power = pow;
	power = pow;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		intelligence = ite;
	intelligence = ite;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		courage = cou;
	courage = cou;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dependency = dep;
	dependency = dep;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fortitude = frt;
	fortitude = frt;
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		hardiness = har;
	hardiness = har;
}

void GeneticComponentImplementation::setCleverness(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		cleverness = value;
	cleverness = value;
}

void GeneticComponentImplementation::setEndurance(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		endurance = value;
	endurance = value;
}

void GeneticComponentImplementation::setFierceness(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fierceness = value;
	fierceness = value;
}

void GeneticComponentImplementation::setPower(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		power = value;
	power = value;
}

void GeneticComponentImplementation::setIntellect(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		intelligence = value;
	intelligence = value;
}

void GeneticComponentImplementation::setCourage(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		courage = value;
	courage = value;
}

void GeneticComponentImplementation::setDependency(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dependency = value;
	dependency = value;
}

void GeneticComponentImplementation::setDexterity(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		dexterity = value;
	dexterity = value;
}

void GeneticComponentImplementation::setFortitude(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		fortitude = value;
	fortitude = value;
}

void GeneticComponentImplementation::setHardiness(unsigned int value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		hardiness = value;
	hardiness = value;
}

void GeneticComponentImplementation::setEnergy(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		energyResist = value;
	energyResist = value;
}

void GeneticComponentImplementation::setBlast(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		blastResist = value;
	blastResist = value;
}

void GeneticComponentImplementation::setCold(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		coldResist = value;
	coldResist = value;
}

void GeneticComponentImplementation::setHeat(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		heatResist = value;
	heatResist = value;
}

void GeneticComponentImplementation::setElectric(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		elecResist = value;
	elecResist = value;
}

void GeneticComponentImplementation::setAcid(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		acidResist = value;
	acidResist = value;
}

void GeneticComponentImplementation::setStun(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		stunResist = value;
	stunResist = value;
}

void GeneticComponentImplementation::setSaber(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		saberResist = value;
	saberResist = value;
}

void GeneticComponentImplementation::setArmorRating(int rating) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		armorRating = rating;
	armorRating = rating;
}

void GeneticComponentImplementation::setKinetic(float value) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		kinResist = value;
	kinResist = value;
}

void GeneticComponentImplementation::setSpecialAttackOne(const String& atk) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		special1 = atk;
	special1 = atk;
}

void GeneticComponentImplementation::setSpecialAttackTwo(const String& atk) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		special2 = atk;
	special2 = atk;
}

void GeneticComponentImplementation::setRanged(bool b) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		ranged = b;
	ranged = b;
}

void GeneticComponentImplementation::setQuality(int qual) {
	// server/zone/objects/tangible/component/genetic/GeneticComponent.idl():  		quality = qual;
	quality = qual;
}

/*
 *	GeneticComponentAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


GeneticComponentAdapter::GeneticComponentAdapter(GeneticComponent* obj) : ComponentAdapter(obj) {
}

void GeneticComponentAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_SETSTATS__INT_INT_INT_INT_INT_INT_INT_INT_INT_INT_:
		{
			setStats(inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETCLEVERNESS__INT_:
		{
			setCleverness(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETENDURANCE__INT_:
		{
			setEndurance(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETFIERCENESS__INT_:
		{
			setFierceness(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETPOWER__INT_:
		{
			setPower(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETINTELLECT__INT_:
		{
			setIntellect(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETCOURAGE__INT_:
		{
			setCourage(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETDEPENDENCY__INT_:
		{
			setDependency(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETDEXTERITY__INT_:
		{
			setDexterity(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETFORTITUDE__INT_:
		{
			setFortitude(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETHARDINESS__INT_:
		{
			setHardiness(inv->getUnsignedIntParameter());
		}
		break;
	case RPC_SETENERGY__FLOAT_:
		{
			setEnergy(inv->getFloatParameter());
		}
		break;
	case RPC_SETBLAST__FLOAT_:
		{
			setBlast(inv->getFloatParameter());
		}
		break;
	case RPC_SETCOLD__FLOAT_:
		{
			setCold(inv->getFloatParameter());
		}
		break;
	case RPC_SETHEAT__FLOAT_:
		{
			setHeat(inv->getFloatParameter());
		}
		break;
	case RPC_SETELECTRIC__FLOAT_:
		{
			setElectric(inv->getFloatParameter());
		}
		break;
	case RPC_SETACID__FLOAT_:
		{
			setAcid(inv->getFloatParameter());
		}
		break;
	case RPC_SETSTUN__FLOAT_:
		{
			setStun(inv->getFloatParameter());
		}
		break;
	case RPC_SETSABER__FLOAT_:
		{
			setSaber(inv->getFloatParameter());
		}
		break;
	case RPC_SETARMORRATING__INT_:
		{
			setArmorRating(inv->getSignedIntParameter());
		}
		break;
	case RPC_SETKINETIC__FLOAT_:
		{
			setKinetic(inv->getFloatParameter());
		}
		break;
	case RPC_SETSPECIALATTACKONE__STRING_:
		{
			String atk; 
			setSpecialAttackOne(inv->getAsciiParameter(atk));
		}
		break;
	case RPC_SETSPECIALATTACKTWO__STRING_:
		{
			String atk; 
			setSpecialAttackTwo(inv->getAsciiParameter(atk));
		}
		break;
	case RPC_SETRANGED__BOOL_:
		{
			setRanged(inv->getBooleanParameter());
		}
		break;
	case RPC_SETQUALITY__INT_:
		{
			setQuality(inv->getSignedIntParameter());
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_CONVERTSPECIALATTACK__STRING_:
		{
			String attackName; 
			resp->insertAscii(convertSpecialAttack(inv->getAsciiParameter(attackName)));
		}
		break;
	case RPC_RESISTVALUE__FLOAT_:
		{
			resp->insertAscii(resistValue(inv->getFloatParameter()));
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void GeneticComponentAdapter::setStats(unsigned int cle, unsigned int end, unsigned int fie, unsigned int pow, unsigned int ite, unsigned int cou, unsigned int dep, unsigned int dex, unsigned int frt, unsigned int har) {
	(static_cast<GeneticComponent*>(stub))->setStats(cle, end, fie, pow, ite, cou, dep, dex, frt, har);
}

void GeneticComponentAdapter::setCleverness(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setCleverness(value);
}

void GeneticComponentAdapter::setEndurance(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setEndurance(value);
}

void GeneticComponentAdapter::setFierceness(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setFierceness(value);
}

void GeneticComponentAdapter::setPower(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setPower(value);
}

void GeneticComponentAdapter::setIntellect(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setIntellect(value);
}

void GeneticComponentAdapter::setCourage(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setCourage(value);
}

void GeneticComponentAdapter::setDependency(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setDependency(value);
}

void GeneticComponentAdapter::setDexterity(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setDexterity(value);
}

void GeneticComponentAdapter::setFortitude(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setFortitude(value);
}

void GeneticComponentAdapter::setHardiness(unsigned int value) {
	(static_cast<GeneticComponent*>(stub))->setHardiness(value);
}

void GeneticComponentAdapter::setEnergy(float value) {
	(static_cast<GeneticComponent*>(stub))->setEnergy(value);
}

void GeneticComponentAdapter::setBlast(float value) {
	(static_cast<GeneticComponent*>(stub))->setBlast(value);
}

void GeneticComponentAdapter::setCold(float value) {
	(static_cast<GeneticComponent*>(stub))->setCold(value);
}

void GeneticComponentAdapter::setHeat(float value) {
	(static_cast<GeneticComponent*>(stub))->setHeat(value);
}

void GeneticComponentAdapter::setElectric(float value) {
	(static_cast<GeneticComponent*>(stub))->setElectric(value);
}

void GeneticComponentAdapter::setAcid(float value) {
	(static_cast<GeneticComponent*>(stub))->setAcid(value);
}

void GeneticComponentAdapter::setStun(float value) {
	(static_cast<GeneticComponent*>(stub))->setStun(value);
}

void GeneticComponentAdapter::setSaber(float value) {
	(static_cast<GeneticComponent*>(stub))->setSaber(value);
}

void GeneticComponentAdapter::setArmorRating(int rating) {
	(static_cast<GeneticComponent*>(stub))->setArmorRating(rating);
}

void GeneticComponentAdapter::setKinetic(float value) {
	(static_cast<GeneticComponent*>(stub))->setKinetic(value);
}

void GeneticComponentAdapter::setSpecialAttackOne(const String& atk) {
	(static_cast<GeneticComponent*>(stub))->setSpecialAttackOne(atk);
}

void GeneticComponentAdapter::setSpecialAttackTwo(const String& atk) {
	(static_cast<GeneticComponent*>(stub))->setSpecialAttackTwo(atk);
}

void GeneticComponentAdapter::setRanged(bool b) {
	(static_cast<GeneticComponent*>(stub))->setRanged(b);
}

void GeneticComponentAdapter::setQuality(int qual) {
	(static_cast<GeneticComponent*>(stub))->setQuality(qual);
}

void GeneticComponentAdapter::initializeTransientMembers() {
	(static_cast<GeneticComponent*>(stub))->initializeTransientMembers();
}

String GeneticComponentAdapter::convertSpecialAttack(String& attackName) {
	return (static_cast<GeneticComponent*>(stub))->convertSpecialAttack(attackName);
}

String GeneticComponentAdapter::resistValue(float input) {
	return (static_cast<GeneticComponent*>(stub))->resistValue(input);
}

/*
 *	GeneticComponentHelper
 */

GeneticComponentHelper* GeneticComponentHelper::staticInitializer = GeneticComponentHelper::instance();

GeneticComponentHelper::GeneticComponentHelper() {
	className = "GeneticComponent";

	Core::getObjectBroker()->registerClass(className, this);
}

void GeneticComponentHelper::finalizeHelper() {
	GeneticComponentHelper::finalize();
}

DistributedObject* GeneticComponentHelper::instantiateObject() {
	return new GeneticComponent(DummyConstructorParameter::instance());
}

DistributedObjectServant* GeneticComponentHelper::instantiateServant() {
	return new GeneticComponentImplementation();
}

DistributedObjectAdapter* GeneticComponentHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new GeneticComponentAdapter(static_cast<GeneticComponent*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

