/*
Copyright (C) 2009 <SWGEmu>
 
This File is part of Core3.
 
This program is free software; you can redistribute 
it and/or modify it under the terms of the GNU Lesser 
General Public License as published by the Free Software
Foundation; either version 2 of the License, 
or (at your option) any later version.
 
This program is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU Lesser General Public License for
more details.
 
You should have received a copy of the GNU Lesser General 
Public License along with this program; if not, write to
the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 
Linking Engine3 statically or dynamically with other modules 
is making a combined work based on Engine3. 
Thus, the terms and conditions of the GNU Lesser General Public License 
cover the whole combination.
 
In addition, as a special exception, the copyright holders of Engine3 
give you permission to combine Engine3 program with free software 
programs or libraries that are released under the GNU LGPL and with 
code included in the standard release of Core3 under the GNU LGPL 
license (or modified versions of such code, with unchanged license). 
You may copy and distribute such a system following the terms of the 
GNU LGPL for Engine3 and the licenses of the other code concerned, 
provided that you include the source code of that other code when 
and as the GNU LGPL requires distribution of source code.
 
Note that people who make modified versions of Engine3 are not obligated 
to grant this special exception for their modified versions; 
it is their choice whether to do so. The GNU Lesser General Public License 
gives permission to release a modified version without this exception; 
this exception also makes it possible to release a modified version 
which carries forward this exception.
*/

package server.zone.objects.tangible.component.genetic;

import server.zone.objects.tangible.component.Component;
import engine.lua.LuaObject;
import server.zone.objects.scene.SceneObject;
import server.zone.Zone;
import server.zone.templates.mobile.CreatureTemplate;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
 
class GeneticComponent extends Component {

	protected unsigned int cleverness;
	protected unsigned int endurance;
	protected unsigned int fierceness;
	protected unsigned int power;
	protected unsigned int intelligence;
	protected unsigned int courage;
	protected unsigned int dependency;
	protected unsigned int dexterity;
	protected unsigned int fortitude;
	protected unsigned int hardiness;
	protected string special1;
	protected string special2;
	protected boolean ranged;
	protected int quality;
	protected int armorRating;
	protected float kinResist;
	protected float energyResist;
	protected float blastResist;
	protected float coldResist;
	protected float heatResist;
	protected float elecResist;
	protected float acidResist;
	protected float stunResist;
	protected float saberResist;
	// Extra non visible stats
	protected int level;
	protected int health;
	protected int action;
	protected int mind;
	protected float hit;
	protected float speed;
	protected int minDam;
	protected int maxDam;
	protected int levelMod;
	
	public GeneticComponent() {
		Logger.setLoggingName("GeneticComponent");
		cleverness = 0;
		endurance = 0;
		fierceness = 0;
		power = 0;
		intelligence = 0;
		courage = 0;
		dependency = 0;
		dexterity = 0;
		fortitude = 0;
		hardiness = 0;
		special1 = "none";
		special2 = "none";
		ranged = false;
		quality = 7;
		armorRating = 0;
		kinResist = 0;
		energyResist = 0;
		blastResist = 0;
		coldResist = 0;
		heatResist = 0;
		elecResist = 0;
		acidResist = 0;
		stunResist = 0;	
		saberResist = -1;
		level = 1;
		health = 10;
		action = 10;
		mind = 10;
		hit = 0;
		speed = 0;
		minDam = 1;
		maxDam = 1;
		levelMod = 0;
	}
	public void setStats(unsigned int cle, unsigned int end, unsigned int fie, unsigned int pow, 
						    unsigned int ite, unsigned int cou, unsigned int dep, unsigned int dex, 
						    unsigned int frt, unsigned int har){
		cleverness = cle;
		endurance = end;
		fierceness = fie;
		power = pow;
		intelligence = ite;
		courage = cou;
		dependency = dep;
		fortitude = frt;
		hardiness = har;
	}
	public void setLevel(int value) {
		level = value;
	}
	
	@dirty
	public float getKinetic() { 
		return kinResist; 
	}
	
	@dirty
	public float getEnergy() { 
		return energyResist; 
	}
	
	@dirty
	public float getBlast() { 
		return blastResist; 
	}
	
	@dirty
	public float getCold() { 
		return coldResist; 
	}
	
	@dirty
	public float getHeat() { 
		return heatResist; 
	}
	
	@dirty
	public float getElectrical() { 
		return elecResist; 
	}
	
	@dirty
	public float getAcid() { 
		return acidResist; 
	}
	
	@dirty
	public float getStun() { 
		return stunResist; 
	}
	
	@dirty
	public float getSaber() { 
		return saberResist; 
	}
	
	@dirty
	public string getSpecial1() { 
		return special1; 
	}
	
	@dirty
	public string getSpecial2() { 
		return special2; 
	}
	
	@dirty
	public int getArmor() {
		return armorRating;
	}
	
	@dirty
	public float getHit() {
		return hit;
	}
	
	@dirty
	public float getSpeed() {
		return speed;
	}
	
	@dirty 
	public int getMinDamage() {
		return minDam;
	}
	
	@dirty 
	public int getMaxDamage() {
		return maxDam;
	}
	
	@dirty
	public int getHealth(){
		return health;
	}
	
	@dirty
	public int getMind() {
		return mind;
	}
	
	@dirty
	public int getAction() {
		return action;
	}
	
	@dirty
	public int getLevel() { 
		return level + levelMod;
	}

	@dirty
	public boolean getRanged() { 
		return ranged;
	}

	
	public void setCleverness(unsigned int value) {
		cleverness = value;
	}
	
	public void setEndurance(unsigned int value) {
		endurance = value;
	}
	
	public void setFierceness(unsigned int value) {
		fierceness = value;
	}
	
	public void setPower(unsigned int value) {
		power = value;
	}

	public void setIntellect(unsigned int value) {
		intelligence = value;
	}
	
	public void setCourage(unsigned int value) {
		courage = value;
	}
	
	public void setDependency(unsigned int value) {
		dependency = value;
	}
	
	public void setDexterity(unsigned int value) {
		dexterity = value;
	}
	
	public void setFortitude(unsigned int value) {
		fortitude = value;
	}
	
	public void setHardiness(unsigned int value) {
		hardiness = value;
	}
	
	public void setEnergy(float value){
		energyResist = value;
	}
	
	public void setBlast(float value) {
		blastResist = value;
	}
	
	public void setCold(float value) {
		coldResist = value;
	}
	
	public void setHeat(float value) {
		heatResist = value;
	}
	
	public void setElectric(float value) {
		elecResist = value;
	}
	
	public void setAcid(float value) {
		acidResist = value;
	}
	
	public void setStun(float value) {
		stunResist = value;
	}
	
	public void setSaber(float value) {
		saberResist = value;
	}
			
	public void setArmorRating(int rating) {
		armorRating = rating;	
	}
	
	public void setKinetic(float value) {
		kinResist = value;	
	}
	
	public void setSpecialAttackOne(final string atk) {
		special1 = atk;	
	}
	
	public void setSpecialAttackTwo(final string atk) {
		special2 = atk;	
	}
	
	public void setRanged(boolean b) {
		ranged = b;	
	}
	
	public void setQuality(int qual) {
		quality = qual;		
	}
	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();

	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate);
	
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);
	
	@dirty
	public native string convertSpecialAttack(string attackName);

	@dirty
	public native string resistValue(float input);
	
	@local
	public native void resetResists(CraftingValues values);	
}
