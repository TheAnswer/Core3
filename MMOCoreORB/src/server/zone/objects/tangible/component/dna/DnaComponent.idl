/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.component.dna;

import server.zone.objects.tangible.component.Component;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
 
class DnaComponent extends Component {

	protected int cleverness;
	protected int endurance;
	protected int fierceness;
	protected int power;
	protected int intelligence;
	protected int courage;
	protected int dependency;
	protected int dexterity;
	protected int fortitude;
	protected int hardiness;
	protected string source;
	protected string special1;
	protected string special2;
	protected boolean ranged;
	protected int quality;
	protected int armorRating;
	protected float kinResist;
	protected float energyResist;
	protected float blastResist;
	protected float coldResist;
	protected float heatResist;
	protected float elecResist;
	protected float acidResist;
	protected float stunResist;
	protected float saberResist;
	protected int sourceLevel;
	// we need to account for special protections in samples
	protected int specialResists;
		
	public DnaComponent() {
		Logger.setLoggingName("DnaComponent");
		cleverness = 0;
		endurance = 0;
		fierceness = 0;
		power = 0;
		intelligence = 0;
		courage = 0;
		dependency = 0;
		dexterity = 0;
		fortitude = 0;
		hardiness = 0;
		source = "unknown";
		special1 = "none";
		special2 = "none";
		ranged = false;
		quality = 7;
		armorRating = 0;
		kinResist = 0;
		energyResist = 0;
		blastResist = 0;
		coldResist = 0;
		heatResist = 0;
		elecResist = 0;
		acidResist = 0;
		stunResist = 0;	
		saberResist = -1;
		sourceLevel = 1;
		specialResists = 0;
	}
	public void setStats(int cle, int end, int fie, int pow, 
						    int ite, int cou, int dep, int dex, 
						    int frt, int har){
		cleverness = cle;
		endurance = end;
		fierceness = fie;
		power = pow;
		intelligence = ite;
		courage = cou;
		dependency = dep;
		fortitude = frt;
		hardiness = har;
		dexterity = dex;
	}
	
	@dirty
	public native void setSpecialResist(int type);
	
	@dirty
	public native boolean isSpecialResist(int type);
	
	public void setCleverness(int value) {
		cleverness = value;
	}
	
	@dirty
	public int getCleverness() { 
		return cleverness;
	}

	public void setLevel(int value) {
		sourceLevel = value;
	}
	
	@dirty
	public int getLevel() { 
		return sourceLevel;
	}

	
	public void setEndurance(int value) {
		endurance = value;
	}
	
	@dirty
	public int getEndurance() { 
		return endurance;
	}
	
	public void setFierceness(int value) {
		fierceness = value;
	}
	
	@dirty
	public int getFierceness() { 
		return fierceness;
	}
	
	public void setPower(int value) {
		power = value;
	}
	
	@dirty
	public int getPower() { 
		return power;
	}

	public void setIntellect(int value) {
		intelligence = value;
	}
	
	@dirty
	public int getIntellect() { 
		return intelligence;
	}
	
	public void setCourage(int value) {
		courage = value;
	}
	
	@dirty
	public int getCourage() { 
		return courage;
	}
	
	public void setDependency(int value) {
		dependency = value;
	}
	public int getDependency() { 
		return dependency;
	}
	
	public void setDexterity(int value) {
		dexterity = value;
	}
	
	@dirty
	public int getDexterity() { 
		return dexterity;
	}
	
	public void setFortitude(int value) {
		fortitude = value;
	}
	
	@dirty
	public int getForititude() { 
		return fortitude;
	}
	
	public void setHardiness(int value) {
		hardiness = value;
	}
	
	@dirty
	public int getHardiness() { 
		return hardiness;
	}
	
	public void setEnergy(float value){
		energyResist = value;
	}
	
	@dirty
	public float getEnergy() {
		return energyResist;
	}
	public void setBlast(float value) {
		blastResist = value;
	}
	
	@dirty
	public float getBlast(){
		return blastResist;
	}
	
	public void setCold(float value) {
		coldResist = value;
	}
	
	@dirty
	public float getCold() {
		return coldResist;
	}
	public void setHeat(float value) {
		heatResist = value;
	}
	
	@dirty
	public float getHeat() { 
		return heatResist;
	}
	public void setElectric(float value) {
		elecResist = value;
	}
	
	@dirty
	public float getElectric() { 
		return elecResist;
	}
	
	public void setAcid(float value) {
		acidResist = value;
	}
	
	@dirty
	public float getAcid() { 
		return acidResist;
	}
	
	public void setStun(float value) {
		stunResist = value;
	}
	
	@dirty
	public float getStun() { 
		return stunResist;
	}
	
	public void setSaber(float value) {
		saberResist = value;
	}
	
	@dirty
	public float getSaber() { 
		return saberResist;
	}
			
	public void setArmorRating(int rating) {
		armorRating = rating;	
	}
	
	public void setKinetic(float value) {
		kinResist = value;	
	}
	
	@dirty
	public float getKinetic() {
		return kinResist;
	}
	public void setSource(final string src) {
		source = src;	
	}
	
	public void setSpecialAttackOne(final string atk) {
		special1 = atk;	
	}
	
	@dirty
	public string getSpecialAttackOne() { 
		return special1;
	}
	
	public void setSpecialAttackTwo(final string atk) {
		special2 = atk;	
	}
	
	@dirty
	public string getSpecialAttackTwo() { 
		return special2;
	}
	
	public void setRanged(boolean b) {
		ranged = b;	
	}
	
	@dirty
	public boolean isRanged() { 
		return ranged;
	}
	
	public void setQuality(int qual) {
		quality = qual;		
	}
	
	@dirty
	public unsigned int getQuality() { 
		return quality;
	}
	/**
	 * Initializes the transient members of SceneObject, must call the inherited object method first.
	 * @pre {transient members are not initialized }
	 * @post { transient members are initialized }
	 */
	public native void initializeTransientMembers();

	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate);
	
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);
	
	@dirty
	public native string convertSpecialAttack(string attackName);

	@dirty
	public native string resistValue(float input);
	
}
