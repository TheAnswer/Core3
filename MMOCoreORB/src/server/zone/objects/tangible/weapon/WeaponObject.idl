/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.tangible.weapon;

import server.zone.objects.tangible.TangibleObject;
import engine.lua.LuaObject;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.creature.CreatureObject;
import server.zone.packets.scene.AttributeListMessage;
import server.zone.Zone;
include server.zone.objects.manufactureschematic.craftingvalues.CraftingValues;
include server.zone.objects.scene.SceneObjectType;
import server.zone.templates.SharedObjectTemplate;
include server.zone.templates.tangible.SharedWeaponObjectTemplate;
import server.zone.packets.object.ObjectMenuResponse;
import server.zone.objects.tangible.powerup.PowerupObject;
import system.util.Vector;
import system.lang.String;
include server.zone.objects.tangible.Container;

class WeaponObject extends TangibleObject {
	protected int attackType;
	protected string weaponEffect;
	protected int weaponEffectIndex;
	
	protected boolean certified;
	
	protected int armorPiercing;
	
	protected int pointBlankAccuracy;
	protected int pointBlankRange;

	protected int idealRange;
	protected int idealAccuracy;

	protected int maxRange;
	protected int maxRangeAccuracy;
	
	protected int damageType;
	
	protected float attackSpeed;
	
	protected float minDamage;
	protected float maxDamage;
	
	protected float damageRadius;
	
	protected float woundsRatio;
	
	protected int healthAttackCost;
	protected int actionAttackCost;
	protected int mindAttackCost;
	protected int forceCost;
	
	protected int bladeColor;
	
	protected PowerupObject powerupObject;
	
	protected float damageSlice;
	protected float speedSlice;

	@dereferenced
	protected Vector<int> dotType;
	@dereferenced
	protected Vector<int> dotAttribute;
	@dereferenced
	protected Vector<int> dotStrength;
	@dereferenced
	protected Vector<int> dotDuration;
	@dereferenced
	protected Vector<int> dotPotency;
	@dereferenced
	protected Vector<int> dotUses;
	
	protected transient SharedWeaponObjectTemplate weaponTemplate;
	
	@dereferenced
	protected VectorMap<string, int> wearableSkillMods;
	
	public static final int NONE = 0;
	public static final int LIGHT = 1;
	public static final int MEDIUM = 2;
	public static final int HEAVY = 3;

	public static final int KINETIC = 1;
	public static final int ENERGY = 2;
	public static final int BLAST = 4;
	public static final int STUN = 8;
	public static final int LIGHTSABER = 16;
	public static final int HEAT = 32;
	public static final int COLD = 64;
	public static final int ACID = 128;
	public static final int ELECTRICITY = 256;
	public static final int FORCE = 512;

	public static final int MELEEATTACK = 0;
	public static final int RANGEDATTACK = 1;
	public static final int FORCEATTACK = 2;
	public static final int TRAPATTACK = 3;
	public static final int GRENADEATTACK = 4;
	public static final int HEAVYACIDBEAMATTACK = 14;
	public static final int HEAVYLIGHTNINGBEAMATTACK = 15;
	public static final int HEAVYPARTICLEBEAMATTACK = 17;
	public static final int HEAVYROCKETLAUNCHERATTACK = 18;
	public static final int HEAVYLAUNCHERATTACK = 19;
		
	public WeaponObject() {
		certified = false;
		armorPiercing = 0;
		
		healthAttackCost = 0;
		actionAttackCost = 0;
		mindAttackCost = 0;
		forceCost = 0;
		
		pointBlankAccuracy = 0;
		pointBlankRange = 0;
		
		idealRange = 0;
		idealAccuracy = 0;
		
		maxRange = 5;
		maxRangeAccuracy = 0;
		
		damageType = 0;
		
		minDamage = 1;
		maxDamage = 10;
		
		woundsRatio = 0;
		
		damageRadius = 0;
		
		attackSpeed = 1;
		
		weaponTemplate = null;
		
		Logger.setLoggingName("WeaponObject");
		
		damageSlice = 1;
		speedSlice = 1;

		wearableSkillMods.setAllowOverwriteInsertPlan();
	}
	
	@local
	public native void loadTemplateData(SharedObjectTemplate templateData);
	
	public native void initializeTransientMembers();
	
	@dirty
	public native void sendBaselinesTo(SceneObject player);
	
	@dirty
	public native void sendContainerTo(CreatureObject player);
	
	/**
	 * Fills the attribute list message options that are sent to player creature
	 * @pre { }
	 * @post { }
	 * @param msg attribute list message with the attributes
	 * @param object player creature to which the message is sent
	 */
	@local
	@dirty
	public native void fillAttributeList(AttributeListMessage msg, CreatureObject object);

	@local
	public native void updateCraftingValues(CraftingValues values, boolean firstUpdate);

	/**
	 * Handles creating the Saber inventory.
	 */
	public native void createChildObjects();
	
	/**
	 * Returns true if the player has the required certifications for this weapon
	 * @pre { }
	 * @post { }
	 * @param object player object to check against
	 */
	@dirty
	public native boolean isCertifiedFor(CreatureObject object);
	
	@local
	@dirty
	public Vector<string> getDamageModifiers() {
		return weaponTemplate.getDamageModifiers();
	}
	
	@local
	@dirty
	public Vector<string> getSpeedModifiers() {
		return weaponTemplate.getSpeedModifiers();
	}
	
	@local
	@dirty
	public Vector<string> getCreatureAccuracyModifiers() {
		return weaponTemplate.getCreatureAccuracyModifiers();
	}
	
	@local
	@dirty
	public Vector<string> getCreatureAimModifiers() {
		return weaponTemplate.getCreatureAimModifiers();
	}
	
	@local
	@dirty
	public Vector<string> getDefenderDefenseModifiers() {
		return weaponTemplate.getDefenderDefenseModifiers();
	}
	
	@local
	@dirty
	public Vector<string> getDefenderSecondaryDefenseModifiers() {
		return weaponTemplate.getDefenderSecondaryDefenseModifiers();
	}
	
	@local
	@dirty
	public Vector<string> getDefenderToughnessModifiers() {
		return weaponTemplate.getDefenderToughnessModifiers();
	}
	
	public void setCertified(boolean cert) {
		certified = cert;
	}
	
	@dirty
	public int getAttackType() {
		return attackType;
	}
	
	public void setAttackType(int a) {
		attackType = a;
	}
	
	@dirty
	public boolean isCertified() {
		return certified;
	}
	
	@dirty
	public native boolean isEquipped();	
	
	@dirty
	public native int getPointBlankAccuracy(boolean withPup = true);
	
	public void setPointBlankAccuracy(int value) {
		pointBlankAccuracy = value;
	}
	
	@dirty
	public native int getPointBlankRange(boolean withPup = true);
	
	@dirty
	public native int getIdealRange(boolean withPup = true);
	
	public void setIdealRange(int value) {
		idealRange = value;
	}
	
	@dirty
	public native int getMaxRange(boolean withPup = true);
	
	public void setMaxRange(int value) {
		maxRange = value;
	}
	
	@dirty
	public native int getIdealAccuracy(boolean withPup = true);
	
	public void setIdealAccuracy(int value) {
		idealAccuracy = value;
	}
	
	@dirty
	public int getArmorPiercing() {
		return armorPiercing;
	}
	
	@dirty
	public native int getMaxRangeAccuracy(boolean withPup = true);
	
	public void setMaxRangeAccuracy(int value) {
		maxRangeAccuracy = value;
	}
	
	@dirty
	public native float getAttackSpeed(boolean withPup = true);
	
	public void setAttackSpeed(float value) {
		attackSpeed = value;
	}
	
	@dirty
	public native float getMaxDamage(boolean withPup = true);
	
	public void setMaxDamage(float value) {
		maxDamage = value;
	}
	
	@dirty
	public native float getMinDamage(boolean withPup = true);
	
	public void setMinDamage(float value) {
		minDamage = value;
	}
	
	@dirty
	public native float getWoundsRatio(boolean withPup = true);
	
	public void setWoundsRatio(float value) {
		woundsRatio = value;
	}
	
	@dirty
	public native float getDamageRadius(boolean withPup = true);
	
	public void setDamageRadius(float value) {
		damageRadius = value;
	}
	
	@dirty
	public native int getHealthAttackCost(boolean withPup = true);
	
	public void setHealthAttackCost(int value) {
		healthAttackCost = value;
	}
	
	@dirty
	public native int getActionAttackCost(boolean withPup = true);
	
	public void setActionAttackCost(int value) {
		actionAttackCost = value;
	}
	
	@dirty
	public native int getMindAttackCost(boolean withPup = true);
	
	public void setMindAttackCost(int value) {
		mindAttackCost = value;
	}
	
	@dirty
	public int getForceCost() {
		return forceCost;
	}
	
	public void setForceCost(int value) {
		forceCost = value;
	}
	
	@dirty
	public int getBladeColor() {
		return bladeColor;
	}
	
	public void setBladeColor(int value) {
		bladeColor = value;
	}
	
	@dirty
	public int getDamageType() {
		return damageType;
	}
	
	@dirty
	public string getXpType() {
		return weaponTemplate.getXpType();
	}

	@dirty
	public int getNumberOfDots() {
		return dotType.size();
	}

	@dirty
	public int getDotType(int index) {
		return dotType.elementAt(index);
	}

	@dirty
	public int getDotAttribute(int index) {
		return dotAttribute.elementAt(index);
	}

	@dirty
	public int getDotStrength(int index) {
		return dotStrength.elementAt(index);
	}

	@dirty
	public int getDotDuration(int index) {
		return dotDuration.elementAt(index);
	}
	
	@dirty
	public int getDotPotency(int index) {
		return dotPotency.elementAt(index);
	}

	@dirty
	public int getDotUses(int index) {
		return dotUses.elementAt(index);
	}

	public void addDotType(int t) {
		dotType.add(t);
	}

	public void addDotAttribute(int a) {
		dotAttribute.add(a);
	}

	public void addDotStrength(int s) {
		dotStrength.add(s);
	}

	public void addDotDuration(int du) {
		dotDuration.add(du);
	}

	public void addDotPotency(int po) {
		dotPotency.add(po);
	}	

	public void addDotUses(int u) {
		dotUses.add(u);
	}

	public void setDotUses(int u, int index) {
		dotUses.elementAt(index) = u;
	}

	@dirty
	public native string getWeaponType();
	
	@dirty
	public boolean isUnarmedWeapon() {
		return super.gameObjectType == SceneObjectType.WEAPON || super.gameObjectType == SceneObjectType.MELEEWEAPON;
	}
	
	@dirty
	public boolean isMeleeWeapon() {
		return attackType == MELEEATTACK;
	}
	
	@dirty
	public boolean isRangedWeapon() {
		return attackType == RANGEDATTACK;
	}
	
	@dirty
	public boolean isRifleWeapon() {
		return super.gameObjectType == SceneObjectType.RIFLE;
	}

	@dirty
	public boolean isThrownWeapon() {
		return super.gameObjectType == SceneObjectType.THROWNWEAPON;
	}
	
	@dirty
	public boolean isHeavyWeapon() {
		return super.gameObjectType == SceneObjectType.HEAVYWEAPON;
	}
	
	@dirty
	public boolean isSpecialHeavyWeapon() {
		return super.gameObjectType == SceneObjectType.SPECIALHEAVYWEAPON;
	}
	
	@dirty
	public boolean isLightningRifle() {
		return weaponTemplate.getServerObjectCRC() == 397924793; // String("object/weapon/ranged/rifle/rifle_lightning.iff").hashCode()
	}
	
	@dirty
	public boolean isFlameThrower() {
		return weaponTemplate.isDerivedFrom("object/weapon/ranged/rifle/rifle_flame_thrower.iff");
	}

	@dirty
	public boolean isHeavyAcidRifle() {
		return weaponTemplate.isDerivedFrom("object/weapon/ranged/rifle/rifle_acid_beam.iff");
	}

	@dirty
	public boolean isCarbineWeapon() {
		return super.gameObjectType == SceneObjectType.CARBINE;
	}
	
	@dirty
	public boolean isPistolWeapon() {
		return super.gameObjectType == SceneObjectType.PISTOL;
	}
	
	@dirty
	public boolean isOneHandMeleeWeapon() {
		return (super.gameObjectType == SceneObjectType.ONEHANDMELEEWEAPON && !isJediOneHandedWeapon());
	}
	
	@dirty
	public boolean isPolearmWeaponObject() {
		return (super.gameObjectType == SceneObjectType.POLEARM && !isJediPolearmWeapon());
	}
	
	@dirty
	public boolean isTwoHandMeleeWeapon() {
		return (super.gameObjectType == SceneObjectType.TWOHANDMELEEWEAPON && !isJediTwoHandedWeapon());
	}
	
	@dirty
	public boolean isMineWeapon() {
		return super.gameObjectType == SceneObjectType.MINE;
	}
	
	@dirty
	public boolean isJediWeapon() {
		return isJediOneHandedWeapon() || isJediTwoHandedWeapon() || isJediPolearmWeapon();
	}
	
	@dirty
	public boolean isJediOneHandedWeapon() {
		return weaponTemplate.isDerivedFrom("object/weapon/melee/sword/base/shared_crafted_lightsaber_base.iff");
	}
	
	@dirty
	public boolean isJediTwoHandedWeapon() {
		return weaponTemplate.isDerivedFrom("object/weapon/melee/2h_sword/base/shared_crafted_lightsaber_base.iff");
	}
	
	@dirty
	public boolean isJediPolearmWeapon() {
		return weaponTemplate.isDerivedFrom("object/weapon/melee/polearm/base/shared_crafted_lance_lightsaber_base.iff");
	}
	
	@dirty
	public unsigned int getWeaponBitmask() {
		return weaponTemplate.getWeaponType();
	}
	
	@dirty
	public boolean isWeaponObject() {
		return true;
	}
	
	@dirty
	public boolean hasPowerup() {
		return powerupObject != null;
	}
	
	public native boolean applyPowerup(CreatureObject player, PowerupObject pup);
	
	public native PowerupObject removePowerup();
	
	public native void decreasePowerupUses(CreatureObject player);

	public native string repairAttempt(int repairChance);
	
	public native void decay(CreatureObject user);
	
	public void setDamageSlice(float value) {
		if(value > 0.5f || value < 0)
			return;
		damageSlice = 1 + value;
	}

	public void setSpeedSlice(float value) {
		if(value > 0.5f || value < 0)
			return;
		speedSlice = 1 - value;
	}
	
	public abstract native void applySkillModsTo(CreatureObject creature);
	
	public abstract native void removeSkillModsFrom(CreatureObject creature);
	
	public abstract void addSkillMod(final int skillType, final string skillMod, int value, boolean notifyClient = true) {
		wearableSkillMods.put(skillMod, value);
	}

	@local
	@dirty
	public VectorMap<string, int> getWearableSkillMods() {
		return wearableSkillMods;
	}
}
