/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions. */

package server.zone.objects.mission;

import engine.core.ManagedObject;
include system.util.SortedVector;

class PlayerBounty extends ManagedObject {
	protected unsigned long targetPlayerID;

	protected int reward;

	protected boolean online;

	protected unsigned long lastBountyKill;

	protected unsigned long lastBountyDebuff;

	@dereferenced
	protected SortedVector<unsigned long> bountyHunterIDs;

	public PlayerBounty(unsigned long targetID, int payout) {
		targetPlayerID = targetID;
		reward = payout;
		online = true;
		bountyHunterIDs.setNoDuplicateInsertPlan();
		lastBountyKill = 0;
		lastBountyDebuff = 0;
	}

	public void setReward(int amount) {
		reward = amount;
	}

	public void setOnline(boolean state) {
		online = state;
	}

	@read
	public unsigned long getTargetPlayerID() {
		return targetPlayerID;
	}

	@read
	public int getReward() {
		return reward;
	}

	@read
	public boolean isOnline() {
		return online;
	}

	@read
	public int numberOfActiveMissions() {
		return bountyHunterIDs.size();
	}

	public void addBountyHunter(unsigned long id) {
		bountyHunterIDs.put(id);
	}

	public void removeBountyHunter(unsigned long id) {
		bountyHunterIDs.drop(id);
	}

	@read
	public boolean hasBountyHunter(unsigned long id) {
		return bountyHunterIDs.contains(id);
	}

	@local
	@read
	public final SortedVector<unsigned long> getBountyHunters() {
		return bountyHunterIDs;
	}

	@read
	public unsigned long getLastBountyKill() {
		return lastBountyKill;
	}

	public void setLastBountyKill(unsigned long newTime) {
		lastBountyKill = newTime;
	}

	@read
	public unsigned long getLastBountyDebuff() {
	    return lastBountyDebuff;
	}

	public void setLastBountyDebuff(unsigned long newTime) {
	    lastBountyDebuff = newTime;
	}
}
