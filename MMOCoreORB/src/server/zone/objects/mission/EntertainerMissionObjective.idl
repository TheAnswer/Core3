/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone.objects.mission;

import engine.util.Observer;
import server.zone.objects.creature.CreatureObject;
import server.zone.Zone;
include server.zone.objects.mission.events.CompleteMissionAfterCertainTimeTask;
import engine.util.Observable;
import server.zone.objects.mission.MissionObject;
import server.zone.objects.mission.MissionObjective;
import server.zone.objects.mission.MissionObserver;
import server.zone.objects.area.MissionSpawnActiveArea;
import server.zone.objects.scene.SceneObject;
include server.zone.templates.TemplateReference;
import server.zone.templates.SharedObjectTemplate;
include server.zone.objects.area.ActiveArea;

class EntertainerMissionObjective extends MissionObjective {
	protected boolean inMissionArea;
	protected boolean isEntertaining;

	protected ActiveArea locationActiveArea;

	protected CompleteMissionAfterCertainTimeTask completeTask;

	public EntertainerMissionObjective(MissionObject mission) {
		super(mission);

		inMissionArea = false;
		isEntertaining = false;
		locationActiveArea = null;
		completeTask = null;

		Logger.setLoggingName("EntertainerMissionObjective");
	}

	public native void finalize() {
		//Logger.info("deleting from memory", true);
	}

	public void initializeTransientMembers() {
		super.initializeTransientMembers();

		Logger.setLoggingName("EntertainerMissionObjective");
	}

	public native void activate();
	public native void abort();
	public native void complete();

	public native void setIsEntertaining(boolean value);

	public native void clearLocationActiveAreaAndObservers();

	public native int notifyObserverEvent(MissionObserver observer, unsigned int eventType, Observable observable, ManagedObject arg1, long arg2);

	public native void startCompleteTask();

	@dereferenced
	@local
	@dirty
	public native Vector3 getEndPosition();
}
