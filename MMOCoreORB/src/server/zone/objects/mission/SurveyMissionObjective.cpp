/*
 *	server/zone/objects/mission/SurveyMissionObjective.cpp generated by engine3 IDL compiler 0.60
 */

#include "SurveyMissionObjective.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/resource/ResourceSpawn.h"

/*
 *	SurveyMissionObjectiveStub
 */

enum {RPC_FINALIZE__ = 6,RPC_INITIALIZETRANSIENTMEMBERS__,RPC_ACTIVATE__,RPC_ABORT__,RPC_COMPLETE__,RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_,RPC_SETSPAWNFAMILY__STRING_,RPC_SETEFFICIENCY__INT_,};

SurveyMissionObjective::SurveyMissionObjective(MissionObject* mission) : MissionObjective(DummyConstructorParameter::instance()) {
	SurveyMissionObjectiveImplementation* _implementation = new SurveyMissionObjectiveImplementation(mission);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("SurveyMissionObjective");
}

SurveyMissionObjective::SurveyMissionObjective(DummyConstructorParameter* param) : MissionObjective(param) {
	_setClassName("SurveyMissionObjective");
}

SurveyMissionObjective::~SurveyMissionObjective() {
}



void SurveyMissionObjective::initializeTransientMembers() {
	SurveyMissionObjectiveImplementation* _implementation = static_cast<SurveyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIALIZETRANSIENTMEMBERS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initializeTransientMembers();
}

void SurveyMissionObjective::activate() {
	SurveyMissionObjectiveImplementation* _implementation = static_cast<SurveyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ACTIVATE__);

		method.executeWithVoidReturn();
	} else
		_implementation->activate();
}

void SurveyMissionObjective::abort() {
	SurveyMissionObjectiveImplementation* _implementation = static_cast<SurveyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ABORT__);

		method.executeWithVoidReturn();
	} else
		_implementation->abort();
}

void SurveyMissionObjective::complete() {
	SurveyMissionObjectiveImplementation* _implementation = static_cast<SurveyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_COMPLETE__);

		method.executeWithVoidReturn();
	} else
		_implementation->complete();
}

int SurveyMissionObjective::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	SurveyMissionObjectiveImplementation* _implementation = static_cast<SurveyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addObjectParameter(observer);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void SurveyMissionObjective::setSpawnFamily(String& spf) {
	SurveyMissionObjectiveImplementation* _implementation = static_cast<SurveyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETSPAWNFAMILY__STRING_);
		method.addAsciiParameter(spf);

		method.executeWithVoidReturn();
	} else
		_implementation->setSpawnFamily(spf);
}

void SurveyMissionObjective::setEfficiency(unsigned int eff) {
	SurveyMissionObjectiveImplementation* _implementation = static_cast<SurveyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETEFFICIENCY__INT_);
		method.addUnsignedIntParameter(eff);

		method.executeWithVoidReturn();
	} else
		_implementation->setEfficiency(eff);
}

Vector3 SurveyMissionObjective::getEndPosition() {
	SurveyMissionObjectiveImplementation* _implementation = static_cast<SurveyMissionObjectiveImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getEndPosition();
}

DistributedObjectServant* SurveyMissionObjective::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* SurveyMissionObjective::_getImplementationForRead() {
	return _impl;
}

void SurveyMissionObjective::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	SurveyMissionObjectiveImplementation
 */

SurveyMissionObjectiveImplementation::SurveyMissionObjectiveImplementation(DummyConstructorParameter* param) : MissionObjectiveImplementation(param) {
	_initializeImplementation();
}


SurveyMissionObjectiveImplementation::~SurveyMissionObjectiveImplementation() {
	SurveyMissionObjectiveImplementation::finalize();
}


void SurveyMissionObjectiveImplementation::_initializeImplementation() {
	_setClassHelper(SurveyMissionObjectiveHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void SurveyMissionObjectiveImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<SurveyMissionObjective*>(stub);
	MissionObjectiveImplementation::_setStub(stub);
}

DistributedObjectStub* SurveyMissionObjectiveImplementation::_getStub() {
	return _this.get();
}

SurveyMissionObjectiveImplementation::operator const SurveyMissionObjective*() {
	return _this.get();
}

void SurveyMissionObjectiveImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void SurveyMissionObjectiveImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void SurveyMissionObjectiveImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void SurveyMissionObjectiveImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void SurveyMissionObjectiveImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void SurveyMissionObjectiveImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void SurveyMissionObjectiveImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void SurveyMissionObjectiveImplementation::_serializationHelperMethod() {
	MissionObjectiveImplementation::_serializationHelperMethod();

	_setClassName("SurveyMissionObjective");

}

void SurveyMissionObjectiveImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(SurveyMissionObjectiveImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool SurveyMissionObjectiveImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (MissionObjectiveImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xfc94460c: //SurveyMissionObjective.spawnFamily
		TypeInfo<String >::parseFromBinaryStream(&spawnFamily, stream);
		return true;

	case 0x5a0bacaa: //SurveyMissionObjective.efficiency
		TypeInfo<unsigned int >::parseFromBinaryStream(&efficiency, stream);
		return true;

	}

	return false;
}

void SurveyMissionObjectiveImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = SurveyMissionObjectiveImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int SurveyMissionObjectiveImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = MissionObjectiveImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xfc94460c; //SurveyMissionObjective.spawnFamily
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<String >::toBinaryStream(&spawnFamily, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x5a0bacaa; //SurveyMissionObjective.efficiency
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&efficiency, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 2;
}

SurveyMissionObjectiveImplementation::SurveyMissionObjectiveImplementation(MissionObject* mission) : MissionObjectiveImplementation(mission) {
	_initializeImplementation();
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		Logger.setLoggingName("SurveyMissionObjective");
	Logger::setLoggingName("SurveyMissionObjective");
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		efficiency = 0;
	efficiency = 0;
}

void SurveyMissionObjectiveImplementation::finalize() {
}

void SurveyMissionObjectiveImplementation::initializeTransientMembers() {
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		super.initializeTransientMembers();
	MissionObjectiveImplementation::initializeTransientMembers();
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		Logger.setLoggingName("SurveyMissionObjective");
	Logger::setLoggingName("SurveyMissionObjective");
}

void SurveyMissionObjectiveImplementation::setSpawnFamily(String& spf) {
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		spawnFamily = spf;
	spawnFamily = spf;
}

void SurveyMissionObjectiveImplementation::setEfficiency(unsigned int eff) {
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		efficiency = eff;
	efficiency = eff;
}

Vector3 SurveyMissionObjectiveImplementation::getEndPosition() {
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		CreatureObject owner = getPlayerOwner();
	ManagedReference<CreatureObject* > owner = getPlayerOwner();
	// server/zone/objects/mission/SurveyMissionObjective.idl():  		return owner.getWorldPosition();
	return owner->getWorldPosition();
}

/*
 *	SurveyMissionObjectiveAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


SurveyMissionObjectiveAdapter::SurveyMissionObjectiveAdapter(SurveyMissionObjective* obj) : MissionObjectiveAdapter(obj) {
}

void SurveyMissionObjectiveAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_FINALIZE__:
		{
			finalize();
		}
		break;
	case RPC_INITIALIZETRANSIENTMEMBERS__:
		{
			initializeTransientMembers();
		}
		break;
	case RPC_ACTIVATE__:
		{
			activate();
		}
		break;
	case RPC_ABORT__:
		{
			abort();
		}
		break;
	case RPC_COMPLETE__:
		{
			complete();
		}
		break;
	case RPC_NOTIFYOBSERVEREVENT__MISSIONOBSERVER_INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			resp->insertSignedInt(notifyObserverEvent(static_cast<MissionObserver*>(inv->getObjectParameter()), inv->getUnsignedIntParameter(), static_cast<Observable*>(inv->getObjectParameter()), static_cast<ManagedObject*>(inv->getObjectParameter()), inv->getSignedLongParameter()));
		}
		break;
	case RPC_SETSPAWNFAMILY__STRING_:
		{
			String spf; 
			setSpawnFamily(inv->getAsciiParameter(spf));
		}
		break;
	case RPC_SETEFFICIENCY__INT_:
		{
			setEfficiency(inv->getUnsignedIntParameter());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void SurveyMissionObjectiveAdapter::finalize() {
	(static_cast<SurveyMissionObjective*>(stub))->finalize();
}

void SurveyMissionObjectiveAdapter::initializeTransientMembers() {
	(static_cast<SurveyMissionObjective*>(stub))->initializeTransientMembers();
}

void SurveyMissionObjectiveAdapter::activate() {
	(static_cast<SurveyMissionObjective*>(stub))->activate();
}

void SurveyMissionObjectiveAdapter::abort() {
	(static_cast<SurveyMissionObjective*>(stub))->abort();
}

void SurveyMissionObjectiveAdapter::complete() {
	(static_cast<SurveyMissionObjective*>(stub))->complete();
}

int SurveyMissionObjectiveAdapter::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<SurveyMissionObjective*>(stub))->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void SurveyMissionObjectiveAdapter::setSpawnFamily(String& spf) {
	(static_cast<SurveyMissionObjective*>(stub))->setSpawnFamily(spf);
}

void SurveyMissionObjectiveAdapter::setEfficiency(unsigned int eff) {
	(static_cast<SurveyMissionObjective*>(stub))->setEfficiency(eff);
}

/*
 *	SurveyMissionObjectiveHelper
 */

SurveyMissionObjectiveHelper* SurveyMissionObjectiveHelper::staticInitializer = SurveyMissionObjectiveHelper::instance();

SurveyMissionObjectiveHelper::SurveyMissionObjectiveHelper() {
	className = "SurveyMissionObjective";

	Core::getObjectBroker()->registerClass(className, this);
}

void SurveyMissionObjectiveHelper::finalizeHelper() {
	SurveyMissionObjectiveHelper::finalize();
}

DistributedObject* SurveyMissionObjectiveHelper::instantiateObject() {
	return new SurveyMissionObjective(DummyConstructorParameter::instance());
}

DistributedObjectServant* SurveyMissionObjectiveHelper::instantiateServant() {
	return new SurveyMissionObjectiveImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SurveyMissionObjectiveHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SurveyMissionObjectiveAdapter(static_cast<SurveyMissionObjective*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

