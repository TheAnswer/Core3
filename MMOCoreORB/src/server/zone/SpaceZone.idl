/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.zone;

import server.zone.Zone;
import server.zone.OctTree;
import server.zone.TreeEntry;

include server.zone.ZoneProcessServer;
include server.zone.InRangeObjectsVector;
include server.zone.ActiveAreasVector;
import server.zone.objects.scene.SceneObject;
import server.zone.objects.area.ActiveArea;
import server.zone.objects.creature.CreatureObject;
import server.zone.managers.space.SpaceManager;
import server.zone.managers.gcw.GCWManager;
import system.util.SortedVector;
import system.util.SynchronizedSortedVector;
include engine.util.u3d.Vector3;
include server.zone.OctTreeReference;

import server.zone.objects.tangible.TangibleObject;
import server.zone.ActiveAreaOctree;

@mock
class SpaceZone extends Zone {
	private transient SpaceManager spaceManager;

	private transient ActiveAreaOctree areaOctree;

	@dereferenced
	private OctTreeReference octTree;

	// Space Zone Constructor
	public native SpaceZone(ZoneProcessServer processor, final string zoneName);

	/*

		Zone Management

	*/

	public native void createContainerComponent();

	public native void initializePrivateData();

	public native void initializeTransientMembers();

	public native void finalize();

	public native void startManagers();

	public native void stopManagers();

	public native void clearZone();

	/*

		Object Management in Zone

	*/

	@local
	public native void insert(TreeEntry entry);

	@local
	public native void remove(TreeEntry entry);

	@local
	public native void update(TreeEntry entry);

	@local
	public native void inRange(TreeEntry entry, float range);

	public native void updateActiveAreas(TangibleObject tano);

	@arg1preLocked
	@preLocked
	public native void addSceneObject(SceneObject object);

	@arg1preLocked
	@preLocked
	public native void dropSceneObject(SceneObject object);

	/*

		Object Tracking

	*/

	@local
	public native int getInRangeSolidObjects(float x, float z, float y, float range, SortedVector<TreeEntry> objects, boolean readLockZone);

	@local
	public native int getInRangeObjects(float x, float z, float y, float range, SortedVector<TreeEntry> objects, boolean readLockZone, boolean includeBuildingObjects = false);

	@local
	public native int getInRangeObjects(float x, float z, float y, float range, InRangeObjectsVector objects, boolean readLockZone, boolean includeBuildingObjects = false);

	@local
	public native int getInRangePlayers(float x, float z, float y, float range, SortedVector<TreeEntry> objects);

	@local
	public native int getInRangeActiveAreas(float x, float z, float y, SortedVector<ActiveArea> objects, boolean readLockZone);

	@local
	public native int getInRangeActiveAreas(float x, float z, float y, ActiveAreasVector objects, boolean readLockZone);

	/*

		Octree

	*/

	@dirty
	public SpaceManager getSpaceManager() {
		return spaceManager;
	}

	@local
	public abstract ActiveAreaOctree getActiveAreaOctree() {
		return areaOctree;
	}

	/*

		Shared Functions

	*/

	@dirty
	@local
	public native boolean isWithinBoundaries(@dereferenced final Vector3 position);

	public native float getBoundingRadius();

	public native abstract float getZoneObjectRange();

	// Mutators

	// Accessors

	@dirty
	@nativeStub
	@local
	public native SpaceZone asSpaceZone();

	public boolean isSpaceZone() {
		return true;
	}
}

