/*
 *	server/chat/ChatManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "ChatManager.h"

#include "server/zone/ZoneServer.h"

#include "server/chat/room/ChatRoom.h"

#include "server/chat/room/ChatRoomMap.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/managers/player/PlayerMap.h"

#include "server/zone/managers/player/PlayerManager.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/packets/chat/ChatRoomList.h"

#include "server/zone/packets/chat/ChatInstantMessageToCharacter.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

#include "server/zone/objects/waypoint/WaypointObject.h"

/*
 *	ChatManagerStub
 */

enum {RPC_FINALIZE__ = 6,RPC_INITIATEROOMS__,RPC_DESTROYROOMS__,RPC_CREATEROOM__STRING_CHATROOM_,RPC_ADDROOM__CHATROOM_,RPC_REMOVEROOM__CHATROOM_,RPC_POPULATEROOMLISTMESSAGE__CHATROOM_CHATROOMLIST_,RPC_SENDROOMLIST__CREATUREOBJECT_,RPC_ADDPLAYER__CREATUREOBJECT_,RPC_GETPLAYER__STRING_,RPC_REMOVEPLAYER__STRING_,RPC_BROADCASTMESSAGE__BASEMESSAGE_,RPC_BROADCASTMESSAGE__CREATUREOBJECT_UNICODESTRING_LONG_INT_INT_,RPC_HANDLESPATIALCHATINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_,RPC_HANDLEGROUPCHAT__CREATUREOBJECT_UNICODESTRING_,RPC_HANDLEGUILDCHAT__CREATUREOBJECT_UNICODESTRING_,RPC_HANDLEPLANETCHAT__CREATUREOBJECT_UNICODESTRING_,RPC_CREATEROOMBYFULLPATH__STRING_,RPC_GETCHATROOMBYFULLPATH__STRING_,RPC_GETCHATROOMBYGAMEPATH__CHATROOM_STRING_,RPC_HANDLECHATROOMMESSAGE__CREATUREOBJECT_UNICODESTRING_INT_INT_,RPC_HANDLECHATENTERROOMBYID__CREATUREOBJECT_INT_INT_,RPC_HANDLESOCIALINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_,RPC_DESTROYROOM__CHATROOM_,RPC_CREATEGROUPROOM__LONG_CREATUREOBJECT_,RPC_LOADMAIL__CREATUREOBJECT_,RPC_SENDMAIL__STRING_UNICODESTRING_UNICODESTRING_STRING_,RPC_HANDLEREQUESTPERSISTENTMSG__CREATUREOBJECT_INT_,RPC_DELETEPERSISTENTMESSAGE__CREATUREOBJECT_INT_,RPC_BROADCASTGALAXY__CREATUREOBJECT_STRING_,RPC_BROADCASTGALAXY__STRING_STRING_,RPC_SETPLAYERMANAGER__PLAYERMANAGER_,RPC_GETCHATROOM__INT_,RPC_GETGAMEROOM__STRING_,RPC_GETNEXTROOMID__,RPC_GETPLAYERCOUNT__,RPC_GETGUILDROOM__,RPC_GETGROUPROOM__};

ChatManager::ChatManager(ZoneServer* serv, int initsize) : ManagedService(DummyConstructorParameter::instance()) {
	ChatManagerImplementation* _implementation = new ChatManagerImplementation(serv, initsize);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("ChatManager");
}

ChatManager::ChatManager(DummyConstructorParameter* param) : ManagedService(param) {
	_setClassName("ChatManager");
}

ChatManager::~ChatManager() {
}



void ChatManager::initiateRooms() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_INITIATEROOMS__);

		method.executeWithVoidReturn();
	} else
		_implementation->initiateRooms();
}

void ChatManager::destroyRooms() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYROOMS__);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyRooms();
}

ChatRoom* ChatManager::createRoom(const String& roomName, ChatRoom* parent) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEROOM__STRING_CHATROOM_);
		method.addAsciiParameter(roomName);
		method.addObjectParameter(parent);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->createRoom(roomName, parent);
}

void ChatManager::addRoom(ChatRoom* channel) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDROOM__CHATROOM_);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else
		_implementation->addRoom(channel);
}

void ChatManager::removeRoom(ChatRoom* channel) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEROOM__CHATROOM_);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else
		_implementation->removeRoom(channel);
}

void ChatManager::populateRoomListMessage(ChatRoom* channel, ChatRoomList* msg) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_POPULATEROOMLISTMESSAGE__CHATROOM_CHATROOMLIST_);
		method.addObjectParameter(channel);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		_implementation->populateRoomListMessage(channel, msg);
}

void ChatManager::sendRoomList(CreatureObject* player) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDROOMLIST__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->sendRoomList(player);
}

void ChatManager::addPlayer(CreatureObject* player) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_ADDPLAYER__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->addPlayer(player);
}

CreatureObject* ChatManager::getPlayer(const String& name) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__STRING_);
		method.addAsciiParameter(name);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->getPlayer(name);
}

CreatureObject* ChatManager::removePlayer(const String& name) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_REMOVEPLAYER__STRING_);
		method.addAsciiParameter(name);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else
		return _implementation->removePlayer(name);
}

void ChatManager::broadcastMessage(BaseMessage* message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__BASEMESSAGE_);
		method.addObjectParameter(message);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(message);
}

void ChatManager::broadcastMessage(CreatureObject* player, const UnicodeString& message, unsigned long long target, unsigned int moodid, unsigned int mood2) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTMESSAGE__CREATUREOBJECT_UNICODESTRING_LONG_INT_INT_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(message);
		method.addUnsignedLongParameter(target);
		method.addUnsignedIntParameter(moodid);
		method.addUnsignedIntParameter(mood2);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastMessage(player, message, target, moodid, mood2);
}

void ChatManager::handleSpatialChatInternalMessage(CreatureObject* player, const UnicodeString& args) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLESPATIALCHATINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(args);

		method.executeWithVoidReturn();
	} else
		_implementation->handleSpatialChatInternalMessage(player, args);
}

void ChatManager::handleGroupChat(CreatureObject* player, const UnicodeString& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEGROUPCHAT__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else
		_implementation->handleGroupChat(player, message);
}

void ChatManager::handleGuildChat(CreatureObject* player, const UnicodeString& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEGUILDCHAT__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else
		_implementation->handleGuildChat(player, message);
}

void ChatManager::handlePlanetChat(CreatureObject* player, const UnicodeString& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEPLANETCHAT__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(player);
		method.addUnicodeParameter(message);

		method.executeWithVoidReturn();
	} else
		_implementation->handlePlanetChat(player, message);
}

ChatRoom* ChatManager::createRoomByFullPath(const String& path) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEROOMBYFULLPATH__STRING_);
		method.addAsciiParameter(path);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->createRoomByFullPath(path);
}

ChatRoom* ChatManager::getChatRoomByFullPath(const String& path) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOMBYFULLPATH__STRING_);
		method.addAsciiParameter(path);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->getChatRoomByFullPath(path);
}

ChatRoom* ChatManager::getChatRoomByGamePath(ChatRoom* game, const String& path) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOMBYGAMEPATH__CHATROOM_STRING_);
		method.addObjectParameter(game);
		method.addAsciiParameter(path);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->getChatRoomByGamePath(game, path);
}

void ChatManager::handleChatRoomMessage(CreatureObject* sender, const UnicodeString& message, unsigned int roomID, unsigned int counter) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATROOMMESSAGE__CREATUREOBJECT_UNICODESTRING_INT_INT_);
		method.addObjectParameter(sender);
		method.addUnicodeParameter(message);
		method.addUnsignedIntParameter(roomID);
		method.addUnsignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		_implementation->handleChatRoomMessage(sender, message, roomID, counter);
}

void ChatManager::handleChatEnterRoomById(CreatureObject* player, unsigned int counter, unsigned int roomID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLECHATENTERROOMBYID__CREATUREOBJECT_INT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(counter);
		method.addUnsignedIntParameter(roomID);

		method.executeWithVoidReturn();
	} else
		_implementation->handleChatEnterRoomById(player, counter, roomID);
}

void ChatManager::handleSocialInternalMessage(CreatureObject* sender, const UnicodeString& arguments) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLESOCIALINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_);
		method.addObjectParameter(sender);
		method.addUnicodeParameter(arguments);

		method.executeWithVoidReturn();
	} else
		_implementation->handleSocialInternalMessage(sender, arguments);
}

void ChatManager::handleChatInstantMessageToCharacter(ChatInstantMessageToCharacter* message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		_implementation->handleChatInstantMessageToCharacter(message);
}

void ChatManager::destroyRoom(ChatRoom* room) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DESTROYROOM__CHATROOM_);
		method.addObjectParameter(room);

		method.executeWithVoidReturn();
	} else
		_implementation->destroyRoom(room);
}

ChatRoom* ChatManager::createGroupRoom(unsigned long long groupID, CreatureObject* creator) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_CREATEGROUPROOM__LONG_CREATUREOBJECT_);
		method.addUnsignedLongParameter(groupID);
		method.addObjectParameter(creator);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->createGroupRoom(groupID, creator);
}

void ChatManager::loadMail(CreatureObject* player) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_LOADMAIL__CREATUREOBJECT_);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		_implementation->loadMail(player);
}

void ChatManager::sendMail(const String& sendername, const UnicodeString& header, const UnicodeString& body, const String& name) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SENDMAIL__STRING_UNICODESTRING_UNICODESTRING_STRING_);
		method.addAsciiParameter(sendername);
		method.addUnicodeParameter(header);
		method.addUnicodeParameter(body);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		_implementation->sendMail(sendername, header, body, name);
}

int ChatManager::sendMail(const String& sendername, const UnicodeString& subject, StringIdChatParameter& body, const String& recipientName, WaypointObject* waypoint) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->sendMail(sendername, subject, body, recipientName, waypoint);
}

int ChatManager::sendMail(const String& sendername, const UnicodeString& subject, const UnicodeString& body, const String& recipientName, StringIdChatParameterVector* stringIdParameters, WaypointChatParameterVector* waypointParameters) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->sendMail(sendername, subject, body, recipientName, stringIdParameters, waypointParameters);
}

void ChatManager::handleRequestPersistentMsg(CreatureObject* player, unsigned int mailID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_HANDLEREQUESTPERSISTENTMSG__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(mailID);

		method.executeWithVoidReturn();
	} else
		_implementation->handleRequestPersistentMsg(player, mailID);
}

void ChatManager::deletePersistentMessage(CreatureObject* player, unsigned int mailID) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_DELETEPERSISTENTMESSAGE__CREATUREOBJECT_INT_);
		method.addObjectParameter(player);
		method.addUnsignedIntParameter(mailID);

		method.executeWithVoidReturn();
	} else
		_implementation->deletePersistentMessage(player, mailID);
}

void ChatManager::broadcastGalaxy(CreatureObject* player, const String& message) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTGALAXY__CREATUREOBJECT_STRING_);
		method.addObjectParameter(player);
		method.addAsciiParameter(message);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastGalaxy(player, message);
}

void ChatManager::broadcastGalaxy(const String& message, const String& faction) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_BROADCASTGALAXY__STRING_STRING_);
		method.addAsciiParameter(message);
		method.addAsciiParameter(faction);

		method.executeWithVoidReturn();
	} else
		_implementation->broadcastGalaxy(message, faction);
}

void ChatManager::setPlayerManager(PlayerManager* manager) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_SETPLAYERMANAGER__PLAYERMANAGER_);
		method.addObjectParameter(manager);

		method.executeWithVoidReturn();
	} else
		_implementation->setPlayerManager(manager);
}

ChatRoom* ChatManager::getChatRoom(unsigned int id) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETCHATROOM__INT_);
		method.addUnsignedIntParameter(id);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->getChatRoom(id);
}

ChatRoom* ChatManager::getGameRoom(const String& game) {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGAMEROOM__STRING_);
		method.addAsciiParameter(game);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->getGameRoom(game);
}

unsigned int ChatManager::getNextRoomID() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETNEXTROOMID__);

		return method.executeWithUnsignedIntReturn();
	} else
		return _implementation->getNextRoomID();
}

int ChatManager::getPlayerCount() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYERCOUNT__);

		return method.executeWithSignedIntReturn();
	} else
		return _implementation->getPlayerCount();
}

PlayerMap* ChatManager::getPlayerMap() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		throw ObjectNotLocalException(this);

	} else
		return _implementation->getPlayerMap();
}

ChatRoom* ChatManager::getGuildRoom() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGUILDROOM__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->getGuildRoom();
}

ChatRoom* ChatManager::getGroupRoom() {
	ChatManagerImplementation* _implementation = static_cast<ChatManagerImplementation*>(_getImplementation());
	if (_implementation == NULL) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETGROUPROOM__);

		return static_cast<ChatRoom*>(method.executeWithObjectReturn());
	} else
		return _implementation->getGroupRoom();
}

DistributedObjectServant* ChatManager::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* ChatManager::_getImplementationForRead() {
	return _impl;
}

void ChatManager::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	ChatManagerImplementation
 */

ChatManagerImplementation::ChatManagerImplementation(DummyConstructorParameter* param) : ManagedServiceImplementation(param) {
	_initializeImplementation();
}


ChatManagerImplementation::~ChatManagerImplementation() {
	ChatManagerImplementation::finalize();
}


void ChatManagerImplementation::_initializeImplementation() {
	_setClassHelper(ChatManagerHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void ChatManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<ChatManager*>(stub);
	ManagedServiceImplementation::_setStub(stub);
}

DistributedObjectStub* ChatManagerImplementation::_getStub() {
	return _this.get();
}

ChatManagerImplementation::operator const ChatManager*() {
	return _this.get();
}

void ChatManagerImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void ChatManagerImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void ChatManagerImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void ChatManagerImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void ChatManagerImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void ChatManagerImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void ChatManagerImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void ChatManagerImplementation::_serializationHelperMethod() {
	ManagedServiceImplementation::_serializationHelperMethod();

	_setClassName("ChatManager");

}

void ChatManagerImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(ChatManagerImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool ChatManagerImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ManagedServiceImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0x839fbd3c: //ChatManager.server
		TypeInfo<ManagedReference<ZoneServer* > >::parseFromBinaryStream(&server, stream);
		return true;

	case 0x708e5b17: //ChatManager.playerManager
		TypeInfo<ManagedReference<PlayerManager* > >::parseFromBinaryStream(&playerManager, stream);
		return true;

	case 0x6afdf8fc: //ChatManager.gameRooms
		TypeInfo<VectorMap<String, ManagedReference<ChatRoom* > > >::parseFromBinaryStream(&gameRooms, stream);
		return true;

	case 0x6b52e56: //ChatManager.groupRoom
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&groupRoom, stream);
		return true;

	case 0xf02c6946: //ChatManager.guildRoom
		TypeInfo<ManagedReference<ChatRoom* > >::parseFromBinaryStream(&guildRoom, stream);
		return true;

	case 0xd57f367d: //ChatManager.roomID
		TypeInfo<unsigned int >::parseFromBinaryStream(&roomID, stream);
		return true;

	case 0xaa079cc4: //ChatManager.mute
		TypeInfo<bool >::parseFromBinaryStream(&mute, stream);
		return true;

	}

	return false;
}

void ChatManagerImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = ChatManagerImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int ChatManagerImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ManagedServiceImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0x839fbd3c; //ChatManager.server
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ZoneServer* > >::toBinaryStream(&server, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x708e5b17; //ChatManager.playerManager
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<PlayerManager* > >::toBinaryStream(&playerManager, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6afdf8fc; //ChatManager.gameRooms
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<VectorMap<String, ManagedReference<ChatRoom* > > >::toBinaryStream(&gameRooms, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0x6b52e56; //ChatManager.groupRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&groupRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xf02c6946; //ChatManager.guildRoom
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedReference<ChatRoom* > >::toBinaryStream(&guildRoom, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xd57f367d; //ChatManager.roomID
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<unsigned int >::toBinaryStream(&roomID, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);

	_nameHashCode = 0xaa079cc4; //ChatManager.mute
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<bool >::toBinaryStream(&mute, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);


	return _count + 7;
}

void ChatManagerImplementation::addRoom(ChatRoom* channel) {
	Locker _locker(_this.get());
	// server/chat/ChatManager.idl():  		roomMap.put(channel.getRoomID(), channel);
	roomMap->put(channel->getRoomID(), channel);
}

void ChatManagerImplementation::removeRoom(ChatRoom* channel) {
	Locker _locker(_this.get());
	// server/chat/ChatManager.idl():  		roomMap.remove(channel.getRoomID());
	roomMap->remove(channel->getRoomID());
}

void ChatManagerImplementation::setPlayerManager(PlayerManager* manager) {
	// server/chat/ChatManager.idl():  		playerManager = manager;
	playerManager = manager;
}

ChatRoom* ChatManagerImplementation::getChatRoom(unsigned int id) {
	Locker _locker(_this.get());
	// server/chat/ChatManager.idl():  		return roomMap.get(id);
	return roomMap->get(id);
}

ChatRoom* ChatManagerImplementation::getGameRoom(const String& game) {
	Locker _locker(_this.get());
	// server/chat/ChatManager.idl():  		return gameRooms.get(game);
	return (&gameRooms)->get(game);
}

unsigned int ChatManagerImplementation::getNextRoomID() {
	Locker _locker(_this.get());
	// server/chat/ChatManager.idl():  		return ++roomID;
	return  ++roomID;
}

int ChatManagerImplementation::getPlayerCount() {
	// server/chat/ChatManager.idl():  		return playerMap.size();
	return playerMap->size();
}

PlayerMap* ChatManagerImplementation::getPlayerMap() {
	// server/chat/ChatManager.idl():  		return playerMap;
	return playerMap;
}

ChatRoom* ChatManagerImplementation::getGuildRoom() {
	// server/chat/ChatManager.idl():  		return guildRoom;
	return guildRoom;
}

ChatRoom* ChatManagerImplementation::getGroupRoom() {
	// server/chat/ChatManager.idl():  		return groupRoom;
	return groupRoom;
}

/*
 *	ChatManagerAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


ChatManagerAdapter::ChatManagerAdapter(ChatManager* obj) : ManagedServiceAdapter(obj) {
}

void ChatManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_FINALIZE__:
		{
			finalize();
		}
		break;
	case RPC_INITIATEROOMS__:
		{
			initiateRooms();
		}
		break;
	case RPC_DESTROYROOMS__:
		{
			destroyRooms();
		}
		break;
	case RPC_CREATEROOM__STRING_CHATROOM_:
		{
			String roomName; 
			resp->insertLong(createRoom(inv->getAsciiParameter(roomName), static_cast<ChatRoom*>(inv->getObjectParameter()))->_getObjectID());
		}
		break;
	case RPC_ADDROOM__CHATROOM_:
		{
			addRoom(static_cast<ChatRoom*>(inv->getObjectParameter()));
		}
		break;
	case RPC_REMOVEROOM__CHATROOM_:
		{
			removeRoom(static_cast<ChatRoom*>(inv->getObjectParameter()));
		}
		break;
	case RPC_POPULATEROOMLISTMESSAGE__CHATROOM_CHATROOMLIST_:
		{
			populateRoomListMessage(static_cast<ChatRoom*>(inv->getObjectParameter()), static_cast<ChatRoomList*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDROOMLIST__CREATUREOBJECT_:
		{
			sendRoomList(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_ADDPLAYER__CREATUREOBJECT_:
		{
			addPlayer(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETPLAYER__STRING_:
		{
			String name; 
			resp->insertLong(getPlayer(inv->getAsciiParameter(name))->_getObjectID());
		}
		break;
	case RPC_REMOVEPLAYER__STRING_:
		{
			String name; 
			resp->insertLong(removePlayer(inv->getAsciiParameter(name))->_getObjectID());
		}
		break;
	case RPC_BROADCASTMESSAGE__BASEMESSAGE_:
		{
			broadcastMessage(static_cast<BaseMessage*>(inv->getObjectParameter()));
		}
		break;
	case RPC_BROADCASTMESSAGE__CREATUREOBJECT_UNICODESTRING_LONG_INT_INT_:
		{
			UnicodeString message; 
			broadcastMessage(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnicodeParameter(message), inv->getUnsignedLongParameter(), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_HANDLESPATIALCHATINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_:
		{
			UnicodeString args; 
			handleSpatialChatInternalMessage(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnicodeParameter(args));
		}
		break;
	case RPC_HANDLEGROUPCHAT__CREATUREOBJECT_UNICODESTRING_:
		{
			UnicodeString message; 
			handleGroupChat(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnicodeParameter(message));
		}
		break;
	case RPC_HANDLEGUILDCHAT__CREATUREOBJECT_UNICODESTRING_:
		{
			UnicodeString message; 
			handleGuildChat(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnicodeParameter(message));
		}
		break;
	case RPC_HANDLEPLANETCHAT__CREATUREOBJECT_UNICODESTRING_:
		{
			UnicodeString message; 
			handlePlanetChat(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnicodeParameter(message));
		}
		break;
	case RPC_CREATEROOMBYFULLPATH__STRING_:
		{
			String path; 
			resp->insertLong(createRoomByFullPath(inv->getAsciiParameter(path))->_getObjectID());
		}
		break;
	case RPC_GETCHATROOMBYFULLPATH__STRING_:
		{
			String path; 
			resp->insertLong(getChatRoomByFullPath(inv->getAsciiParameter(path))->_getObjectID());
		}
		break;
	case RPC_GETCHATROOMBYGAMEPATH__CHATROOM_STRING_:
		{
			String path; 
			resp->insertLong(getChatRoomByGamePath(static_cast<ChatRoom*>(inv->getObjectParameter()), inv->getAsciiParameter(path))->_getObjectID());
		}
		break;
	case RPC_HANDLECHATROOMMESSAGE__CREATUREOBJECT_UNICODESTRING_INT_INT_:
		{
			UnicodeString message; 
			handleChatRoomMessage(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnicodeParameter(message), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_HANDLECHATENTERROOMBYID__CREATUREOBJECT_INT_INT_:
		{
			handleChatEnterRoomById(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter(), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_HANDLESOCIALINTERNALMESSAGE__CREATUREOBJECT_UNICODESTRING_:
		{
			UnicodeString arguments; 
			handleSocialInternalMessage(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnicodeParameter(arguments));
		}
		break;
	case RPC_DESTROYROOM__CHATROOM_:
		{
			destroyRoom(static_cast<ChatRoom*>(inv->getObjectParameter()));
		}
		break;
	case RPC_CREATEGROUPROOM__LONG_CREATUREOBJECT_:
		{
			resp->insertLong(createGroupRoom(inv->getUnsignedLongParameter(), static_cast<CreatureObject*>(inv->getObjectParameter()))->_getObjectID());
		}
		break;
	case RPC_LOADMAIL__CREATUREOBJECT_:
		{
			loadMail(static_cast<CreatureObject*>(inv->getObjectParameter()));
		}
		break;
	case RPC_SENDMAIL__STRING_UNICODESTRING_UNICODESTRING_STRING_:
		{
			String sendername; UnicodeString header; UnicodeString body; String name; 
			sendMail(inv->getAsciiParameter(sendername), inv->getUnicodeParameter(header), inv->getUnicodeParameter(body), inv->getAsciiParameter(name));
		}
		break;
	case RPC_HANDLEREQUESTPERSISTENTMSG__CREATUREOBJECT_INT_:
		{
			handleRequestPersistentMsg(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_DELETEPERSISTENTMESSAGE__CREATUREOBJECT_INT_:
		{
			deletePersistentMessage(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getUnsignedIntParameter());
		}
		break;
	case RPC_BROADCASTGALAXY__CREATUREOBJECT_STRING_:
		{
			String message; 
			broadcastGalaxy(static_cast<CreatureObject*>(inv->getObjectParameter()), inv->getAsciiParameter(message));
		}
		break;
	case RPC_BROADCASTGALAXY__STRING_STRING_:
		{
			String message; String faction; 
			broadcastGalaxy(inv->getAsciiParameter(message), inv->getAsciiParameter(faction));
		}
		break;
	case RPC_SETPLAYERMANAGER__PLAYERMANAGER_:
		{
			setPlayerManager(static_cast<PlayerManager*>(inv->getObjectParameter()));
		}
		break;
	case RPC_GETCHATROOM__INT_:
		{
			resp->insertLong(getChatRoom(inv->getUnsignedIntParameter())->_getObjectID());
		}
		break;
	case RPC_GETGAMEROOM__STRING_:
		{
			String game; 
			resp->insertLong(getGameRoom(inv->getAsciiParameter(game))->_getObjectID());
		}
		break;
	case RPC_GETNEXTROOMID__:
		{
			resp->insertInt(getNextRoomID());
		}
		break;
	case RPC_GETPLAYERCOUNT__:
		{
			resp->insertSignedInt(getPlayerCount());
		}
		break;
	case RPC_GETGUILDROOM__:
		{
			resp->insertLong(getGuildRoom()->_getObjectID());
		}
		break;
	case RPC_GETGROUPROOM__:
		{
			resp->insertLong(getGroupRoom()->_getObjectID());
		}
		break;
	default:
		throw Exception("Method does not exists");
	}
}

void ChatManagerAdapter::finalize() {
	(static_cast<ChatManager*>(stub))->finalize();
}

void ChatManagerAdapter::initiateRooms() {
	(static_cast<ChatManager*>(stub))->initiateRooms();
}

void ChatManagerAdapter::destroyRooms() {
	(static_cast<ChatManager*>(stub))->destroyRooms();
}

ChatRoom* ChatManagerAdapter::createRoom(const String& roomName, ChatRoom* parent) {
	return (static_cast<ChatManager*>(stub))->createRoom(roomName, parent);
}

void ChatManagerAdapter::addRoom(ChatRoom* channel) {
	(static_cast<ChatManager*>(stub))->addRoom(channel);
}

void ChatManagerAdapter::removeRoom(ChatRoom* channel) {
	(static_cast<ChatManager*>(stub))->removeRoom(channel);
}

void ChatManagerAdapter::populateRoomListMessage(ChatRoom* channel, ChatRoomList* msg) {
	(static_cast<ChatManager*>(stub))->populateRoomListMessage(channel, msg);
}

void ChatManagerAdapter::sendRoomList(CreatureObject* player) {
	(static_cast<ChatManager*>(stub))->sendRoomList(player);
}

void ChatManagerAdapter::addPlayer(CreatureObject* player) {
	(static_cast<ChatManager*>(stub))->addPlayer(player);
}

CreatureObject* ChatManagerAdapter::getPlayer(const String& name) {
	return (static_cast<ChatManager*>(stub))->getPlayer(name);
}

CreatureObject* ChatManagerAdapter::removePlayer(const String& name) {
	return (static_cast<ChatManager*>(stub))->removePlayer(name);
}

void ChatManagerAdapter::broadcastMessage(BaseMessage* message) {
	(static_cast<ChatManager*>(stub))->broadcastMessage(message);
}

void ChatManagerAdapter::broadcastMessage(CreatureObject* player, const UnicodeString& message, unsigned long long target, unsigned int moodid, unsigned int mood2) {
	(static_cast<ChatManager*>(stub))->broadcastMessage(player, message, target, moodid, mood2);
}

void ChatManagerAdapter::handleSpatialChatInternalMessage(CreatureObject* player, const UnicodeString& args) {
	(static_cast<ChatManager*>(stub))->handleSpatialChatInternalMessage(player, args);
}

void ChatManagerAdapter::handleGroupChat(CreatureObject* player, const UnicodeString& message) {
	(static_cast<ChatManager*>(stub))->handleGroupChat(player, message);
}

void ChatManagerAdapter::handleGuildChat(CreatureObject* player, const UnicodeString& message) {
	(static_cast<ChatManager*>(stub))->handleGuildChat(player, message);
}

void ChatManagerAdapter::handlePlanetChat(CreatureObject* player, const UnicodeString& message) {
	(static_cast<ChatManager*>(stub))->handlePlanetChat(player, message);
}

ChatRoom* ChatManagerAdapter::createRoomByFullPath(const String& path) {
	return (static_cast<ChatManager*>(stub))->createRoomByFullPath(path);
}

ChatRoom* ChatManagerAdapter::getChatRoomByFullPath(const String& path) {
	return (static_cast<ChatManager*>(stub))->getChatRoomByFullPath(path);
}

ChatRoom* ChatManagerAdapter::getChatRoomByGamePath(ChatRoom* game, const String& path) {
	return (static_cast<ChatManager*>(stub))->getChatRoomByGamePath(game, path);
}

void ChatManagerAdapter::handleChatRoomMessage(CreatureObject* sender, const UnicodeString& message, unsigned int roomID, unsigned int counter) {
	(static_cast<ChatManager*>(stub))->handleChatRoomMessage(sender, message, roomID, counter);
}

void ChatManagerAdapter::handleChatEnterRoomById(CreatureObject* player, unsigned int counter, unsigned int roomID) {
	(static_cast<ChatManager*>(stub))->handleChatEnterRoomById(player, counter, roomID);
}

void ChatManagerAdapter::handleSocialInternalMessage(CreatureObject* sender, const UnicodeString& arguments) {
	(static_cast<ChatManager*>(stub))->handleSocialInternalMessage(sender, arguments);
}

void ChatManagerAdapter::destroyRoom(ChatRoom* room) {
	(static_cast<ChatManager*>(stub))->destroyRoom(room);
}

ChatRoom* ChatManagerAdapter::createGroupRoom(unsigned long long groupID, CreatureObject* creator) {
	return (static_cast<ChatManager*>(stub))->createGroupRoom(groupID, creator);
}

void ChatManagerAdapter::loadMail(CreatureObject* player) {
	(static_cast<ChatManager*>(stub))->loadMail(player);
}

void ChatManagerAdapter::sendMail(const String& sendername, const UnicodeString& header, const UnicodeString& body, const String& name) {
	(static_cast<ChatManager*>(stub))->sendMail(sendername, header, body, name);
}

void ChatManagerAdapter::handleRequestPersistentMsg(CreatureObject* player, unsigned int mailID) {
	(static_cast<ChatManager*>(stub))->handleRequestPersistentMsg(player, mailID);
}

void ChatManagerAdapter::deletePersistentMessage(CreatureObject* player, unsigned int mailID) {
	(static_cast<ChatManager*>(stub))->deletePersistentMessage(player, mailID);
}

void ChatManagerAdapter::broadcastGalaxy(CreatureObject* player, const String& message) {
	(static_cast<ChatManager*>(stub))->broadcastGalaxy(player, message);
}

void ChatManagerAdapter::broadcastGalaxy(const String& message, const String& faction) {
	(static_cast<ChatManager*>(stub))->broadcastGalaxy(message, faction);
}

void ChatManagerAdapter::setPlayerManager(PlayerManager* manager) {
	(static_cast<ChatManager*>(stub))->setPlayerManager(manager);
}

ChatRoom* ChatManagerAdapter::getChatRoom(unsigned int id) {
	return (static_cast<ChatManager*>(stub))->getChatRoom(id);
}

ChatRoom* ChatManagerAdapter::getGameRoom(const String& game) {
	return (static_cast<ChatManager*>(stub))->getGameRoom(game);
}

unsigned int ChatManagerAdapter::getNextRoomID() {
	return (static_cast<ChatManager*>(stub))->getNextRoomID();
}

int ChatManagerAdapter::getPlayerCount() {
	return (static_cast<ChatManager*>(stub))->getPlayerCount();
}

ChatRoom* ChatManagerAdapter::getGuildRoom() {
	return (static_cast<ChatManager*>(stub))->getGuildRoom();
}

ChatRoom* ChatManagerAdapter::getGroupRoom() {
	return (static_cast<ChatManager*>(stub))->getGroupRoom();
}

/*
 *	ChatManagerHelper
 */

ChatManagerHelper* ChatManagerHelper::staticInitializer = ChatManagerHelper::instance();

ChatManagerHelper::ChatManagerHelper() {
	className = "ChatManager";

	Core::getObjectBroker()->registerClass(className, this);
}

void ChatManagerHelper::finalizeHelper() {
	ChatManagerHelper::finalize();
}

DistributedObject* ChatManagerHelper::instantiateObject() {
	return new ChatManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* ChatManagerHelper::instantiateServant() {
	return new ChatManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ChatManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChatManagerAdapter(static_cast<ChatManager*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

