/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.chat;

import engine.core.ManagedObject;
import system.lang.System;
include server.chat.StringIdChatParameterVector;
include server.chat.WaypointChatParameter;
include server.chat.WaypointChatParameterVector;
include server.chat.StringIdChatParameter;
import server.zone.objects.creature.CreatureObject;

class PersistentMessage extends ManagedObject {
	protected string senderName;
	protected unicode subject;
	protected unicode body;
	protected unsigned int timeStamp;
	protected byte status;
	
	protected unsigned long receiverObjectID;
	
	@dereferenced
	protected StringIdChatParameterVector stringIdParameters;
	
	@dereferenced
	protected WaypointChatParameterVector waypointParameters;
	
	public static final byte NEW = 0x4E;
	public static final byte READ = 0x52;
	public static final byte UNREAD = 0x55;
	
	public PersistentMessage() {
		timeStamp = System.getTime();
		status = NEW;

		receiverObjectID = 0;
	}
	
	@dirty
	public abstract native void sendTo(CreatureObject player, boolean sendBody = true);
	
	@dirty
	@local
	public StringIdChatParameterVector getStringIdParameters() {
		return stringIdParameters;
	}
	
	@dirty
	@local
	public WaypointChatParameterVector getWaypointParameters() {
		return waypointParameters;
	}
	
	@dirty
	public native int getMailID();
	
	@dirty
	public native unsigned long getObjectID();
	
	@read
	public string getSenderName() {
		return senderName;
	}
	
	@read
	public unsigned long getReceiverObjectID() {
		return receiverObjectID;
	}
	
	@read
	public byte getStatus() {
		return status;
	}
	
	@read
	public int getTimeStamp() {
		return timeStamp;
	}
	
	@read
	public unicode getBody() {
		return body;
	}
	
	@read
	public unicode getSubject() {
		return subject;
	}
	
	public void setSenderName(final string name) {
		senderName = name;
	}
	
	public void setReceiverObjectID(unsigned long oid) {
		receiverObjectID = oid;
	}
	
	public void setStatus(byte stat) {
		status = stat;
	}
	
	public void setTimeStamp(int stamp) {
		timeStamp = stamp;
	}
	
	public void setBody(final unicode message) {
		body = message;
	}
	
	public void setSubject(final unicode subj) {
		subject = subj;
	}

	@read
	public boolean isNew() {
		return status == NEW;
	}
	
	@read
	public boolean isRead() {
		return status == READ;
	}
	
	@read
	public boolean isUnread() {
		return status == UNREAD;
	}
	
	@local
	public native void addStringIdParameter(@dereferenced StringIdChatParameter param);
	
	@local
	public native void addWaypointParameter(@dereferenced WaypointChatParameter param);
}
