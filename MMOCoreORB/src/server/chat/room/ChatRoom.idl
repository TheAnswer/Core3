/*
				Copyright <SWGEmu>
		See file COPYING for copying conditions.*/

package server.chat.room;

import engine.core.ManagedObject;
import system.util.VectorMap;
import system.util.Vector;
import system.lang.Time;
import engine.service.proto.BaseMessage;
import server.zone.ZoneServer;
import server.zone.objects.creature.CreatureObject;
import server.zone.managers.objectcontroller.ObjectController;
import server.chat.ChatManager;

class ChatRoom extends ManagedObject {
	protected transient ZoneServer server;
	protected transient ChatManager manager;

	protected string parentPath;
	protected boolean parentIsPersistent;

	protected string name;
	protected string fullPath;

	protected unsigned long ownerID;
	protected string ownerName;
	protected string creator;

	protected unicode title;
	protected unsigned int roomID;

	protected boolean isPublicRoom;
	protected boolean moderated;
	protected boolean canEnterRoom;
	protected boolean allowSubrooms;

	@dereferenced
	Time lastJoin;

	@dereferenced 
	protected VectorMap<string, unsigned int> subRooms;

	@dereferenced 
	protected transient VectorMap<string, CreatureObject> playerList;
	
	@dereferenced
	protected Vector<unsigned long> moderatorList;

	@dereferenced
	protected Vector<unsigned long> invitedList;

	@dereferenced
	protected Vector<unsigned long> bannedList;
	
	public ChatRoom() {
		server = null;
		manager = null;

		name = "";
		roomID = 0;
		ownerID = 0;

		ownerName = "system";
		creator = "system";
		title = "";
		parentPath = "";
		fullPath = "";

		parentIsPersistent = false;

		isPublicRoom = true;
		
		moderated = false;

		canEnterRoom = false;

		allowSubrooms = false;
	}
	
	public native void init(ZoneServer serv, final string parent, final string roomName);
	public native void sendTo(CreatureObject player);
	public native void sendDestroyTo(CreatureObject player);

////////////////////////////////////////////////////////////////////////////////////////
//                              SubRoom Management
	
	public synchronized void addSubRoom(final string name, unsigned int roomID) {
		subRooms.put(name, roomID);
	}

	public synchronized void removeSubRoom(final string channel) {
		subRooms.drop(channel);
	}

	public synchronized ChatRoom getSubRoom(int i) {
		return manager.getChatRoom(subRooms.get(i));
	}
	
	public synchronized ChatRoom getSubRoom(final string name) {
		return manager.getChatRoom(subRooms.get(name));
	}

	public int getSubRoomsSize() {
		return subRooms.size();
	}

////////////////////////////////////////////////////////////////////////////////////////
//                              Player Management

	public native void addPlayer(CreatureObject player, boolean doLock = true);
	public native void removePlayer(CreatureObject player, boolean doLock = true);
	public native void removePlayer(final string player);
	public native void removeDisconnectingPlayer(CreatureObject player);

	public int getPlayerSize() {
		return playerList.size();
	}
	
	public CreatureObject getPlayer(int idx) {
		return playerList.get(idx);
	}

	public synchronized boolean hasPlayer(CreatureObject player) {
		return playerList.contains(player.getFirstName());
	}
	
	public synchronized boolean hasPlayer(final string name) {
		return playerList.contains(name);
	}

////////////////////////////////////////////////////////////////////////////////////////
//                              Moderator Management

	public synchronized void addModerator(CreatureObject player) {
		moderatorList.add(player.getObjectID());
	}

	public synchronized void removeModerator(CreatureObject player) {
		moderatorList.remove(player.getObjectID());
	}

	public int getModeratorSize() {
		return moderatorList.size();
	}

	public native string getModeratorName(int idx);
		
	public synchronized boolean hasModerator(unsigned long objectID) {
		return moderatorList.contains(objectID);
	}

//////////////////////////////////////////////////////////////////////////////////////////
//                              Invited Management

	public synchronized void addInvited(CreatureObject player) {
		invitedList.add(player.getObjectID());
	}

	public synchronized void removeInvited(CreatureObject player) {
		invitedList.remove(player.getObjectID());
	}

	public int getInvitedSize() {
		return invitedList.size();
	}

	public native string getInvitedName(int idx);

	public synchronized boolean hasInvited(unsigned long objectID) {
		return invitedList.contains(objectID);
	}

//////////////////////////////////////////////////////////////////////////////////////////
//                              Banned Management

	public synchronized void addBanned(CreatureObject player) {
		bannedList.add(player.getObjectID());
	}

	public synchronized void removeBanned(CreatureObject player) {
		bannedList.remove(player.getObjectID());
	}

	public int getBannedSize() {
		return bannedList.size();
	}

	public native string getBannedName(int idx);

	public synchronized boolean hasBanned(unsigned long objectID) {
		return bannedList.contains(objectID);
	}

//////////////////////////////////////////////////////////////////////////////////////////

	public native void broadcastMessage(BaseMessage msg);
	public native void broadcastMessageCheckIgnore(BaseMessage msg, string senderName );
	
	@local 
	public synchronized void broadcastMessages(Vector<BaseMessage> messages) {
		for (int i = 0; i < playerList.size(); ++i) {
			CreatureObject player = playerList.get(i);

			for (int j = 0; j < messages.size(); ++j) {
				BaseMessage msg = messages.get(j);
				player.sendMessage(msg.clone());
			}
		}

		for (int j = 0; j < messages.size(); ++j) {
			BaseMessage msg = messages.get(j);
			msg.finalize();
		}

		messages.removeAll();
	}

	public native void removeAllPlayers();
	
	public void setPrivate() {
		isPublicRoom = false;
	}

	public void setPublic() {
		isPublicRoom = true;
	}

	public boolean isPublic() {
		return isPublicRoom == true;
	}

	public boolean isPrivate() {
		return isPublicRoom == false;
	}

	public boolean canEnter() {
		return canEnterRoom;
	}

	public void setCanEnter(boolean value) {
		canEnterRoom = value;
	}

	public boolean subroomsAllowed() {
		return allowSubrooms;
	}

	public void setAllowSubrooms(boolean value) {
		allowSubrooms = value;
	}
	
	public boolean isModerated() {
		return moderated;
	}
	public void setModerated(boolean moderate) {
		moderated = moderate;
	}

	public void setName(final string Name) {
		name = Name;
	}

	public string getName() {
		return name;
	}

	public string getFullPath() {
		return fullPath;
	}

	public void setOwnerID(unsigned long objectID) {
		ownerID = objectID;
	}

	public unsigned long getOwnerID() {
		return ownerID;
	}

	public void setOwnerName(final string name) {
		ownerName = name;
	}

	public string getOwnerName() {
		return ownerName;
	}

	public void setCreator(final string name) {
		creator = name;
	}

	public string getCreator() {
		return creator;
	}

	public void setTitle(final unicode uniTitle) {
		title = uniTitle;
	}

	public unicode getTitle() {
		return title;
	}
	
	public unsigned int getLastJoinTime() {
		return lastJoin.miliDifference();
	}

	public native string getGalaxyName();

	
	public void setRoomID(int id) {
		roomID = id;
	}

	public void setZoneServer(ZoneServer srv) {
		server = srv;
	}

	public void setChatManager(ChatManager mgr) {
		manager = mgr;
	}

	public unsigned int getRoomID() {
		return roomID;
	}

	public ChatRoom getParent() {
		return manager.getChatRoomByFullPath(parentPath);
	}

	public boolean hasPersistentParent() {
		return parentIsPersistent;
	}

	public int compareTo(ChatRoom obj) {
		if (roomID < obj.getRoomID())
			return 1;
		else if (roomID > obj.getRoomID())
			return -1;
		else
			return 0;
	}
}
