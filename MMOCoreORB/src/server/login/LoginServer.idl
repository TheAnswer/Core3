package server.login;

import engine.service.proto.BasePacketHandler;
import engine.service.DatagramServiceThread;
import engine.service.ServiceClient;
import engine.core.ManagedService;
import engine.service.Message;
import engine.log.Logger;
import conf.ConfigManager;
import server.login.LoginClient;
import server.login.LoginProcessServerImplementation;
import server.login.LoginHandler;
import server.login.account.AccountManager;
import server.login.packets.LoginClusterStatus;
import server.login.packets.LoginEnumCluster;
import system.lang.Exception;
import system.net.Socket;
import system.net.SocketAddress;
import system.net.Packet;

class LoginServer extends ManagedService implements Logger {
	private transient DatagramServiceThread datagramService;
	
	private transient BasePacketHandler phandler;
	
	private transient LoginHandler loginHandler;
	
	private transient LoginProcessServerImplementation processor;
	
	private transient ConfigManager configManager;
	
	private transient LoginEnumCluster enumClusterMessage;
	private transient LoginClusterStatus clusterStatusMessage;

	private transient AccountManager accountManager;
	
	public native LoginServer(ConfigManager config);
	
	public native void initializeTransientMembers();
	
	@local
	public native LoginClient createConnection(Socket sock, @dereferenced SocketAddress addr);
	
	public native void initialize();
	
	public native void shutdown();

	public native void startManagers();

	public native void stopManagers();
	
	public native void start(int p, int mconn = 10);
	
	public native void stop();
	
	@local
	public native void handleMessage(LoginClient client, Packet message);

	@local
	public native void processMessage(Message message);

	@local
	public native boolean handleError(ServiceClient client, @dereferenced Exception e);
	
	public native void printInfo();
	
	public native void populateGalaxyList();
	
	@local
	public AccountManager getAccountManager() {
		return accountManager;
	}

	@local
	public native LoginClient getLoginClient(ServiceClient session);
	
	public LoginEnumCluster getLoginEnumClusterMessage() {
		return (LoginEnumCluster) enumClusterMessage.clone();
	}

	public LoginClusterStatus getLoginClusterStatusMessage() {
		return (LoginClusterStatus) clusterStatusMessage.clone();
	}
}
