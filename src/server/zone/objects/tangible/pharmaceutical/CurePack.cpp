/*
 *	server/zone/objects/tangible/pharmaceutical/CurePack.cpp generated by engine3 IDL compiler 0.60
 */

#include "CurePack.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

/*
 *	CurePackStub
 */

CurePack::CurePack() : PharmaceuticalObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new CurePackImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

CurePack::CurePack(DummyConstructorParameter* param) : PharmaceuticalObject(param) {
}

CurePack::~CurePack() {
}


void CurePack::updateCraftingValues(ManufactureSchematic* schematic) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((CurePackImplementation*) _getImplementation())->updateCraftingValues(schematic);
}

void CurePack::loadTemplateData(SharedObjectTemplate* templateData) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((CurePackImplementation*) _getImplementation())->loadTemplateData(templateData);
}

int CurePack::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((CurePackImplementation*) _getImplementation())->handleObjectMenuSelect(player, selectedID);
}

void CurePack::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((CurePackImplementation*) _getImplementation())->fillAttributeList(msg, object);
}

int CurePack::calculatePower(CreatureObject* creature) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(creature);

		return method.executeWithSignedIntReturn();
	} else
		return ((CurePackImplementation*) _getImplementation())->calculatePower(creature);
}

bool CurePack::isArea() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return ((CurePackImplementation*) _getImplementation())->isArea();
}

float CurePack::getArea() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithFloatReturn();
	} else
		return ((CurePackImplementation*) _getImplementation())->getArea();
}

unsigned long long CurePack::getState() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((CurePackImplementation*) _getImplementation())->getState();
}

float CurePack::getEffectiveness() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithFloatReturn();
	} else
		return ((CurePackImplementation*) _getImplementation())->getEffectiveness();
}

bool CurePack::isCurePack() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithBooleanReturn();
	} else
		return ((CurePackImplementation*) _getImplementation())->isCurePack();
}

/*
 *	CurePackImplementation
 */

CurePackImplementation::CurePackImplementation(DummyConstructorParameter* param) : PharmaceuticalObjectImplementation(param) {
	_initializeImplementation();
}


CurePackImplementation::~CurePackImplementation() {
}


void CurePackImplementation::finalize() {
}

void CurePackImplementation::_initializeImplementation() {
	_setClassHelper(CurePackHelper::instance());

	_serializationHelperMethod();
}

void CurePackImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CurePack*) stub;
	PharmaceuticalObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CurePackImplementation::_getStub() {
	return _this;
}

CurePackImplementation::operator const CurePack*() {
	return _this;
}

TransactionalObject* CurePackImplementation::clone() {
	return (TransactionalObject*) new CurePackImplementation(*this);
}


void CurePackImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CurePackImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CurePackImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CurePackImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CurePackImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CurePackImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CurePackImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CurePackImplementation::_serializationHelperMethod() {
	PharmaceuticalObjectImplementation::_serializationHelperMethod();

	_setClassName("CurePack");

	addSerializableVariable("effectiveness", &effectiveness);
	addSerializableVariable("area", &area);
	addSerializableVariable("state", &state);
	addSerializableVariable("commandToExecute", &commandToExecute);
}

CurePackImplementation::CurePackImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(70):  		setLoggingName("CurePack");
	setLoggingName("CurePack");
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(72):  		effectiveness = 0;
	effectiveness = 0;
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(73):  		area = 0;
	area = 0;
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(74):  		state = 0;
	state = 0;
}

void CurePackImplementation::updateCraftingValues(ManufactureSchematic* schematic) {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(79):  		CraftingValues craftingValues = schematic.getCraftingValues();
	CraftingValues* craftingValues = schematic->getCraftingValues();
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(81):  		effectiveness = craftingValues.getCurrentValue("power");
	effectiveness = craftingValues->getCurrentValue("power");
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(82):  		super.medicineUseRequired = craftingValues.getCurrentValue("skillmodmin");
	PharmaceuticalObjectImplementation::medicineUseRequired = craftingValues->getCurrentValue("skillmodmin");
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(83):  		super.useCount = craftingValues.getCurrentValue("charges");
	PharmaceuticalObjectImplementation::useCount = craftingValues->getCurrentValue("charges");
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(85):  	}
	if (craftingValues->hasProperty("area")){
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(86):  			area = craftingValues.getCurrentValue("area");
	area = craftingValues->getCurrentValue("area");
}
}

void CurePackImplementation::loadTemplateData(SharedObjectTemplate* templateData) {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(98):  		super.loadTemplateData(templateData);
	PharmaceuticalObjectImplementation::loadTemplateData(templateData);
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(100):  		CurePackTemplate 
	if (!templateData->isCurePackTemplate())	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(101):  			return;
	return;
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(103):  stimPackTemplate = (CurePackTemplate) templateData;
	CurePackTemplate* stimPackTemplate = (CurePackTemplate*) templateData;
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(105):  		effectiveness = stimPackTemplate.getEffectiveness();
	effectiveness = stimPackTemplate->getEffectiveness();
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(106):  		super.medicineUseRequired = stimPackTemplate.getMedicineUse();
	PharmaceuticalObjectImplementation::medicineUseRequired = stimPackTemplate->getMedicineUse();
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(107):  		area = stimPackTemplate.getArea();
	area = stimPackTemplate->getArea();
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(108):  		state = stimPackTemplate.getState();
	state = stimPackTemplate->getState();
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(109):  		commandToExecute = stimPackTemplate.getCommandToExecute();
	commandToExecute = stimPackTemplate->getCommandToExecute();
}

int CurePackImplementation::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(121):  		if 
	if (selectedID != 20)	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(122):  			return 1;
	return 1;
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(124):  
	if (player->getSkillMod("healing_ability") < PharmaceuticalObjectImplementation::medicineUseRequired){
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(125):  			player.sendSystemMessage("error_message", "insufficient_skill");
	player->sendSystemMessage("error_message", "insufficient_skill");
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(127):  			return 0;
	return 0;
}

	else {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(129):  			string command = commandToExecute + " ";
	String command = commandToExecute + " ";
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(130):  			command = command + String.valueOf(super.getObjectID());
	command = command + String::valueOf(PharmaceuticalObjectImplementation::getObjectID());
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(132):  			player.sendExecuteConsoleCommand(command);
	player->sendExecuteConsoleCommand(command);
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(134):  			return 0;
	return 0;
}
}

void CurePackImplementation::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(148):  		super.fillAttributeList(msg, object);
	PharmaceuticalObjectImplementation::fillAttributeList(msg, object);
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(150):  		string eff = "@obj_attr_n:dot_type_";
	String eff = "@obj_attr_n:dot_type_";
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(151):  		msg.insertAttribute("examine_dot_cure", eff + CreatureState.getSpecialName(state));
	msg->insertAttribute("examine_dot_cure", eff + CreatureState::getSpecialName(state));
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(153):  		msg.insertAttribute("examine_dot_cure_power", effectiveness);
	msg->insertAttribute("examine_dot_cure_power", effectiveness);
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(155):  
	if (isArea()){
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(156):  			msg.insertAttribute("examine_heal_area", Math.getPrecision(area, 0));
	msg->insertAttribute("examine_heal_area", Math::getPrecision(area, 0));
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(157):  			msg.insertAttribute("healing_ability", super.getMedicineUseRequired());
	msg->insertAttribute("healing_ability", PharmaceuticalObjectImplementation::getMedicineUseRequired());
}

	else {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(159):  			msg.insertAttribute("healing_ability", super.getMedicineUseRequired());
	msg->insertAttribute("healing_ability", PharmaceuticalObjectImplementation::getMedicineUseRequired());
}
}

int CurePackImplementation::calculatePower(CreatureObject* creature) {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(164):  		float modSkill = (float) creature.getSkillMod("healing_wound_treatment");
	float modSkill = (float) creature->getSkillMod("healing_wound_treatment");
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(165):  		return ((100 + modSkill) / 100 * effectiveness);
	return ((100 + modSkill) / 100 * effectiveness);
}

bool CurePackImplementation::isArea() {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(169):  		return area != 0;
	return area != 0;
}

float CurePackImplementation::getArea() {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(173):  		return area;
	return area;
}

unsigned long long CurePackImplementation::getState() {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(177):  		return state;
	return state;
}

float CurePackImplementation::getEffectiveness() {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(181):  		return effectiveness;
	return effectiveness;
}

bool CurePackImplementation::isCurePack() {
	// server/zone/objects/tangible/pharmaceutical/CurePack.idl(185):  		return true;
	return true;
}

/*
 *	CurePackAdapter
 */

CurePackAdapter::CurePackAdapter(CurePackImplementation* obj) : PharmaceuticalObjectAdapter(obj) {
}

Packet* CurePackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 7:
		resp->insertSignedInt(calculatePower((CreatureObject*) inv->getObjectParameter()));
		break;
	case 8:
		resp->insertBoolean(isArea());
		break;
	case 9:
		resp->insertFloat(getArea());
		break;
	case 10:
		resp->insertLong(getState());
		break;
	case 11:
		resp->insertFloat(getEffectiveness());
		break;
	case 12:
		resp->insertBoolean(isCurePack());
		break;
	default:
		return NULL;
	}

	return resp;
}

int CurePackAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((CurePackImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

int CurePackAdapter::calculatePower(CreatureObject* creature) {
	return ((CurePackImplementation*) impl)->calculatePower(creature);
}

bool CurePackAdapter::isArea() {
	return ((CurePackImplementation*) impl)->isArea();
}

float CurePackAdapter::getArea() {
	return ((CurePackImplementation*) impl)->getArea();
}

unsigned long long CurePackAdapter::getState() {
	return ((CurePackImplementation*) impl)->getState();
}

float CurePackAdapter::getEffectiveness() {
	return ((CurePackImplementation*) impl)->getEffectiveness();
}

bool CurePackAdapter::isCurePack() {
	return ((CurePackImplementation*) impl)->isCurePack();
}

/*
 *	CurePackHelper
 */

CurePackHelper* CurePackHelper::staticInitializer = CurePackHelper::instance();

CurePackHelper::CurePackHelper() {
	className = "CurePack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CurePackHelper::finalizeHelper() {
	CurePackHelper::finalize();
}

DistributedObject* CurePackHelper::instantiateObject() {
	return new CurePack(DummyConstructorParameter::instance());
}

DistributedObjectServant* CurePackHelper::instantiateServant() {
	return new CurePackImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CurePackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CurePackAdapter((CurePackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

