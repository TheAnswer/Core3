/*
 *	server/zone/objects/tangible/pharmaceutical/RevivePack.cpp generated by engine3 IDL compiler 0.60
 */

#include "RevivePack.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

/*
 *	RevivePackStub
 */

RevivePack::RevivePack() : PharmaceuticalObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new RevivePackImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

RevivePack::RevivePack(DummyConstructorParameter* param) : PharmaceuticalObject(param) {
}

RevivePack::~RevivePack() {
}


float RevivePack::getHealthWoundHealed() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _getImplementation())->getHealthWoundHealed();
}

float RevivePack::getHealthHealed() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _getImplementation())->getHealthHealed();
}

float RevivePack::getActionWoundHealed() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _getImplementation())->getActionWoundHealed();
}

float RevivePack::getActionHealed() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _getImplementation())->getActionHealed();
}

float RevivePack::getMindWoundHealed() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _getImplementation())->getMindWoundHealed();
}

float RevivePack::getMindHealed() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithFloatReturn();
	} else
		return ((RevivePackImplementation*) _getImplementation())->getMindHealed();
}

/*
 *	RevivePackImplementation
 */

RevivePackImplementation::RevivePackImplementation(DummyConstructorParameter* param) : PharmaceuticalObjectImplementation(param) {
	_initializeImplementation();
}


RevivePackImplementation::~RevivePackImplementation() {
}


void RevivePackImplementation::finalize() {
}

void RevivePackImplementation::_initializeImplementation() {
	_setClassHelper(RevivePackHelper::instance());

	_serializationHelperMethod();
}

void RevivePackImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (RevivePack*) stub;
	PharmaceuticalObjectImplementation::_setStub(stub);
}

DistributedObjectStub* RevivePackImplementation::_getStub() {
	return _this;
}

RevivePackImplementation::operator const RevivePack*() {
	return _this;
}

TransactionalObject* RevivePackImplementation::clone() {
	return (TransactionalObject*) new RevivePackImplementation(*this);
}


void RevivePackImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void RevivePackImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void RevivePackImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void RevivePackImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void RevivePackImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void RevivePackImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void RevivePackImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void RevivePackImplementation::_serializationHelperMethod() {
	PharmaceuticalObjectImplementation::_serializationHelperMethod();

	_setClassName("RevivePack");

	addSerializableVariable("healthWoundHealed", &healthWoundHealed);
	addSerializableVariable("healthHealed", &healthHealed);
	addSerializableVariable("actionWoundHealed", &actionWoundHealed);
	addSerializableVariable("actionHealed", &actionHealed);
	addSerializableVariable("mindWoundHealed", &mindWoundHealed);
	addSerializableVariable("mindHealed", &mindHealed);
}

RevivePackImplementation::RevivePackImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(66):  		setLoggingName("RevivePack");
	setLoggingName("RevivePack");
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(68):  		healthWoundHealed = 0;
	healthWoundHealed = 0;
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(69):  		healthHealed = 0;
	healthHealed = 0;
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(70):  		actionWoundHealed = 0;
	actionWoundHealed = 0;
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(71):  		actionHealed = 0;
	actionHealed = 0;
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(72):  		mindWoundHealed = 0;
	mindWoundHealed = 0;
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(73):  		mindHealed = 0;
	mindHealed = 0;
}

float RevivePackImplementation::getHealthWoundHealed() {
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(77):  		return healthWoundHealed;
	return healthWoundHealed;
}

float RevivePackImplementation::getHealthHealed() {
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(81):  		return healthHealed;
	return healthHealed;
}

float RevivePackImplementation::getActionWoundHealed() {
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(85):  		return actionWoundHealed;
	return actionWoundHealed;
}

float RevivePackImplementation::getActionHealed() {
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(89):  		return actionHealed;
	return actionHealed;
}

float RevivePackImplementation::getMindWoundHealed() {
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(93):  		return mindWoundHealed;
	return mindWoundHealed;
}

float RevivePackImplementation::getMindHealed() {
	// server/zone/objects/tangible/pharmaceutical/RevivePack.idl(97):  		return mindHealed;
	return mindHealed;
}

/*
 *	RevivePackAdapter
 */

RevivePackAdapter::RevivePackAdapter(RevivePackImplementation* obj) : PharmaceuticalObjectAdapter(obj) {
}

Packet* RevivePackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertFloat(getHealthWoundHealed());
		break;
	case 7:
		resp->insertFloat(getHealthHealed());
		break;
	case 8:
		resp->insertFloat(getActionWoundHealed());
		break;
	case 9:
		resp->insertFloat(getActionHealed());
		break;
	case 10:
		resp->insertFloat(getMindWoundHealed());
		break;
	case 11:
		resp->insertFloat(getMindHealed());
		break;
	default:
		return NULL;
	}

	return resp;
}

float RevivePackAdapter::getHealthWoundHealed() {
	return ((RevivePackImplementation*) impl)->getHealthWoundHealed();
}

float RevivePackAdapter::getHealthHealed() {
	return ((RevivePackImplementation*) impl)->getHealthHealed();
}

float RevivePackAdapter::getActionWoundHealed() {
	return ((RevivePackImplementation*) impl)->getActionWoundHealed();
}

float RevivePackAdapter::getActionHealed() {
	return ((RevivePackImplementation*) impl)->getActionHealed();
}

float RevivePackAdapter::getMindWoundHealed() {
	return ((RevivePackImplementation*) impl)->getMindWoundHealed();
}

float RevivePackAdapter::getMindHealed() {
	return ((RevivePackImplementation*) impl)->getMindHealed();
}

/*
 *	RevivePackHelper
 */

RevivePackHelper* RevivePackHelper::staticInitializer = RevivePackHelper::instance();

RevivePackHelper::RevivePackHelper() {
	className = "RevivePack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void RevivePackHelper::finalizeHelper() {
	RevivePackHelper::finalize();
}

DistributedObject* RevivePackHelper::instantiateObject() {
	return new RevivePack(DummyConstructorParameter::instance());
}

DistributedObjectServant* RevivePackHelper::instantiateServant() {
	return new RevivePackImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* RevivePackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new RevivePackAdapter((RevivePackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

