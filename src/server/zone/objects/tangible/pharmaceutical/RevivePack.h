/*
 *	server/zone/objects/tangible/pharmaceutical/RevivePack.h generated by engine3 IDL compiler 0.60
 */

#ifndef REVIVEPACK_H_
#define REVIVEPACK_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class TangibleObject;

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "engine/lua/LuaObject.h"

#include "server/zone/objects/tangible/pharmaceutical/PharmaceuticalObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace pharmaceutical {

class RevivePack : public PharmaceuticalObject {
public:
	RevivePack();

	float getHealthWoundHealed();

	float getHealthHealed();

	float getActionWoundHealed();

	float getActionHealed();

	float getMindWoundHealed();

	float getMindHealed();

protected:
	RevivePack(DummyConstructorParameter* param);

	virtual ~RevivePack();

	friend class RevivePackHelper;
};

} // namespace pharmaceutical
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::pharmaceutical;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace pharmaceutical {

class RevivePackImplementation : public PharmaceuticalObjectImplementation {
protected:
	float healthWoundHealed;

	float healthHealed;

	float actionWoundHealed;

	float actionHealed;

	float mindWoundHealed;

	float mindHealed;

public:
	RevivePackImplementation();

	RevivePackImplementation(DummyConstructorParameter* param);

	float getHealthWoundHealed();

	float getHealthHealed();

	float getActionWoundHealed();

	float getActionHealed();

	float getMindWoundHealed();

	float getMindHealed();

	RevivePack* _this;

	operator const RevivePack*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~RevivePackImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class RevivePack;
	friend class TransactionalObjectHandle<RevivePackImplementation*>;
};

class RevivePackAdapter : public PharmaceuticalObjectAdapter {
public:
	RevivePackAdapter(RevivePackImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	float getHealthWoundHealed();

	float getHealthHealed();

	float getActionWoundHealed();

	float getActionHealed();

	float getMindWoundHealed();

	float getMindHealed();

};

class RevivePackHelper : public DistributedObjectClassHelper, public Singleton<RevivePackHelper> {
	static RevivePackHelper* staticInitializer;

public:
	RevivePackHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<RevivePackHelper>;
};

} // namespace pharmaceutical
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::pharmaceutical;

#endif /*REVIVEPACK_H_*/
