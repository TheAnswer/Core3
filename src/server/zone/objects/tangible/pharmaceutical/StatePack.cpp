/*
 *	server/zone/objects/tangible/pharmaceutical/StatePack.cpp generated by engine3 IDL compiler 0.60
 */

#include "StatePack.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

/*
 *	StatePackStub
 */

StatePack::StatePack() : PharmaceuticalObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new StatePackImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

StatePack::StatePack(DummyConstructorParameter* param) : PharmaceuticalObject(param) {
}

StatePack::~StatePack() {
}


unsigned long long StatePack::getState() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((StatePackImplementation*) _getImplementation())->getState();
}

/*
 *	StatePackImplementation
 */

StatePackImplementation::StatePackImplementation(DummyConstructorParameter* param) : PharmaceuticalObjectImplementation(param) {
	_initializeImplementation();
}


StatePackImplementation::~StatePackImplementation() {
}


void StatePackImplementation::finalize() {
}

void StatePackImplementation::_initializeImplementation() {
	_setClassHelper(StatePackHelper::instance());

	_serializationHelperMethod();
}

void StatePackImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (StatePack*) stub;
	PharmaceuticalObjectImplementation::_setStub(stub);
}

DistributedObjectStub* StatePackImplementation::_getStub() {
	return _this;
}

StatePackImplementation::operator const StatePack*() {
	return _this;
}

TransactionalObject* StatePackImplementation::clone() {
	return (TransactionalObject*) new StatePackImplementation(*this);
}


void StatePackImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void StatePackImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void StatePackImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void StatePackImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void StatePackImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void StatePackImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void StatePackImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void StatePackImplementation::_serializationHelperMethod() {
	PharmaceuticalObjectImplementation::_serializationHelperMethod();

	_setClassName("StatePack");

	addSerializableVariable("state", &state);
}

StatePackImplementation::StatePackImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(61):  		setLoggingName("StatePack");
	setLoggingName("StatePack");
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(63):  		state = 0;
	state = 0;
}

unsigned long long StatePackImplementation::getState() {
	// server/zone/objects/tangible/pharmaceutical/StatePack.idl(67):  		return state;
	return state;
}

/*
 *	StatePackAdapter
 */

StatePackAdapter::StatePackAdapter(StatePackImplementation* obj) : PharmaceuticalObjectAdapter(obj) {
}

Packet* StatePackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(getState());
		break;
	default:
		return NULL;
	}

	return resp;
}

unsigned long long StatePackAdapter::getState() {
	return ((StatePackImplementation*) impl)->getState();
}

/*
 *	StatePackHelper
 */

StatePackHelper* StatePackHelper::staticInitializer = StatePackHelper::instance();

StatePackHelper::StatePackHelper() {
	className = "StatePack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void StatePackHelper::finalizeHelper() {
	StatePackHelper::finalize();
}

DistributedObject* StatePackHelper::instantiateObject() {
	return new StatePack(DummyConstructorParameter::instance());
}

DistributedObjectServant* StatePackHelper::instantiateServant() {
	return new StatePackImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StatePackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StatePackAdapter((StatePackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

