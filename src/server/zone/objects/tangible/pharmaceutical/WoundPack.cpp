/*
 *	server/zone/objects/tangible/pharmaceutical/WoundPack.cpp generated by engine3 IDL compiler 0.60
 */

#include "WoundPack.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

/*
 *	WoundPackStub
 */

WoundPack::WoundPack() : PharmaceuticalObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new WoundPackImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

WoundPack::WoundPack(DummyConstructorParameter* param) : PharmaceuticalObject(param) {
}

WoundPack::~WoundPack() {
}


float WoundPack::getEffectiveness() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return method.executeWithFloatReturn();
	} else
		return ((WoundPackImplementation*) _getImplementation())->getEffectiveness();
}

byte WoundPack::getAttribute() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithByteReturn();
	} else
		return ((WoundPackImplementation*) _getImplementation())->getAttribute();
}

/*
 *	WoundPackImplementation
 */

WoundPackImplementation::WoundPackImplementation(DummyConstructorParameter* param) : PharmaceuticalObjectImplementation(param) {
	_initializeImplementation();
}


WoundPackImplementation::~WoundPackImplementation() {
}


void WoundPackImplementation::finalize() {
}

void WoundPackImplementation::_initializeImplementation() {
	_setClassHelper(WoundPackHelper::instance());

	_serializationHelperMethod();
}

void WoundPackImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (WoundPack*) stub;
	PharmaceuticalObjectImplementation::_setStub(stub);
}

DistributedObjectStub* WoundPackImplementation::_getStub() {
	return _this;
}

WoundPackImplementation::operator const WoundPack*() {
	return _this;
}

TransactionalObject* WoundPackImplementation::clone() {
	return (TransactionalObject*) new WoundPackImplementation(*this);
}


void WoundPackImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void WoundPackImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void WoundPackImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void WoundPackImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void WoundPackImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void WoundPackImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void WoundPackImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void WoundPackImplementation::_serializationHelperMethod() {
	PharmaceuticalObjectImplementation::_serializationHelperMethod();

	_setClassName("WoundPack");

	addSerializableVariable("effectiveness", &effectiveness);
	addSerializableVariable("attribute", &attribute);
}

WoundPackImplementation::WoundPackImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/pharmaceutical/WoundPack.idl(62):  		setLoggingName("WoundPack");
	setLoggingName("WoundPack");
	// server/zone/objects/tangible/pharmaceutical/WoundPack.idl(64):  		effectiveness = 0;
	effectiveness = 0;
	// server/zone/objects/tangible/pharmaceutical/WoundPack.idl(65):  		attribute = 0;
	attribute = 0;
}

float WoundPackImplementation::getEffectiveness() {
	// server/zone/objects/tangible/pharmaceutical/WoundPack.idl(69):  		return effectiveness;
	return effectiveness;
}

byte WoundPackImplementation::getAttribute() {
	// server/zone/objects/tangible/pharmaceutical/WoundPack.idl(73):  		return attribute;
	return attribute;
}

/*
 *	WoundPackAdapter
 */

WoundPackAdapter::WoundPackAdapter(WoundPackImplementation* obj) : PharmaceuticalObjectAdapter(obj) {
}

Packet* WoundPackAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertFloat(getEffectiveness());
		break;
	case 7:
		resp->insertByte(getAttribute());
		break;
	default:
		return NULL;
	}

	return resp;
}

float WoundPackAdapter::getEffectiveness() {
	return ((WoundPackImplementation*) impl)->getEffectiveness();
}

byte WoundPackAdapter::getAttribute() {
	return ((WoundPackImplementation*) impl)->getAttribute();
}

/*
 *	WoundPackHelper
 */

WoundPackHelper* WoundPackHelper::staticInitializer = WoundPackHelper::instance();

WoundPackHelper::WoundPackHelper() {
	className = "WoundPack";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void WoundPackHelper::finalizeHelper() {
	WoundPackHelper::finalize();
}

DistributedObject* WoundPackHelper::instantiateObject() {
	return new WoundPack(DummyConstructorParameter::instance());
}

DistributedObjectServant* WoundPackHelper::instantiateServant() {
	return new WoundPackImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* WoundPackHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WoundPackAdapter((WoundPackImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

