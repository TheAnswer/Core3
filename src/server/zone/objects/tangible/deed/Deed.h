/*
 *	server/zone/objects/tangible/deed/Deed.h generated by engine3 IDL compiler 0.60
 */

#ifndef DEED_H_
#define DEED_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace templates {

class SharedObjectTemplate;

} // namespace templates
} // namespace zone
} // namespace server

using namespace server::zone::templates;

#include "engine/lua/LuaObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {

class Deed : public TangibleObject {
public:
	Deed();

	void initializeTransientMembers();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void fillAttributeList(AttributeListMessage* alm, PlayerCreature* object);

	void setGeneratedObjectTemplate(const String& templ);

	String getGeneratedObjectTemplate();

	bool isDeedObject();

protected:
	Deed(DummyConstructorParameter* param);

	virtual ~Deed();

	String _return_getGeneratedObjectTemplate;

	friend class DeedHelper;
};

} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {

class DeedImplementation : public TangibleObjectImplementation {
protected:
	String generatedObjectTemplate;

public:
	DeedImplementation();

	DeedImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void fillAttributeList(AttributeListMessage* alm, PlayerCreature* object);

	void setGeneratedObjectTemplate(const String& templ);

	String getGeneratedObjectTemplate();

	bool isDeedObject();

	Deed* _this;

	operator const Deed*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~DeedImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class Deed;
	friend class TransactionalObjectHandle<DeedImplementation*>;
};

class DeedAdapter : public TangibleObjectAdapter {
public:
	DeedAdapter(DeedImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void setGeneratedObjectTemplate(const String& templ);

	String getGeneratedObjectTemplate();

	bool isDeedObject();

protected:
	String _param0_setGeneratedObjectTemplate__String_;
};

class DeedHelper : public DistributedObjectClassHelper, public Singleton<DeedHelper> {
	static DeedHelper* staticInitializer;

public:
	DeedHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<DeedHelper>;
};

} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed;

#endif /*DEED_H_*/
