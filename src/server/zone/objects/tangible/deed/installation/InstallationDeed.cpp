/*
 *	server/zone/objects/tangible/deed/installation/InstallationDeed.cpp generated by engine3 IDL compiler 0.60
 */

#include "InstallationDeed.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

/*
 *	InstallationDeedStub
 */

InstallationDeed::InstallationDeed() : Deed(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new InstallationDeedImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

InstallationDeed::InstallationDeed(DummyConstructorParameter* param) : Deed(param) {
}

InstallationDeed::~InstallationDeed() {
}


void InstallationDeed::fillAttributeList(AttributeListMessage* alm, PlayerCreature* object) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((InstallationDeedImplementation*) _getImplementation())->fillAttributeList(alm, object);
}

void InstallationDeed::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((InstallationDeedImplementation*) _getImplementation())->initializeTransientMembers();
}

int InstallationDeed::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationDeedImplementation*) _getImplementation())->handleObjectMenuSelect(player, selectedID);
}

void InstallationDeed::setSurplusMaintenance(unsigned int surplusMaint) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addUnsignedIntParameter(surplusMaint);

		method.executeWithVoidReturn();
	} else
		((InstallationDeedImplementation*) _getImplementation())->setSurplusMaintenance(surplusMaint);
}

unsigned int InstallationDeed::getSurplusMaintenance() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationDeedImplementation*) _getImplementation())->getSurplusMaintenance();
}

unsigned int InstallationDeed::getSurplusPower() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationDeedImplementation*) _getImplementation())->getSurplusPower();
}

void InstallationDeed::setSurplusPower(unsigned int power) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addUnsignedIntParameter(power);

		method.executeWithVoidReturn();
	} else
		((InstallationDeedImplementation*) _getImplementation())->setSurplusPower(power);
}

bool InstallationDeed::isInstallationDeed() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationDeedImplementation*) _getImplementation())->isInstallationDeed();
}

/*
 *	InstallationDeedImplementation
 */

InstallationDeedImplementation::InstallationDeedImplementation(DummyConstructorParameter* param) : DeedImplementation(param) {
	_initializeImplementation();
}


InstallationDeedImplementation::~InstallationDeedImplementation() {
}


void InstallationDeedImplementation::finalize() {
}

void InstallationDeedImplementation::_initializeImplementation() {
	_setClassHelper(InstallationDeedHelper::instance());

	_serializationHelperMethod();
}

void InstallationDeedImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationDeed*) stub;
	DeedImplementation::_setStub(stub);
}

DistributedObjectStub* InstallationDeedImplementation::_getStub() {
	return _this;
}

InstallationDeedImplementation::operator const InstallationDeed*() {
	return _this;
}

TransactionalObject* InstallationDeedImplementation::clone() {
	return (TransactionalObject*) new InstallationDeedImplementation(*this);
}


void InstallationDeedImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void InstallationDeedImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void InstallationDeedImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void InstallationDeedImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void InstallationDeedImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void InstallationDeedImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void InstallationDeedImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void InstallationDeedImplementation::_serializationHelperMethod() {
	DeedImplementation::_serializationHelperMethod();

	_setClassName("InstallationDeed");

	addSerializableVariable("surplusMaintenance", &surplusMaintenance);
	addSerializableVariable("surplusPower", &surplusPower);
}

InstallationDeedImplementation::InstallationDeedImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl(57):  		Logger.setLoggingName("InstallationDeed");
	Logger::setLoggingName("InstallationDeed");
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl(59):  		surplusMaintenance = 0;
	surplusMaintenance = 0;
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl(60):  		surplusPower = 0;
	surplusPower = 0;
}

void InstallationDeedImplementation::setSurplusMaintenance(unsigned int surplusMaint) {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl(77):  		surplusMaintenance = surplusMaint;
	surplusMaintenance = surplusMaint;
}

unsigned int InstallationDeedImplementation::getSurplusMaintenance() {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl(81):  		return surplusMaintenance;
	return surplusMaintenance;
}

unsigned int InstallationDeedImplementation::getSurplusPower() {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl(85):  		return surplusPower;
	return surplusPower;
}

void InstallationDeedImplementation::setSurplusPower(unsigned int power) {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl(89):  		surplusPower = power;
	surplusPower = power;
}

bool InstallationDeedImplementation::isInstallationDeed() {
	// server/zone/objects/tangible/deed/installation/InstallationDeed.idl(93):  		return true;
	return true;
}

/*
 *	InstallationDeedAdapter
 */

InstallationDeedAdapter::InstallationDeedAdapter(InstallationDeedImplementation* obj) : DeedAdapter(obj) {
}

Packet* InstallationDeedAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 8:
		setSurplusMaintenance(inv->getUnsignedIntParameter());
		break;
	case 9:
		resp->insertInt(getSurplusMaintenance());
		break;
	case 10:
		resp->insertInt(getSurplusPower());
		break;
	case 11:
		setSurplusPower(inv->getUnsignedIntParameter());
		break;
	case 12:
		resp->insertBoolean(isInstallationDeed());
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationDeedAdapter::initializeTransientMembers() {
	((InstallationDeedImplementation*) impl)->initializeTransientMembers();
}

int InstallationDeedAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((InstallationDeedImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void InstallationDeedAdapter::setSurplusMaintenance(unsigned int surplusMaint) {
	((InstallationDeedImplementation*) impl)->setSurplusMaintenance(surplusMaint);
}

unsigned int InstallationDeedAdapter::getSurplusMaintenance() {
	return ((InstallationDeedImplementation*) impl)->getSurplusMaintenance();
}

unsigned int InstallationDeedAdapter::getSurplusPower() {
	return ((InstallationDeedImplementation*) impl)->getSurplusPower();
}

void InstallationDeedAdapter::setSurplusPower(unsigned int power) {
	((InstallationDeedImplementation*) impl)->setSurplusPower(power);
}

bool InstallationDeedAdapter::isInstallationDeed() {
	return ((InstallationDeedImplementation*) impl)->isInstallationDeed();
}

/*
 *	InstallationDeedHelper
 */

InstallationDeedHelper* InstallationDeedHelper::staticInitializer = InstallationDeedHelper::instance();

InstallationDeedHelper::InstallationDeedHelper() {
	className = "InstallationDeed";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstallationDeedHelper::finalizeHelper() {
	InstallationDeedHelper::finalize();
}

DistributedObject* InstallationDeedHelper::instantiateObject() {
	return new InstallationDeed(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstallationDeedHelper::instantiateServant() {
	return new InstallationDeedImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationDeedHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationDeedAdapter((InstallationDeedImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

