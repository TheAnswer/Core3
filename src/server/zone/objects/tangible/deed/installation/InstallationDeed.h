/*
 *	server/zone/objects/tangible/deed/installation/InstallationDeed.h generated by engine3 IDL compiler 0.60
 */

#ifndef INSTALLATIONDEED_H_
#define INSTALLATIONDEED_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

#include "engine/lua/LuaObject.h"

#include "server/zone/objects/tangible/deed/Deed.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {

class InstallationDeed : public Deed {
public:
	InstallationDeed();

	void fillAttributeList(AttributeListMessage* alm, PlayerCreature* object);

	void initializeTransientMembers();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void setSurplusMaintenance(unsigned int surplusMaint);

	unsigned int getSurplusMaintenance();

	unsigned int getSurplusPower();

	void setSurplusPower(unsigned int power);

	bool isInstallationDeed();

protected:
	InstallationDeed(DummyConstructorParameter* param);

	virtual ~InstallationDeed();

	friend class InstallationDeedHelper;
};

} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace deed {

class InstallationDeedImplementation : public DeedImplementation {
protected:
	unsigned int surplusMaintenance;

	unsigned int surplusPower;

public:
	InstallationDeedImplementation();

	InstallationDeedImplementation(DummyConstructorParameter* param);

	void fillAttributeList(AttributeListMessage* alm, PlayerCreature* object);

	void initializeTransientMembers();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void setSurplusMaintenance(unsigned int surplusMaint);

	unsigned int getSurplusMaintenance();

	unsigned int getSurplusPower();

	void setSurplusPower(unsigned int power);

	bool isInstallationDeed();

	InstallationDeed* _this;

	operator const InstallationDeed*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~InstallationDeedImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class InstallationDeed;
	friend class TransactionalObjectHandle<InstallationDeedImplementation*>;
};

class InstallationDeedAdapter : public DeedAdapter {
public:
	InstallationDeedAdapter(InstallationDeedImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void setSurplusMaintenance(unsigned int surplusMaint);

	unsigned int getSurplusMaintenance();

	unsigned int getSurplusPower();

	void setSurplusPower(unsigned int power);

	bool isInstallationDeed();

};

class InstallationDeedHelper : public DistributedObjectClassHelper, public Singleton<InstallationDeedHelper> {
	static InstallationDeedHelper* staticInitializer;

public:
	InstallationDeedHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<InstallationDeedHelper>;
};

} // namespace deed
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::deed;

#endif /*INSTALLATIONDEED_H_*/
