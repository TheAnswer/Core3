/*
 *	server/zone/objects/tangible/wearables/WearableObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "WearableObject.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

#include "server/zone/Zone.h"

/*
 *	WearableObjectStub
 */

WearableObject::WearableObject() : TangibleObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new WearableObjectImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

WearableObject::WearableObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

WearableObject::~WearableObject() {
}


void WearableObject::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((WearableObjectImplementation*) _getImplementation())->initializeTransientMembers();
}

void WearableObject::updateCraftingValues(ManufactureSchematic* schematic) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		((WearableObjectImplementation*) _getImplementation())->updateCraftingValues(schematic);
}

bool WearableObject::isWearableObject() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return ((WearableObjectImplementation*) _getImplementation())->isWearableObject();
}

int WearableObject::getMaxSockets() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithSignedIntReturn();
	} else
		return ((WearableObjectImplementation*) _getImplementation())->getMaxSockets();
}

int WearableObject::socketsUsed() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return ((WearableObjectImplementation*) _getImplementation())->socketsUsed();
}

int WearableObject::socketsLeft() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithSignedIntReturn();
	} else
		return ((WearableObjectImplementation*) _getImplementation())->socketsLeft();
}

void WearableObject::setMaxSockets(int sockets) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addSignedIntParameter(sockets);

		method.executeWithVoidReturn();
	} else
		((WearableObjectImplementation*) _getImplementation())->setMaxSockets(sockets);
}

/*
 *	WearableObjectImplementation
 */

WearableObjectImplementation::WearableObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


WearableObjectImplementation::~WearableObjectImplementation() {
}


void WearableObjectImplementation::finalize() {
}

void WearableObjectImplementation::_initializeImplementation() {
	_setClassHelper(WearableObjectHelper::instance());

	_serializationHelperMethod();
}

void WearableObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (WearableObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* WearableObjectImplementation::_getStub() {
	return _this;
}

WearableObjectImplementation::operator const WearableObject*() {
	return _this;
}

TransactionalObject* WearableObjectImplementation::clone() {
	return (TransactionalObject*) new WearableObjectImplementation(*this);
}


void WearableObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void WearableObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void WearableObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void WearableObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void WearableObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void WearableObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void WearableObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void WearableObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("WearableObject");

	addSerializableVariable("socketCount", &socketCount);
	addSerializableVariable("socketsGenerated", &socketsGenerated);
	addSerializableVariable("wearableSkillModMap", &wearableSkillModMap);
}

WearableObjectImplementation::WearableObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/wearables/WearableObject.idl(63):  		socketCount = 0;
	socketCount = 0;
	// server/zone/objects/tangible/wearables/WearableObject.idl(64):  		socketsGenerated = false;
	socketsGenerated = false;
	// server/zone/objects/tangible/wearables/WearableObject.idl(66):  		Logger.setLoggingName("WearableObject");
	Logger::setLoggingName("WearableObject");
}

bool WearableObjectImplementation::isWearableObject() {
	// server/zone/objects/tangible/wearables/WearableObject.idl(74):  		return true;
	return true;
}

int WearableObjectImplementation::getMaxSockets() {
	// server/zone/objects/tangible/wearables/WearableObject.idl(78):  		return socketCount;
	return socketCount;
}

int WearableObjectImplementation::socketsUsed() {
	// server/zone/objects/tangible/wearables/WearableObject.idl(82):  		return wearableSkillModMap.getUsedSocketCount();
	return (&wearableSkillModMap)->getUsedSocketCount();
}

int WearableObjectImplementation::socketsLeft() {
	// server/zone/objects/tangible/wearables/WearableObject.idl(86):  		return socketCount - socketsUsed();
	return socketCount - socketsUsed();
}

void WearableObjectImplementation::setMaxSockets(int sockets) {
	// server/zone/objects/tangible/wearables/WearableObject.idl(90):  		socketCount = sockets;
	socketCount = sockets;
}

/*
 *	WearableObjectAdapter
 */

WearableObjectAdapter::WearableObjectAdapter(WearableObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* WearableObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		updateCraftingValues((ManufactureSchematic*) inv->getObjectParameter());
		break;
	case 8:
		resp->insertBoolean(isWearableObject());
		break;
	case 9:
		resp->insertSignedInt(getMaxSockets());
		break;
	case 10:
		resp->insertSignedInt(socketsUsed());
		break;
	case 11:
		resp->insertSignedInt(socketsLeft());
		break;
	case 12:
		setMaxSockets(inv->getSignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void WearableObjectAdapter::initializeTransientMembers() {
	((WearableObjectImplementation*) impl)->initializeTransientMembers();
}

void WearableObjectAdapter::updateCraftingValues(ManufactureSchematic* schematic) {
	((WearableObjectImplementation*) impl)->updateCraftingValues(schematic);
}

bool WearableObjectAdapter::isWearableObject() {
	return ((WearableObjectImplementation*) impl)->isWearableObject();
}

int WearableObjectAdapter::getMaxSockets() {
	return ((WearableObjectImplementation*) impl)->getMaxSockets();
}

int WearableObjectAdapter::socketsUsed() {
	return ((WearableObjectImplementation*) impl)->socketsUsed();
}

int WearableObjectAdapter::socketsLeft() {
	return ((WearableObjectImplementation*) impl)->socketsLeft();
}

void WearableObjectAdapter::setMaxSockets(int sockets) {
	((WearableObjectImplementation*) impl)->setMaxSockets(sockets);
}

/*
 *	WearableObjectHelper
 */

WearableObjectHelper* WearableObjectHelper::staticInitializer = WearableObjectHelper::instance();

WearableObjectHelper::WearableObjectHelper() {
	className = "WearableObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void WearableObjectHelper::finalizeHelper() {
	WearableObjectHelper::finalize();
}

DistributedObject* WearableObjectHelper::instantiateObject() {
	return new WearableObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* WearableObjectHelper::instantiateServant() {
	return new WearableObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* WearableObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new WearableObjectAdapter((WearableObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

