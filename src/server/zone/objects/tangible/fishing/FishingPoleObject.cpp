/*
 *	server/zone/objects/tangible/fishing/FishingPoleObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "FishingPoleObject.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

/*
 *	FishingPoleObjectStub
 */

FishingPoleObject::FishingPoleObject() : TangibleObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new FishingPoleObjectImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

FishingPoleObject::FishingPoleObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

FishingPoleObject::~FishingPoleObject() {
}


void FishingPoleObject::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((FishingPoleObjectImplementation*) _getImplementation())->initializeTransientMembers();
}

int FishingPoleObject::getQuality() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingPoleObjectImplementation*) _getImplementation())->getQuality();
}

void FishingPoleObject::setQuality(int value) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((FishingPoleObjectImplementation*) _getImplementation())->setQuality(value);
}

void FishingPoleObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(menuResponse);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((FishingPoleObjectImplementation*) _getImplementation())->fillObjectMenuResponse(menuResponse, player);
}

int FishingPoleObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingPoleObjectImplementation*) _getImplementation())->handleObjectMenuSelect(player, selectedID);
}

int FishingPoleObject::canAddObject(SceneObject* object, String& errorDescription) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(object);
		method.addAsciiParameter(errorDescription);

		return method.executeWithSignedIntReturn();
	} else
		return ((FishingPoleObjectImplementation*) _getImplementation())->canAddObject(object, errorDescription);
}

void FishingPoleObject::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(msg);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((FishingPoleObjectImplementation*) _getImplementation())->fillAttributeList(msg, object);
}

void FishingPoleObject::doFishing(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((FishingPoleObjectImplementation*) _getImplementation())->doFishing(player);
}

String FishingPoleObject::getText(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithAsciiReturn(_return_getText);
		return _return_getText;
	} else
		return ((FishingPoleObjectImplementation*) _getImplementation())->getText(player);
}

/*
 *	FishingPoleObjectImplementation
 */

FishingPoleObjectImplementation::FishingPoleObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


FishingPoleObjectImplementation::~FishingPoleObjectImplementation() {
}


void FishingPoleObjectImplementation::finalize() {
}

void FishingPoleObjectImplementation::_initializeImplementation() {
	_setClassHelper(FishingPoleObjectHelper::instance());

	_serializationHelperMethod();
}

void FishingPoleObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (FishingPoleObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* FishingPoleObjectImplementation::_getStub() {
	return _this;
}

FishingPoleObjectImplementation::operator const FishingPoleObject*() {
	return _this;
}

TransactionalObject* FishingPoleObjectImplementation::clone() {
	return (TransactionalObject*) new FishingPoleObjectImplementation(*this);
}


void FishingPoleObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void FishingPoleObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void FishingPoleObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void FishingPoleObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void FishingPoleObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void FishingPoleObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void FishingPoleObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void FishingPoleObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("FishingPoleObject");

	addSerializableVariable("quality", &quality);
}

FishingPoleObjectImplementation::FishingPoleObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/fishing/FishingPoleObject.idl(60):  		Logger.setLoggingName("FishingPoleObject");
	Logger::setLoggingName("FishingPoleObject");
	// server/zone/objects/tangible/fishing/FishingPoleObject.idl(61):  		quality = 50;
	quality = 50;
}

void FishingPoleObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/fishing/FishingPoleObject.idl(65):  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/fishing/FishingPoleObject.idl(67):  		Logger.setLoggingName("FishingPoleObject");
	Logger::setLoggingName("FishingPoleObject");
}

int FishingPoleObjectImplementation::getQuality() {
	// server/zone/objects/tangible/fishing/FishingPoleObject.idl(71):  		return quality;
	return quality;
}

void FishingPoleObjectImplementation::setQuality(int value) {
	// server/zone/objects/tangible/fishing/FishingPoleObject.idl(75):  	}
	if ((value > -1) && (value < 101))	// server/zone/objects/tangible/fishing/FishingPoleObject.idl(76):  			quality = value;
	quality = value;
}

void FishingPoleObjectImplementation::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	// server/zone/objects/tangible/fishing/FishingPoleObject.idl(86):  		string text = getText(player);
	String text = getText(player);
	// server/zone/objects/tangible/fishing/FishingPoleObject.idl(87):  		menuResponse.addRadialMenuItem(245, 3, text);
	menuResponse->addRadialMenuItem(245, 3, text);
}

/*
 *	FishingPoleObjectAdapter
 */

FishingPoleObjectAdapter::FishingPoleObjectAdapter(FishingPoleObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* FishingPoleObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertSignedInt(getQuality());
		break;
	case 8:
		setQuality(inv->getSignedIntParameter());
		break;
	case 9:
		fillObjectMenuResponse((ObjectMenuResponse*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 10:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 11:
		resp->insertSignedInt(canAddObject((SceneObject*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_canAddObject__SceneObject_String_)));
		break;
	case 12:
		fillAttributeList((AttributeListMessage*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 13:
		doFishing((PlayerCreature*) inv->getObjectParameter());
		break;
	case 14:
		resp->insertAscii(getText((PlayerCreature*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void FishingPoleObjectAdapter::initializeTransientMembers() {
	((FishingPoleObjectImplementation*) impl)->initializeTransientMembers();
}

int FishingPoleObjectAdapter::getQuality() {
	return ((FishingPoleObjectImplementation*) impl)->getQuality();
}

void FishingPoleObjectAdapter::setQuality(int value) {
	((FishingPoleObjectImplementation*) impl)->setQuality(value);
}

void FishingPoleObjectAdapter::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	((FishingPoleObjectImplementation*) impl)->fillObjectMenuResponse(menuResponse, player);
}

int FishingPoleObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((FishingPoleObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

int FishingPoleObjectAdapter::canAddObject(SceneObject* object, String& errorDescription) {
	return ((FishingPoleObjectImplementation*) impl)->canAddObject(object, errorDescription);
}

void FishingPoleObjectAdapter::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	((FishingPoleObjectImplementation*) impl)->fillAttributeList(msg, object);
}

void FishingPoleObjectAdapter::doFishing(PlayerCreature* player) {
	((FishingPoleObjectImplementation*) impl)->doFishing(player);
}

String FishingPoleObjectAdapter::getText(PlayerCreature* player) {
	return ((FishingPoleObjectImplementation*) impl)->getText(player);
}

/*
 *	FishingPoleObjectHelper
 */

FishingPoleObjectHelper* FishingPoleObjectHelper::staticInitializer = FishingPoleObjectHelper::instance();

FishingPoleObjectHelper::FishingPoleObjectHelper() {
	className = "FishingPoleObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void FishingPoleObjectHelper::finalizeHelper() {
	FishingPoleObjectHelper::finalize();
}

DistributedObject* FishingPoleObjectHelper::instantiateObject() {
	return new FishingPoleObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* FishingPoleObjectHelper::instantiateServant() {
	return new FishingPoleObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* FishingPoleObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new FishingPoleObjectAdapter((FishingPoleObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

