/*
 *	server/zone/objects/tangible/fishing/FishingPoleObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef FISHINGPOLEOBJECT_H_
#define FISHINGPOLEOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace fishing {

class FishingPoleObject : public TangibleObject {
public:
	FishingPoleObject();

	void initializeTransientMembers();

	int getQuality();

	void setQuality(int value);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	int canAddObject(SceneObject* object, String& errorDescription);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void doFishing(PlayerCreature* player);

	String getText(PlayerCreature* player);

protected:
	FishingPoleObject(DummyConstructorParameter* param);

	virtual ~FishingPoleObject();

	String _return_getText;

	friend class FishingPoleObjectHelper;
};

} // namespace fishing
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::fishing;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace fishing {

class FishingPoleObjectImplementation : public TangibleObjectImplementation {
protected:
	int quality;

public:
	FishingPoleObjectImplementation();

	FishingPoleObjectImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	int getQuality();

	void setQuality(int value);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	int canAddObject(SceneObject* object, String& errorDescription);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void doFishing(PlayerCreature* player);

	String getText(PlayerCreature* player);

	FishingPoleObject* _this;

	operator const FishingPoleObject*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~FishingPoleObjectImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class FishingPoleObject;
	friend class TransactionalObjectHandle<FishingPoleObjectImplementation*>;
};

class FishingPoleObjectAdapter : public TangibleObjectAdapter {
public:
	FishingPoleObjectAdapter(FishingPoleObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	int getQuality();

	void setQuality(int value);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	int canAddObject(SceneObject* object, String& errorDescription);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void doFishing(PlayerCreature* player);

	String getText(PlayerCreature* player);

protected:
	String _param1_canAddObject__SceneObject_String_;
};

class FishingPoleObjectHelper : public DistributedObjectClassHelper, public Singleton<FishingPoleObjectHelper> {
	static FishingPoleObjectHelper* staticInitializer;

public:
	FishingPoleObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FishingPoleObjectHelper>;
};

} // namespace fishing
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::fishing;

#endif /*FISHINGPOLEOBJECT_H_*/
