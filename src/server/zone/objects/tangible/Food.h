/*
 *	server/zone/objects/tangible/Food.h generated by engine3 IDL compiler 0.60
 */

#ifndef FOOD_H_
#define FOOD_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/tangible/TangibleObject.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class Food : public TangibleObject {
public:
	Food();

	void initializeTransientMembers();

protected:
	Food(DummyConstructorParameter* param);

	virtual ~Food();

	friend class FoodHelper;
};

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

namespace server {
namespace zone {
namespace objects {
namespace tangible {

class FoodImplementation : public TangibleObjectImplementation {

public:
	FoodImplementation();

	FoodImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	Food* _this;

	operator const Food*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~FoodImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class Food;
	friend class TransactionalObjectHandle<FoodImplementation*>;
};

class FoodAdapter : public TangibleObjectAdapter {
public:
	FoodAdapter(FoodImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

};

class FoodHelper : public DistributedObjectClassHelper, public Singleton<FoodHelper> {
	static FoodHelper* staticInitializer;

public:
	FoodHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<FoodHelper>;
};

} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible;

#endif /*FOOD_H_*/
