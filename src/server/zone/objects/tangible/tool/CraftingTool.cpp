/*
 *	server/zone/objects/tangible/tool/CraftingTool.cpp generated by engine3 IDL compiler 0.60
 */

#include "CraftingTool.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/managers/crafting/CraftingManager.h"

#include "server/zone/objects/manufactureschematic/ManufactureSchematic.h"

/*
 *	CraftingToolStub
 */

CraftingTool::CraftingTool() : ToolTangibleObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new CraftingToolImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

CraftingTool::CraftingTool(DummyConstructorParameter* param) : ToolTangibleObject(param) {
}

CraftingTool::~CraftingTool() {
}


void CraftingTool::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->initializeTransientMembers();
}

void CraftingTool::loadTemplateData(SharedObjectTemplate* templateData) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((CraftingToolImplementation*) _getImplementation())->loadTemplateData(templateData);
}

void CraftingTool::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((CraftingToolImplementation*) _getImplementation())->fillObjectMenuResponse(menuResponse, player);
}

int CraftingTool::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingToolImplementation*) _getImplementation())->handleObjectMenuSelect(player, selectedID);
}

void CraftingTool::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((CraftingToolImplementation*) _getImplementation())->fillAttributeList(msg, object);
}

void CraftingTool::updateCraftingValues(ManufactureSchematic* schematic) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->updateCraftingValues(schematic);
}

bool CraftingTool::isCraftingTool() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return method.executeWithBooleanReturn();
	} else
		return ((CraftingToolImplementation*) _getImplementation())->isCraftingTool();
}

int CraftingTool::getToolType() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithSignedIntReturn();
	} else
		return ((CraftingToolImplementation*) _getImplementation())->getToolType();
}

Vector<unsigned int>* CraftingTool::getToolTabs() {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((CraftingToolImplementation*) _getImplementation())->getToolTabs();
}

void CraftingTool::requestCraftingSession(PlayerCreature* player, CraftingStation* craftingStation) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(player);
		method.addObjectParameter(craftingStation);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->requestCraftingSession(player, craftingStation);
}

void CraftingTool::cancelCraftingSession(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->cancelCraftingSession(player);
}

void CraftingTool::selectDraftSchematic(PlayerCreature* player, int index) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addSignedIntParameter(index);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->selectDraftSchematic(player, index);
}

void CraftingTool::synchronizedUIListenForSchematic(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->synchronizedUIListenForSchematic(player);
}

void CraftingTool::addIngredient(PlayerCreature* player, TangibleObject* tano, int slot, int clientCounter) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(player);
		method.addObjectParameter(tano);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(clientCounter);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->addIngredient(player, tano, slot, clientCounter);
}

void CraftingTool::removeIngredient(PlayerCreature* player, TangibleObject* tano, int slot, int clientCounter) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(player);
		method.addObjectParameter(tano);
		method.addSignedIntParameter(slot);
		method.addSignedIntParameter(clientCounter);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->removeIngredient(player, tano, slot, clientCounter);
}

void CraftingTool::nextCraftingStage(PlayerCreature* player, int clientCounter) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);
		method.addSignedIntParameter(clientCounter);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->nextCraftingStage(player, clientCounter);
}

void CraftingTool::experiment(PlayerCreature* player, int numRowsAttempted, String& expString, int clientCounter) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);
		method.addSignedIntParameter(numRowsAttempted);
		method.addAsciiParameter(expString);
		method.addSignedIntParameter(clientCounter);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->experiment(player, numRowsAttempted, expString, clientCounter);
}

void CraftingTool::customization(PlayerCreature* player, String& name, int schematicCount, String& customization) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);
		method.addAsciiParameter(name);
		method.addSignedIntParameter(schematicCount);
		method.addAsciiParameter(customization);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->customization(player, name, schematicCount, customization);
}

void CraftingTool::createPrototype(PlayerCreature* player, int clientCounter, int practice) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);
		method.addSignedIntParameter(clientCounter);
		method.addSignedIntParameter(practice);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->createPrototype(player, clientCounter, practice);
}

void CraftingTool::createManfSchematic(PlayerCreature* player, int clientCounter) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);
		method.addSignedIntParameter(clientCounter);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->createManfSchematic(player, clientCounter);
}

void CraftingTool::createObject(PlayerCreature* player, int timer, bool create) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(player);
		method.addSignedIntParameter(timer);
		method.addBooleanParameter(create);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->createObject(player, timer, create);
}

void CraftingTool::depositObject(PlayerCreature* player, bool practice) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(player);
		method.addBooleanParameter(practice);

		method.executeWithVoidReturn();
	} else
		((CraftingToolImplementation*) _getImplementation())->depositObject(player, practice);
}

/*
 *	CraftingToolImplementation
 */

CraftingToolImplementation::CraftingToolImplementation(DummyConstructorParameter* param) : ToolTangibleObjectImplementation(param) {
	_initializeImplementation();
}


CraftingToolImplementation::~CraftingToolImplementation() {
}


void CraftingToolImplementation::finalize() {
}

void CraftingToolImplementation::_initializeImplementation() {
	_setClassHelper(CraftingToolHelper::instance());

	_serializationHelperMethod();
}

void CraftingToolImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CraftingTool*) stub;
	ToolTangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CraftingToolImplementation::_getStub() {
	return _this;
}

CraftingToolImplementation::operator const CraftingTool*() {
	return _this;
}

TransactionalObject* CraftingToolImplementation::clone() {
	return (TransactionalObject*) new CraftingToolImplementation(*this);
}


void CraftingToolImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CraftingToolImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CraftingToolImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CraftingToolImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CraftingToolImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CraftingToolImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CraftingToolImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CraftingToolImplementation::_serializationHelperMethod() {
	ToolTangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("CraftingTool");

	addSerializableVariable("type", &type);
	addSerializableVariable("effectiveness", &effectiveness);
	addSerializableVariable("status", &status);
	addSerializableVariable("complexityLevel", &complexityLevel);
	addSerializableVariable("craftingManager", &craftingManager);
	addSerializableVariable("enabledTabs", &enabledTabs);
	addSerializableVariable("currentSchematicList", &currentSchematicList);
	addSerializableVariable("craftingStation", &craftingStation);
	addSerializableVariable("state", &state);
	addSerializableVariable("insertCounter", &insertCounter);
	addSerializableVariable("manufactureSchematic", &manufactureSchematic);
	addSerializableVariable("prototype", &prototype);
	addSerializableVariable("experimentationPointsTotal", &experimentationPointsTotal);
	addSerializableVariable("experimentationPointsUsed", &experimentationPointsUsed);
	addSerializableVariable("assemblyResult", &assemblyResult);
	addSerializableVariable("experimentationResult", &experimentationResult);
	addSerializableVariable("experimentalFailureRate", &experimentalFailureRate);
}

CraftingToolImplementation::CraftingToolImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/tool/CraftingTool.idl(98):  		Logger.setLoggingName("CraftingTool");
	Logger::setLoggingName("CraftingTool");
	// server/zone/objects/tangible/tool/CraftingTool.idl(99):  		status = "@crafting:tool_status_ready";
	status = "@crafting:tool_status_ready";
	// server/zone/objects/tangible/tool/CraftingTool.idl(100):  		state = 1;
	state = 1;
}

void CraftingToolImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/tool/CraftingTool.idl(104):  		super.initializeTransientMembers();
	ToolTangibleObjectImplementation::initializeTransientMembers();
}

bool CraftingToolImplementation::isCraftingTool() {
	// server/zone/objects/tangible/tool/CraftingTool.idl(134):  		return true;
	return true;
}

int CraftingToolImplementation::getToolType() {
	// server/zone/objects/tangible/tool/CraftingTool.idl(138):  		return type;
	return type;
}

/*
 *	CraftingToolAdapter
 */

CraftingToolAdapter::CraftingToolAdapter(CraftingToolImplementation* obj) : ToolTangibleObjectAdapter(obj) {
}

Packet* CraftingToolAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 8:
		updateCraftingValues((ManufactureSchematic*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertBoolean(isCraftingTool());
		break;
	case 10:
		resp->insertSignedInt(getToolType());
		break;
	case 11:
		requestCraftingSession((PlayerCreature*) inv->getObjectParameter(), (CraftingStation*) inv->getObjectParameter());
		break;
	case 12:
		cancelCraftingSession((PlayerCreature*) inv->getObjectParameter());
		break;
	case 13:
		selectDraftSchematic((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 14:
		synchronizedUIListenForSchematic((PlayerCreature*) inv->getObjectParameter());
		break;
	case 15:
		addIngredient((PlayerCreature*) inv->getObjectParameter(), (TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 16:
		removeIngredient((PlayerCreature*) inv->getObjectParameter(), (TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 17:
		nextCraftingStage((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 18:
		experiment((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getAsciiParameter(_param2_experiment__PlayerCreature_int_String_int_), inv->getSignedIntParameter());
		break;
	case 19:
		customization((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_customization__PlayerCreature_String_int_String_), inv->getSignedIntParameter(), inv->getAsciiParameter(_param3_customization__PlayerCreature_String_int_String_));
		break;
	case 20:
		createPrototype((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter());
		break;
	case 21:
		createManfSchematic((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 22:
		createObject((PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 23:
		depositObject((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CraftingToolAdapter::initializeTransientMembers() {
	((CraftingToolImplementation*) impl)->initializeTransientMembers();
}

int CraftingToolAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((CraftingToolImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void CraftingToolAdapter::updateCraftingValues(ManufactureSchematic* schematic) {
	((CraftingToolImplementation*) impl)->updateCraftingValues(schematic);
}

bool CraftingToolAdapter::isCraftingTool() {
	return ((CraftingToolImplementation*) impl)->isCraftingTool();
}

int CraftingToolAdapter::getToolType() {
	return ((CraftingToolImplementation*) impl)->getToolType();
}

void CraftingToolAdapter::requestCraftingSession(PlayerCreature* player, CraftingStation* craftingStation) {
	((CraftingToolImplementation*) impl)->requestCraftingSession(player, craftingStation);
}

void CraftingToolAdapter::cancelCraftingSession(PlayerCreature* player) {
	((CraftingToolImplementation*) impl)->cancelCraftingSession(player);
}

void CraftingToolAdapter::selectDraftSchematic(PlayerCreature* player, int index) {
	((CraftingToolImplementation*) impl)->selectDraftSchematic(player, index);
}

void CraftingToolAdapter::synchronizedUIListenForSchematic(PlayerCreature* player) {
	((CraftingToolImplementation*) impl)->synchronizedUIListenForSchematic(player);
}

void CraftingToolAdapter::addIngredient(PlayerCreature* player, TangibleObject* tano, int slot, int clientCounter) {
	((CraftingToolImplementation*) impl)->addIngredient(player, tano, slot, clientCounter);
}

void CraftingToolAdapter::removeIngredient(PlayerCreature* player, TangibleObject* tano, int slot, int clientCounter) {
	((CraftingToolImplementation*) impl)->removeIngredient(player, tano, slot, clientCounter);
}

void CraftingToolAdapter::nextCraftingStage(PlayerCreature* player, int clientCounter) {
	((CraftingToolImplementation*) impl)->nextCraftingStage(player, clientCounter);
}

void CraftingToolAdapter::experiment(PlayerCreature* player, int numRowsAttempted, String& expString, int clientCounter) {
	((CraftingToolImplementation*) impl)->experiment(player, numRowsAttempted, expString, clientCounter);
}

void CraftingToolAdapter::customization(PlayerCreature* player, String& name, int schematicCount, String& customization) {
	((CraftingToolImplementation*) impl)->customization(player, name, schematicCount, customization);
}

void CraftingToolAdapter::createPrototype(PlayerCreature* player, int clientCounter, int practice) {
	((CraftingToolImplementation*) impl)->createPrototype(player, clientCounter, practice);
}

void CraftingToolAdapter::createManfSchematic(PlayerCreature* player, int clientCounter) {
	((CraftingToolImplementation*) impl)->createManfSchematic(player, clientCounter);
}

void CraftingToolAdapter::createObject(PlayerCreature* player, int timer, bool create) {
	((CraftingToolImplementation*) impl)->createObject(player, timer, create);
}

void CraftingToolAdapter::depositObject(PlayerCreature* player, bool practice) {
	((CraftingToolImplementation*) impl)->depositObject(player, practice);
}

/*
 *	CraftingToolHelper
 */

CraftingToolHelper* CraftingToolHelper::staticInitializer = CraftingToolHelper::instance();

CraftingToolHelper::CraftingToolHelper() {
	className = "CraftingTool";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CraftingToolHelper::finalizeHelper() {
	CraftingToolHelper::finalize();
}

DistributedObject* CraftingToolHelper::instantiateObject() {
	return new CraftingTool(DummyConstructorParameter::instance());
}

DistributedObjectServant* CraftingToolHelper::instantiateServant() {
	return new CraftingToolImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CraftingToolHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CraftingToolAdapter((CraftingToolImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

