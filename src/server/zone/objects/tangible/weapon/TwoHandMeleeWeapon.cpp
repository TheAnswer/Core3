/*
 *	server/zone/objects/tangible/weapon/TwoHandMeleeWeapon.cpp generated by engine3 IDL compiler 0.60
 */

#include "TwoHandMeleeWeapon.h"

#include "server/zone/Zone.h"

/*
 *	TwoHandMeleeWeaponStub
 */

TwoHandMeleeWeapon::TwoHandMeleeWeapon() : MeleeWeaponObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new TwoHandMeleeWeaponImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

TwoHandMeleeWeapon::TwoHandMeleeWeapon(DummyConstructorParameter* param) : MeleeWeaponObject(param) {
}

TwoHandMeleeWeapon::~TwoHandMeleeWeapon() {
}


void TwoHandMeleeWeapon::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((TwoHandMeleeWeaponImplementation*) _getImplementation())->initializeTransientMembers();
}

bool TwoHandMeleeWeapon::isTwoHandMeleeWeapon() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithBooleanReturn();
	} else
		return ((TwoHandMeleeWeaponImplementation*) _getImplementation())->isTwoHandMeleeWeapon();
}

/*
 *	TwoHandMeleeWeaponImplementation
 */

TwoHandMeleeWeaponImplementation::TwoHandMeleeWeaponImplementation(DummyConstructorParameter* param) : MeleeWeaponObjectImplementation(param) {
	_initializeImplementation();
}


TwoHandMeleeWeaponImplementation::~TwoHandMeleeWeaponImplementation() {
}


void TwoHandMeleeWeaponImplementation::finalize() {
}

void TwoHandMeleeWeaponImplementation::_initializeImplementation() {
	_setClassHelper(TwoHandMeleeWeaponHelper::instance());

	_serializationHelperMethod();
}

void TwoHandMeleeWeaponImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (TwoHandMeleeWeapon*) stub;
	MeleeWeaponObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TwoHandMeleeWeaponImplementation::_getStub() {
	return _this;
}

TwoHandMeleeWeaponImplementation::operator const TwoHandMeleeWeapon*() {
	return _this;
}

TransactionalObject* TwoHandMeleeWeaponImplementation::clone() {
	return (TransactionalObject*) new TwoHandMeleeWeaponImplementation(*this);
}


void TwoHandMeleeWeaponImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void TwoHandMeleeWeaponImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void TwoHandMeleeWeaponImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void TwoHandMeleeWeaponImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void TwoHandMeleeWeaponImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void TwoHandMeleeWeaponImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void TwoHandMeleeWeaponImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void TwoHandMeleeWeaponImplementation::_serializationHelperMethod() {
	MeleeWeaponObjectImplementation::_serializationHelperMethod();

	_setClassName("TwoHandMeleeWeapon");

}

TwoHandMeleeWeaponImplementation::TwoHandMeleeWeaponImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/weapon/TwoHandMeleeWeapon.idl(54):  		Logger.setLoggingName("TwoHandMeleeWeaponObject");
	Logger::setLoggingName("TwoHandMeleeWeaponObject");
}

void TwoHandMeleeWeaponImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/weapon/TwoHandMeleeWeapon.idl(58):  		super.initializeTransientMembers();
	MeleeWeaponObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/weapon/TwoHandMeleeWeapon.idl(60):  		Logger.setLoggingName("TwoHandMeleeWeaponObject");
	Logger::setLoggingName("TwoHandMeleeWeaponObject");
}

bool TwoHandMeleeWeaponImplementation::isTwoHandMeleeWeapon() {
	// server/zone/objects/tangible/weapon/TwoHandMeleeWeapon.idl(64):  		return true;
	return true;
}

/*
 *	TwoHandMeleeWeaponAdapter
 */

TwoHandMeleeWeaponAdapter::TwoHandMeleeWeaponAdapter(TwoHandMeleeWeaponImplementation* obj) : MeleeWeaponObjectAdapter(obj) {
}

Packet* TwoHandMeleeWeaponAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertBoolean(isTwoHandMeleeWeapon());
		break;
	default:
		return NULL;
	}

	return resp;
}

void TwoHandMeleeWeaponAdapter::initializeTransientMembers() {
	((TwoHandMeleeWeaponImplementation*) impl)->initializeTransientMembers();
}

bool TwoHandMeleeWeaponAdapter::isTwoHandMeleeWeapon() {
	return ((TwoHandMeleeWeaponImplementation*) impl)->isTwoHandMeleeWeapon();
}

/*
 *	TwoHandMeleeWeaponHelper
 */

TwoHandMeleeWeaponHelper* TwoHandMeleeWeaponHelper::staticInitializer = TwoHandMeleeWeaponHelper::instance();

TwoHandMeleeWeaponHelper::TwoHandMeleeWeaponHelper() {
	className = "TwoHandMeleeWeapon";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TwoHandMeleeWeaponHelper::finalizeHelper() {
	TwoHandMeleeWeaponHelper::finalize();
}

DistributedObject* TwoHandMeleeWeaponHelper::instantiateObject() {
	return new TwoHandMeleeWeapon(DummyConstructorParameter::instance());
}

DistributedObjectServant* TwoHandMeleeWeaponHelper::instantiateServant() {
	return new TwoHandMeleeWeaponImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TwoHandMeleeWeaponHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TwoHandMeleeWeaponAdapter((TwoHandMeleeWeaponImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

