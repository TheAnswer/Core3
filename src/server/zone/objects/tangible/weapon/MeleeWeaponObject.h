/*
 *	server/zone/objects/tangible/weapon/MeleeWeaponObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef MELEEWEAPONOBJECT_H_
#define MELEEWEAPONOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/tangible/weapon/WeaponObject.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class MeleeWeaponObject : public WeaponObject {
public:
	MeleeWeaponObject();

	void initializePrivateData();

	void initializeTransientMembers();

	bool isMeleeWeapon();

protected:
	MeleeWeaponObject(DummyConstructorParameter* param);

	virtual ~MeleeWeaponObject();

	friend class MeleeWeaponObjectHelper;
};

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class MeleeWeaponObjectImplementation : public WeaponObjectImplementation {

public:
	MeleeWeaponObjectImplementation();

	MeleeWeaponObjectImplementation(DummyConstructorParameter* param);

	void initializePrivateData();

	void initializeTransientMembers();

	bool isMeleeWeapon();

	MeleeWeaponObject* _this;

	operator const MeleeWeaponObject*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~MeleeWeaponObjectImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class MeleeWeaponObject;
	friend class TransactionalObjectHandle<MeleeWeaponObjectImplementation*>;
};

class MeleeWeaponObjectAdapter : public WeaponObjectAdapter {
public:
	MeleeWeaponObjectAdapter(MeleeWeaponObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializePrivateData();

	void initializeTransientMembers();

	bool isMeleeWeapon();

};

class MeleeWeaponObjectHelper : public DistributedObjectClassHelper, public Singleton<MeleeWeaponObjectHelper> {
	static MeleeWeaponObjectHelper* staticInitializer;

public:
	MeleeWeaponObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<MeleeWeaponObjectHelper>;
};

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

#endif /*MELEEWEAPONOBJECT_H_*/
