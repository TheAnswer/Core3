/*
 *	server/zone/objects/tangible/weapon/OneHandMeleeWeapon.cpp generated by engine3 IDL compiler 0.60
 */

#include "OneHandMeleeWeapon.h"

#include "server/zone/Zone.h"

/*
 *	OneHandMeleeWeaponStub
 */

OneHandMeleeWeapon::OneHandMeleeWeapon() : MeleeWeaponObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new OneHandMeleeWeaponImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

OneHandMeleeWeapon::OneHandMeleeWeapon(DummyConstructorParameter* param) : MeleeWeaponObject(param) {
}

OneHandMeleeWeapon::~OneHandMeleeWeapon() {
}


void OneHandMeleeWeapon::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((OneHandMeleeWeaponImplementation*) _getImplementation())->initializeTransientMembers();
}

bool OneHandMeleeWeapon::isOneHandMeleeWeapon() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		return method.executeWithBooleanReturn();
	} else
		return ((OneHandMeleeWeaponImplementation*) _getImplementation())->isOneHandMeleeWeapon();
}

/*
 *	OneHandMeleeWeaponImplementation
 */

OneHandMeleeWeaponImplementation::OneHandMeleeWeaponImplementation(DummyConstructorParameter* param) : MeleeWeaponObjectImplementation(param) {
	_initializeImplementation();
}


OneHandMeleeWeaponImplementation::~OneHandMeleeWeaponImplementation() {
}


void OneHandMeleeWeaponImplementation::finalize() {
}

void OneHandMeleeWeaponImplementation::_initializeImplementation() {
	_setClassHelper(OneHandMeleeWeaponHelper::instance());

	_serializationHelperMethod();
}

void OneHandMeleeWeaponImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (OneHandMeleeWeapon*) stub;
	MeleeWeaponObjectImplementation::_setStub(stub);
}

DistributedObjectStub* OneHandMeleeWeaponImplementation::_getStub() {
	return _this;
}

OneHandMeleeWeaponImplementation::operator const OneHandMeleeWeapon*() {
	return _this;
}

TransactionalObject* OneHandMeleeWeaponImplementation::clone() {
	return (TransactionalObject*) new OneHandMeleeWeaponImplementation(*this);
}


void OneHandMeleeWeaponImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void OneHandMeleeWeaponImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void OneHandMeleeWeaponImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void OneHandMeleeWeaponImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void OneHandMeleeWeaponImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void OneHandMeleeWeaponImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void OneHandMeleeWeaponImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void OneHandMeleeWeaponImplementation::_serializationHelperMethod() {
	MeleeWeaponObjectImplementation::_serializationHelperMethod();

	_setClassName("OneHandMeleeWeapon");

}

OneHandMeleeWeaponImplementation::OneHandMeleeWeaponImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/weapon/OneHandMeleeWeapon.idl(54):  		Logger.setLoggingName("OneHandMeleeWeaponObject");
	Logger::setLoggingName("OneHandMeleeWeaponObject");
}

void OneHandMeleeWeaponImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/weapon/OneHandMeleeWeapon.idl(58):  		super.initializeTransientMembers();
	MeleeWeaponObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/weapon/OneHandMeleeWeapon.idl(60):  		Logger.setLoggingName("OneHandMeleeWeaponObject");
	Logger::setLoggingName("OneHandMeleeWeaponObject");
}

bool OneHandMeleeWeaponImplementation::isOneHandMeleeWeapon() {
	// server/zone/objects/tangible/weapon/OneHandMeleeWeapon.idl(64):  		return true;
	return true;
}

/*
 *	OneHandMeleeWeaponAdapter
 */

OneHandMeleeWeaponAdapter::OneHandMeleeWeaponAdapter(OneHandMeleeWeaponImplementation* obj) : MeleeWeaponObjectAdapter(obj) {
}

Packet* OneHandMeleeWeaponAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertBoolean(isOneHandMeleeWeapon());
		break;
	default:
		return NULL;
	}

	return resp;
}

void OneHandMeleeWeaponAdapter::initializeTransientMembers() {
	((OneHandMeleeWeaponImplementation*) impl)->initializeTransientMembers();
}

bool OneHandMeleeWeaponAdapter::isOneHandMeleeWeapon() {
	return ((OneHandMeleeWeaponImplementation*) impl)->isOneHandMeleeWeapon();
}

/*
 *	OneHandMeleeWeaponHelper
 */

OneHandMeleeWeaponHelper* OneHandMeleeWeaponHelper::staticInitializer = OneHandMeleeWeaponHelper::instance();

OneHandMeleeWeaponHelper::OneHandMeleeWeaponHelper() {
	className = "OneHandMeleeWeapon";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void OneHandMeleeWeaponHelper::finalizeHelper() {
	OneHandMeleeWeaponHelper::finalize();
}

DistributedObject* OneHandMeleeWeaponHelper::instantiateObject() {
	return new OneHandMeleeWeapon(DummyConstructorParameter::instance());
}

DistributedObjectServant* OneHandMeleeWeaponHelper::instantiateServant() {
	return new OneHandMeleeWeaponImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* OneHandMeleeWeaponHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new OneHandMeleeWeaponAdapter((OneHandMeleeWeaponImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

