/*
 *	server/zone/objects/tangible/weapon/CarbineWeaponObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "CarbineWeaponObject.h"

#include "server/zone/Zone.h"

/*
 *	CarbineWeaponObjectStub
 */

CarbineWeaponObject::CarbineWeaponObject() : RangedWeaponObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new CarbineWeaponObjectImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

CarbineWeaponObject::CarbineWeaponObject(DummyConstructorParameter* param) : RangedWeaponObject(param) {
}

CarbineWeaponObject::~CarbineWeaponObject() {
}


void CarbineWeaponObject::initializePrivateData() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((CarbineWeaponObjectImplementation*) _getImplementation())->initializePrivateData();
}

void CarbineWeaponObject::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((CarbineWeaponObjectImplementation*) _getImplementation())->initializeTransientMembers();
}

bool CarbineWeaponObject::isCarbineWeapon() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		return method.executeWithBooleanReturn();
	} else
		return ((CarbineWeaponObjectImplementation*) _getImplementation())->isCarbineWeapon();
}

/*
 *	CarbineWeaponObjectImplementation
 */

CarbineWeaponObjectImplementation::CarbineWeaponObjectImplementation(DummyConstructorParameter* param) : RangedWeaponObjectImplementation(param) {
	_initializeImplementation();
}


CarbineWeaponObjectImplementation::~CarbineWeaponObjectImplementation() {
}


void CarbineWeaponObjectImplementation::finalize() {
}

void CarbineWeaponObjectImplementation::_initializeImplementation() {
	_setClassHelper(CarbineWeaponObjectHelper::instance());

	_serializationHelperMethod();
}

void CarbineWeaponObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CarbineWeaponObject*) stub;
	RangedWeaponObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CarbineWeaponObjectImplementation::_getStub() {
	return _this;
}

CarbineWeaponObjectImplementation::operator const CarbineWeaponObject*() {
	return _this;
}

TransactionalObject* CarbineWeaponObjectImplementation::clone() {
	return (TransactionalObject*) new CarbineWeaponObjectImplementation(*this);
}


void CarbineWeaponObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CarbineWeaponObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CarbineWeaponObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CarbineWeaponObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CarbineWeaponObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CarbineWeaponObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CarbineWeaponObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CarbineWeaponObjectImplementation::_serializationHelperMethod() {
	RangedWeaponObjectImplementation::_serializationHelperMethod();

	_setClassName("CarbineWeaponObject");

}

CarbineWeaponObjectImplementation::CarbineWeaponObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/weapon/CarbineWeaponObject.idl(53):  		Logger.setLoggingName("CarbineWeaponObject");
	Logger::setLoggingName("CarbineWeaponObject");
	// server/zone/objects/tangible/weapon/CarbineWeaponObject.idl(55):  		initializePrivateData();
	initializePrivateData();
}

void CarbineWeaponObjectImplementation::initializePrivateData() {
	// server/zone/objects/tangible/weapon/CarbineWeaponObject.idl(59):  		super.maxRange = 65;
	RangedWeaponObjectImplementation::maxRange = 65;
}

void CarbineWeaponObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/weapon/CarbineWeaponObject.idl(63):  		super.initializeTransientMembers();
	RangedWeaponObjectImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/weapon/CarbineWeaponObject.idl(65):  		Logger.setLoggingName("CarbineWeaponObject");
	Logger::setLoggingName("CarbineWeaponObject");
}

bool CarbineWeaponObjectImplementation::isCarbineWeapon() {
	// server/zone/objects/tangible/weapon/CarbineWeaponObject.idl(69):  		return true;
	return true;
}

/*
 *	CarbineWeaponObjectAdapter
 */

CarbineWeaponObjectAdapter::CarbineWeaponObjectAdapter(CarbineWeaponObjectImplementation* obj) : RangedWeaponObjectAdapter(obj) {
}

Packet* CarbineWeaponObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializePrivateData();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		resp->insertBoolean(isCarbineWeapon());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CarbineWeaponObjectAdapter::initializePrivateData() {
	((CarbineWeaponObjectImplementation*) impl)->initializePrivateData();
}

void CarbineWeaponObjectAdapter::initializeTransientMembers() {
	((CarbineWeaponObjectImplementation*) impl)->initializeTransientMembers();
}

bool CarbineWeaponObjectAdapter::isCarbineWeapon() {
	return ((CarbineWeaponObjectImplementation*) impl)->isCarbineWeapon();
}

/*
 *	CarbineWeaponObjectHelper
 */

CarbineWeaponObjectHelper* CarbineWeaponObjectHelper::staticInitializer = CarbineWeaponObjectHelper::instance();

CarbineWeaponObjectHelper::CarbineWeaponObjectHelper() {
	className = "CarbineWeaponObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CarbineWeaponObjectHelper::finalizeHelper() {
	CarbineWeaponObjectHelper::finalize();
}

DistributedObject* CarbineWeaponObjectHelper::instantiateObject() {
	return new CarbineWeaponObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* CarbineWeaponObjectHelper::instantiateServant() {
	return new CarbineWeaponObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CarbineWeaponObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CarbineWeaponObjectAdapter((CarbineWeaponObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

