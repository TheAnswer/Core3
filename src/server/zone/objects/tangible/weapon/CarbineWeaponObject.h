/*
 *	server/zone/objects/tangible/weapon/CarbineWeaponObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef CARBINEWEAPONOBJECT_H_
#define CARBINEWEAPONOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/tangible/weapon/RangedWeaponObject.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class CarbineWeaponObject : public RangedWeaponObject {
public:
	CarbineWeaponObject();

	void initializePrivateData();

	void initializeTransientMembers();

	bool isCarbineWeapon();

protected:
	CarbineWeaponObject(DummyConstructorParameter* param);

	virtual ~CarbineWeaponObject();

	friend class CarbineWeaponObjectHelper;
};

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class CarbineWeaponObjectImplementation : public RangedWeaponObjectImplementation {

public:
	CarbineWeaponObjectImplementation();

	CarbineWeaponObjectImplementation(DummyConstructorParameter* param);

	void initializePrivateData();

	void initializeTransientMembers();

	bool isCarbineWeapon();

	CarbineWeaponObject* _this;

	operator const CarbineWeaponObject*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~CarbineWeaponObjectImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class CarbineWeaponObject;
	friend class TransactionalObjectHandle<CarbineWeaponObjectImplementation*>;
};

class CarbineWeaponObjectAdapter : public RangedWeaponObjectAdapter {
public:
	CarbineWeaponObjectAdapter(CarbineWeaponObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializePrivateData();

	void initializeTransientMembers();

	bool isCarbineWeapon();

};

class CarbineWeaponObjectHelper : public DistributedObjectClassHelper, public Singleton<CarbineWeaponObjectHelper> {
	static CarbineWeaponObjectHelper* staticInitializer;

public:
	CarbineWeaponObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CarbineWeaponObjectHelper>;
};

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

#endif /*CARBINEWEAPONOBJECT_H_*/
