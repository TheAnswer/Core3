/*
 *	server/zone/objects/tangible/weapon/OneHandMeleeWeapon.h generated by engine3 IDL compiler 0.60
 */

#ifndef ONEHANDMELEEWEAPON_H_
#define ONEHANDMELEEWEAPON_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/tangible/weapon/MeleeWeaponObject.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class OneHandMeleeWeapon : public MeleeWeaponObject {
public:
	OneHandMeleeWeapon();

	void initializeTransientMembers();

	bool isOneHandMeleeWeapon();

protected:
	OneHandMeleeWeapon(DummyConstructorParameter* param);

	virtual ~OneHandMeleeWeapon();

	friend class OneHandMeleeWeaponHelper;
};

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace weapon {

class OneHandMeleeWeaponImplementation : public MeleeWeaponObjectImplementation {

public:
	OneHandMeleeWeaponImplementation();

	OneHandMeleeWeaponImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	bool isOneHandMeleeWeapon();

	OneHandMeleeWeapon* _this;

	operator const OneHandMeleeWeapon*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~OneHandMeleeWeaponImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class OneHandMeleeWeapon;
	friend class TransactionalObjectHandle<OneHandMeleeWeaponImplementation*>;
};

class OneHandMeleeWeaponAdapter : public MeleeWeaponObjectAdapter {
public:
	OneHandMeleeWeaponAdapter(OneHandMeleeWeaponImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	bool isOneHandMeleeWeapon();

};

class OneHandMeleeWeaponHelper : public DistributedObjectClassHelper, public Singleton<OneHandMeleeWeaponHelper> {
	static OneHandMeleeWeaponHelper* staticInitializer;

public:
	OneHandMeleeWeaponHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<OneHandMeleeWeaponHelper>;
};

} // namespace weapon
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::weapon;

#endif /*ONEHANDMELEEWEAPON_H_*/
