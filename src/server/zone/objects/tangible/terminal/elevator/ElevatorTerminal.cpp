/*
 *	server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "ElevatorTerminal.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

/*
 *	ElevatorTerminalStub
 */

ElevatorTerminal::ElevatorTerminal() : Terminal(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new ElevatorTerminalImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

ElevatorTerminal::ElevatorTerminal(DummyConstructorParameter* param) : Terminal(param) {
}

ElevatorTerminal::~ElevatorTerminal() {
}


int ElevatorTerminal::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((ElevatorTerminalImplementation*) _getImplementation())->handleObjectMenuSelect(player, selectedID);
}

/*
 *	ElevatorTerminalImplementation
 */

ElevatorTerminalImplementation::ElevatorTerminalImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


ElevatorTerminalImplementation::~ElevatorTerminalImplementation() {
}


void ElevatorTerminalImplementation::finalize() {
}

void ElevatorTerminalImplementation::_initializeImplementation() {
	_setClassHelper(ElevatorTerminalHelper::instance());

	_serializationHelperMethod();
}

void ElevatorTerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ElevatorTerminal*) stub;
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* ElevatorTerminalImplementation::_getStub() {
	return _this;
}

ElevatorTerminalImplementation::operator const ElevatorTerminal*() {
	return _this;
}

TransactionalObject* ElevatorTerminalImplementation::clone() {
	return (TransactionalObject*) new ElevatorTerminalImplementation(*this);
}


void ElevatorTerminalImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ElevatorTerminalImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ElevatorTerminalImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ElevatorTerminalImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ElevatorTerminalImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ElevatorTerminalImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ElevatorTerminalImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ElevatorTerminalImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("ElevatorTerminal");

	addSerializableVariable("deltaZ", &deltaZ);
}

ElevatorTerminalImplementation::ElevatorTerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl(59):  		Logger.setLoggingName("Elevator Terminal");
	Logger::setLoggingName("Elevator Terminal");
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl(60):  		deltaZ = 0;
	deltaZ = 0;
}

void ElevatorTerminalImplementation::setDeltaZ(float dz) {
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl(76):  		deltaZ = dz;
	deltaZ = dz;
}

float ElevatorTerminalImplementation::getDeltaZ() {
	// server/zone/objects/tangible/terminal/elevator/ElevatorTerminal.idl(84):  		return deltaZ;
	return deltaZ;
}

/*
 *	ElevatorTerminalAdapter
 */

ElevatorTerminalAdapter::ElevatorTerminalAdapter(ElevatorTerminalImplementation* obj) : TerminalAdapter(obj) {
}

Packet* ElevatorTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

int ElevatorTerminalAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((ElevatorTerminalImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

/*
 *	ElevatorTerminalHelper
 */

ElevatorTerminalHelper* ElevatorTerminalHelper::staticInitializer = ElevatorTerminalHelper::instance();

ElevatorTerminalHelper::ElevatorTerminalHelper() {
	className = "ElevatorTerminal";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ElevatorTerminalHelper::finalizeHelper() {
	ElevatorTerminalHelper::finalize();
}

DistributedObject* ElevatorTerminalHelper::instantiateObject() {
	return new ElevatorTerminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* ElevatorTerminalHelper::instantiateServant() {
	return new ElevatorTerminalImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ElevatorTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ElevatorTerminalAdapter((ElevatorTerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

