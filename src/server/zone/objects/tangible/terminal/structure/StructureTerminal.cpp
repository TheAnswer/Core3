/*
 *	server/zone/objects/tangible/terminal/structure/StructureTerminal.cpp generated by engine3 IDL compiler 0.60
 */

#include "StructureTerminal.h"

#include "server/zone/objects/building/BuildingObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/Zone.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

/*
 *	StructureTerminalStub
 */

StructureTerminal::StructureTerminal() : Terminal(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new StructureTerminalImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

StructureTerminal::StructureTerminal(DummyConstructorParameter* param) : Terminal(param) {
}

StructureTerminal::~StructureTerminal() {
}


void StructureTerminal::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((StructureTerminalImplementation*) _getImplementation())->initializeTransientMembers();
}

int StructureTerminal::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((StructureTerminalImplementation*) _getImplementation())->handleObjectMenuSelect(player, selectedID);
}

void StructureTerminal::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((StructureTerminalImplementation*) _getImplementation())->fillObjectMenuResponse(menuResponse, player);
}

void StructureTerminal::setBuildingObject(BuildingObject* obj) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((StructureTerminalImplementation*) _getImplementation())->setBuildingObject(obj);
}

BuildingObject* StructureTerminal::getBuildingObject() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		return (BuildingObject*) method.executeWithObjectReturn();
	} else
		return ((StructureTerminalImplementation*) _getImplementation())->getBuildingObject();
}

/*
 *	StructureTerminalImplementation
 */

StructureTerminalImplementation::StructureTerminalImplementation(DummyConstructorParameter* param) : TerminalImplementation(param) {
	_initializeImplementation();
}


StructureTerminalImplementation::~StructureTerminalImplementation() {
}


void StructureTerminalImplementation::finalize() {
}

void StructureTerminalImplementation::_initializeImplementation() {
	_setClassHelper(StructureTerminalHelper::instance());

	_serializationHelperMethod();
}

void StructureTerminalImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (StructureTerminal*) stub;
	TerminalImplementation::_setStub(stub);
}

DistributedObjectStub* StructureTerminalImplementation::_getStub() {
	return _this;
}

StructureTerminalImplementation::operator const StructureTerminal*() {
	return _this;
}

TransactionalObject* StructureTerminalImplementation::clone() {
	return (TransactionalObject*) new StructureTerminalImplementation(*this);
}


void StructureTerminalImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void StructureTerminalImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void StructureTerminalImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void StructureTerminalImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void StructureTerminalImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void StructureTerminalImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void StructureTerminalImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void StructureTerminalImplementation::_serializationHelperMethod() {
	TerminalImplementation::_serializationHelperMethod();

	_setClassName("StructureTerminal");

	addSerializableVariable("buildingObject", &buildingObject);
}

StructureTerminalImplementation::StructureTerminalImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/terminal/structure/StructureTerminal.idl(59):  		Logger.setLoggingName("StructureTerminal");
	Logger::setLoggingName("StructureTerminal");
}

void StructureTerminalImplementation::initializeTransientMembers() {
	// server/zone/objects/tangible/terminal/structure/StructureTerminal.idl(72):  		super.initializeTransientMembers();
	TerminalImplementation::initializeTransientMembers();
	// server/zone/objects/tangible/terminal/structure/StructureTerminal.idl(74):  		Logger.setLoggingName("StructureTerminal");
	Logger::setLoggingName("StructureTerminal");
}

void StructureTerminalImplementation::setBuildingObject(BuildingObject* obj) {
	// server/zone/objects/tangible/terminal/structure/StructureTerminal.idl(95):  		buildingObject = obj;
	buildingObject = obj;
}

BuildingObject* StructureTerminalImplementation::getBuildingObject() {
	// server/zone/objects/tangible/terminal/structure/StructureTerminal.idl(99):  		return buildingObject;
	return buildingObject;
}

/*
 *	StructureTerminalAdapter
 */

StructureTerminalAdapter::StructureTerminalAdapter(StructureTerminalImplementation* obj) : TerminalAdapter(obj) {
}

Packet* StructureTerminalAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 8:
		setBuildingObject((BuildingObject*) inv->getObjectParameter());
		break;
	case 9:
		resp->insertLong(getBuildingObject()->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void StructureTerminalAdapter::initializeTransientMembers() {
	((StructureTerminalImplementation*) impl)->initializeTransientMembers();
}

int StructureTerminalAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((StructureTerminalImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

void StructureTerminalAdapter::setBuildingObject(BuildingObject* obj) {
	((StructureTerminalImplementation*) impl)->setBuildingObject(obj);
}

BuildingObject* StructureTerminalAdapter::getBuildingObject() {
	return ((StructureTerminalImplementation*) impl)->getBuildingObject();
}

/*
 *	StructureTerminalHelper
 */

StructureTerminalHelper* StructureTerminalHelper::staticInitializer = StructureTerminalHelper::instance();

StructureTerminalHelper::StructureTerminalHelper() {
	className = "StructureTerminal";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void StructureTerminalHelper::finalizeHelper() {
	StructureTerminalHelper::finalize();
}

DistributedObject* StructureTerminalHelper::instantiateObject() {
	return new StructureTerminal(DummyConstructorParameter::instance());
}

DistributedObjectServant* StructureTerminalHelper::instantiateServant() {
	return new StructureTerminalImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* StructureTerminalHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new StructureTerminalAdapter((StructureTerminalImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

