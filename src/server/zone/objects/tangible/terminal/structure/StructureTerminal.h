/*
 *	server/zone/objects/tangible/terminal/structure/StructureTerminal.h generated by engine3 IDL compiler 0.60
 */

#ifndef STRUCTURETERMINAL_H_
#define STRUCTURETERMINAL_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace building {

class BuildingObject;

} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

#include "server/zone/objects/tangible/terminal/Terminal.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace structure {

class StructureTerminal : public Terminal {
public:
	StructureTerminal();

	void initializeTransientMembers();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	void setBuildingObject(BuildingObject* obj);

	BuildingObject* getBuildingObject();

protected:
	StructureTerminal(DummyConstructorParameter* param);

	virtual ~StructureTerminal();

	friend class StructureTerminalHelper;
};

} // namespace structure
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::structure;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace structure {

class StructureTerminalImplementation : public TerminalImplementation {
protected:
	ManagedWeakReference<BuildingObject* > buildingObject;

public:
	StructureTerminalImplementation();

	StructureTerminalImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	void setBuildingObject(BuildingObject* obj);

	BuildingObject* getBuildingObject();

	StructureTerminal* _this;

	operator const StructureTerminal*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~StructureTerminalImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class StructureTerminal;
	friend class TransactionalObjectHandle<StructureTerminalImplementation*>;
};

class StructureTerminalAdapter : public TerminalAdapter {
public:
	StructureTerminalAdapter(StructureTerminalImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void setBuildingObject(BuildingObject* obj);

	BuildingObject* getBuildingObject();

};

class StructureTerminalHelper : public DistributedObjectClassHelper, public Singleton<StructureTerminalHelper> {
	static StructureTerminalHelper* staticInitializer;

public:
	StructureTerminalHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<StructureTerminalHelper>;
};

} // namespace structure
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::structure;

#endif /*STRUCTURETERMINAL_H_*/
