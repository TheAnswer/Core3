/*
 *	server/zone/objects/tangible/terminal/travel/TravelTerminal.h generated by engine3 IDL compiler 0.60
 */

#ifndef TRAVELTERMINAL_H_
#define TRAVELTERMINAL_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace ticket {

class TicketObject;

} // namespace ticket
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::ticket;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace shuttle {

class ShuttleCreature;

} // namespace shuttle
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::shuttle;

#include "server/zone/objects/tangible/terminal/Terminal.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace travel {

class TravelTerminal : public Terminal {
public:
	TravelTerminal();

	void initializeTransientMembers();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void setShuttle(ShuttleCreature* shut);

protected:
	TravelTerminal(DummyConstructorParameter* param);

	virtual ~TravelTerminal();

	friend class TravelTerminalHelper;
};

} // namespace travel
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::travel;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace travel {

class TravelTerminalImplementation : public TerminalImplementation {
protected:
	ManagedReference<ShuttleCreature* > shuttle;

public:
	TravelTerminalImplementation();

	TravelTerminalImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void setShuttle(ShuttleCreature* shut);

	TravelTerminal* _this;

	operator const TravelTerminal*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~TravelTerminalImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class TravelTerminal;
	friend class TransactionalObjectHandle<TravelTerminalImplementation*>;
};

class TravelTerminalAdapter : public TerminalAdapter {
public:
	TravelTerminalAdapter(TravelTerminalImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	void setShuttle(ShuttleCreature* shut);

};

class TravelTerminalHelper : public DistributedObjectClassHelper, public Singleton<TravelTerminalHelper> {
	static TravelTerminalHelper* staticInitializer;

public:
	TravelTerminalHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<TravelTerminalHelper>;
};

} // namespace travel
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::travel;

#endif /*TRAVELTERMINAL_H_*/
