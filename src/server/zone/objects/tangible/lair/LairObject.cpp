/*
 *	server/zone/objects/tangible/lair/LairObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "LairObject.h"

#include "server/zone/Zone.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/tangible/lair/HealLairEvent.h"

/*
 *	LairObjectStub
 */

LairObject::LairObject() : TangibleObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new LairObjectImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

LairObject::LairObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

LairObject::~LairObject() {
}


void LairObject::loadTemplateData(SharedObjectTemplate* templateData) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((LairObjectImplementation*) _getImplementation())->loadTemplateData(templateData);
}

void LairObject::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((LairObjectImplementation*) _getImplementation())->initializeTransientMembers();
}

int LairObject::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(damageType);
		method.addSignedIntParameter(damage);
		method.addBooleanParameter(destroy);
		method.addBooleanParameter(notifyClient);

		return method.executeWithSignedIntReturn();
	} else
		return ((LairObjectImplementation*) _getImplementation())->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

void LairObject::checkForNewSpawns() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((LairObjectImplementation*) _getImplementation())->checkForNewSpawns();
}

void LairObject::checkForHeal(TangibleObject* attacker, bool forceNewUpdate) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(attacker);
		method.addBooleanParameter(forceNewUpdate);

		method.executeWithVoidReturn();
	} else
		((LairObjectImplementation*) _getImplementation())->checkForHeal(attacker, forceNewUpdate);
}

void LairObject::healLair(TangibleObject* attacker) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(attacker);

		method.executeWithVoidReturn();
	} else
		((LairObjectImplementation*) _getImplementation())->healLair(attacker);
}

int LairObject::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(attacker);
		method.addSignedIntParameter(condition);

		return method.executeWithSignedIntReturn();
	} else
		return ((LairObjectImplementation*) _getImplementation())->notifyObjectDestructionObservers(attacker, condition);
}

bool LairObject::isAttackableBy(CreatureObject* object) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(object);

		return method.executeWithBooleanReturn();
	} else
		return ((LairObjectImplementation*) _getImplementation())->isAttackableBy(object);
}

int LairObject::getMaxObjectsToSpawn() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithSignedIntReturn();
	} else
		return ((LairObjectImplementation*) _getImplementation())->getMaxObjectsToSpawn();
}

SortedVector<unsigned int>* LairObject::getObjectsToSpawn() {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((LairObjectImplementation*) _getImplementation())->getObjectsToSpawn();
}

/*
 *	LairObjectImplementation
 */

LairObjectImplementation::LairObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


LairObjectImplementation::~LairObjectImplementation() {
}


void LairObjectImplementation::finalize() {
}

void LairObjectImplementation::_initializeImplementation() {
	_setClassHelper(LairObjectHelper::instance());

	_serializationHelperMethod();
}

void LairObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (LairObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* LairObjectImplementation::_getStub() {
	return _this;
}

LairObjectImplementation::operator const LairObject*() {
	return _this;
}

TransactionalObject* LairObjectImplementation::clone() {
	return (TransactionalObject*) new LairObjectImplementation(*this);
}


void LairObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void LairObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void LairObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void LairObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void LairObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void LairObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void LairObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void LairObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("LairObject");

	addSerializableVariable("spawnedCreatures", &spawnedCreatures);
	addSerializableVariable("damageMap", &damageMap);
}

LairObjectImplementation::LairObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/tangible/lair/LairObject.idl(72):  		lairTemplate = null;
	lairTemplate = NULL;
	// server/zone/objects/tangible/lair/LairObject.idl(74):  		Logger.setLoggingName("LairObject");
	Logger::setLoggingName("LairObject");
}

bool LairObjectImplementation::isAttackableBy(CreatureObject* object) {
	// server/zone/objects/tangible/lair/LairObject.idl(110):  		return true;
	return true;
}

int LairObjectImplementation::getMaxObjectsToSpawn() {
	// server/zone/objects/tangible/lair/LairObject.idl(114):  		return lairTemplate.getMaxObjectsToSpawn();
	return lairTemplate->getMaxObjectsToSpawn();
}

SortedVector<unsigned int>* LairObjectImplementation::getObjectsToSpawn() {
	// server/zone/objects/tangible/lair/LairObject.idl(119):  		return lairTemplate.getObjectsToSpawn();
	return lairTemplate->getObjectsToSpawn();
}

/*
 *	LairObjectAdapter
 */

LairObjectAdapter::LairObjectAdapter(LairObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* LairObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		resp->insertSignedInt(inflictDamage((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter(), inv->getBooleanParameter()));
		break;
	case 8:
		checkForNewSpawns();
		break;
	case 9:
		checkForHeal((TangibleObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 10:
		healLair((TangibleObject*) inv->getObjectParameter());
		break;
	case 11:
		resp->insertSignedInt(notifyObjectDestructionObservers((TangibleObject*) inv->getObjectParameter(), inv->getSignedIntParameter()));
		break;
	case 12:
		resp->insertBoolean(isAttackableBy((CreatureObject*) inv->getObjectParameter()));
		break;
	case 13:
		resp->insertSignedInt(getMaxObjectsToSpawn());
		break;
	default:
		return NULL;
	}

	return resp;
}

void LairObjectAdapter::initializeTransientMembers() {
	((LairObjectImplementation*) impl)->initializeTransientMembers();
}

int LairObjectAdapter::inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient) {
	return ((LairObjectImplementation*) impl)->inflictDamage(attacker, damageType, damage, destroy, notifyClient);
}

void LairObjectAdapter::checkForNewSpawns() {
	((LairObjectImplementation*) impl)->checkForNewSpawns();
}

void LairObjectAdapter::checkForHeal(TangibleObject* attacker, bool forceNewUpdate) {
	((LairObjectImplementation*) impl)->checkForHeal(attacker, forceNewUpdate);
}

void LairObjectAdapter::healLair(TangibleObject* attacker) {
	((LairObjectImplementation*) impl)->healLair(attacker);
}

int LairObjectAdapter::notifyObjectDestructionObservers(TangibleObject* attacker, int condition) {
	return ((LairObjectImplementation*) impl)->notifyObjectDestructionObservers(attacker, condition);
}

bool LairObjectAdapter::isAttackableBy(CreatureObject* object) {
	return ((LairObjectImplementation*) impl)->isAttackableBy(object);
}

int LairObjectAdapter::getMaxObjectsToSpawn() {
	return ((LairObjectImplementation*) impl)->getMaxObjectsToSpawn();
}

/*
 *	LairObjectHelper
 */

LairObjectHelper* LairObjectHelper::staticInitializer = LairObjectHelper::instance();

LairObjectHelper::LairObjectHelper() {
	className = "LairObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void LairObjectHelper::finalizeHelper() {
	LairObjectHelper::finalize();
}

DistributedObject* LairObjectHelper::instantiateObject() {
	return new LairObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* LairObjectHelper::instantiateServant() {
	return new LairObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* LairObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new LairObjectAdapter((LairObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

