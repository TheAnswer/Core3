/*
 *	server/zone/objects/tangible/lair/LairObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef LAIROBJECT_H_
#define LAIROBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace templates {

class SharedObjectTemplate;

} // namespace templates
} // namespace zone
} // namespace server

using namespace server::zone::templates;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace lair {

class HealLairEvent;

} // namespace lair
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::lair;

#include "server/zone/templates/tangible/LairObjectTemplate.h"

#include "server/zone/objects/tangible/DamageMap.h"

#include "engine/lua/LuaObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

#include "system/util/SortedVector.h"

#include "system/util/Vector.h"

#include "system/lang/ref/Reference.h"

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace lair {

class LairObject : public TangibleObject {
public:
	LairObject();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	int inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient = true);

	void checkForNewSpawns();

	void checkForHeal(TangibleObject* attacker, bool forceNewUpdate = false);

	void healLair(TangibleObject* attacker);

	int notifyObjectDestructionObservers(TangibleObject* attacker, int condition);

	bool isAttackableBy(CreatureObject* object);

	int getMaxObjectsToSpawn();

	SortedVector<unsigned int>* getObjectsToSpawn();

protected:
	LairObject(DummyConstructorParameter* param);

	virtual ~LairObject();

	friend class LairObjectHelper;
};

} // namespace lair
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::lair;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace lair {

class LairObjectImplementation : public TangibleObjectImplementation {
protected:
	LairObjectTemplate* lairTemplate;

	Vector<ManagedReference<CreatureObject* > > spawnedCreatures;

	Reference<HealLairEvent*> healLairEvent;

	DamageMap damageMap;

public:
	LairObjectImplementation();

	LairObjectImplementation(DummyConstructorParameter* param);

	void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	virtual int inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient = true);

	void checkForNewSpawns();

	void checkForHeal(TangibleObject* attacker, bool forceNewUpdate = false);

	void healLair(TangibleObject* attacker);

	int notifyObjectDestructionObservers(TangibleObject* attacker, int condition);

	bool isAttackableBy(CreatureObject* object);

	int getMaxObjectsToSpawn();

	SortedVector<unsigned int>* getObjectsToSpawn();

	LairObject* _this;

	operator const LairObject*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~LairObjectImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class LairObject;
	friend class TransactionalObjectHandle<LairObjectImplementation*>;
};

class LairObjectAdapter : public TangibleObjectAdapter {
public:
	LairObjectAdapter(LairObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	int inflictDamage(TangibleObject* attacker, int damageType, int damage, bool destroy, bool notifyClient);

	void checkForNewSpawns();

	void checkForHeal(TangibleObject* attacker, bool forceNewUpdate);

	void healLair(TangibleObject* attacker);

	int notifyObjectDestructionObservers(TangibleObject* attacker, int condition);

	bool isAttackableBy(CreatureObject* object);

	int getMaxObjectsToSpawn();

};

class LairObjectHelper : public DistributedObjectClassHelper, public Singleton<LairObjectHelper> {
	static LairObjectHelper* staticInitializer;

public:
	LairObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<LairObjectHelper>;
};

} // namespace lair
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::lair;

#endif /*LAIROBJECT_H_*/
