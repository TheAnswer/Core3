/*
 *	server/zone/objects/creature/Creature.h generated by engine3 IDL compiler 0.60
 */

#ifndef CREATURE_H_
#define CREATURE_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/creature/AiAgent.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class Creature : public AiAgent {
public:
	Creature();

	bool isCreature();

protected:
	Creature(DummyConstructorParameter* param);

	virtual ~Creature();

	friend class CreatureHelper;
};

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureImplementation : public AiAgentImplementation {

public:
	CreatureImplementation();

	CreatureImplementation(DummyConstructorParameter* param);

	bool isCreature();

	Creature* _this;

	operator const Creature*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~CreatureImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class Creature;
	friend class TransactionalObjectHandle<CreatureImplementation*>;
};

class CreatureAdapter : public AiAgentAdapter {
public:
	CreatureAdapter(CreatureImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool isCreature();

};

class CreatureHelper : public DistributedObjectClassHelper, public Singleton<CreatureHelper> {
	static CreatureHelper* staticInitializer;

public:
	CreatureHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CreatureHelper>;
};

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#endif /*CREATURE_H_*/
