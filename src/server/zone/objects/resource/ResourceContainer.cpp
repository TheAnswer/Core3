/*
 *	server/zone/objects/resource/ResourceContainer.cpp generated by engine3 IDL compiler 0.60
 */

#include "ResourceContainer.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	ResourceContainerStub
 */

ResourceContainer::ResourceContainer() : TangibleObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new ResourceContainerImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

ResourceContainer::ResourceContainer(DummyConstructorParameter* param) : TangibleObject(param) {
}

ResourceContainer::~ResourceContainer() {
}


void ResourceContainer::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((ResourceContainerImplementation*) _getImplementation())->initializeTransientMembers();
}

void ResourceContainer::destroyObjectFromDatabase(bool destroyContainedObjects) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		((ResourceContainerImplementation*) _getImplementation())->destroyObjectFromDatabase(destroyContainedObjects);
}

void ResourceContainer::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((ResourceContainerImplementation*) _getImplementation())->fillAttributeList(msg, object);
}

void ResourceContainer::sendBaselinesTo(SceneObject* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ResourceContainerImplementation*) _getImplementation())->sendBaselinesTo(player);
}

void ResourceContainer::setQuantity(int quantity) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addSignedIntParameter(quantity);

		method.executeWithVoidReturn();
	} else
		((ResourceContainerImplementation*) _getImplementation())->setQuantity(quantity);
}

bool ResourceContainer::isResourceContainer() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return method.executeWithBooleanReturn();
	} else
		return ((ResourceContainerImplementation*) _getImplementation())->isResourceContainer();
}

int ResourceContainer::getQuantity() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithSignedIntReturn();
	} else
		return ((ResourceContainerImplementation*) _getImplementation())->getQuantity();
}

void ResourceContainer::setSpawnObject(ResourceSpawn* spawn) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(spawn);

		method.executeWithVoidReturn();
	} else
		((ResourceContainerImplementation*) _getImplementation())->setSpawnObject(spawn);
}

String ResourceContainer::getSpawnName() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		method.executeWithAsciiReturn(_return_getSpawnName);
		return _return_getSpawnName;
	} else
		return ((ResourceContainerImplementation*) _getImplementation())->getSpawnName();
}

String ResourceContainer::getSpawnType() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);

		method.executeWithAsciiReturn(_return_getSpawnType);
		return _return_getSpawnType;
	} else
		return ((ResourceContainerImplementation*) _getImplementation())->getSpawnType();
}

unsigned long long ResourceContainer::getSpawnID() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((ResourceContainerImplementation*) _getImplementation())->getSpawnID();
}

ResourceSpawn* ResourceContainer::getSpawnObject() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return (ResourceSpawn*) method.executeWithObjectReturn();
	} else
		return ((ResourceContainerImplementation*) _getImplementation())->getSpawnObject();
}

void ResourceContainer::split(int newStackSize) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addSignedIntParameter(newStackSize);

		method.executeWithVoidReturn();
	} else
		((ResourceContainerImplementation*) _getImplementation())->split(newStackSize);
}

void ResourceContainer::split(int newStackSize, PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addSignedIntParameter(newStackSize);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ResourceContainerImplementation*) _getImplementation())->split(newStackSize, player);
}

void ResourceContainer::combine(ResourceContainer* fromContainer) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(fromContainer);

		method.executeWithVoidReturn();
	} else
		((ResourceContainerImplementation*) _getImplementation())->combine(fromContainer);
}

/*
 *	ResourceContainerImplementation
 */

ResourceContainerImplementation::ResourceContainerImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


ResourceContainerImplementation::~ResourceContainerImplementation() {
}


void ResourceContainerImplementation::finalize() {
}

void ResourceContainerImplementation::_initializeImplementation() {
	_setClassHelper(ResourceContainerHelper::instance());

	_serializationHelperMethod();
}

void ResourceContainerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ResourceContainer*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ResourceContainerImplementation::_getStub() {
	return _this;
}

ResourceContainerImplementation::operator const ResourceContainer*() {
	return _this;
}

TransactionalObject* ResourceContainerImplementation::clone() {
	return (TransactionalObject*) new ResourceContainerImplementation(*this);
}


void ResourceContainerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ResourceContainerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ResourceContainerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ResourceContainerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ResourceContainerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ResourceContainerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ResourceContainerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ResourceContainerImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("ResourceContainer");

	addSerializableVariable("spawnObject", &spawnObject);
	addSerializableVariable("stackQuantity", &stackQuantity);
}

ResourceContainerImplementation::ResourceContainerImplementation() {
	_initializeImplementation();
	// server/zone/objects/resource/ResourceContainer.idl(64):   	stackQuantity = 0;
	stackQuantity = 0;
	// server/zone/objects/resource/ResourceContainer.idl(66):   	setLoggingName("ResourceContainer");
	setLoggingName("ResourceContainer");
}

void ResourceContainerImplementation::initializeTransientMembers() {
	// server/zone/objects/resource/ResourceContainer.idl(70):  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/resource/ResourceContainer.idl(72):  		Logger.setLoggingName("ResourceContainer");
	Logger::setLoggingName("ResourceContainer");
}

bool ResourceContainerImplementation::isResourceContainer() {
	// server/zone/objects/resource/ResourceContainer.idl(104):  		return true;
	return true;
}

int ResourceContainerImplementation::getQuantity() {
	// server/zone/objects/resource/ResourceContainer.idl(108):  		return stackQuantity;
	return stackQuantity;
}

void ResourceContainerImplementation::setSpawnObject(ResourceSpawn* spawn) {
	// server/zone/objects/resource/ResourceContainer.idl(112):  		spawnObject = spawn;
	spawnObject = spawn;
}

String ResourceContainerImplementation::getSpawnName() {
	// server/zone/objects/resource/ResourceContainer.idl(116):  		return spawnObject.getName();
	return spawnObject->getName();
}

String ResourceContainerImplementation::getSpawnType() {
	// server/zone/objects/resource/ResourceContainer.idl(120):  		return spawnObject.getType();
	return spawnObject->getType();
}

unsigned long long ResourceContainerImplementation::getSpawnID() {
	// server/zone/objects/resource/ResourceContainer.idl(124):  		return spawnObject.getObjectID();
	return spawnObject->getObjectID();
}

ResourceSpawn* ResourceContainerImplementation::getSpawnObject() {
	// server/zone/objects/resource/ResourceContainer.idl(128):  		return spawnObject;
	return spawnObject;
}

/*
 *	ResourceContainerAdapter
 */

ResourceContainerAdapter::ResourceContainerAdapter(ResourceContainerImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* ResourceContainerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case 8:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 9:
		setQuantity(inv->getSignedIntParameter());
		break;
	case 10:
		resp->insertBoolean(isResourceContainer());
		break;
	case 11:
		resp->insertSignedInt(getQuantity());
		break;
	case 12:
		setSpawnObject((ResourceSpawn*) inv->getObjectParameter());
		break;
	case 13:
		resp->insertAscii(getSpawnName());
		break;
	case 14:
		resp->insertAscii(getSpawnType());
		break;
	case 15:
		resp->insertLong(getSpawnID());
		break;
	case 16:
		resp->insertLong(getSpawnObject()->_getObjectID());
		break;
	case 17:
		split(inv->getSignedIntParameter());
		break;
	case 18:
		split(inv->getSignedIntParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 19:
		combine((ResourceContainer*) inv->getObjectParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ResourceContainerAdapter::initializeTransientMembers() {
	((ResourceContainerImplementation*) impl)->initializeTransientMembers();
}

void ResourceContainerAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	((ResourceContainerImplementation*) impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

void ResourceContainerAdapter::sendBaselinesTo(SceneObject* player) {
	((ResourceContainerImplementation*) impl)->sendBaselinesTo(player);
}

void ResourceContainerAdapter::setQuantity(int quantity) {
	((ResourceContainerImplementation*) impl)->setQuantity(quantity);
}

bool ResourceContainerAdapter::isResourceContainer() {
	return ((ResourceContainerImplementation*) impl)->isResourceContainer();
}

int ResourceContainerAdapter::getQuantity() {
	return ((ResourceContainerImplementation*) impl)->getQuantity();
}

void ResourceContainerAdapter::setSpawnObject(ResourceSpawn* spawn) {
	((ResourceContainerImplementation*) impl)->setSpawnObject(spawn);
}

String ResourceContainerAdapter::getSpawnName() {
	return ((ResourceContainerImplementation*) impl)->getSpawnName();
}

String ResourceContainerAdapter::getSpawnType() {
	return ((ResourceContainerImplementation*) impl)->getSpawnType();
}

unsigned long long ResourceContainerAdapter::getSpawnID() {
	return ((ResourceContainerImplementation*) impl)->getSpawnID();
}

ResourceSpawn* ResourceContainerAdapter::getSpawnObject() {
	return ((ResourceContainerImplementation*) impl)->getSpawnObject();
}

void ResourceContainerAdapter::split(int newStackSize) {
	((ResourceContainerImplementation*) impl)->split(newStackSize);
}

void ResourceContainerAdapter::split(int newStackSize, PlayerCreature* player) {
	((ResourceContainerImplementation*) impl)->split(newStackSize, player);
}

void ResourceContainerAdapter::combine(ResourceContainer* fromContainer) {
	((ResourceContainerImplementation*) impl)->combine(fromContainer);
}

/*
 *	ResourceContainerHelper
 */

ResourceContainerHelper* ResourceContainerHelper::staticInitializer = ResourceContainerHelper::instance();

ResourceContainerHelper::ResourceContainerHelper() {
	className = "ResourceContainer";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ResourceContainerHelper::finalizeHelper() {
	ResourceContainerHelper::finalize();
}

DistributedObject* ResourceContainerHelper::instantiateObject() {
	return new ResourceContainer(DummyConstructorParameter::instance());
}

DistributedObjectServant* ResourceContainerHelper::instantiateServant() {
	return new ResourceContainerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ResourceContainerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ResourceContainerAdapter((ResourceContainerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

