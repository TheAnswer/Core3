/*
 *	server/zone/objects/manufactureschematic/ManufactureSchematic.cpp generated by engine3 IDL compiler 0.60
 */

#include "ManufactureSchematic.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/objects/draftschematic/DraftSchematic.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/tangible/TangibleObject.h"

/*
 *	ManufactureSchematicStub
 */

ManufactureSchematic::ManufactureSchematic() : IntangibleObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new ManufactureSchematicImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

ManufactureSchematic::ManufactureSchematic(DummyConstructorParameter* param) : IntangibleObject(param) {
}

ManufactureSchematic::~ManufactureSchematic() {
}


void ManufactureSchematic::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->initializeTransientMembers();
}

void ManufactureSchematic::fillAttributeList(AttributeListMessage* msg, PlayerCreature* object) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((ManufactureSchematicImplementation*) _getImplementation())->fillAttributeList(msg, object);
}

void ManufactureSchematic::sendTo(SceneObject* player, bool doClose) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);
		method.addBooleanParameter(doClose);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->sendTo(player, doClose);
}

void ManufactureSchematic::sendBaselinesTo(SceneObject* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->sendBaselinesTo(player);
}

void ManufactureSchematic::synchronizedUIListen(SceneObject* player, int value) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->synchronizedUIListen(player, value);
}

void ManufactureSchematic::synchronizedUIStopListen(SceneObject* player, int value) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->synchronizedUIStopListen(player, value);
}

void ManufactureSchematic::updateToDatabaseAllObjects(bool startTask) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->updateToDatabaseAllObjects(startTask);
}

bool ManufactureSchematic::isManufactureSchematic() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);

		return method.executeWithBooleanReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->isManufactureSchematic();
}

void ManufactureSchematic::setDraftSchematic(DraftSchematic* schematic) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->setDraftSchematic(schematic);
}

void ManufactureSchematic::initializeIngredientSlots(DraftSchematic* schematic) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(schematic);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->initializeIngredientSlots(schematic);
}

void ManufactureSchematic::cleanupIngredientSlots() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->cleanupIngredientSlots();
}

DraftSchematic* ManufactureSchematic::getDraftSchematic() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		return (DraftSchematic*) method.executeWithObjectReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getDraftSchematic();
}

Reference<IngredientSlot*> ManufactureSchematic::getIngredientSlot(int index) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getIngredientSlot(index);
}

int ManufactureSchematic::getSlotCount() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getSlotCount();
}

void ManufactureSchematic::increaseComplexity() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->increaseComplexity();
}

void ManufactureSchematic::decreaseComplexity() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->decreaseComplexity();
}

float ManufactureSchematic::getComplexity() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		return method.executeWithFloatReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getComplexity();
}

bool ManufactureSchematic::getFirstCraftingUpdate() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		return method.executeWithBooleanReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getFirstCraftingUpdate();
}

void ManufactureSchematic::setFirstCraftingUpdate() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->setFirstCraftingUpdate();
}

bool ManufactureSchematic::isReadyForAssembly() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->isReadyForAssembly();
}

void ManufactureSchematic::setAssembled() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->setAssembled();
}

bool ManufactureSchematic::isAssembled() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithBooleanReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->isAssembled();
}

void ManufactureSchematic::setCompleted() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->setCompleted();
}

bool ManufactureSchematic::isCompleted() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		return method.executeWithBooleanReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->isCompleted();
}

void ManufactureSchematic::setCrafter(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->setCrafter(player);
}

PlayerCreature* ManufactureSchematic::getCrafter() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return (PlayerCreature*) method.executeWithObjectReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getCrafter();
}

CraftingValues* ManufactureSchematic::getCraftingValues() {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getCraftingValues();
}

void ManufactureSchematic::setExperimentingCounter(int value) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addSignedIntParameter(value);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->setExperimentingCounter(value);
}

int ManufactureSchematic::getExperimentingCounter() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getExperimentingCounter();
}

int ManufactureSchematic::getExperimentingCounterPrevious() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getExperimentingCounterPrevious();
}

void ManufactureSchematic::setManufactureLimit(int limit) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addSignedIntParameter(limit);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->setManufactureLimit(limit);
}

int ManufactureSchematic::getManufactureLimit() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getManufactureLimit();
}

void ManufactureSchematic::setPrototype(TangibleObject* tano) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addObjectParameter(tano);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->setPrototype(tano);
}

TangibleObject* ManufactureSchematic::getPrototype() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);

		return (TangibleObject*) method.executeWithObjectReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getPrototype();
}

void ManufactureSchematic::initializeFactoryIngredients() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		method.executeWithVoidReturn();
	} else
		((ManufactureSchematicImplementation*) _getImplementation())->initializeFactoryIngredients();
}

int ManufactureSchematic::getFactoryIngredientsSize() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithSignedIntReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getFactoryIngredientsSize();
}

SceneObject* ManufactureSchematic::getFactoryIngredient(int i) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addSignedIntParameter(i);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((ManufactureSchematicImplementation*) _getImplementation())->getFactoryIngredient(i);
}

/*
 *	ManufactureSchematicImplementation
 */

ManufactureSchematicImplementation::ManufactureSchematicImplementation(DummyConstructorParameter* param) : IntangibleObjectImplementation(param) {
	_initializeImplementation();
}


ManufactureSchematicImplementation::~ManufactureSchematicImplementation() {
}


void ManufactureSchematicImplementation::finalize() {
}

void ManufactureSchematicImplementation::_initializeImplementation() {
	_setClassHelper(ManufactureSchematicHelper::instance());

	_serializationHelperMethod();
}

void ManufactureSchematicImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ManufactureSchematic*) stub;
	IntangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ManufactureSchematicImplementation::_getStub() {
	return _this;
}

ManufactureSchematicImplementation::operator const ManufactureSchematic*() {
	return _this;
}

TransactionalObject* ManufactureSchematicImplementation::clone() {
	return (TransactionalObject*) new ManufactureSchematicImplementation(*this);
}


void ManufactureSchematicImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ManufactureSchematicImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ManufactureSchematicImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ManufactureSchematicImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ManufactureSchematicImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ManufactureSchematicImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ManufactureSchematicImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ManufactureSchematicImplementation::_serializationHelperMethod() {
	IntangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("ManufactureSchematic");

	addSerializableVariable("draftSchematic", &draftSchematic);
	addSerializableVariable("prototype", &prototype);
	addSerializableVariable("dataSize", &dataSize);
	addSerializableVariable("manufactureLimit", &manufactureLimit);
	addSerializableVariable("complexity", &complexity);
	addSerializableVariable("crcToSend", &crcToSend);
	addSerializableVariable("crafter", &crafter);
	addSerializableVariable("firstCraftingUpdate", &firstCraftingUpdate);
	addSerializableVariable("factoryIngredients", &factoryIngredients);
	addSerializableVariable("ingredientSlots", &ingredientSlots);
	addSerializableVariable("assembled", &assembled);
	addSerializableVariable("completed", &completed);
	addSerializableVariable("experimentingCounter", &experimentingCounter);
	addSerializableVariable("experimentingCounterPrevious", &experimentingCounterPrevious);
	addSerializableVariable("craftingValues", &craftingValues);
	addSerializableVariable("customizationOptions", &customizationOptions);
	addSerializableVariable("customizationDefaultValues", &customizationDefaultValues);
}

ManufactureSchematicImplementation::ManufactureSchematicImplementation() {
	_initializeImplementation();
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(92):  		Logger.setLoggingName("ManufactureSchematic");
	Logger::setLoggingName("ManufactureSchematic");
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(93):  		prototype = null;
	prototype = NULL;
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(94):  		firstCraftingUpdate = false;
	firstCraftingUpdate = false;
}

void ManufactureSchematicImplementation::initializeTransientMembers() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(98):  		super.initializeTransientMembers();
	IntangibleObjectImplementation::initializeTransientMembers();
}

bool ManufactureSchematicImplementation::isManufactureSchematic() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(150):  		return true;
	return true;
}

DraftSchematic* ManufactureSchematicImplementation::getDraftSchematic() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(160):  		return draftSchematic;
	return draftSchematic;
}

void ManufactureSchematicImplementation::increaseComplexity() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(170):  		complexity++;
	complexity ++;
}

void ManufactureSchematicImplementation::decreaseComplexity() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(174):  	}
	if (complexity > 1)	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(175):  			complexity = complexity - 1;
	complexity = complexity - 1;
}

float ManufactureSchematicImplementation::getComplexity() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(179):  		return complexity;
	return complexity;
}

bool ManufactureSchematicImplementation::getFirstCraftingUpdate() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(183):  		return firstCraftingUpdate;
	return firstCraftingUpdate;
}

void ManufactureSchematicImplementation::setFirstCraftingUpdate() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(187):  		firstCraftingUpdate = true;
	firstCraftingUpdate = true;
}

void ManufactureSchematicImplementation::setAssembled() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(193):  		assembled = true;
	assembled = true;
}

bool ManufactureSchematicImplementation::isAssembled() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(197):  		return assembled;
	return assembled;
}

void ManufactureSchematicImplementation::setCompleted() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(201):  		completed = true;
	completed = true;
}

bool ManufactureSchematicImplementation::isCompleted() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(205):  		return completed;
	return completed;
}

void ManufactureSchematicImplementation::setCrafter(PlayerCreature* player) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(209):  		crafter = player;
	crafter = player;
}

PlayerCreature* ManufactureSchematicImplementation::getCrafter() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(213):  		return crafter;
	return crafter;
}

CraftingValues* ManufactureSchematicImplementation::getCraftingValues() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(218):  		return craftingValues;
	return (&craftingValues);
}

void ManufactureSchematicImplementation::setExperimentingCounter(int value) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(222):  		experimentingCounterPrevious = experimentingCounter;
	experimentingCounterPrevious = experimentingCounter;
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(223):  		experimentingCounter = value;
	experimentingCounter = value;
}

int ManufactureSchematicImplementation::getExperimentingCounter() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(227):  		return experimentingCounter;
	return experimentingCounter;
}

int ManufactureSchematicImplementation::getExperimentingCounterPrevious() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(231):  		return experimentingCounterPrevious;
	return experimentingCounterPrevious;
}

void ManufactureSchematicImplementation::setManufactureLimit(int limit) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(235):  		manufactureLimit = limit;
	manufactureLimit = limit;
}

int ManufactureSchematicImplementation::getManufactureLimit() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(239):  		return manufactureLimit;
	return manufactureLimit;
}

TangibleObject* ManufactureSchematicImplementation::getPrototype() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(245):  		return prototype;
	return prototype;
}

int ManufactureSchematicImplementation::getFactoryIngredientsSize() {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(251):  		return factoryIngredients.size();
	return (&factoryIngredients)->size();
}

SceneObject* ManufactureSchematicImplementation::getFactoryIngredient(int i) {
	// server/zone/objects/manufactureschematic/ManufactureSchematic.idl(255):  		return factoryIngredients.get(i);
	return (&factoryIngredients)->get(i);
}

/*
 *	ManufactureSchematicAdapter
 */

ManufactureSchematicAdapter::ManufactureSchematicAdapter(ManufactureSchematicImplementation* obj) : IntangibleObjectAdapter(obj) {
}

Packet* ManufactureSchematicAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		sendTo((SceneObject*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 8:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 9:
		synchronizedUIListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 10:
		synchronizedUIStopListen((SceneObject*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 11:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case 12:
		resp->insertBoolean(isManufactureSchematic());
		break;
	case 13:
		setDraftSchematic((DraftSchematic*) inv->getObjectParameter());
		break;
	case 14:
		initializeIngredientSlots((DraftSchematic*) inv->getObjectParameter());
		break;
	case 15:
		cleanupIngredientSlots();
		break;
	case 16:
		resp->insertLong(getDraftSchematic()->_getObjectID());
		break;
	case 17:
		resp->insertSignedInt(getSlotCount());
		break;
	case 18:
		increaseComplexity();
		break;
	case 19:
		decreaseComplexity();
		break;
	case 20:
		resp->insertFloat(getComplexity());
		break;
	case 21:
		resp->insertBoolean(getFirstCraftingUpdate());
		break;
	case 22:
		setFirstCraftingUpdate();
		break;
	case 23:
		resp->insertBoolean(isReadyForAssembly());
		break;
	case 24:
		setAssembled();
		break;
	case 25:
		resp->insertBoolean(isAssembled());
		break;
	case 26:
		setCompleted();
		break;
	case 27:
		resp->insertBoolean(isCompleted());
		break;
	case 28:
		setCrafter((PlayerCreature*) inv->getObjectParameter());
		break;
	case 29:
		resp->insertLong(getCrafter()->_getObjectID());
		break;
	case 30:
		setExperimentingCounter(inv->getSignedIntParameter());
		break;
	case 31:
		resp->insertSignedInt(getExperimentingCounter());
		break;
	case 32:
		resp->insertSignedInt(getExperimentingCounterPrevious());
		break;
	case 33:
		setManufactureLimit(inv->getSignedIntParameter());
		break;
	case 34:
		resp->insertSignedInt(getManufactureLimit());
		break;
	case 35:
		setPrototype((TangibleObject*) inv->getObjectParameter());
		break;
	case 36:
		resp->insertLong(getPrototype()->_getObjectID());
		break;
	case 37:
		initializeFactoryIngredients();
		break;
	case 38:
		resp->insertSignedInt(getFactoryIngredientsSize());
		break;
	case 39:
		resp->insertLong(getFactoryIngredient(inv->getSignedIntParameter())->_getObjectID());
		break;
	default:
		return NULL;
	}

	return resp;
}

void ManufactureSchematicAdapter::initializeTransientMembers() {
	((ManufactureSchematicImplementation*) impl)->initializeTransientMembers();
}

void ManufactureSchematicAdapter::sendTo(SceneObject* player, bool doClose) {
	((ManufactureSchematicImplementation*) impl)->sendTo(player, doClose);
}

void ManufactureSchematicAdapter::sendBaselinesTo(SceneObject* player) {
	((ManufactureSchematicImplementation*) impl)->sendBaselinesTo(player);
}

void ManufactureSchematicAdapter::synchronizedUIListen(SceneObject* player, int value) {
	((ManufactureSchematicImplementation*) impl)->synchronizedUIListen(player, value);
}

void ManufactureSchematicAdapter::synchronizedUIStopListen(SceneObject* player, int value) {
	((ManufactureSchematicImplementation*) impl)->synchronizedUIStopListen(player, value);
}

void ManufactureSchematicAdapter::updateToDatabaseAllObjects(bool startTask) {
	((ManufactureSchematicImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

bool ManufactureSchematicAdapter::isManufactureSchematic() {
	return ((ManufactureSchematicImplementation*) impl)->isManufactureSchematic();
}

void ManufactureSchematicAdapter::setDraftSchematic(DraftSchematic* schematic) {
	((ManufactureSchematicImplementation*) impl)->setDraftSchematic(schematic);
}

void ManufactureSchematicAdapter::initializeIngredientSlots(DraftSchematic* schematic) {
	((ManufactureSchematicImplementation*) impl)->initializeIngredientSlots(schematic);
}

void ManufactureSchematicAdapter::cleanupIngredientSlots() {
	((ManufactureSchematicImplementation*) impl)->cleanupIngredientSlots();
}

DraftSchematic* ManufactureSchematicAdapter::getDraftSchematic() {
	return ((ManufactureSchematicImplementation*) impl)->getDraftSchematic();
}

int ManufactureSchematicAdapter::getSlotCount() {
	return ((ManufactureSchematicImplementation*) impl)->getSlotCount();
}

void ManufactureSchematicAdapter::increaseComplexity() {
	((ManufactureSchematicImplementation*) impl)->increaseComplexity();
}

void ManufactureSchematicAdapter::decreaseComplexity() {
	((ManufactureSchematicImplementation*) impl)->decreaseComplexity();
}

float ManufactureSchematicAdapter::getComplexity() {
	return ((ManufactureSchematicImplementation*) impl)->getComplexity();
}

bool ManufactureSchematicAdapter::getFirstCraftingUpdate() {
	return ((ManufactureSchematicImplementation*) impl)->getFirstCraftingUpdate();
}

void ManufactureSchematicAdapter::setFirstCraftingUpdate() {
	((ManufactureSchematicImplementation*) impl)->setFirstCraftingUpdate();
}

bool ManufactureSchematicAdapter::isReadyForAssembly() {
	return ((ManufactureSchematicImplementation*) impl)->isReadyForAssembly();
}

void ManufactureSchematicAdapter::setAssembled() {
	((ManufactureSchematicImplementation*) impl)->setAssembled();
}

bool ManufactureSchematicAdapter::isAssembled() {
	return ((ManufactureSchematicImplementation*) impl)->isAssembled();
}

void ManufactureSchematicAdapter::setCompleted() {
	((ManufactureSchematicImplementation*) impl)->setCompleted();
}

bool ManufactureSchematicAdapter::isCompleted() {
	return ((ManufactureSchematicImplementation*) impl)->isCompleted();
}

void ManufactureSchematicAdapter::setCrafter(PlayerCreature* player) {
	((ManufactureSchematicImplementation*) impl)->setCrafter(player);
}

PlayerCreature* ManufactureSchematicAdapter::getCrafter() {
	return ((ManufactureSchematicImplementation*) impl)->getCrafter();
}

void ManufactureSchematicAdapter::setExperimentingCounter(int value) {
	((ManufactureSchematicImplementation*) impl)->setExperimentingCounter(value);
}

int ManufactureSchematicAdapter::getExperimentingCounter() {
	return ((ManufactureSchematicImplementation*) impl)->getExperimentingCounter();
}

int ManufactureSchematicAdapter::getExperimentingCounterPrevious() {
	return ((ManufactureSchematicImplementation*) impl)->getExperimentingCounterPrevious();
}

void ManufactureSchematicAdapter::setManufactureLimit(int limit) {
	((ManufactureSchematicImplementation*) impl)->setManufactureLimit(limit);
}

int ManufactureSchematicAdapter::getManufactureLimit() {
	return ((ManufactureSchematicImplementation*) impl)->getManufactureLimit();
}

void ManufactureSchematicAdapter::setPrototype(TangibleObject* tano) {
	((ManufactureSchematicImplementation*) impl)->setPrototype(tano);
}

TangibleObject* ManufactureSchematicAdapter::getPrototype() {
	return ((ManufactureSchematicImplementation*) impl)->getPrototype();
}

void ManufactureSchematicAdapter::initializeFactoryIngredients() {
	((ManufactureSchematicImplementation*) impl)->initializeFactoryIngredients();
}

int ManufactureSchematicAdapter::getFactoryIngredientsSize() {
	return ((ManufactureSchematicImplementation*) impl)->getFactoryIngredientsSize();
}

SceneObject* ManufactureSchematicAdapter::getFactoryIngredient(int i) {
	return ((ManufactureSchematicImplementation*) impl)->getFactoryIngredient(i);
}

/*
 *	ManufactureSchematicHelper
 */

ManufactureSchematicHelper* ManufactureSchematicHelper::staticInitializer = ManufactureSchematicHelper::instance();

ManufactureSchematicHelper::ManufactureSchematicHelper() {
	className = "ManufactureSchematic";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ManufactureSchematicHelper::finalizeHelper() {
	ManufactureSchematicHelper::finalize();
}

DistributedObject* ManufactureSchematicHelper::instantiateObject() {
	return new ManufactureSchematic(DummyConstructorParameter::instance());
}

DistributedObjectServant* ManufactureSchematicHelper::instantiateServant() {
	return new ManufactureSchematicImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ManufactureSchematicHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ManufactureSchematicAdapter((ManufactureSchematicImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

