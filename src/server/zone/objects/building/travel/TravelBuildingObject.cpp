/*
 *	server/zone/objects/building/travel/TravelBuildingObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "TravelBuildingObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/cell/CellObject.h"

/*
 *	TravelBuildingObjectStub
 */

TravelBuildingObject::TravelBuildingObject() : BuildingObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new TravelBuildingObjectImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

TravelBuildingObject::TravelBuildingObject(DummyConstructorParameter* param) : BuildingObject(param) {
}

TravelBuildingObject::~TravelBuildingObject() {
}


/*
 *	TravelBuildingObjectImplementation
 */

TravelBuildingObjectImplementation::TravelBuildingObjectImplementation(DummyConstructorParameter* param) : BuildingObjectImplementation(param) {
	_initializeImplementation();
}


TravelBuildingObjectImplementation::~TravelBuildingObjectImplementation() {
}


void TravelBuildingObjectImplementation::finalize() {
}

void TravelBuildingObjectImplementation::_initializeImplementation() {
	_setClassHelper(TravelBuildingObjectHelper::instance());

	_serializationHelperMethod();
}

void TravelBuildingObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (TravelBuildingObject*) stub;
	BuildingObjectImplementation::_setStub(stub);
}

DistributedObjectStub* TravelBuildingObjectImplementation::_getStub() {
	return _this;
}

TravelBuildingObjectImplementation::operator const TravelBuildingObject*() {
	return _this;
}

TransactionalObject* TravelBuildingObjectImplementation::clone() {
	return (TransactionalObject*) new TravelBuildingObjectImplementation(*this);
}


void TravelBuildingObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void TravelBuildingObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void TravelBuildingObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void TravelBuildingObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void TravelBuildingObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void TravelBuildingObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void TravelBuildingObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void TravelBuildingObjectImplementation::_serializationHelperMethod() {
	BuildingObjectImplementation::_serializationHelperMethod();

	_setClassName("TravelBuildingObject");

}

TravelBuildingObjectImplementation::TravelBuildingObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/travel/TravelBuildingObject.idl(55):  		Logger.setLoggingName("TravelBuildingObject");
	Logger::setLoggingName("TravelBuildingObject");
}

/*
 *	TravelBuildingObjectAdapter
 */

TravelBuildingObjectAdapter::TravelBuildingObjectAdapter(TravelBuildingObjectImplementation* obj) : BuildingObjectAdapter(obj) {
}

Packet* TravelBuildingObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	default:
		return NULL;
	}

	return resp;
}

/*
 *	TravelBuildingObjectHelper
 */

TravelBuildingObjectHelper* TravelBuildingObjectHelper::staticInitializer = TravelBuildingObjectHelper::instance();

TravelBuildingObjectHelper::TravelBuildingObjectHelper() {
	className = "TravelBuildingObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void TravelBuildingObjectHelper::finalizeHelper() {
	TravelBuildingObjectHelper::finalize();
}

DistributedObject* TravelBuildingObjectHelper::instantiateObject() {
	return new TravelBuildingObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* TravelBuildingObjectHelper::instantiateServant() {
	return new TravelBuildingObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* TravelBuildingObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new TravelBuildingObjectAdapter((TravelBuildingObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

