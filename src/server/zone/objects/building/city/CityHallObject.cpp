/*
 *	server/zone/objects/building/city/CityHallObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "CityHallObject.h"

#include "server/zone/Zone.h"

#include "server/zone/objects/region/Region.h"

/*
 *	CityHallObjectStub
 */

CityHallObject::CityHallObject() : BuildingObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new CityHallObjectImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

CityHallObject::CityHallObject(DummyConstructorParameter* param) : BuildingObject(param) {
}

CityHallObject::~CityHallObject() {
}


void CityHallObject::insertToZone(Zone* zone) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(zone);

		method.executeWithVoidReturn();
	} else
		((CityHallObjectImplementation*) _getImplementation())->insertToZone(zone);
}

void CityHallObject::spawnCityHallObjects() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((CityHallObjectImplementation*) _getImplementation())->spawnCityHallObjects();
}

void CityHallObject::trySetCityName(PlayerCreature* player, const String& name) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CityHallObjectImplementation*) _getImplementation())->trySetCityName(player, name);
}

bool CityHallObject::checkRequisitesForPlacement(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((CityHallObjectImplementation*) _getImplementation())->checkRequisitesForPlacement(player);
}

void CityHallObject::setCityName(const String& name) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addAsciiParameter(name);

		method.executeWithVoidReturn();
	} else
		((CityHallObjectImplementation*) _getImplementation())->setCityName(name);
}

String CityHallObject::getCityName() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		method.executeWithAsciiReturn(_return_getCityName);
		return _return_getCityName;
	} else
		return ((CityHallObjectImplementation*) _getImplementation())->getCityName();
}

int CityHallObject::notifyStructurePlaced(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((CityHallObjectImplementation*) _getImplementation())->notifyStructurePlaced(player);
}

bool CityHallObject::isCityHallBuilding() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);

		return method.executeWithBooleanReturn();
	} else
		return ((CityHallObjectImplementation*) _getImplementation())->isCityHallBuilding();
}

/*
 *	CityHallObjectImplementation
 */

CityHallObjectImplementation::CityHallObjectImplementation(DummyConstructorParameter* param) : BuildingObjectImplementation(param) {
	_initializeImplementation();
}


CityHallObjectImplementation::~CityHallObjectImplementation() {
}


void CityHallObjectImplementation::finalize() {
}

void CityHallObjectImplementation::_initializeImplementation() {
	_setClassHelper(CityHallObjectHelper::instance());

	_serializationHelperMethod();
}

void CityHallObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (CityHallObject*) stub;
	BuildingObjectImplementation::_setStub(stub);
}

DistributedObjectStub* CityHallObjectImplementation::_getStub() {
	return _this;
}

CityHallObjectImplementation::operator const CityHallObject*() {
	return _this;
}

TransactionalObject* CityHallObjectImplementation::clone() {
	return (TransactionalObject*) new CityHallObjectImplementation(*this);
}


void CityHallObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void CityHallObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void CityHallObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void CityHallObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void CityHallObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void CityHallObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void CityHallObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void CityHallObjectImplementation::_serializationHelperMethod() {
	BuildingObjectImplementation::_serializationHelperMethod();

	_setClassName("CityHallObject");

	addSerializableVariable("cityRegion", &cityRegion);
	addSerializableVariable("cityName", &cityName);
}

CityHallObjectImplementation::CityHallObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/building/city/CityHallObject.idl(57):  		setLoggingName("CityHallObject");
	setLoggingName("CityHallObject");
	// server/zone/objects/building/city/CityHallObject.idl(59):  		cityName = "test city";
	cityName = "test city";
}

void CityHallObjectImplementation::insertToZone(Zone* zone) {
	// server/zone/objects/building/city/CityHallObject.idl(69):  		super.insertToZone(zone);
	BuildingObjectImplementation::insertToZone(zone);
	// server/zone/objects/building/city/CityHallObject.idl(71):  		spawnCityHallObjects();
	spawnCityHallObjects();
}

void CityHallObjectImplementation::setCityName(const String& name) {
	// server/zone/objects/building/city/CityHallObject.idl(81):  		cityName = name;
	cityName = name;
}

String CityHallObjectImplementation::getCityName() {
	// server/zone/objects/building/city/CityHallObject.idl(85):  		return cityName;
	return cityName;
}

bool CityHallObjectImplementation::isCityHallBuilding() {
	// server/zone/objects/building/city/CityHallObject.idl(94):  		return true;
	return true;
}

/*
 *	CityHallObjectAdapter
 */

CityHallObjectAdapter::CityHallObjectAdapter(CityHallObjectImplementation* obj) : BuildingObjectAdapter(obj) {
}

Packet* CityHallObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		insertToZone((Zone*) inv->getObjectParameter());
		break;
	case 7:
		spawnCityHallObjects();
		break;
	case 8:
		trySetCityName((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_trySetCityName__PlayerCreature_String_));
		break;
	case 9:
		resp->insertBoolean(checkRequisitesForPlacement((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 10:
		setCityName(inv->getAsciiParameter(_param0_setCityName__String_));
		break;
	case 11:
		resp->insertAscii(getCityName());
		break;
	case 12:
		resp->insertSignedInt(notifyStructurePlaced((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 13:
		resp->insertBoolean(isCityHallBuilding());
		break;
	default:
		return NULL;
	}

	return resp;
}

void CityHallObjectAdapter::insertToZone(Zone* zone) {
	((CityHallObjectImplementation*) impl)->insertToZone(zone);
}

void CityHallObjectAdapter::spawnCityHallObjects() {
	((CityHallObjectImplementation*) impl)->spawnCityHallObjects();
}

void CityHallObjectAdapter::trySetCityName(PlayerCreature* player, const String& name) {
	((CityHallObjectImplementation*) impl)->trySetCityName(player, name);
}

bool CityHallObjectAdapter::checkRequisitesForPlacement(PlayerCreature* player) {
	return ((CityHallObjectImplementation*) impl)->checkRequisitesForPlacement(player);
}

void CityHallObjectAdapter::setCityName(const String& name) {
	((CityHallObjectImplementation*) impl)->setCityName(name);
}

String CityHallObjectAdapter::getCityName() {
	return ((CityHallObjectImplementation*) impl)->getCityName();
}

int CityHallObjectAdapter::notifyStructurePlaced(PlayerCreature* player) {
	return ((CityHallObjectImplementation*) impl)->notifyStructurePlaced(player);
}

bool CityHallObjectAdapter::isCityHallBuilding() {
	return ((CityHallObjectImplementation*) impl)->isCityHallBuilding();
}

/*
 *	CityHallObjectHelper
 */

CityHallObjectHelper* CityHallObjectHelper::staticInitializer = CityHallObjectHelper::instance();

CityHallObjectHelper::CityHallObjectHelper() {
	className = "CityHallObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void CityHallObjectHelper::finalizeHelper() {
	CityHallObjectHelper::finalize();
}

DistributedObject* CityHallObjectHelper::instantiateObject() {
	return new CityHallObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* CityHallObjectHelper::instantiateServant() {
	return new CityHallObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* CityHallObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CityHallObjectAdapter((CityHallObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

