/*
 *	server/zone/objects/building/medical/MedicalBuildingObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef MEDICALBUILDINGOBJECT_H_
#define MEDICALBUILDINGOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace cell {

class CellObject;

} // namespace cell
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::cell;

#include "server/zone/objects/building/BuildingObject.h"

#include "engine/lua/LuaObject.h"

namespace server {
namespace zone {
namespace objects {
namespace building {
namespace medical {

class MedicalBuildingObject : public BuildingObject {
public:
	MedicalBuildingObject();

	bool isMedicalBuildingObject();

protected:
	MedicalBuildingObject(DummyConstructorParameter* param);

	virtual ~MedicalBuildingObject();

	friend class MedicalBuildingObjectHelper;
};

} // namespace medical
} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building::medical;

namespace server {
namespace zone {
namespace objects {
namespace building {
namespace medical {

class MedicalBuildingObjectImplementation : public BuildingObjectImplementation {

public:
	MedicalBuildingObjectImplementation();

	MedicalBuildingObjectImplementation(DummyConstructorParameter* param);

	bool isMedicalBuildingObject();

	MedicalBuildingObject* _this;

	operator const MedicalBuildingObject*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~MedicalBuildingObjectImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class MedicalBuildingObject;
	friend class TransactionalObjectHandle<MedicalBuildingObjectImplementation*>;
};

class MedicalBuildingObjectAdapter : public BuildingObjectAdapter {
public:
	MedicalBuildingObjectAdapter(MedicalBuildingObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	bool isMedicalBuildingObject();

};

class MedicalBuildingObjectHelper : public DistributedObjectClassHelper, public Singleton<MedicalBuildingObjectHelper> {
	static MedicalBuildingObjectHelper* staticInitializer;

public:
	MedicalBuildingObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<MedicalBuildingObjectHelper>;
};

} // namespace medical
} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building::medical;

#endif /*MEDICALBUILDINGOBJECT_H_*/
