/*
 *	server/zone/objects/installation/bank/BankInstallation.h generated by engine3 IDL compiler 0.60
 */

#ifndef BANKINSTALLATION_H_
#define BANKINSTALLATION_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace templates {

class SharedObjectTemplate;

} // namespace templates
} // namespace zone
} // namespace server

using namespace server::zone::templates;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace bank {

class BankTerminal;

} // namespace bank
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::bank;

#include "server/zone/objects/installation/InstallationObject.h"

#include "engine/lua/LuaObject.h"

#include "system/util/SortedVector.h"

#include "engine/service/proto/BasePacket.h"

#include "system/lang/ref/Reference.h"

#include "system/util/VectorMap.h"

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace bank {

class BankInstallation : public InstallationObject {
public:
	BankInstallation();

	void insertToZone(Zone* zone);

	void spawnBankObjects();

protected:
	BankInstallation(DummyConstructorParameter* param);

	virtual ~BankInstallation();

	friend class BankInstallationHelper;
};

} // namespace bank
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::bank;

namespace server {
namespace zone {
namespace objects {
namespace installation {
namespace bank {

class BankInstallationImplementation : public InstallationObjectImplementation {
protected:
	Vector<ManagedReference<BankTerminal* > > banks;

public:
	BankInstallationImplementation();

	BankInstallationImplementation(DummyConstructorParameter* param);

	void insertToZone(Zone* zone);

	void spawnBankObjects();

	BankInstallation* _this;

	operator const BankInstallation*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~BankInstallationImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class BankInstallation;
	friend class TransactionalObjectHandle<BankInstallationImplementation*>;
};

class BankInstallationAdapter : public InstallationObjectAdapter {
public:
	BankInstallationAdapter(BankInstallationImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void insertToZone(Zone* zone);

	void spawnBankObjects();

};

class BankInstallationHelper : public DistributedObjectClassHelper, public Singleton<BankInstallationHelper> {
	static BankInstallationHelper* staticInitializer;

public:
	BankInstallationHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<BankInstallationHelper>;
};

} // namespace bank
} // namespace installation
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::installation::bank;

#endif /*BANKINSTALLATION_H_*/
