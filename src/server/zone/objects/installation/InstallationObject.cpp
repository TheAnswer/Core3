/*
 *	server/zone/objects/installation/InstallationObject.cpp generated by engine3 IDL compiler 0.60
 */

#include "InstallationObject.h"

#include "server/zone/objects/creature/CreatureObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/packets/scene/AttributeListMessage.h"

#include "server/zone/packets/object/ObjectMenuResponse.h"

#include "server/zone/templates/SharedObjectTemplate.h"

#include "server/zone/objects/installation/SyncrhonizedUiListenInstallationTask.h"

#include "server/zone/objects/resource/ResourceSpawn.h"

#include "server/zone/objects/resource/ResourceContainer.h"

/*
 *	InstallationObjectStub
 */

InstallationObject::InstallationObject() : TangibleObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new InstallationObjectImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

InstallationObject::InstallationObject(DummyConstructorParameter* param) : TangibleObject(param) {
}

InstallationObject::~InstallationObject() {
}


void InstallationObject::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->initializeTransientMembers();
}

void InstallationObject::destroyObjectFromDatabase(bool destroyContainedObjects) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addBooleanParameter(destroyContainedObjects);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->destroyObjectFromDatabase(destroyContainedObjects);
}

void InstallationObject::loadTemplateData(SharedObjectTemplate* templateData) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((InstallationObjectImplementation*) _getImplementation())->loadTemplateData(templateData);
}

void InstallationObject::fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((InstallationObjectImplementation*) _getImplementation())->fillObjectMenuResponse(menuResponse, player);
}

int InstallationObject::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);
		method.addByteParameter(selectedID);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->handleObjectMenuSelect(player, selectedID);
}

int InstallationObject::notifyStructurePlaced(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(player);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->notifyStructurePlaced(player);
}

bool InstallationObject::checkRequisitesForPlacement(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->checkRequisitesForPlacement(player);
}

void InstallationObject::broadcastMessage(BasePacket* message, bool sendSelf) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(message);
		method.addBooleanParameter(sendSelf);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->broadcastMessage(message, sendSelf);
}

void InstallationObject::updateResourceContainerQuantity(ResourceContainer* container, int newQuantity, bool notifyClient) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(container);
		method.addSignedIntParameter(newQuantity);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->updateResourceContainerQuantity(container, newQuantity, notifyClient);
}

void InstallationObject::updateToDatabaseAllObjects(bool startTask) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addBooleanParameter(startTask);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->updateToDatabaseAllObjects(startTask);
}

void InstallationObject::setOperating(bool operating, bool notifyClient) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addBooleanParameter(operating);
		method.addBooleanParameter(notifyClient);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->setOperating(operating, notifyClient);
}

void InstallationObject::activateUiSync() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->activateUiSync();
}

void InstallationObject::updateOperators() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->updateOperators();
}

void InstallationObject::verifyOperators() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->verifyOperators();
}

void InstallationObject::updateInstallationWork() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->updateInstallationWork();
}

void InstallationObject::handleStructureStatus(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->handleStructureStatus(player);
}

void InstallationObject::handleStructureManageMaintenance(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->handleStructureManageMaintenance(player);
}

void InstallationObject::handleSetObjectName(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->handleSetObjectName(player);
}

void InstallationObject::handleStructureDestroy(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->handleStructureDestroy(player);
}

void InstallationObject::handleStructureAddEnergy(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->handleStructureAddEnergy(player);
}

void InstallationObject::setActiveResource(ResourceContainer* container) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->setActiveResource(container);
}

void InstallationObject::changeActiveResourceID(unsigned long long spawnObjectID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);
		method.addUnsignedLongParameter(spawnObjectID);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->changeActiveResourceID(spawnObjectID);
}

void InstallationObject::addResourceToHopper(ResourceContainer* container) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->addResourceToHopper(container);
}

void InstallationObject::removeResourceFromHopper(ResourceContainer* container) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);
		method.addObjectParameter(container);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->removeResourceFromHopper(container);
}

void InstallationObject::clearResourceHopper() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->clearResourceHopper();
}

float InstallationObject::getHopperSize() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getHopperSize();
}

bool InstallationObject::updateMaintenance(Time& workingTime) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((InstallationObjectImplementation*) _getImplementation())->updateMaintenance(workingTime);
}

void InstallationObject::updateHopper(Time& workingTime, bool shutdownAfterUpdate) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((InstallationObjectImplementation*) _getImplementation())->updateHopper(workingTime, shutdownAfterUpdate);
}

int InstallationObject::getHopperItemQuantity(ResourceSpawn* spawn) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);
		method.addObjectParameter(spawn);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getHopperItemQuantity(spawn);
}

ResourceContainer* InstallationObject::getContainerFromHopper(ResourceSpawn* spawn) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);
		method.addObjectParameter(spawn);

		return (ResourceContainer*) method.executeWithObjectReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getContainerFromHopper(spawn);
}

unsigned long long InstallationObject::getActiveResourceSpawnID() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getActiveResourceSpawnID();
}

float InstallationObject::getActualRate() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getActualRate();
}

void InstallationObject::broadcastToOperators(BasePacket* packet) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addObjectParameter(packet);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->broadcastToOperators(packet);
}

bool InstallationObject::isOnAdminList(SceneObject* scno) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addObjectParameter(scno);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->isOnAdminList(scno);
}

bool InstallationObject::isOnAdminList(unsigned long long oid) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addUnsignedLongParameter(oid);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->isOnAdminList(oid);
}

void InstallationObject::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);
		method.addObjectParameter(player);
		method.addAsciiParameter(listName);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->sendPermissionListTo(player, listName);
}

void InstallationObject::addOperator(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->addOperator(player);
}

void InstallationObject::removeOperator(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->removeOperator(player);
}

void InstallationObject::sendBaselinesTo(SceneObject* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->sendBaselinesTo(player);
}

void InstallationObject::setLotSize(int lotsize) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 41);
		method.addSignedIntParameter(lotsize);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->setLotSize(lotsize);
}

int InstallationObject::getLotSize() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 42);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getLotSize();
}

void InstallationObject::setDeedObjectID(unsigned long long deedid) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 43);
		method.addUnsignedLongParameter(deedid);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->setDeedObjectID(deedid);
}

unsigned long long InstallationObject::getDeedObjectID() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 44);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getDeedObjectID();
}

void InstallationObject::setOwnerObjectID(unsigned long long ownerID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 45);
		method.addUnsignedLongParameter(ownerID);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->setOwnerObjectID(ownerID);
}

unsigned long long InstallationObject::getOwnerObjectID() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 46);

		return method.executeWithUnsignedLongReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getOwnerObjectID();
}

void InstallationObject::setMaintenancePool(unsigned int maintenance) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 47);
		method.addUnsignedIntParameter(maintenance);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->setMaintenancePool(maintenance);
}

unsigned int InstallationObject::getMaintenancePool() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 48);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getMaintenancePool();
}

void InstallationObject::setPowerPool(unsigned int power) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 49);
		method.addUnsignedIntParameter(power);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->setPowerPool(power);
}

unsigned int InstallationObject::getPowerPool() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 50);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getPowerPool();
}

void InstallationObject::addPower(int add) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 51);
		method.addSignedIntParameter(add);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->addPower(add);
}

void InstallationObject::addMaintenance(float maint) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 52);
		method.addFloatParameter(maint);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->addMaintenance(maint);
}

int InstallationObject::getBasePowerRate() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 53);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getBasePowerRate();
}

void InstallationObject::setBasePowerRate(int powerRate) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 54);
		method.addSignedIntParameter(powerRate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->setBasePowerRate(powerRate);
}

void InstallationObject::setBaseMaintenanceRate(int maintenanceRate) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 55);
		method.addSignedIntParameter(maintenanceRate);

		method.executeWithVoidReturn();
	} else
		((InstallationObjectImplementation*) _getImplementation())->setBaseMaintenanceRate(maintenanceRate);
}

int InstallationObject::getBaseMaintenanceRate() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 56);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getBaseMaintenanceRate();
}

int InstallationObject::getRedeedCost() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 57);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getRedeedCost();
}

bool InstallationObject::isInstallationObject() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 58);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->isInstallationObject();
}

bool InstallationObject::isOperating() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 59);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->isOperating();
}

int InstallationObject::getInstallationType() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 60);

		return method.executeWithSignedIntReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getInstallationType();
}

float InstallationObject::getExtractionRate() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 61);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getExtractionRate();
}

float InstallationObject::getHopperSizeMax() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 62);

		return method.executeWithFloatReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getHopperSizeMax();
}

HopperList* InstallationObject::getHopperList() {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		return ((InstallationObjectImplementation*) _getImplementation())->getHopperList();
}

bool InstallationObject::isHarvesterObject() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 63);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->isHarvesterObject();
}

bool InstallationObject::isGeneratorObject() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 64);

		return method.executeWithBooleanReturn();
	} else
		return ((InstallationObjectImplementation*) _getImplementation())->isGeneratorObject();
}

/*
 *	InstallationObjectImplementation
 */

InstallationObjectImplementation::InstallationObjectImplementation(DummyConstructorParameter* param) : TangibleObjectImplementation(param) {
	_initializeImplementation();
}


InstallationObjectImplementation::~InstallationObjectImplementation() {
}


void InstallationObjectImplementation::finalize() {
}

void InstallationObjectImplementation::_initializeImplementation() {
	_setClassHelper(InstallationObjectHelper::instance());

	_serializationHelperMethod();
}

void InstallationObjectImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (InstallationObject*) stub;
	TangibleObjectImplementation::_setStub(stub);
}

DistributedObjectStub* InstallationObjectImplementation::_getStub() {
	return _this;
}

InstallationObjectImplementation::operator const InstallationObject*() {
	return _this;
}

TransactionalObject* InstallationObjectImplementation::clone() {
	return (TransactionalObject*) new InstallationObjectImplementation(*this);
}


void InstallationObjectImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void InstallationObjectImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void InstallationObjectImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void InstallationObjectImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void InstallationObjectImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void InstallationObjectImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void InstallationObjectImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void InstallationObjectImplementation::_serializationHelperMethod() {
	TangibleObjectImplementation::_serializationHelperMethod();

	_setClassName("InstallationObject");

	addSerializableVariable("structurePermissionList", &structurePermissionList);
	addSerializableVariable("ownerObjectID", &ownerObjectID);
	addSerializableVariable("lotSize", &lotSize);
	addSerializableVariable("operating", &operating);
	addSerializableVariable("deedObjectID", &deedObjectID);
	addSerializableVariable("baseMaintenanceRate", &baseMaintenanceRate);
	addSerializableVariable("basePowerRate", &basePowerRate);
	addSerializableVariable("maintenancePool", &maintenancePool);
	addSerializableVariable("powerPool", &powerPool);
	addSerializableVariable("surplusMaintenance", &surplusMaintenance);
	addSerializableVariable("surplusPower", &surplusPower);
	addSerializableVariable("publicStructure", &publicStructure);
	addSerializableVariable("operatorList", &operatorList);
	addSerializableVariable("installationType", &installationType);
	addSerializableVariable("resourceHopperTimestamp", &resourceHopperTimestamp);
	addSerializableVariable("lastMaintenanceTime", &lastMaintenanceTime);
	addSerializableVariable("resourceHopper", &resourceHopper);
	addSerializableVariable("hopperSizeMax", &hopperSizeMax);
	addSerializableVariable("extractionRate", &extractionRate);
}

InstallationObjectImplementation::InstallationObjectImplementation() {
	_initializeImplementation();
	// server/zone/objects/installation/InstallationObject.idl(109):  		Logger.setLoggingName("InstallationObject");
	Logger::setLoggingName("InstallationObject");
	// server/zone/objects/installation/InstallationObject.idl(111):  		super.staticObject = false;
	TangibleObjectImplementation::staticObject = false;
	// server/zone/objects/installation/InstallationObject.idl(113):  		publicStructure = true;
	publicStructure = true;
	// server/zone/objects/installation/InstallationObject.idl(115):  		operating = false;
	operating = false;
	// server/zone/objects/installation/InstallationObject.idl(117):  		lotSize = 0;
	lotSize = 0;
	// server/zone/objects/installation/InstallationObject.idl(119):  		installationType = 0;
	installationType = 0;
	// server/zone/objects/installation/InstallationObject.idl(121):  		baseMaintenanceRate = 0;
	baseMaintenanceRate = 0;
	// server/zone/objects/installation/InstallationObject.idl(122):  		basePowerRate = 0;
	basePowerRate = 0;
	// server/zone/objects/installation/InstallationObject.idl(123):  		maintenancePool = 0;
	maintenancePool = 0;
	// server/zone/objects/installation/InstallationObject.idl(124):  		powerPool = 0;
	powerPool = 0;
	// server/zone/objects/installation/InstallationObject.idl(125):  		deedObjectID = 0;
	deedObjectID = 0;
	// server/zone/objects/installation/InstallationObject.idl(126):  		surplusMaintenance = 0;
	surplusMaintenance = 0;
	// server/zone/objects/installation/InstallationObject.idl(127):  		surplusPower = 0;
	surplusPower = 0;
	// server/zone/objects/installation/InstallationObject.idl(128):  		operatorList.setNoDuplicateInsertPlan();
	(&operatorList)->setNoDuplicateInsertPlan();
	// server/zone/objects/installation/InstallationObject.idl(130):  		hopperSizeMax = 10000;
	hopperSizeMax = 10000;
	// server/zone/objects/installation/InstallationObject.idl(131):  		extractionRate = 100;
	extractionRate = 100;
}

void InstallationObjectImplementation::initializeTransientMembers() {
	// server/zone/objects/installation/InstallationObject.idl(135):  		super.initializeTransientMembers();
	TangibleObjectImplementation::initializeTransientMembers();
	// server/zone/objects/installation/InstallationObject.idl(137):  		operatorList.setNoDuplicateInsertPlan();
	(&operatorList)->setNoDuplicateInsertPlan();
	// server/zone/objects/installation/InstallationObject.idl(139):  		Logger.setLoggingName("InstallationObject");
	Logger::setLoggingName("InstallationObject");
}

int InstallationObjectImplementation::notifyStructurePlaced(PlayerCreature* player) {
	// server/zone/objects/installation/InstallationObject.idl(182):  		return 0;
	return 0;
}

bool InstallationObjectImplementation::checkRequisitesForPlacement(PlayerCreature* player) {
	// server/zone/objects/installation/InstallationObject.idl(186):  		return true;
	return true;
}

void InstallationObjectImplementation::updateOperators() {
}

bool InstallationObjectImplementation::isOnAdminList(SceneObject* scno) {
	// server/zone/objects/installation/InstallationObject.idl(265):  		return structurePermissionList.isOnAdminList(scno.getObjectID());
	return (&structurePermissionList)->isOnAdminList(scno->getObjectID());
}

bool InstallationObjectImplementation::isOnAdminList(unsigned long long oid) {
	// server/zone/objects/installation/InstallationObject.idl(269):  		return structurePermissionList.isOnAdminList(oid);
	return (&structurePermissionList)->isOnAdminList(oid);
}

void InstallationObjectImplementation::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	// server/zone/objects/installation/InstallationObject.idl(273):  		structurePermissionList.sendTo(player, listName);
	(&structurePermissionList)->sendTo(player, listName);
}

void InstallationObjectImplementation::addOperator(PlayerCreature* player) {
	// server/zone/objects/installation/InstallationObject.idl(277):  		operatorList.put(player);
	(&operatorList)->put(player);
}

void InstallationObjectImplementation::removeOperator(PlayerCreature* player) {
	// server/zone/objects/installation/InstallationObject.idl(281):  		operatorList.drop(player);
	(&operatorList)->drop(player);
}

void InstallationObjectImplementation::setLotSize(int lotsize) {
	// server/zone/objects/installation/InstallationObject.idl(287):  		lotSize = lotsize;
	lotSize = lotsize;
}

int InstallationObjectImplementation::getLotSize() {
	// server/zone/objects/installation/InstallationObject.idl(291):  		return lotSize;
	return lotSize;
}

void InstallationObjectImplementation::setDeedObjectID(unsigned long long deedid) {
	// server/zone/objects/installation/InstallationObject.idl(295):  		deedObjectID = deedid;
	deedObjectID = deedid;
}

unsigned long long InstallationObjectImplementation::getDeedObjectID() {
	// server/zone/objects/installation/InstallationObject.idl(299):  		return deedObjectID;
	return deedObjectID;
}

void InstallationObjectImplementation::setOwnerObjectID(unsigned long long ownerID) {
	// server/zone/objects/installation/InstallationObject.idl(303):  		ownerObjectID = ownerID;
	ownerObjectID = ownerID;
	// server/zone/objects/installation/InstallationObject.idl(304):  		structurePermissionList.grantPermission(ownerID, StructurePermissionList.OWNER);
	(&structurePermissionList)->grantPermission(ownerID, StructurePermissionList::OWNER);
}

unsigned long long InstallationObjectImplementation::getOwnerObjectID() {
	// server/zone/objects/installation/InstallationObject.idl(308):  		return ownerObjectID;
	return ownerObjectID;
}

void InstallationObjectImplementation::setMaintenancePool(unsigned int maintenance) {
	// server/zone/objects/installation/InstallationObject.idl(312):  		maintenancePool = maintenance;
	maintenancePool = maintenance;
}

unsigned int InstallationObjectImplementation::getMaintenancePool() {
	// server/zone/objects/installation/InstallationObject.idl(316):  		return maintenancePool;
	return maintenancePool;
}

void InstallationObjectImplementation::setPowerPool(unsigned int power) {
	// server/zone/objects/installation/InstallationObject.idl(320):  		powerPool = power;
	powerPool = power;
}

unsigned int InstallationObjectImplementation::getPowerPool() {
	// server/zone/objects/installation/InstallationObject.idl(324):  		return powerPool;
	return powerPool;
}

void InstallationObjectImplementation::addPower(int add) {
	// server/zone/objects/installation/InstallationObject.idl(328):  		surplusPower = surplusPower + add;
	surplusPower = surplusPower + add;
}

void InstallationObjectImplementation::addMaintenance(float maint) {
	// server/zone/objects/installation/InstallationObject.idl(332):  		surplusMaintenance = surplusMaintenance + maint;
	surplusMaintenance = surplusMaintenance + maint;
}

int InstallationObjectImplementation::getBasePowerRate() {
	// server/zone/objects/installation/InstallationObject.idl(341):  		return basePowerRate;
	return basePowerRate;
}

void InstallationObjectImplementation::setBasePowerRate(int powerRate) {
	// server/zone/objects/installation/InstallationObject.idl(349):  		basePowerRate = powerRate;
	basePowerRate = powerRate;
}

void InstallationObjectImplementation::setBaseMaintenanceRate(int maintenanceRate) {
	// server/zone/objects/installation/InstallationObject.idl(357):  		baseMaintenanceRate = maintenanceRate;
	baseMaintenanceRate = maintenanceRate;
}

int InstallationObjectImplementation::getBaseMaintenanceRate() {
	// server/zone/objects/installation/InstallationObject.idl(366):  		return baseMaintenanceRate;
	return baseMaintenanceRate;
}

int InstallationObjectImplementation::getRedeedCost() {
	// server/zone/objects/installation/InstallationObject.idl(374):  		return baseMaintenanceRate * 50;
	return baseMaintenanceRate * 50;
}

bool InstallationObjectImplementation::isInstallationObject() {
	// server/zone/objects/installation/InstallationObject.idl(378):  		return true;
	return true;
}

bool InstallationObjectImplementation::isOperating() {
	// server/zone/objects/installation/InstallationObject.idl(382):  		return operating;
	return operating;
}

int InstallationObjectImplementation::getInstallationType() {
	// server/zone/objects/installation/InstallationObject.idl(386):  		return installationType;
	return installationType;
}

float InstallationObjectImplementation::getExtractionRate() {
	// server/zone/objects/installation/InstallationObject.idl(390):  		return extractionRate;
	return extractionRate;
}

float InstallationObjectImplementation::getHopperSizeMax() {
	// server/zone/objects/installation/InstallationObject.idl(394):  		return hopperSizeMax;
	return hopperSizeMax;
}

HopperList* InstallationObjectImplementation::getHopperList() {
	// server/zone/objects/installation/InstallationObject.idl(399):  		return resourceHopper;
	return (&resourceHopper);
}

bool InstallationObjectImplementation::isHarvesterObject() {
	// server/zone/objects/installation/InstallationObject.idl(403):  		return false;
	return false;
}

bool InstallationObjectImplementation::isGeneratorObject() {
	// server/zone/objects/installation/InstallationObject.idl(407):  		return false;
	return false;
}

/*
 *	InstallationObjectAdapter
 */

InstallationObjectAdapter::InstallationObjectAdapter(InstallationObjectImplementation* obj) : TangibleObjectAdapter(obj) {
}

Packet* InstallationObjectAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		initializeTransientMembers();
		break;
	case 7:
		destroyObjectFromDatabase(inv->getBooleanParameter());
		break;
	case 8:
		resp->insertSignedInt(handleObjectMenuSelect((PlayerCreature*) inv->getObjectParameter(), inv->getByteParameter()));
		break;
	case 9:
		resp->insertSignedInt(notifyStructurePlaced((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 10:
		resp->insertBoolean(checkRequisitesForPlacement((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 11:
		broadcastMessage((BasePacket*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 12:
		updateResourceContainerQuantity((ResourceContainer*) inv->getObjectParameter(), inv->getSignedIntParameter(), inv->getBooleanParameter());
		break;
	case 13:
		updateToDatabaseAllObjects(inv->getBooleanParameter());
		break;
	case 14:
		setOperating(inv->getBooleanParameter(), inv->getBooleanParameter());
		break;
	case 15:
		activateUiSync();
		break;
	case 16:
		updateOperators();
		break;
	case 17:
		verifyOperators();
		break;
	case 18:
		updateInstallationWork();
		break;
	case 19:
		handleStructureStatus((PlayerCreature*) inv->getObjectParameter());
		break;
	case 20:
		handleStructureManageMaintenance((PlayerCreature*) inv->getObjectParameter());
		break;
	case 21:
		handleSetObjectName((PlayerCreature*) inv->getObjectParameter());
		break;
	case 22:
		handleStructureDestroy((PlayerCreature*) inv->getObjectParameter());
		break;
	case 23:
		handleStructureAddEnergy((PlayerCreature*) inv->getObjectParameter());
		break;
	case 24:
		setActiveResource((ResourceContainer*) inv->getObjectParameter());
		break;
	case 25:
		changeActiveResourceID(inv->getUnsignedLongParameter());
		break;
	case 26:
		addResourceToHopper((ResourceContainer*) inv->getObjectParameter());
		break;
	case 27:
		removeResourceFromHopper((ResourceContainer*) inv->getObjectParameter());
		break;
	case 28:
		clearResourceHopper();
		break;
	case 29:
		resp->insertFloat(getHopperSize());
		break;
	case 30:
		resp->insertSignedInt(getHopperItemQuantity((ResourceSpawn*) inv->getObjectParameter()));
		break;
	case 31:
		resp->insertLong(getContainerFromHopper((ResourceSpawn*) inv->getObjectParameter())->_getObjectID());
		break;
	case 32:
		resp->insertLong(getActiveResourceSpawnID());
		break;
	case 33:
		resp->insertFloat(getActualRate());
		break;
	case 34:
		broadcastToOperators((BasePacket*) inv->getObjectParameter());
		break;
	case 35:
		resp->insertBoolean(isOnAdminList((SceneObject*) inv->getObjectParameter()));
		break;
	case 36:
		resp->insertBoolean(isOnAdminList(inv->getUnsignedLongParameter()));
		break;
	case 37:
		sendPermissionListTo((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_sendPermissionListTo__PlayerCreature_String_));
		break;
	case 38:
		addOperator((PlayerCreature*) inv->getObjectParameter());
		break;
	case 39:
		removeOperator((PlayerCreature*) inv->getObjectParameter());
		break;
	case 40:
		sendBaselinesTo((SceneObject*) inv->getObjectParameter());
		break;
	case 41:
		setLotSize(inv->getSignedIntParameter());
		break;
	case 42:
		resp->insertSignedInt(getLotSize());
		break;
	case 43:
		setDeedObjectID(inv->getUnsignedLongParameter());
		break;
	case 44:
		resp->insertLong(getDeedObjectID());
		break;
	case 45:
		setOwnerObjectID(inv->getUnsignedLongParameter());
		break;
	case 46:
		resp->insertLong(getOwnerObjectID());
		break;
	case 47:
		setMaintenancePool(inv->getUnsignedIntParameter());
		break;
	case 48:
		resp->insertInt(getMaintenancePool());
		break;
	case 49:
		setPowerPool(inv->getUnsignedIntParameter());
		break;
	case 50:
		resp->insertInt(getPowerPool());
		break;
	case 51:
		addPower(inv->getSignedIntParameter());
		break;
	case 52:
		addMaintenance(inv->getFloatParameter());
		break;
	case 53:
		resp->insertSignedInt(getBasePowerRate());
		break;
	case 54:
		setBasePowerRate(inv->getSignedIntParameter());
		break;
	case 55:
		setBaseMaintenanceRate(inv->getSignedIntParameter());
		break;
	case 56:
		resp->insertSignedInt(getBaseMaintenanceRate());
		break;
	case 57:
		resp->insertSignedInt(getRedeedCost());
		break;
	case 58:
		resp->insertBoolean(isInstallationObject());
		break;
	case 59:
		resp->insertBoolean(isOperating());
		break;
	case 60:
		resp->insertSignedInt(getInstallationType());
		break;
	case 61:
		resp->insertFloat(getExtractionRate());
		break;
	case 62:
		resp->insertFloat(getHopperSizeMax());
		break;
	case 63:
		resp->insertBoolean(isHarvesterObject());
		break;
	case 64:
		resp->insertBoolean(isGeneratorObject());
		break;
	default:
		return NULL;
	}

	return resp;
}

void InstallationObjectAdapter::initializeTransientMembers() {
	((InstallationObjectImplementation*) impl)->initializeTransientMembers();
}

void InstallationObjectAdapter::destroyObjectFromDatabase(bool destroyContainedObjects) {
	((InstallationObjectImplementation*) impl)->destroyObjectFromDatabase(destroyContainedObjects);
}

int InstallationObjectAdapter::handleObjectMenuSelect(PlayerCreature* player, byte selectedID) {
	return ((InstallationObjectImplementation*) impl)->handleObjectMenuSelect(player, selectedID);
}

int InstallationObjectAdapter::notifyStructurePlaced(PlayerCreature* player) {
	return ((InstallationObjectImplementation*) impl)->notifyStructurePlaced(player);
}

bool InstallationObjectAdapter::checkRequisitesForPlacement(PlayerCreature* player) {
	return ((InstallationObjectImplementation*) impl)->checkRequisitesForPlacement(player);
}

void InstallationObjectAdapter::broadcastMessage(BasePacket* message, bool sendSelf) {
	((InstallationObjectImplementation*) impl)->broadcastMessage(message, sendSelf);
}

void InstallationObjectAdapter::updateResourceContainerQuantity(ResourceContainer* container, int newQuantity, bool notifyClient) {
	((InstallationObjectImplementation*) impl)->updateResourceContainerQuantity(container, newQuantity, notifyClient);
}

void InstallationObjectAdapter::updateToDatabaseAllObjects(bool startTask) {
	((InstallationObjectImplementation*) impl)->updateToDatabaseAllObjects(startTask);
}

void InstallationObjectAdapter::setOperating(bool operating, bool notifyClient) {
	((InstallationObjectImplementation*) impl)->setOperating(operating, notifyClient);
}

void InstallationObjectAdapter::activateUiSync() {
	((InstallationObjectImplementation*) impl)->activateUiSync();
}

void InstallationObjectAdapter::updateOperators() {
	((InstallationObjectImplementation*) impl)->updateOperators();
}

void InstallationObjectAdapter::verifyOperators() {
	((InstallationObjectImplementation*) impl)->verifyOperators();
}

void InstallationObjectAdapter::updateInstallationWork() {
	((InstallationObjectImplementation*) impl)->updateInstallationWork();
}

void InstallationObjectAdapter::handleStructureStatus(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleStructureStatus(player);
}

void InstallationObjectAdapter::handleStructureManageMaintenance(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleStructureManageMaintenance(player);
}

void InstallationObjectAdapter::handleSetObjectName(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleSetObjectName(player);
}

void InstallationObjectAdapter::handleStructureDestroy(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleStructureDestroy(player);
}

void InstallationObjectAdapter::handleStructureAddEnergy(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->handleStructureAddEnergy(player);
}

void InstallationObjectAdapter::setActiveResource(ResourceContainer* container) {
	((InstallationObjectImplementation*) impl)->setActiveResource(container);
}

void InstallationObjectAdapter::changeActiveResourceID(unsigned long long spawnObjectID) {
	((InstallationObjectImplementation*) impl)->changeActiveResourceID(spawnObjectID);
}

void InstallationObjectAdapter::addResourceToHopper(ResourceContainer* container) {
	((InstallationObjectImplementation*) impl)->addResourceToHopper(container);
}

void InstallationObjectAdapter::removeResourceFromHopper(ResourceContainer* container) {
	((InstallationObjectImplementation*) impl)->removeResourceFromHopper(container);
}

void InstallationObjectAdapter::clearResourceHopper() {
	((InstallationObjectImplementation*) impl)->clearResourceHopper();
}

float InstallationObjectAdapter::getHopperSize() {
	return ((InstallationObjectImplementation*) impl)->getHopperSize();
}

int InstallationObjectAdapter::getHopperItemQuantity(ResourceSpawn* spawn) {
	return ((InstallationObjectImplementation*) impl)->getHopperItemQuantity(spawn);
}

ResourceContainer* InstallationObjectAdapter::getContainerFromHopper(ResourceSpawn* spawn) {
	return ((InstallationObjectImplementation*) impl)->getContainerFromHopper(spawn);
}

unsigned long long InstallationObjectAdapter::getActiveResourceSpawnID() {
	return ((InstallationObjectImplementation*) impl)->getActiveResourceSpawnID();
}

float InstallationObjectAdapter::getActualRate() {
	return ((InstallationObjectImplementation*) impl)->getActualRate();
}

void InstallationObjectAdapter::broadcastToOperators(BasePacket* packet) {
	((InstallationObjectImplementation*) impl)->broadcastToOperators(packet);
}

bool InstallationObjectAdapter::isOnAdminList(SceneObject* scno) {
	return ((InstallationObjectImplementation*) impl)->isOnAdminList(scno);
}

bool InstallationObjectAdapter::isOnAdminList(unsigned long long oid) {
	return ((InstallationObjectImplementation*) impl)->isOnAdminList(oid);
}

void InstallationObjectAdapter::sendPermissionListTo(PlayerCreature* player, const String& listName) {
	((InstallationObjectImplementation*) impl)->sendPermissionListTo(player, listName);
}

void InstallationObjectAdapter::addOperator(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->addOperator(player);
}

void InstallationObjectAdapter::removeOperator(PlayerCreature* player) {
	((InstallationObjectImplementation*) impl)->removeOperator(player);
}

void InstallationObjectAdapter::sendBaselinesTo(SceneObject* player) {
	((InstallationObjectImplementation*) impl)->sendBaselinesTo(player);
}

void InstallationObjectAdapter::setLotSize(int lotsize) {
	((InstallationObjectImplementation*) impl)->setLotSize(lotsize);
}

int InstallationObjectAdapter::getLotSize() {
	return ((InstallationObjectImplementation*) impl)->getLotSize();
}

void InstallationObjectAdapter::setDeedObjectID(unsigned long long deedid) {
	((InstallationObjectImplementation*) impl)->setDeedObjectID(deedid);
}

unsigned long long InstallationObjectAdapter::getDeedObjectID() {
	return ((InstallationObjectImplementation*) impl)->getDeedObjectID();
}

void InstallationObjectAdapter::setOwnerObjectID(unsigned long long ownerID) {
	((InstallationObjectImplementation*) impl)->setOwnerObjectID(ownerID);
}

unsigned long long InstallationObjectAdapter::getOwnerObjectID() {
	return ((InstallationObjectImplementation*) impl)->getOwnerObjectID();
}

void InstallationObjectAdapter::setMaintenancePool(unsigned int maintenance) {
	((InstallationObjectImplementation*) impl)->setMaintenancePool(maintenance);
}

unsigned int InstallationObjectAdapter::getMaintenancePool() {
	return ((InstallationObjectImplementation*) impl)->getMaintenancePool();
}

void InstallationObjectAdapter::setPowerPool(unsigned int power) {
	((InstallationObjectImplementation*) impl)->setPowerPool(power);
}

unsigned int InstallationObjectAdapter::getPowerPool() {
	return ((InstallationObjectImplementation*) impl)->getPowerPool();
}

void InstallationObjectAdapter::addPower(int add) {
	((InstallationObjectImplementation*) impl)->addPower(add);
}

void InstallationObjectAdapter::addMaintenance(float maint) {
	((InstallationObjectImplementation*) impl)->addMaintenance(maint);
}

int InstallationObjectAdapter::getBasePowerRate() {
	return ((InstallationObjectImplementation*) impl)->getBasePowerRate();
}

void InstallationObjectAdapter::setBasePowerRate(int powerRate) {
	((InstallationObjectImplementation*) impl)->setBasePowerRate(powerRate);
}

void InstallationObjectAdapter::setBaseMaintenanceRate(int maintenanceRate) {
	((InstallationObjectImplementation*) impl)->setBaseMaintenanceRate(maintenanceRate);
}

int InstallationObjectAdapter::getBaseMaintenanceRate() {
	return ((InstallationObjectImplementation*) impl)->getBaseMaintenanceRate();
}

int InstallationObjectAdapter::getRedeedCost() {
	return ((InstallationObjectImplementation*) impl)->getRedeedCost();
}

bool InstallationObjectAdapter::isInstallationObject() {
	return ((InstallationObjectImplementation*) impl)->isInstallationObject();
}

bool InstallationObjectAdapter::isOperating() {
	return ((InstallationObjectImplementation*) impl)->isOperating();
}

int InstallationObjectAdapter::getInstallationType() {
	return ((InstallationObjectImplementation*) impl)->getInstallationType();
}

float InstallationObjectAdapter::getExtractionRate() {
	return ((InstallationObjectImplementation*) impl)->getExtractionRate();
}

float InstallationObjectAdapter::getHopperSizeMax() {
	return ((InstallationObjectImplementation*) impl)->getHopperSizeMax();
}

bool InstallationObjectAdapter::isHarvesterObject() {
	return ((InstallationObjectImplementation*) impl)->isHarvesterObject();
}

bool InstallationObjectAdapter::isGeneratorObject() {
	return ((InstallationObjectImplementation*) impl)->isGeneratorObject();
}

/*
 *	InstallationObjectHelper
 */

InstallationObjectHelper* InstallationObjectHelper::staticInitializer = InstallationObjectHelper::instance();

InstallationObjectHelper::InstallationObjectHelper() {
	className = "InstallationObject";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void InstallationObjectHelper::finalizeHelper() {
	InstallationObjectHelper::finalize();
}

DistributedObject* InstallationObjectHelper::instantiateObject() {
	return new InstallationObject(DummyConstructorParameter::instance());
}

DistributedObjectServant* InstallationObjectHelper::instantiateServant() {
	return new InstallationObjectImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* InstallationObjectHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new InstallationObjectAdapter((InstallationObjectImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

