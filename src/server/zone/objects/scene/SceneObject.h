/*
 *	server/zone/objects/scene/SceneObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef SCENEOBJECT_H_
#define SCENEOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace managers {
namespace objectcontroller {

class ObjectController;

} // namespace objectcontroller
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::objectcontroller;

namespace server {
namespace zone {

class ZoneProcessServerImplementation;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneClientSession;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace building {

class BuildingObject;

} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building;

namespace server {
namespace zone {
namespace packets {
namespace object {

class ObjectMenuResponse;

} // namespace object
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::object;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace packets {
namespace scene {

class AttributeListMessage;

} // namespace scene
} // namespace packets
} // namespace zone
} // namespace server

using namespace server::zone::packets::scene;

namespace server {
namespace zone {
namespace templates {

class SharedObjectTemplate;

} // namespace templates
} // namespace zone
} // namespace server

using namespace server::zone::templates;

namespace server {
namespace zone {
namespace objects {
namespace area {

class ActiveArea;

} // namespace area
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::area;

#include "engine/core/ManagedObject.h"

#include "server/zone/objects/scene/variables/StringId.h"

#include "server/zone/objects/scene/TransferErrorCode.h"

#include "server/zone/objects/scene/variables/PendingTasksMap.h"

#include "server/zone/objects/scene/ObserverEventType.h"

#include "engine/log/Logger.h"

#include "engine/core/ManagedReference.h"

#include "engine/util/Coordinate.h"

#include "engine/util/QuadTreeEntry.h"

#include "system/io/Serializable.h"

#include "engine/lua/Lua.h"

#include "engine/lua/LuaObject.h"

#include "system/util/Vector.h"

#include "system/util/VectorMap.h"

#include "engine/util/Quaternion.h"

#include "engine/service/proto/BasePacket.h"

#include "engine/service/proto/BaseMessage.h"

#include "system/util/SortedVector.h"

#include "system/lang/StackTrace.h"

#include "system/lang/ref/Reference.h"

#include "engine/core/Task.h"

#include "engine/util/Vector3.h"

#include "server/zone/objects/scene/Observable.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject : public Observable {
public:
	static const int CELLOBJECT = 11;

	static const int PLAYEROBJECT = 12;

	static const int GROUPOBJECT = 13;

	static const int GENERALTANGIBLEOBJECT = 4;

	static const int STATICOBJECT = 5;

	static const int ARMOR = 0x100;

	static const int BODYARMOR = 0x101;

	static const int HEADARMOR = 0x102;

	static const int MISCARMOR = 0x103;

	static const int LEGARMOR = 0x104;

	static const int ARMARMOR = 0x105;

	static const int HANDARMOR = 0x106;

	static const int FOOTARMOR = 0x107;

	static const int SHIELDGENERATOR = 0x108;

	static const int BUILDING = 0x200;

	static const int MUNICIPALBUILDING = 0x201;

	static const int FACTIONPERKBUILDING = 0x203;

	static const int TUTORIALBUILDING = 0x204;

	static const int MEDICALBUILDING = 0x205;

	static const int RECREATIONBUILDING = 0x206;

	static const int CLONINGBUILDING = 0x207;

	static const int TRAVELBUILDING = 0x208;

	static const int STARPORTBUILDING = 0x209;

	static const int CAPITOLBUILDING = 0x20A;

	static const int HOTELBUILDING = 0x20B;

	static const int THEATERBUILDING = 0x20C;

	static const int COMBATBUILDING = 0x20D;

	static const int COMMERCEBUILDING = 0x20E;

	static const int UNIVERSITYBUILDING = 0x20F;

	static const int GARAGEBUILDING = 0x210;

	static const int CITYHALLBUILDING = 0x211;

	static const int CREATURE = 0x400;

	static const int NPCCREATURE = 0x401;

	static const int DROIDCREATURE = 0x402;

	static const int PROBOTCREATURE = 0x403;

	static const int PLAYERCREATURE = 0x409;

	static const int TRAINERCREATURE = 0x40A;

	static const int SHUTTLECREATURE = 0x40B;

	static const int INTANGIBLE = 0x800;

	static const int DRAFTSCHEMATIC = 0x801;

	static const int MANUFACTURINGSCHEMATIC = 0x802;

	static const int MISSIONOBJECT = 0x803;

	static const int TOKEN = 0x804;

	static const int WAYPOINT = 0x805;

	static const int DATA2 = 0x806;

	static const int PETCONTROLDEVICE = 0x807;

	static const int VEHICLECONTROLDEVICE = 0x808;

	static const int SHIPCONTROLDEVICE = 0x80A;

	static const int DROIDCONTROLDEVICE = 0x80B;

	static const int INSTALLATION = 0x1000;

	static const int FACTORY = 0x1001;

	static const int GENERATOR = 0x1002;

	static const int HARVESTER = 0x1003;

	static const int TURRET = 0x1004;

	static const int MINEFIELD = 0x1005;

	static const int GARAGEINSTALLATION = 0x1006;

	static const int SHUTTLEINSTALLATION = 0x1007;

	static const int BANKINSTALLATION = 0x1008;

	static const int TANGIBLE = 0x2000;

	static const int AMMUNITION = 0x2001;

	static const int CHEMICAL = 0x2002;

	static const int CONTAINER = 0x2005;

	static const int CRAFTINGSTATION = 0x2006;

	static const int ELECTRONICS = 0x2008;

	static const int FLORA = 0x2009;

	static const int FOOD = 0x200A;

	static const int FURNITURE = 0x200B;

	static const int INSTRUMENT = 0x200C;

	static const int PHARMACEUTICAL = 0x200D;

	static const int SIGN = 0x200F;

	static const int COUNTER = 0x2010;

	static const int FACTORYCRATE = 0x2011;

	static const int TRAVELTICKET = 0x2012;

	static const int GENERICITEM = 0x2013;

	static const int TRAP = 0x2014;

	static const int WEARABLECONTAINER = 0x2015;

	static const int FISHINGPOLE = 0x2016;

	static const int FISHINGBAIT = 0x2017;

	static const int DRINK = 0x2018;

	static const int FIREWORK = 0x2019;

	static const int ITEM = 0x201A;

	static const int PETMEDECINE = 0x201B;

	static const int FIREWORKSHOW = 0x201C;

	static const int CLOTHINGATTACHMENT = 0x201D;

	static const int LIVESAMPLE = 0x201E;

	static const int ARMORATTACHMENT = 0x201F;

	static const int COMMUNITYCRAFTINGPROJECT = 0x2020;

	static const int CRYSTAL = 0x2021;

	static const int DROIDPROGRAMMINGCHIP = 0x2022;

	static const int ASTEROID = 0x2023;

	static const int PILOTCHAIR = 0x2024;

	static const int OPERATIONSCHAIR = 0x2025;

	static const int TURRETACCESSLADDER = 0x2026;

	static const int CONTAINER2 = 0x2027;

	static const int CAMOKIT = 0x2028;

	static const int LOOTKIT = 0x2029;

	static const int FISH = 0x202A;

	static const int LAIR = 0x202B;

	static const int STIMPACK = 0x202C;

	static const int RANGEDSTIMPACK = 0x202D;

	static const int ENHANCEPACK = 0x202E;

	static const int CUREPACK = 0x202F;

	static const int DOTPACK = 0x2030;

	static const int TERMINAL = 0x4000;

	static const int BANK = 0x4001;

	static const int BAZAAR = 0x4002;

	static const int CLONING = 0x4003;

	static const int INSURANCE = 0x4004;

	static const int MISSIONTERMINAL = 0x4006;

	static const int PLAYERTERMINALSTRUCTURE = 0x4008;

	static const int SHIPPINGTERMINAL = 0x4009;

	static const int SPACETERMINAL = 0x400B;

	static const int INTERACTIVETERMINAL = 0x400C;

	static const int NEWBIETUTORIALTERMINAL = 0x400F;

	static const int CHARACTERBUILDERTERMINAL = 0x4010;

	static const int TICKETCOLLECTOR = 0x4011;

	static const int TRAVELTERMINAL = 0x4012;

	static const int ELEVATORTERMINAL = 0x4013;

	static const int GUILDTERMINAL = 0x4014;

	static const int TOOL = 0x8000;

	static const int CRAFTINGTOOL = 0x8001;

	static const int SURVEYTOOL = 0x8002;

	static const int REPAIRTOOL = 0x8003;

	static const int CAMPKIT = 0x8004;

	static const int SHIPCOMPONENTREPAIRITEM = 0x8005;

	static const int VEHICLE = 0x10000;

	static const int HOVERVEHICLE = 0x10001;

	static const int WEAPON = 0x20000;

	static const int MELEEWEAPON = 0x20001;

	static const int RANGEDWEAPON = 0x20002;

	static const int THROWNWEAPON = 0x20003;

	static const int HEAVYWEAPON = 0x20004;

	static const int MINE = 0x20005;

	static const int SPECIALHEAVYWEAPON = 0x20006;

	static const int ONEHANDMELEEWEAPON = 0x20007;

	static const int TWOHANDMELEEWEAPON = 0x20008;

	static const int POLEARM = 0x20009;

	static const int PISTOL = 0x2000A;

	static const int CARBINE = 0x2000B;

	static const int RIFLE = 0x2000C;

	static const int GRENADE = 0x2000E;

	static const int COMPONENT = 0x40000;

	static const int ARMORCOMPONENT = 0x40001;

	static const int CHEMISTRYCOMPONENT = 0x40002;

	static const int CLOTHINGCOMPONENT = 0x40003;

	static const int COMMUNITYCRAFTINGCOMPONENT = 0x40004;

	static const int DROIDCOMPONENT = 0x40005;

	static const int ELECTRONICSCOMPONENT = 0x40006;

	static const int GENETICCOMPONENT = 0x40007;

	static const int LIGHTSABERCRYSTAL = 0x40008;

	static const int MELEEWEAPONCOMPONENT = 0x40009;

	static const int MUNITIONCOMPONENT = 0x4000A;

	static const int RANGEDWEAPONCOMPONENT = 0x4000B;

	static const int STRUVTURECOMPONENT = 0x4000C;

	static const int TISSUECOMPONENT = 0x4000D;

	static const int WEAPONPOWERUP = 0x80000;

	static const int MELEEWEAPONPOWERUP = 0x80001;

	static const int RANGEDWEAPONPOWERUP = 0x80002;

	static const int THROWNWEAPONPOWERUP = 0x80003;

	static const int HEAVYWEAPONPOWERUP = 0x80004;

	static const int MINEPOWERUP = 0x80005;

	static const int SPECIALHEAVYWEAPONPOWERUP = 0x80006;

	static const int WEARABLE = 0x200000;

	static const int RING = 0x200001;

	static const int BRACELET = 0x200002;

	static const int NECKLACE = 0x200003;

	static const int EARRING = 0x200004;

	static const int RESOURCECONTAINER = 0x400000;

	static const int ENERGYGAS = 0x400001;

	static const int ENERGYLIQUID = 0x400002;

	static const int ENERGYRADIOACTIVE = 0x400003;

	static const int ENERGYSOLID = 0x400004;

	static const int INORGANICCHEMICAL = 0x400005;

	static const int INORGANICGAS = 0x400006;

	static const int INORGANICMINERAL = 0x400007;

	static const int WATER = 0x400008;

	static const int ORGANICFOOD = 0x400009;

	static const int ORGANICHIDE = 0x40000A;

	static const int ORGANICSTRUCTURAL = 0x40000B;

	static const int QUESTREOURCE = 0x40000C;

	static const int RESOURCESPAWN = 0x410000;

	static const int DEED = 0x800000;

	static const int BUILDINGDEED = 0x800001;

	static const int INSTALLATIONDEED = 0x800002;

	static const int PETDEED = 0x800003;

	static const int DROIDDEED = 0x800004;

	static const int VEHICLEDEED = 0x800005;

	static const int RESOURCEDEED = 0x800006;

	static const int CLOTHING = 0x1000000;

	static const int BANDOLIER = 0x1000001;

	static const int BELT = 0x1000002;

	static const int BODYSUIT = 0x1000003;

	static const int CAPE = 0x1000004;

	static const int CLOAK = 0x1000005;

	static const int FOOTWEAR = 0x1000006;

	static const int DRESS = 0x1000007;

	static const int HANDWEAR = 0x1000008;

	static const int EYEWEAR = 0x1000009;

	static const int HEADWEAR = 0x100000A;

	static const int JACKET = 0x100000B;

	static const int PANTS = 0x100000C;

	static const int ROBE = 0x100000D;

	static const int SHIRT = 0x100000E;

	static const int VEST = 0x100000F;

	static const int WOOKIEGARB = 0x1000010;

	static const int MISCCLOTHING = 0x1000011;

	static const int SKIRT = 0x1000012;

	static const int ITHOGARB = 0x1000013;

	static const int BADGEAREA = 0x200000;

	static const int REGIONAREA = 0x200001;

	static const int MISSIONSPAWNAREA = 0x200002;

	SceneObject();

	void initializePrivateData();

	void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	void notifyLoadFromDatabase();

	void info(const String& msg, bool forced = false);

	void error(const String& msg);

	int inRangeObjectCount();

	QuadTreeEntry* getInRangeObject(int index);

	int inRangeObjects(unsigned int gameObjectType, float range);

	bool isInRange(SceneObject* obj, float range);

	bool isInRange(QuadTreeEntry* obj, float range);

	void removeInRangeObject(QuadTreeEntry* obj);

	bool addObject(SceneObject* object, int containmentType, bool notifyClient = false);

	bool removeObject(SceneObject* object, bool notifyClient = false);

	int canAddObject(SceneObject* object, String& errorDescription);

	void synchronizedUIListen(SceneObject* player, int value);

	void synchronizedUIStopListen(SceneObject* player, int value);

	void updateToDatabase();

	void updateToDatabaseWithoutChildren();

	void updateToDatabaseAllObjects(bool startTask);

	void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	int canBeDestroyed(PlayerCreature* player);

	void create(ZoneClientSession* client);

	void destroy(ZoneClientSession* client);

	void close(ZoneClientSession* client);

	void link(ZoneClientSession* client, unsigned int containmentType = 4);

	BaseMessage* link(unsigned long long objectID, unsigned int containmentType = 4);

	void sendTo(SceneObject* player, bool doClose);

	void sendWithoutParentTo(SceneObject* player);

	void sendWithoutContainerObjectsTo(SceneObject* player);

	void sendDestroyTo(SceneObject* player);

	void sendBaselinesTo(SceneObject* player);

	void sendContainerObjectsTo(SceneObject* player);

	void sendSlottedObjectsTo(SceneObject* player);

	void sendToOwner(bool doClose = true);

	void sendAttributeListTo(PlayerCreature* object);

	void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	void setCustomObjectName(const UnicodeString& name, bool notifyClient);

	void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	void openContainerTo(PlayerCreature* player);

	void closeContainerTo(PlayerCreature* player, bool notify = true);

	void insertToZone(Zone* zone);

	void insertToBuilding(BuildingObject* building);

	void switchZone(int newZoneID, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	void teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	void removeFromZone();

	void removeFromBuilding(BuildingObject* building);

	void updateZone(bool lightUpdate, bool sendPackets = true);

	void updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets = true);

	void broadcastMessage(BasePacket* message, bool sendSelf);

	void broadcastObject(SceneObject* object, bool sendSelf);

	void broadcastDestroy(SceneObject* object, bool sendSelf);

	void broadcastMessages(Vector<BasePacket*>* messages, bool sendSelf);

	void sendMessage(BasePacket* msg);

	int compareTo(SceneObject* obj);

	void getContainmentObjects(VectorMap<String, ManagedReference<SceneObject* > >& objects);

	unsigned long long getParentID();

	void addPendingTask(const String& name, Task* task);

	void removePendingTask(const String& name);

	Task* getPendingTask(const String& name);

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	float getDistanceTo(SceneObject* object);

	float getDistanceTo(Coordinate* coordinate);

	void updateVehiclePosition();

	int notifyObjectInserted(SceneObject* object);

	int notifyObjectRemoved(SceneObject* object);

	bool hasNotifiedSentObject(SceneObject* object);

	void addNotifiedSentObject(SceneObject* object);

	void removeNotifiedSentObject(SceneObject* object);

	unsigned long long getObjectID();

	Vector3 getPosition();

	Vector3 getCoordinate(float distance, float angleDegrees);

	float getWorldPositionX();

	float getWorldPositionY();

	float getWorldPositionZ();

	Vector3 getWorldPosition();

	float getPositionX();

	float getPositionZ();

	float getPositionY();

	float getDirectionX();

	float getDirectionZ();

	float getDirectionY();

	float getDirectionW();

	Quaternion* getDirection();

	unsigned int getClientObjectCRC();

	unsigned int getServerObjectCRC();

	bool isWaypointObject();

	StringId* getObjectName();

	String getObjectNameStringIdFile();

	String getObjectNameStringIdName();

	StringId* getDetailedDescription();

	int getArrangementDescriptorSize();

	String getArrangementDescriptor(int idx);

	String getSlotDescriptor(int idx);

	bool hasSlotDescriptor(const String& descr);

	SceneObject* getSlottedObject(const String& slot);

	int getSlotDescriptorSize();

	int getContainerObjectsSize();

	bool hasFullContainerObjects();

	SceneObject* getContainerObject(int idx);

	ZoneClientSession* getClient();

	unsigned int getGameObjectType();

	unsigned int getContainmentType();

	Zone* getZone();

	float getDirectionAngle();

	float getSpecialDirectionAngle();

	void rotate(int degrees);

	void notifySelfPositionUpdate();

	void notifyCloseContainer(PlayerCreature* player);

	unsigned int getMovementCounter();

	SceneObject* getParent();

	ZoneServer* getZoneServer();

	SceneObject* getRootParent();

	SceneObject* getParentRecursively(unsigned int gameObjectType);

	bool isASubChildOf(SceneObject* object);

	UnicodeString getCustomObjectName();

	bool isInQuadTree();

	String getLoggingName();

	bool isPlayerCreature();

	bool isCreatureObject();

	bool isVehicleObject();

	bool isBuildingObject();

	bool isCloningBuildingObject();

	bool isGarage();

	bool isWeaponObject();

	bool isWearableObject();

	bool isArmorObject();

	bool isCellObject();

	bool isTangibleObject();

	bool isResourceContainer();

	bool isComponent();

	bool isInstrument();

	bool isInstallationObject();

	bool isFactory();

	bool isFactoryCrate();

	bool isFishingPoleObject();

	bool isDeedObject();

	bool isBuildingDeed();

	bool isInstallationDeed();

	bool isCraftingTool();

	bool isCraftingStation();

	bool isManufactureSchematic();

	bool isBazaarTerminal();

	bool isFishingBait();

	void setPosition(float x, float z, float y);

	void initializePosition(float x, float z, float y);

	void setGameObjectType(unsigned int type);

	void setActiveArea(ActiveArea* area);

	void setClientObjectCRC(unsigned int objCRC);

	void setServerObjectCRC(unsigned int objCRC);

	void setParent(SceneObject* par);

	void setZoneProcessServer(ZoneProcessServerImplementation* srv);

	void setObjectName(StringId& stringID);

	void setZone(Zone* zon);

	void setDirection(float fw, float fx, float fy, float fz);

	void setDirection(float headingAngleRadians);

	void setDirection(const Quaternion& dir);

	void setMovementCounter(unsigned int count);

	void incrementMovementCounter();

	void setContainmentType(unsigned int type);

	void setLoggingName(const String& name);

	void setStaticObject(bool val);

	VectorMap<unsigned long long, ManagedReference<SceneObject* > >* getContainerObjects();

	bool hasObjectInContainer(unsigned long long objectID);

	SceneObject* getContainerObject(unsigned long long objectID);

	unsigned int getPlanetCRC();

	bool isStaticObject();

	bool isControlDevice();

	bool isMissionTerminal();

	bool isMissionObject();

	ActiveArea* getActiveArea();

	int getMapLocationsType1();

	int getMapLocationsType2();

	int getMapLocationsType3();

	void createChildObjects();

protected:
	SceneObject(DummyConstructorParameter* param);

	virtual ~SceneObject();

	String _return_getArrangementDescriptor;
	String _return_getLoggingName;
	String _return_getObjectNameStringIdFile;
	String _return_getObjectNameStringIdName;
	String _return_getSlotDescriptor;

	UnicodeString _return_getCustomObjectName;

	friend class SceneObjectHelper;
};

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObjectImplementation : public ObservableImplementation, public QuadTreeEntry, public Logger {
protected:
	ZoneProcessServerImplementation* server;

	ManagedReference<Zone* > zone;

	ManagedWeakReference<SceneObject* > parent;

	VectorMap<String, ManagedReference<SceneObject* > > slottedObjects;

	VectorMap<unsigned long long, ManagedReference<SceneObject* > > containerObjects;

	unsigned int serverObjectCRC;

	unsigned int clientObjectCRC;

	Quaternion direction;

	unsigned int movementCounter;

	Vector<String> arrangementDescriptors;

	Vector<String> slotDescriptors;

	StringId objectName;

	StringId detailedDescription;

	SortedVector<ManagedReference<SceneObject* > > notifiedSentObjects;

	PendingTasksMap pendingTasks;

	bool staticObject;

	ManagedReference<ActiveArea* > activeArea;

	unsigned int containerType;

	unsigned int containerVolumeLimit;

	unsigned int gameObjectType;

	unsigned int containmentType;

	SharedObjectTemplate* templateObject;

public:
	static const int CELLOBJECT = 11;

	static const int PLAYEROBJECT = 12;

	static const int GROUPOBJECT = 13;

	static const int GENERALTANGIBLEOBJECT = 4;

	static const int STATICOBJECT = 5;

	static const int ARMOR = 0x100;

	static const int BODYARMOR = 0x101;

	static const int HEADARMOR = 0x102;

	static const int MISCARMOR = 0x103;

	static const int LEGARMOR = 0x104;

	static const int ARMARMOR = 0x105;

	static const int HANDARMOR = 0x106;

	static const int FOOTARMOR = 0x107;

	static const int SHIELDGENERATOR = 0x108;

	static const int BUILDING = 0x200;

	static const int MUNICIPALBUILDING = 0x201;

	static const int FACTIONPERKBUILDING = 0x203;

	static const int TUTORIALBUILDING = 0x204;

	static const int MEDICALBUILDING = 0x205;

	static const int RECREATIONBUILDING = 0x206;

	static const int CLONINGBUILDING = 0x207;

	static const int TRAVELBUILDING = 0x208;

	static const int STARPORTBUILDING = 0x209;

	static const int CAPITOLBUILDING = 0x20A;

	static const int HOTELBUILDING = 0x20B;

	static const int THEATERBUILDING = 0x20C;

	static const int COMBATBUILDING = 0x20D;

	static const int COMMERCEBUILDING = 0x20E;

	static const int UNIVERSITYBUILDING = 0x20F;

	static const int GARAGEBUILDING = 0x210;

	static const int CITYHALLBUILDING = 0x211;

	static const int CREATURE = 0x400;

	static const int NPCCREATURE = 0x401;

	static const int DROIDCREATURE = 0x402;

	static const int PROBOTCREATURE = 0x403;

	static const int PLAYERCREATURE = 0x409;

	static const int TRAINERCREATURE = 0x40A;

	static const int SHUTTLECREATURE = 0x40B;

	static const int INTANGIBLE = 0x800;

	static const int DRAFTSCHEMATIC = 0x801;

	static const int MANUFACTURINGSCHEMATIC = 0x802;

	static const int MISSIONOBJECT = 0x803;

	static const int TOKEN = 0x804;

	static const int WAYPOINT = 0x805;

	static const int DATA2 = 0x806;

	static const int PETCONTROLDEVICE = 0x807;

	static const int VEHICLECONTROLDEVICE = 0x808;

	static const int SHIPCONTROLDEVICE = 0x80A;

	static const int DROIDCONTROLDEVICE = 0x80B;

	static const int INSTALLATION = 0x1000;

	static const int FACTORY = 0x1001;

	static const int GENERATOR = 0x1002;

	static const int HARVESTER = 0x1003;

	static const int TURRET = 0x1004;

	static const int MINEFIELD = 0x1005;

	static const int GARAGEINSTALLATION = 0x1006;

	static const int SHUTTLEINSTALLATION = 0x1007;

	static const int BANKINSTALLATION = 0x1008;

	static const int TANGIBLE = 0x2000;

	static const int AMMUNITION = 0x2001;

	static const int CHEMICAL = 0x2002;

	static const int CONTAINER = 0x2005;

	static const int CRAFTINGSTATION = 0x2006;

	static const int ELECTRONICS = 0x2008;

	static const int FLORA = 0x2009;

	static const int FOOD = 0x200A;

	static const int FURNITURE = 0x200B;

	static const int INSTRUMENT = 0x200C;

	static const int PHARMACEUTICAL = 0x200D;

	static const int SIGN = 0x200F;

	static const int COUNTER = 0x2010;

	static const int FACTORYCRATE = 0x2011;

	static const int TRAVELTICKET = 0x2012;

	static const int GENERICITEM = 0x2013;

	static const int TRAP = 0x2014;

	static const int WEARABLECONTAINER = 0x2015;

	static const int FISHINGPOLE = 0x2016;

	static const int FISHINGBAIT = 0x2017;

	static const int DRINK = 0x2018;

	static const int FIREWORK = 0x2019;

	static const int ITEM = 0x201A;

	static const int PETMEDECINE = 0x201B;

	static const int FIREWORKSHOW = 0x201C;

	static const int CLOTHINGATTACHMENT = 0x201D;

	static const int LIVESAMPLE = 0x201E;

	static const int ARMORATTACHMENT = 0x201F;

	static const int COMMUNITYCRAFTINGPROJECT = 0x2020;

	static const int CRYSTAL = 0x2021;

	static const int DROIDPROGRAMMINGCHIP = 0x2022;

	static const int ASTEROID = 0x2023;

	static const int PILOTCHAIR = 0x2024;

	static const int OPERATIONSCHAIR = 0x2025;

	static const int TURRETACCESSLADDER = 0x2026;

	static const int CONTAINER2 = 0x2027;

	static const int CAMOKIT = 0x2028;

	static const int LOOTKIT = 0x2029;

	static const int FISH = 0x202A;

	static const int LAIR = 0x202B;

	static const int STIMPACK = 0x202C;

	static const int RANGEDSTIMPACK = 0x202D;

	static const int ENHANCEPACK = 0x202E;

	static const int CUREPACK = 0x202F;

	static const int DOTPACK = 0x2030;

	static const int TERMINAL = 0x4000;

	static const int BANK = 0x4001;

	static const int BAZAAR = 0x4002;

	static const int CLONING = 0x4003;

	static const int INSURANCE = 0x4004;

	static const int MISSIONTERMINAL = 0x4006;

	static const int PLAYERTERMINALSTRUCTURE = 0x4008;

	static const int SHIPPINGTERMINAL = 0x4009;

	static const int SPACETERMINAL = 0x400B;

	static const int INTERACTIVETERMINAL = 0x400C;

	static const int NEWBIETUTORIALTERMINAL = 0x400F;

	static const int CHARACTERBUILDERTERMINAL = 0x4010;

	static const int TICKETCOLLECTOR = 0x4011;

	static const int TRAVELTERMINAL = 0x4012;

	static const int ELEVATORTERMINAL = 0x4013;

	static const int GUILDTERMINAL = 0x4014;

	static const int TOOL = 0x8000;

	static const int CRAFTINGTOOL = 0x8001;

	static const int SURVEYTOOL = 0x8002;

	static const int REPAIRTOOL = 0x8003;

	static const int CAMPKIT = 0x8004;

	static const int SHIPCOMPONENTREPAIRITEM = 0x8005;

	static const int VEHICLE = 0x10000;

	static const int HOVERVEHICLE = 0x10001;

	static const int WEAPON = 0x20000;

	static const int MELEEWEAPON = 0x20001;

	static const int RANGEDWEAPON = 0x20002;

	static const int THROWNWEAPON = 0x20003;

	static const int HEAVYWEAPON = 0x20004;

	static const int MINE = 0x20005;

	static const int SPECIALHEAVYWEAPON = 0x20006;

	static const int ONEHANDMELEEWEAPON = 0x20007;

	static const int TWOHANDMELEEWEAPON = 0x20008;

	static const int POLEARM = 0x20009;

	static const int PISTOL = 0x2000A;

	static const int CARBINE = 0x2000B;

	static const int RIFLE = 0x2000C;

	static const int GRENADE = 0x2000E;

	static const int COMPONENT = 0x40000;

	static const int ARMORCOMPONENT = 0x40001;

	static const int CHEMISTRYCOMPONENT = 0x40002;

	static const int CLOTHINGCOMPONENT = 0x40003;

	static const int COMMUNITYCRAFTINGCOMPONENT = 0x40004;

	static const int DROIDCOMPONENT = 0x40005;

	static const int ELECTRONICSCOMPONENT = 0x40006;

	static const int GENETICCOMPONENT = 0x40007;

	static const int LIGHTSABERCRYSTAL = 0x40008;

	static const int MELEEWEAPONCOMPONENT = 0x40009;

	static const int MUNITIONCOMPONENT = 0x4000A;

	static const int RANGEDWEAPONCOMPONENT = 0x4000B;

	static const int STRUVTURECOMPONENT = 0x4000C;

	static const int TISSUECOMPONENT = 0x4000D;

	static const int WEAPONPOWERUP = 0x80000;

	static const int MELEEWEAPONPOWERUP = 0x80001;

	static const int RANGEDWEAPONPOWERUP = 0x80002;

	static const int THROWNWEAPONPOWERUP = 0x80003;

	static const int HEAVYWEAPONPOWERUP = 0x80004;

	static const int MINEPOWERUP = 0x80005;

	static const int SPECIALHEAVYWEAPONPOWERUP = 0x80006;

	static const int WEARABLE = 0x200000;

	static const int RING = 0x200001;

	static const int BRACELET = 0x200002;

	static const int NECKLACE = 0x200003;

	static const int EARRING = 0x200004;

	static const int RESOURCECONTAINER = 0x400000;

	static const int ENERGYGAS = 0x400001;

	static const int ENERGYLIQUID = 0x400002;

	static const int ENERGYRADIOACTIVE = 0x400003;

	static const int ENERGYSOLID = 0x400004;

	static const int INORGANICCHEMICAL = 0x400005;

	static const int INORGANICGAS = 0x400006;

	static const int INORGANICMINERAL = 0x400007;

	static const int WATER = 0x400008;

	static const int ORGANICFOOD = 0x400009;

	static const int ORGANICHIDE = 0x40000A;

	static const int ORGANICSTRUCTURAL = 0x40000B;

	static const int QUESTREOURCE = 0x40000C;

	static const int RESOURCESPAWN = 0x410000;

	static const int DEED = 0x800000;

	static const int BUILDINGDEED = 0x800001;

	static const int INSTALLATIONDEED = 0x800002;

	static const int PETDEED = 0x800003;

	static const int DROIDDEED = 0x800004;

	static const int VEHICLEDEED = 0x800005;

	static const int RESOURCEDEED = 0x800006;

	static const int CLOTHING = 0x1000000;

	static const int BANDOLIER = 0x1000001;

	static const int BELT = 0x1000002;

	static const int BODYSUIT = 0x1000003;

	static const int CAPE = 0x1000004;

	static const int CLOAK = 0x1000005;

	static const int FOOTWEAR = 0x1000006;

	static const int DRESS = 0x1000007;

	static const int HANDWEAR = 0x1000008;

	static const int EYEWEAR = 0x1000009;

	static const int HEADWEAR = 0x100000A;

	static const int JACKET = 0x100000B;

	static const int PANTS = 0x100000C;

	static const int ROBE = 0x100000D;

	static const int SHIRT = 0x100000E;

	static const int VEST = 0x100000F;

	static const int WOOKIEGARB = 0x1000010;

	static const int MISCCLOTHING = 0x1000011;

	static const int SKIRT = 0x1000012;

	static const int ITHOGARB = 0x1000013;

	static const int BADGEAREA = 0x200000;

	static const int REGIONAREA = 0x200001;

	static const int MISSIONSPAWNAREA = 0x200002;

	SceneObjectImplementation();

	SceneObjectImplementation(DummyConstructorParameter* param);

	void finalize();

	void initializePrivateData();

	virtual void loadTemplateData(SharedObjectTemplate* templateData);

	void initializeTransientMembers();

	virtual void notifyLoadFromDatabase();

	void info(const String& msg, bool forced = false);

	void error(const String& msg);

	int inRangeObjectCount();

	QuadTreeEntry* getInRangeObject(int index);

	int inRangeObjects(unsigned int gameObjectType, float range);

	bool isInRange(SceneObject* obj, float range);

	bool isInRange(QuadTreeEntry* obj, float range);

	void removeInRangeObject(QuadTreeEntry* obj);

	virtual bool addObject(SceneObject* object, int containmentType, bool notifyClient = false);

	virtual bool removeObject(SceneObject* object, bool notifyClient = false);

	virtual int canAddObject(SceneObject* object, String& errorDescription);

	virtual void synchronizedUIListen(SceneObject* player, int value);

	virtual void synchronizedUIStopListen(SceneObject* player, int value);

	void updateToDatabase();

	void updateToDatabaseWithoutChildren();

	virtual void updateToDatabaseAllObjects(bool startTask);

	virtual void destroyObjectFromDatabase(bool destroyContainedObjects = false);

	virtual int canBeDestroyed(PlayerCreature* player);

	void create(ZoneClientSession* client);

	void destroy(ZoneClientSession* client);

	void close(ZoneClientSession* client);

	void link(ZoneClientSession* client, unsigned int containmentType = 4);

	BaseMessage* link(unsigned long long objectID, unsigned int containmentType = 4);

	virtual void sendTo(SceneObject* player, bool doClose);

	virtual void sendWithoutParentTo(SceneObject* player);

	virtual void sendWithoutContainerObjectsTo(SceneObject* player);

	virtual void sendDestroyTo(SceneObject* player);

	virtual void sendBaselinesTo(SceneObject* player);

	virtual void sendContainerObjectsTo(SceneObject* player);

	virtual void sendSlottedObjectsTo(SceneObject* player);

	virtual void sendToOwner(bool doClose = true);

	virtual void sendAttributeListTo(PlayerCreature* object);

	virtual void fillAttributeList(AttributeListMessage* msg, PlayerCreature* object);

	virtual void setCustomObjectName(const UnicodeString& name, bool notifyClient);

	virtual void fillObjectMenuResponse(ObjectMenuResponse* menuResponse, PlayerCreature* player);

	virtual void openContainerTo(PlayerCreature* player);

	virtual void closeContainerTo(PlayerCreature* player, bool notify = true);

	virtual void insertToZone(Zone* zone);

	virtual void insertToBuilding(BuildingObject* building);

	virtual void switchZone(int newZoneID, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	virtual void teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID = 0);

	virtual void removeFromZone();

	virtual void removeFromBuilding(BuildingObject* building);

	virtual void updateZone(bool lightUpdate, bool sendPackets = true);

	virtual void updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets = true);

	void broadcastMessage(BasePacket* message, bool sendSelf);

	void broadcastObject(SceneObject* object, bool sendSelf);

	void broadcastDestroy(SceneObject* object, bool sendSelf);

	void broadcastMessages(Vector<BasePacket*>* messages, bool sendSelf);

	virtual void sendMessage(BasePacket* msg);

	int compareTo(SceneObject* obj);

	void getContainmentObjects(VectorMap<String, ManagedReference<SceneObject* > >& objects);

	unsigned long long getParentID();

	void addPendingTask(const String& name, Task* task);

	void removePendingTask(const String& name);

	Task* getPendingTask(const String& name);

	virtual int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	float getDistanceTo(SceneObject* object);

	float getDistanceTo(Coordinate* coordinate);

	void updateVehiclePosition();

	virtual int notifyObjectInserted(SceneObject* object);

	virtual int notifyObjectRemoved(SceneObject* object);

	bool hasNotifiedSentObject(SceneObject* object);

	void addNotifiedSentObject(SceneObject* object);

	void removeNotifiedSentObject(SceneObject* object);

	unsigned long long getObjectID();

	Vector3 getPosition();

	Vector3 getCoordinate(float distance, float angleDegrees);

	float getWorldPositionX();

	float getWorldPositionY();

	float getWorldPositionZ();

	Vector3 getWorldPosition();

	float getPositionX();

	float getPositionZ();

	float getPositionY();

	float getDirectionX();

	float getDirectionZ();

	float getDirectionY();

	float getDirectionW();

	Quaternion* getDirection();

	unsigned int getClientObjectCRC();

	unsigned int getServerObjectCRC();

	bool isWaypointObject();

	StringId* getObjectName();

	String getObjectNameStringIdFile();

	String getObjectNameStringIdName();

	StringId* getDetailedDescription();

	int getArrangementDescriptorSize();

	String getArrangementDescriptor(int idx);

	String getSlotDescriptor(int idx);

	bool hasSlotDescriptor(const String& descr);

	SceneObject* getSlottedObject(const String& slot);

	int getSlotDescriptorSize();

	int getContainerObjectsSize();

	bool hasFullContainerObjects();

	SceneObject* getContainerObject(int idx);

	virtual ZoneClientSession* getClient();

	unsigned int getGameObjectType();

	unsigned int getContainmentType();

	Zone* getZone();

	float getDirectionAngle();

	float getSpecialDirectionAngle();

	void rotate(int degrees);

	virtual void notifySelfPositionUpdate();

	virtual void notifyCloseContainer(PlayerCreature* player);

	unsigned int getMovementCounter();

	SceneObject* getParent();

	ZoneServer* getZoneServer();

	SceneObject* getRootParent();

	SceneObject* getParentRecursively(unsigned int gameObjectType);

	bool isASubChildOf(SceneObject* object);

	UnicodeString getCustomObjectName();

	bool isInQuadTree();

	String getLoggingName();

	bool isPlayerCreature();

	virtual bool isCreatureObject();

	virtual bool isVehicleObject();

	virtual bool isBuildingObject();

	virtual bool isCloningBuildingObject();

	bool isGarage();

	virtual bool isWeaponObject();

	virtual bool isWearableObject();

	virtual bool isArmorObject();

	virtual bool isCellObject();

	virtual bool isTangibleObject();

	virtual bool isResourceContainer();

	virtual bool isComponent();

	bool isInstrument();

	virtual bool isInstallationObject();

	virtual bool isFactory();

	virtual bool isFactoryCrate();

	bool isFishingPoleObject();

	virtual bool isDeedObject();

	virtual bool isBuildingDeed();

	virtual bool isInstallationDeed();

	virtual bool isCraftingTool();

	virtual bool isCraftingStation();

	virtual bool isManufactureSchematic();

	bool isBazaarTerminal();

	bool isFishingBait();

	void setPosition(float x, float z, float y);

	void initializePosition(float x, float z, float y);

	void setGameObjectType(unsigned int type);

	void setActiveArea(ActiveArea* area);

	void setClientObjectCRC(unsigned int objCRC);

	void setServerObjectCRC(unsigned int objCRC);

	void setParent(SceneObject* par);

	void setZoneProcessServer(ZoneProcessServerImplementation* srv);

	void setObjectName(StringId& stringID);

	void setZone(Zone* zon);

	void setDirection(float fw, float fx, float fy, float fz);

	void setDirection(float headingAngleRadians);

	void setDirection(const Quaternion& dir);

	void setMovementCounter(unsigned int count);

	void incrementMovementCounter();

	void setContainmentType(unsigned int type);

	void setLoggingName(const String& name);

	void setStaticObject(bool val);

	VectorMap<unsigned long long, ManagedReference<SceneObject* > >* getContainerObjects();

	bool hasObjectInContainer(unsigned long long objectID);

	SceneObject* getContainerObject(unsigned long long objectID);

	virtual unsigned int getPlanetCRC();

	bool isStaticObject();

	virtual bool isControlDevice();

	virtual bool isMissionTerminal();

	virtual bool isMissionObject();

	ActiveArea* getActiveArea();

	int getMapLocationsType1();

	int getMapLocationsType2();

	int getMapLocationsType3();

	virtual void createChildObjects();

	SceneObject* _this;

	operator const SceneObject*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~SceneObjectImplementation();

	TransactionalObject* clone();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class SceneObject;
	friend class TransactionalObjectHandle<SceneObjectImplementation*>;
};

class SceneObjectAdapter : public ObservableAdapter {
public:
	SceneObjectAdapter(SceneObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void finalize();

	void initializePrivateData();

	void initializeTransientMembers();

	void notifyLoadFromDatabase();

	void info(const String& msg, bool forced);

	void error(const String& msg);

	int inRangeObjectCount();

	int inRangeObjects(unsigned int gameObjectType, float range);

	bool isInRange(SceneObject* obj, float range);

	bool addObject(SceneObject* object, int containmentType, bool notifyClient);

	bool removeObject(SceneObject* object, bool notifyClient);

	int canAddObject(SceneObject* object, String& errorDescription);

	void synchronizedUIListen(SceneObject* player, int value);

	void synchronizedUIStopListen(SceneObject* player, int value);

	void updateToDatabase();

	void updateToDatabaseWithoutChildren();

	void updateToDatabaseAllObjects(bool startTask);

	void destroyObjectFromDatabase(bool destroyContainedObjects);

	int canBeDestroyed(PlayerCreature* player);

	void create(ZoneClientSession* client);

	void destroy(ZoneClientSession* client);

	void close(ZoneClientSession* client);

	void link(ZoneClientSession* client, unsigned int containmentType);

	BaseMessage* link(unsigned long long objectID, unsigned int containmentType);

	void sendTo(SceneObject* player, bool doClose);

	void sendWithoutParentTo(SceneObject* player);

	void sendWithoutContainerObjectsTo(SceneObject* player);

	void sendDestroyTo(SceneObject* player);

	void sendBaselinesTo(SceneObject* player);

	void sendContainerObjectsTo(SceneObject* player);

	void sendSlottedObjectsTo(SceneObject* player);

	void sendToOwner(bool doClose);

	void sendAttributeListTo(PlayerCreature* object);

	void setCustomObjectName(const UnicodeString& name, bool notifyClient);

	void openContainerTo(PlayerCreature* player);

	void closeContainerTo(PlayerCreature* player, bool notify);

	void insertToZone(Zone* zone);

	void insertToBuilding(BuildingObject* building);

	void switchZone(int newZoneID, float newPostionX, float newPositionZ, float newPositionY, unsigned long long parentID);

	void teleport(float newPositionX, float newPositionZ, float newPositionY, unsigned long long parentID);

	void removeFromZone();

	void removeFromBuilding(BuildingObject* building);

	void updateZone(bool lightUpdate, bool sendPackets);

	void updateZoneWithParent(SceneObject* newParent, bool lightUpdate, bool sendPackets);

	void broadcastMessage(BasePacket* message, bool sendSelf);

	void broadcastObject(SceneObject* object, bool sendSelf);

	void broadcastDestroy(SceneObject* object, bool sendSelf);

	void sendMessage(BasePacket* msg);

	int compareTo(SceneObject* obj);

	unsigned long long getParentID();

	int handleObjectMenuSelect(PlayerCreature* player, byte selectedID);

	float getDistanceTo(SceneObject* object);

	void updateVehiclePosition();

	int notifyObjectInserted(SceneObject* object);

	int notifyObjectRemoved(SceneObject* object);

	bool hasNotifiedSentObject(SceneObject* object);

	void addNotifiedSentObject(SceneObject* object);

	void removeNotifiedSentObject(SceneObject* object);

	unsigned long long getObjectID();

	float getWorldPositionX();

	float getWorldPositionY();

	float getWorldPositionZ();

	float getPositionX();

	float getPositionZ();

	float getPositionY();

	float getDirectionX();

	float getDirectionZ();

	float getDirectionY();

	float getDirectionW();

	unsigned int getClientObjectCRC();

	unsigned int getServerObjectCRC();

	bool isWaypointObject();

	String getObjectNameStringIdFile();

	String getObjectNameStringIdName();

	int getArrangementDescriptorSize();

	String getArrangementDescriptor(int idx);

	String getSlotDescriptor(int idx);

	bool hasSlotDescriptor(const String& descr);

	SceneObject* getSlottedObject(const String& slot);

	int getSlotDescriptorSize();

	int getContainerObjectsSize();

	bool hasFullContainerObjects();

	SceneObject* getContainerObject(int idx);

	ZoneClientSession* getClient();

	unsigned int getGameObjectType();

	unsigned int getContainmentType();

	Zone* getZone();

	float getDirectionAngle();

	float getSpecialDirectionAngle();

	void rotate(int degrees);

	void notifySelfPositionUpdate();

	void notifyCloseContainer(PlayerCreature* player);

	unsigned int getMovementCounter();

	SceneObject* getParent();

	ZoneServer* getZoneServer();

	SceneObject* getRootParent();

	SceneObject* getParentRecursively(unsigned int gameObjectType);

	bool isASubChildOf(SceneObject* object);

	UnicodeString getCustomObjectName();

	bool isInQuadTree();

	String getLoggingName();

	bool isPlayerCreature();

	bool isCreatureObject();

	bool isVehicleObject();

	bool isBuildingObject();

	bool isCloningBuildingObject();

	bool isGarage();

	bool isWeaponObject();

	bool isWearableObject();

	bool isArmorObject();

	bool isCellObject();

	bool isTangibleObject();

	bool isResourceContainer();

	bool isComponent();

	bool isInstrument();

	bool isInstallationObject();

	bool isFactory();

	bool isFactoryCrate();

	bool isFishingPoleObject();

	bool isDeedObject();

	bool isBuildingDeed();

	bool isInstallationDeed();

	bool isCraftingTool();

	bool isCraftingStation();

	bool isManufactureSchematic();

	bool isBazaarTerminal();

	bool isFishingBait();

	void setPosition(float x, float z, float y);

	void initializePosition(float x, float z, float y);

	void setGameObjectType(unsigned int type);

	void setActiveArea(ActiveArea* area);

	void setClientObjectCRC(unsigned int objCRC);

	void setServerObjectCRC(unsigned int objCRC);

	void setParent(SceneObject* par);

	void setZone(Zone* zon);

	void setDirection(float fw, float fx, float fy, float fz);

	void setDirection(float headingAngleRadians);

	void setMovementCounter(unsigned int count);

	void incrementMovementCounter();

	void setContainmentType(unsigned int type);

	void setLoggingName(const String& name);

	void setStaticObject(bool val);

	bool hasObjectInContainer(unsigned long long objectID);

	SceneObject* getContainerObject(unsigned long long objectID);

	unsigned int getPlanetCRC();

	bool isStaticObject();

	bool isControlDevice();

	bool isMissionTerminal();

	bool isMissionObject();

	ActiveArea* getActiveArea();

	int getMapLocationsType1();

	int getMapLocationsType2();

	int getMapLocationsType3();

	void createChildObjects();

protected:
	String _param0_info__String_bool_;
	String _param0_error__String_;
	String _param1_canAddObject__SceneObject_String_;
	UnicodeString _param0_setCustomObjectName__UnicodeString_bool_;
	String _param0_hasSlotDescriptor__String_;
	String _param0_getSlottedObject__String_;
	String _param0_setLoggingName__String_;
};

class SceneObjectHelper : public DistributedObjectClassHelper, public Singleton<SceneObjectHelper> {
	static SceneObjectHelper* staticInitializer;

public:
	SceneObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SceneObjectHelper>;
};

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#endif /*SCENEOBJECT_H_*/
