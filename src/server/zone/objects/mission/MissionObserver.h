/*
 *	server/zone/objects/mission/MissionObserver.h generated by engine3 IDL compiler 0.60
 */

#ifndef MISSIONOBSERVER_H_
#define MISSIONOBSERVER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class Observable;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObject;

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObjective;

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

#include "server/zone/objects/scene/Observer.h"

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObserver : public Observer {
public:
	MissionObserver(MissionObjective* objective);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void destroyObjectFromDatabase();

protected:
	MissionObserver(DummyConstructorParameter* param);

	virtual ~MissionObserver();

	friend class MissionObserverHelper;
};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObserverImplementation : public ObserverImplementation, public Logger {
protected:
	ManagedWeakReference<MissionObjective* > missionObjective;

public:
	MissionObserverImplementation(MissionObjective* objective);

	MissionObserverImplementation(DummyConstructorParameter* param);

	virtual int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	virtual void destroyObjectFromDatabase();

	MissionObserver* _this;

	operator const MissionObserver*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~MissionObserverImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class MissionObserver;
	friend class TransactionalObjectHandle<MissionObserverImplementation*>;
};

class MissionObserverAdapter : public ObserverAdapter {
public:
	MissionObserverAdapter(MissionObserverImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	void destroyObjectFromDatabase();

};

class MissionObserverHelper : public DistributedObjectClassHelper, public Singleton<MissionObserverHelper> {
	static MissionObserverHelper* staticInitializer;

public:
	MissionObserverHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<MissionObserverHelper>;
};

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

#endif /*MISSIONOBSERVER_H_*/
