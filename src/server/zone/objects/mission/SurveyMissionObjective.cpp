/*
 *	server/zone/objects/mission/SurveyMissionObjective.cpp generated by engine3 IDL compiler 0.60
 */

#include "SurveyMissionObjective.h"

#include "server/zone/objects/scene/Observer.h"

#include "server/zone/objects/scene/Observable.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/mission/MissionObserver.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/resource/ResourceSpawn.h"

/*
 *	SurveyMissionObjectiveStub
 */

SurveyMissionObjective::SurveyMissionObjective(MissionObject* mission) : MissionObjective(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new SurveyMissionObjectiveImplementation(mission));
	ManagedObject::_getImplementation()->_setStub(this);
}

SurveyMissionObjective::SurveyMissionObjective(DummyConstructorParameter* param) : MissionObjective(param) {
}

SurveyMissionObjective::~SurveyMissionObjective() {
}


void SurveyMissionObjective::initializeTransientMembers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((SurveyMissionObjectiveImplementation*) _getImplementation())->initializeTransientMembers();
}

void SurveyMissionObjective::activate() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);

		method.executeWithVoidReturn();
	} else
		((SurveyMissionObjectiveImplementation*) _getImplementation())->activate();
}

void SurveyMissionObjective::abort() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);

		method.executeWithVoidReturn();
	} else
		((SurveyMissionObjectiveImplementation*) _getImplementation())->abort();
}

void SurveyMissionObjective::complete() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);

		method.executeWithVoidReturn();
	} else
		((SurveyMissionObjectiveImplementation*) _getImplementation())->complete();
}

int SurveyMissionObjective::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(observer);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else
		return ((SurveyMissionObjectiveImplementation*) _getImplementation())->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void SurveyMissionObjective::setSpawn(ResourceSpawn* sp) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(sp);

		method.executeWithVoidReturn();
	} else
		((SurveyMissionObjectiveImplementation*) _getImplementation())->setSpawn(sp);
}

void SurveyMissionObjective::setMissionGiver(SceneObject* object) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(object);

		method.executeWithVoidReturn();
	} else
		((SurveyMissionObjectiveImplementation*) _getImplementation())->setMissionGiver(object);
}

void SurveyMissionObjective::setEfficiency(unsigned int eff) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addUnsignedIntParameter(eff);

		method.executeWithVoidReturn();
	} else
		((SurveyMissionObjectiveImplementation*) _getImplementation())->setEfficiency(eff);
}

/*
 *	SurveyMissionObjectiveImplementation
 */

SurveyMissionObjectiveImplementation::SurveyMissionObjectiveImplementation(DummyConstructorParameter* param) : MissionObjectiveImplementation(param) {
	_initializeImplementation();
}


SurveyMissionObjectiveImplementation::~SurveyMissionObjectiveImplementation() {
	SurveyMissionObjectiveImplementation::finalize();
}


void SurveyMissionObjectiveImplementation::_initializeImplementation() {
	_setClassHelper(SurveyMissionObjectiveHelper::instance());

	_serializationHelperMethod();
}

void SurveyMissionObjectiveImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SurveyMissionObjective*) stub;
	MissionObjectiveImplementation::_setStub(stub);
}

DistributedObjectStub* SurveyMissionObjectiveImplementation::_getStub() {
	return _this;
}

SurveyMissionObjectiveImplementation::operator const SurveyMissionObjective*() {
	return _this;
}

TransactionalObject* SurveyMissionObjectiveImplementation::clone() {
	return (TransactionalObject*) new SurveyMissionObjectiveImplementation(*this);
}


void SurveyMissionObjectiveImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SurveyMissionObjectiveImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SurveyMissionObjectiveImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SurveyMissionObjectiveImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SurveyMissionObjectiveImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SurveyMissionObjectiveImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SurveyMissionObjectiveImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SurveyMissionObjectiveImplementation::_serializationHelperMethod() {
	MissionObjectiveImplementation::_serializationHelperMethod();

	_setClassName("SurveyMissionObjective");

	addSerializableVariable("spawn", &spawn);
	addSerializableVariable("efficiency", &efficiency);
	addSerializableVariable("missionGiver", &missionGiver);
}

SurveyMissionObjectiveImplementation::SurveyMissionObjectiveImplementation(MissionObject* mission) : MissionObjectiveImplementation(mission) {
	_initializeImplementation();
	// server/zone/objects/mission/SurveyMissionObjective.idl(63):  		Logger.setLoggingName("SurveyMissionObjective");
	Logger::setLoggingName("SurveyMissionObjective");
	// server/zone/objects/mission/SurveyMissionObjective.idl(65):  		efficiency = 0;
	efficiency = 0;
}

void SurveyMissionObjectiveImplementation::finalize() {
	// server/zone/objects/mission/SurveyMissionObjective.idl(69):  		Logger.info("deleting from memory", true);
	Logger::info("deleting from memory", true);
}

void SurveyMissionObjectiveImplementation::initializeTransientMembers() {
	// server/zone/objects/mission/SurveyMissionObjective.idl(73):  		super.initializeTransientMembers();
	MissionObjectiveImplementation::initializeTransientMembers();
	// server/zone/objects/mission/SurveyMissionObjective.idl(75):  		Logger.setLoggingName("MissionObject");
	Logger::setLoggingName("MissionObject");
	// server/zone/objects/mission/SurveyMissionObjective.idl(77):  		activate();
	activate();
}

void SurveyMissionObjectiveImplementation::setSpawn(ResourceSpawn* sp) {
	// server/zone/objects/mission/SurveyMissionObjective.idl(87):  		spawn = sp;
	spawn = sp;
}

void SurveyMissionObjectiveImplementation::setMissionGiver(SceneObject* object) {
	// server/zone/objects/mission/SurveyMissionObjective.idl(91):  		missionGiver = object;
	missionGiver = object;
}

void SurveyMissionObjectiveImplementation::setEfficiency(unsigned int eff) {
	// server/zone/objects/mission/SurveyMissionObjective.idl(95):  		efficiency = eff;
	efficiency = eff;
}

/*
 *	SurveyMissionObjectiveAdapter
 */

SurveyMissionObjectiveAdapter::SurveyMissionObjectiveAdapter(SurveyMissionObjectiveImplementation* obj) : MissionObjectiveAdapter(obj) {
}

Packet* SurveyMissionObjectiveAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		finalize();
		break;
	case 7:
		initializeTransientMembers();
		break;
	case 8:
		activate();
		break;
	case 9:
		abort();
		break;
	case 10:
		complete();
		break;
	case 11:
		resp->insertSignedInt(notifyObserverEvent((MissionObserver*) inv->getObjectParameter(), inv->getUnsignedIntParameter(), (Observable*) inv->getObjectParameter(), (ManagedObject*) inv->getObjectParameter(), inv->getSignedLongParameter()));
		break;
	case 12:
		setSpawn((ResourceSpawn*) inv->getObjectParameter());
		break;
	case 13:
		setMissionGiver((SceneObject*) inv->getObjectParameter());
		break;
	case 14:
		setEfficiency(inv->getUnsignedIntParameter());
		break;
	default:
		return NULL;
	}

	return resp;
}

void SurveyMissionObjectiveAdapter::finalize() {
	((SurveyMissionObjectiveImplementation*) impl)->finalize();
}

void SurveyMissionObjectiveAdapter::initializeTransientMembers() {
	((SurveyMissionObjectiveImplementation*) impl)->initializeTransientMembers();
}

void SurveyMissionObjectiveAdapter::activate() {
	((SurveyMissionObjectiveImplementation*) impl)->activate();
}

void SurveyMissionObjectiveAdapter::abort() {
	((SurveyMissionObjectiveImplementation*) impl)->abort();
}

void SurveyMissionObjectiveAdapter::complete() {
	((SurveyMissionObjectiveImplementation*) impl)->complete();
}

int SurveyMissionObjectiveAdapter::notifyObserverEvent(MissionObserver* observer, unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return ((SurveyMissionObjectiveImplementation*) impl)->notifyObserverEvent(observer, eventType, observable, arg1, arg2);
}

void SurveyMissionObjectiveAdapter::setSpawn(ResourceSpawn* sp) {
	((SurveyMissionObjectiveImplementation*) impl)->setSpawn(sp);
}

void SurveyMissionObjectiveAdapter::setMissionGiver(SceneObject* object) {
	((SurveyMissionObjectiveImplementation*) impl)->setMissionGiver(object);
}

void SurveyMissionObjectiveAdapter::setEfficiency(unsigned int eff) {
	((SurveyMissionObjectiveImplementation*) impl)->setEfficiency(eff);
}

/*
 *	SurveyMissionObjectiveHelper
 */

SurveyMissionObjectiveHelper* SurveyMissionObjectiveHelper::staticInitializer = SurveyMissionObjectiveHelper::instance();

SurveyMissionObjectiveHelper::SurveyMissionObjectiveHelper() {
	className = "SurveyMissionObjective";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SurveyMissionObjectiveHelper::finalizeHelper() {
	SurveyMissionObjectiveHelper::finalize();
}

DistributedObject* SurveyMissionObjectiveHelper::instantiateObject() {
	return new SurveyMissionObjective(DummyConstructorParameter::instance());
}

DistributedObjectServant* SurveyMissionObjectiveHelper::instantiateServant() {
	return new SurveyMissionObjectiveImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SurveyMissionObjectiveHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SurveyMissionObjectiveAdapter((SurveyMissionObjectiveImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

