/*
 *	server/zone/objects/group/GroupObject.h generated by engine3 IDL compiler 0.60
 */

#ifndef GROUPOBJECT_H_
#define GROUPOBJECT_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace chat {
namespace room {

class ChatRoom;

} // namespace room
} // namespace chat
} // namespace server

using namespace server::chat::room;

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "server/zone/objects/group/GroupList.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "system/util/Vector.h"

#include "engine/lua/LuaObject.h"

#include "engine/service/proto/BaseMessage.h"

namespace server {
namespace zone {
namespace objects {
namespace group {

class GroupObject : public SceneObject {
public:
	GroupObject();

	void sendBaselinesTo(SceneObject* player);

	void broadcastMessage(BaseMessage* msg);

	void addMember(SceneObject* player);

	void removeMember(SceneObject* player);

	void disband();

	void makeLeader(SceneObject* player);

	bool hasMember(SceneObject* player);

	void startChatRoom();

	void destroyChatRoom();

	int getGroupLevel();

	ChatRoom* getGroupChannel();

	int getGroupSize();

	SceneObject* getGroupMember(int index);

	void initializeLeader(SceneObject* player);

	SceneObject* getLeader();

	GroupList* getGroupList();

protected:
	GroupObject(DummyConstructorParameter* param);

	virtual ~GroupObject();

	friend class GroupObjectHelper;
};

} // namespace group
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::group;

namespace server {
namespace zone {
namespace objects {
namespace group {

class GroupObjectImplementation : public SceneObjectImplementation {
	GroupList groupMembers;

	ManagedReference<ChatRoom* > chatRoom;

	int groupLevel;

public:
	GroupObjectImplementation();

	GroupObjectImplementation(DummyConstructorParameter* param);

	void sendBaselinesTo(SceneObject* player);

	void broadcastMessage(BaseMessage* msg);

	void addMember(SceneObject* player);

	void removeMember(SceneObject* player);

	void disband();

	void makeLeader(SceneObject* player);

	bool hasMember(SceneObject* player);

	void startChatRoom();

	void destroyChatRoom();

	int getGroupLevel();

	ChatRoom* getGroupChannel();

	int getGroupSize();

	SceneObject* getGroupMember(int index);

	void initializeLeader(SceneObject* player);

	SceneObject* getLeader();

	GroupList* getGroupList();

	GroupObject* _this;

	operator const GroupObject*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~GroupObjectImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class GroupObject;
	friend class TransactionalObjectHandle<GroupObjectImplementation*>;
};

class GroupObjectAdapter : public SceneObjectAdapter {
public:
	GroupObjectAdapter(GroupObjectImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void sendBaselinesTo(SceneObject* player);

	void broadcastMessage(BaseMessage* msg);

	void addMember(SceneObject* player);

	void removeMember(SceneObject* player);

	void disband();

	void makeLeader(SceneObject* player);

	bool hasMember(SceneObject* player);

	void startChatRoom();

	void destroyChatRoom();

	int getGroupLevel();

	ChatRoom* getGroupChannel();

	int getGroupSize();

	SceneObject* getGroupMember(int index);

	void initializeLeader(SceneObject* player);

	SceneObject* getLeader();

};

class GroupObjectHelper : public DistributedObjectClassHelper, public Singleton<GroupObjectHelper> {
	static GroupObjectHelper* staticInitializer;

public:
	GroupObjectHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<GroupObjectHelper>;
};

} // namespace group
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::group;

#endif /*GROUPOBJECT_H_*/
