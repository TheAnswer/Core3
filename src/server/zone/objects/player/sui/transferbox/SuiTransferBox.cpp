/*
 *	server/zone/objects/player/sui/transferbox/SuiTransferBox.cpp generated by engine3 IDL compiler 0.60
 */

#include "SuiTransferBox.h"

#include "server/zone/objects/scene/SceneObject.h"

#include "server/zone/objects/player/PlayerCreature.h"

/*
 *	SuiTransferBoxStub
 */

SuiTransferBox::SuiTransferBox(PlayerCreature* player, unsigned int windowType) : SuiBox(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new SuiTransferBoxImplementation(player, windowType));
	ManagedObject::_getImplementation()->_setStub(this);
}

SuiTransferBox::SuiTransferBox(DummyConstructorParameter* param) : SuiBox(param) {
}

SuiTransferBox::~SuiTransferBox() {
}


BaseMessage* SuiTransferBox::generateMessage() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		return (BaseMessage*) method.executeWithObjectReturn();
	} else
		return ((SuiTransferBoxImplementation*) _getImplementation())->generateMessage();
}

void SuiTransferBox::addFrom(const String& from, const String& startingFrom, const String& inputFrom, const String& rFrom) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addAsciiParameter(from);
		method.addAsciiParameter(startingFrom);
		method.addAsciiParameter(inputFrom);
		method.addAsciiParameter(rFrom);

		method.executeWithVoidReturn();
	} else
		((SuiTransferBoxImplementation*) _getImplementation())->addFrom(from, startingFrom, inputFrom, rFrom);
}

void SuiTransferBox::addTo(const String& to, const String& startingTo, const String& inputTo, const String& rTo) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addAsciiParameter(to);
		method.addAsciiParameter(startingTo);
		method.addAsciiParameter(inputTo);
		method.addAsciiParameter(rTo);

		method.executeWithVoidReturn();
	} else
		((SuiTransferBoxImplementation*) _getImplementation())->addTo(to, startingTo, inputTo, rTo);
}

void SuiTransferBox::setUsingObject(SceneObject* obj) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(obj);

		method.executeWithVoidReturn();
	} else
		((SuiTransferBoxImplementation*) _getImplementation())->setUsingObject(obj);
}

SceneObject* SuiTransferBox::getUsingObject() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);

		return (SceneObject*) method.executeWithObjectReturn();
	} else
		return ((SuiTransferBoxImplementation*) _getImplementation())->getUsingObject();
}

bool SuiTransferBox::isTransferBox() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);

		return method.executeWithBooleanReturn();
	} else
		return ((SuiTransferBoxImplementation*) _getImplementation())->isTransferBox();
}

/*
 *	SuiTransferBoxImplementation
 */

SuiTransferBoxImplementation::SuiTransferBoxImplementation(DummyConstructorParameter* param) : SuiBoxImplementation(param) {
	_initializeImplementation();
}


SuiTransferBoxImplementation::~SuiTransferBoxImplementation() {
}


void SuiTransferBoxImplementation::finalize() {
}

void SuiTransferBoxImplementation::_initializeImplementation() {
	_setClassHelper(SuiTransferBoxHelper::instance());

	_serializationHelperMethod();
}

void SuiTransferBoxImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (SuiTransferBox*) stub;
	SuiBoxImplementation::_setStub(stub);
}

DistributedObjectStub* SuiTransferBoxImplementation::_getStub() {
	return _this;
}

SuiTransferBoxImplementation::operator const SuiTransferBox*() {
	return _this;
}

TransactionalObject* SuiTransferBoxImplementation::clone() {
	return (TransactionalObject*) new SuiTransferBoxImplementation(*this);
}


void SuiTransferBoxImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void SuiTransferBoxImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void SuiTransferBoxImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void SuiTransferBoxImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void SuiTransferBoxImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void SuiTransferBoxImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void SuiTransferBoxImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void SuiTransferBoxImplementation::_serializationHelperMethod() {
	SuiBoxImplementation::_serializationHelperMethod();

	_setClassName("SuiTransferBox");

	addSerializableVariable("lblFrom", &lblFrom);
	addSerializableVariable("lblStartingFrom", &lblStartingFrom);
	addSerializableVariable("lblInputFrom", &lblInputFrom);
	addSerializableVariable("lblTo", &lblTo);
	addSerializableVariable("lblStartingTo", &lblStartingTo);
	addSerializableVariable("lblInputTo", &lblInputTo);
	addSerializableVariable("convertRatioFrom", &convertRatioFrom);
	addSerializableVariable("convertRatioTo", &convertRatioTo);
	addSerializableVariable("usingObject", &usingObject);
}

SuiTransferBoxImplementation::SuiTransferBoxImplementation(PlayerCreature* player, unsigned int windowType) : SuiBoxImplementation(player, windowType, SuiBox::TRANSFERBOX) {
	_initializeImplementation();
	// server/zone/objects/player/sui/transferbox/SuiTransferBox.idl(72):  		usingObject = null;
	usingObject = NULL;
}

void SuiTransferBoxImplementation::setUsingObject(SceneObject* obj) {
	// server/zone/objects/player/sui/transferbox/SuiTransferBox.idl(81):  		usingObject = obj;
	usingObject = obj;
}

SceneObject* SuiTransferBoxImplementation::getUsingObject() {
	// server/zone/objects/player/sui/transferbox/SuiTransferBox.idl(85):  		return usingObject;
	return usingObject;
}

bool SuiTransferBoxImplementation::isTransferBox() {
	// server/zone/objects/player/sui/transferbox/SuiTransferBox.idl(89):  		return true;
	return true;
}

/*
 *	SuiTransferBoxAdapter
 */

SuiTransferBoxAdapter::SuiTransferBoxAdapter(SuiTransferBoxImplementation* obj) : SuiBoxAdapter(obj) {
}

Packet* SuiTransferBoxAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		resp->insertLong(generateMessage()->_getObjectID());
		break;
	case 7:
		addFrom(inv->getAsciiParameter(_param0_addFrom__String_String_String_String_), inv->getAsciiParameter(_param1_addFrom__String_String_String_String_), inv->getAsciiParameter(_param2_addFrom__String_String_String_String_), inv->getAsciiParameter(_param3_addFrom__String_String_String_String_));
		break;
	case 8:
		addTo(inv->getAsciiParameter(_param0_addTo__String_String_String_String_), inv->getAsciiParameter(_param1_addTo__String_String_String_String_), inv->getAsciiParameter(_param2_addTo__String_String_String_String_), inv->getAsciiParameter(_param3_addTo__String_String_String_String_));
		break;
	case 9:
		setUsingObject((SceneObject*) inv->getObjectParameter());
		break;
	case 10:
		resp->insertLong(getUsingObject()->_getObjectID());
		break;
	case 11:
		resp->insertBoolean(isTransferBox());
		break;
	default:
		return NULL;
	}

	return resp;
}

BaseMessage* SuiTransferBoxAdapter::generateMessage() {
	return ((SuiTransferBoxImplementation*) impl)->generateMessage();
}

void SuiTransferBoxAdapter::addFrom(const String& from, const String& startingFrom, const String& inputFrom, const String& rFrom) {
	((SuiTransferBoxImplementation*) impl)->addFrom(from, startingFrom, inputFrom, rFrom);
}

void SuiTransferBoxAdapter::addTo(const String& to, const String& startingTo, const String& inputTo, const String& rTo) {
	((SuiTransferBoxImplementation*) impl)->addTo(to, startingTo, inputTo, rTo);
}

void SuiTransferBoxAdapter::setUsingObject(SceneObject* obj) {
	((SuiTransferBoxImplementation*) impl)->setUsingObject(obj);
}

SceneObject* SuiTransferBoxAdapter::getUsingObject() {
	return ((SuiTransferBoxImplementation*) impl)->getUsingObject();
}

bool SuiTransferBoxAdapter::isTransferBox() {
	return ((SuiTransferBoxImplementation*) impl)->isTransferBox();
}

/*
 *	SuiTransferBoxHelper
 */

SuiTransferBoxHelper* SuiTransferBoxHelper::staticInitializer = SuiTransferBoxHelper::instance();

SuiTransferBoxHelper::SuiTransferBoxHelper() {
	className = "SuiTransferBox";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void SuiTransferBoxHelper::finalizeHelper() {
	SuiTransferBoxHelper::finalize();
}

DistributedObject* SuiTransferBoxHelper::instantiateObject() {
	return new SuiTransferBox(DummyConstructorParameter::instance());
}

DistributedObjectServant* SuiTransferBoxHelper::instantiateServant() {
	return new SuiTransferBoxImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* SuiTransferBoxHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new SuiTransferBoxAdapter((SuiTransferBoxImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

