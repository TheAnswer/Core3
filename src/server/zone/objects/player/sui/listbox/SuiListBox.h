/*
 *	server/zone/objects/player/sui/listbox/SuiListBox.h generated by engine3 IDL compiler 0.60
 */

#ifndef SUILISTBOX_H_
#define SUILISTBOX_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace listbox {

class SuiListBoxMenuItem;

} // namespace listbox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::listbox;

#include "server/zone/packets/ui/SuiCreatePageMessage.h"

#include "engine/lua/LuaObject.h"

#include "engine/service/proto/BaseMessage.h"

#include "server/zone/objects/player/sui/SuiBox.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace listbox {

class SuiListBox : public SuiBox {
public:
	static const int MSGSELECTED = 0;

	static const int HANDLESTATUSUI = 1;

	static const int HANDLEDESTROYUI = 2;

	SuiListBox(PlayerCreature* player, unsigned int windowType, unsigned int listBoxType = 0);

	void init();

	void addMenuItem(const String& name, unsigned long long objectID = 0);

	String getMenuItemName(int index);

	void removeAllMenuItems();

	unsigned long long getMenuObjectID(unsigned int idx);

	int getMenuSize();

	BaseMessage* generateMessage();

	void setNextBox(unsigned int boxID);

	void setPreviousBox(unsigned int boxID);

	unsigned long long getNextBox();

	unsigned long long getPreviousBox();

	bool isListBox();

protected:
	SuiListBox(DummyConstructorParameter* param);

	virtual ~SuiListBox();

	String _return_getMenuItemName;

	friend class SuiListBoxHelper;
};

} // namespace listbox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::listbox;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace listbox {

class SuiListBoxImplementation : public SuiBoxImplementation {
protected:
	Vector<ManagedReference<SuiListBoxMenuItem* > > menuItems;

	int type;

private:
	unsigned long long next;

	unsigned long long previous;

public:
	static const int MSGSELECTED = 0;

	static const int HANDLESTATUSUI = 1;

	static const int HANDLEDESTROYUI = 2;

	SuiListBoxImplementation(PlayerCreature* player, unsigned int windowType, unsigned int listBoxType = 0);

	SuiListBoxImplementation(DummyConstructorParameter* param);

	void init();

	void addMenuItem(const String& name, unsigned long long objectID = 0);

	String getMenuItemName(int index);

	void removeAllMenuItems();

	unsigned long long getMenuObjectID(unsigned int idx);

	int getMenuSize();

	BaseMessage* generateMessage();

	void setNextBox(unsigned int boxID);

	void setPreviousBox(unsigned int boxID);

	unsigned long long getNextBox();

	unsigned long long getPreviousBox();

	bool isListBox();

	SuiListBox* _this;

	operator const SuiListBox*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~SuiListBoxImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class SuiListBox;
	friend class TransactionalObjectHandle<SuiListBoxImplementation*>;
};

class SuiListBoxAdapter : public SuiBoxAdapter {
public:
	SuiListBoxAdapter(SuiListBoxImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void init();

	void addMenuItem(const String& name, unsigned long long objectID);

	String getMenuItemName(int index);

	void removeAllMenuItems();

	unsigned long long getMenuObjectID(unsigned int idx);

	int getMenuSize();

	BaseMessage* generateMessage();

	void setNextBox(unsigned int boxID);

	void setPreviousBox(unsigned int boxID);

	unsigned long long getNextBox();

	unsigned long long getPreviousBox();

	bool isListBox();

protected:
	String _param0_addMenuItem__String_long_;
};

class SuiListBoxHelper : public DistributedObjectClassHelper, public Singleton<SuiListBoxHelper> {
	static SuiListBoxHelper* staticInitializer;

public:
	SuiListBoxHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SuiListBoxHelper>;
};

} // namespace listbox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::listbox;

#endif /*SUILISTBOX_H_*/
