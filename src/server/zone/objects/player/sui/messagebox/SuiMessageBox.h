/*
 *	server/zone/objects/player/sui/messagebox/SuiMessageBox.h generated by engine3 IDL compiler 0.60
 */

#ifndef SUIMESSAGEBOX_H_
#define SUIMESSAGEBOX_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace scene {

class SceneObject;

} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "server/zone/packets/ui/SuiCreatePageMessage.h"

#include "engine/lua/LuaObject.h"

#include "engine/service/proto/BaseMessage.h"

#include "server/zone/objects/player/sui/SuiBox.h"

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace messagebox {

class SuiMessageBox : public SuiBox {
public:
	SuiMessageBox(PlayerCreature* player, unsigned int windowType);

	BaseMessage* generateMessage();

	bool isMessageBox();

protected:
	SuiMessageBox(DummyConstructorParameter* param);

	virtual ~SuiMessageBox();

	friend class SuiMessageBoxHelper;
};

} // namespace messagebox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::messagebox;

namespace server {
namespace zone {
namespace objects {
namespace player {
namespace sui {
namespace messagebox {

class SuiMessageBoxImplementation : public SuiBoxImplementation {

public:
	SuiMessageBoxImplementation(PlayerCreature* player, unsigned int windowType);

	SuiMessageBoxImplementation(DummyConstructorParameter* param);

	BaseMessage* generateMessage();

	bool isMessageBox();

	SuiMessageBox* _this;

	operator const SuiMessageBox*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~SuiMessageBoxImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class SuiMessageBox;
	friend class TransactionalObjectHandle<SuiMessageBoxImplementation*>;
};

class SuiMessageBoxAdapter : public SuiBoxAdapter {
public:
	SuiMessageBoxAdapter(SuiMessageBoxImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	BaseMessage* generateMessage();

	bool isMessageBox();

};

class SuiMessageBoxHelper : public DistributedObjectClassHelper, public Singleton<SuiMessageBoxHelper> {
	static SuiMessageBoxHelper* staticInitializer;

public:
	SuiMessageBoxHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<SuiMessageBoxHelper>;
};

} // namespace messagebox
} // namespace sui
} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player::sui::messagebox;

#endif /*SUIMESSAGEBOX_H_*/
