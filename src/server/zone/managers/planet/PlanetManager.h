/*
 *	server/zone/managers/planet/PlanetManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef PLANETMANAGER_H_
#define PLANETMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {

class Zone;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {

class ZoneProcessServerImplementation;

} // namespace zone
} // namespace server

using namespace server::zone;

namespace server {
namespace zone {
namespace objects {
namespace building {

class BuildingObject;

} // namespace building
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::building;

namespace server {
namespace zone {
namespace objects {
namespace scene {
namespace variables {

class StringId;

} // namespace variables
} // namespace scene
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::scene::variables;

namespace server {
namespace zone {
namespace managers {
namespace structure {

class StructureManager;

} // namespace structure
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::structure;

namespace server {
namespace zone {
namespace managers {
namespace objectcontroller {

class ObjectController;

} // namespace objectcontroller
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::objectcontroller;

namespace server {
namespace zone {
namespace objects {
namespace creature {
namespace shuttle {

class ShuttleCreature;

} // namespace shuttle
} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature::shuttle;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

#include "server/zone/objects/region/Region.h"

#include "server/zone/managers/planet/RegionMap.h"

#include "server/zone/objects/terrain/PlanetNames.h"

#include "server/zone/managers/terrain/TerrainManager.h"

#include "server/zone/managers/planet/ShuttleMap.h"

#include "server/zone/managers/planet/NoBuildAreaMap.h"

#include "engine/core/ManagedObject.h"

#include "engine/log/Logger.h"

#include "system/thread/Thread.h"

namespace server {
namespace zone {
namespace managers {
namespace planet {

class PlanetManager : public ManagedObject {
public:
	PlanetManager(Zone* planet, ZoneProcessServerImplementation* srv);

	void initializeTransientMembers();

	void initialize();

	void loadRegions();

	void loadNoBuildAreas();

	void loadShuttles();

	void loadBadgeAreas();

	ShuttleCreature* getShuttle(const String& arrivalPoint);

	void addShuttle(const String& city, ShuttleCreature* shuttle);

	bool isNoBuildArea(float x, float y, StringId& fullAreaName);

	unsigned int getTravelFare(const String& departurePlanet, const String& arrivalPlanet);

	void sendPlanetTravelPointListResponse(PlayerCreature* player);

	StructureManager* getStructureManager();

	TerrainManager* getTerrainManager();

	Region* getRegion(float x, float y);

	int getRegionCount();

	Region* getRegion(int index);

	void addRegion(Region* region);

	bool hasRegion(const String& name);

protected:
	PlanetManager(DummyConstructorParameter* param);

	virtual ~PlanetManager();

	friend class PlanetManagerHelper;
};

} // namespace planet
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::planet;

namespace server {
namespace zone {
namespace managers {
namespace planet {

class PlanetManagerImplementation : public ManagedObjectImplementation, public Logger {
protected:
	ManagedWeakReference<Zone* > zone;

	RegionMap regionMap;

	ManagedReference<StructureManager* > structureManager;

	ZoneProcessServerImplementation* server;

	TerrainManager* terrainManager;

	ShuttleMap shuttleMap;

	NoBuildAreaMap noBuildAreaMap;

public:
	PlanetManagerImplementation(Zone* planet, ZoneProcessServerImplementation* srv);

	PlanetManagerImplementation(DummyConstructorParameter* param);

	void initializeTransientMembers();

	void finalize();

	void initialize();

	void loadRegions();

	void loadNoBuildAreas();

	void loadShuttles();

	void loadBadgeAreas();

	ShuttleCreature* getShuttle(const String& arrivalPoint);

	void addShuttle(const String& city, ShuttleCreature* shuttle);

	bool isNoBuildArea(float x, float y, StringId& fullAreaName);

	unsigned int getTravelFare(const String& departurePlanet, const String& arrivalPlanet);

	void sendPlanetTravelPointListResponse(PlayerCreature* player);

	StructureManager* getStructureManager();

	TerrainManager* getTerrainManager();

	Region* getRegion(float x, float y);

	int getRegionCount();

	Region* getRegion(int index);

	void addRegion(Region* region);

	bool hasRegion(const String& name);

	PlanetManager* _this;

	operator const PlanetManager*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~PlanetManagerImplementation();

	TransactionalObject* clone();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class PlanetManager;
	friend class TransactionalObjectHandle<PlanetManagerImplementation*>;
};

class PlanetManagerAdapter : public ManagedObjectAdapter {
public:
	PlanetManagerAdapter(PlanetManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void initializeTransientMembers();

	void finalize();

	void initialize();

	void loadRegions();

	void loadNoBuildAreas();

	void loadShuttles();

	void loadBadgeAreas();

	ShuttleCreature* getShuttle(const String& arrivalPoint);

	void addShuttle(const String& city, ShuttleCreature* shuttle);

	unsigned int getTravelFare(const String& departurePlanet, const String& arrivalPlanet);

	void sendPlanetTravelPointListResponse(PlayerCreature* player);

	StructureManager* getStructureManager();

	Region* getRegion(float x, float y);

	int getRegionCount();

	Region* getRegion(int index);

	void addRegion(Region* region);

	bool hasRegion(const String& name);

protected:
	String _param0_getShuttle__String_;
	String _param0_addShuttle__String_ShuttleCreature_;
	String _param0_getTravelFare__String_String_;
	String _param1_getTravelFare__String_String_;
	String _param0_hasRegion__String_;
};

class PlanetManagerHelper : public DistributedObjectClassHelper, public Singleton<PlanetManagerHelper> {
	static PlanetManagerHelper* staticInitializer;

public:
	PlanetManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<PlanetManagerHelper>;
};

} // namespace planet
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::planet;

#endif /*PLANETMANAGER_H_*/
