/*
 *	server/zone/managers/mission/MissionManager.h generated by engine3 IDL compiler 0.60
 */

#ifndef MISSIONMANAGER_H_
#define MISSIONMANAGER_H_

#include "engine/orb/DistributedObjectBroker.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

namespace server {
namespace zone {
namespace objects {
namespace mission {

class MissionObject;

} // namespace mission
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::mission;

namespace server {
namespace zone {
namespace objects {
namespace tangible {
namespace terminal {
namespace mission {

class MissionTerminal;

} // namespace mission
} // namespace terminal
} // namespace tangible
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::tangible::terminal::mission;

namespace server {
namespace zone {
namespace objects {
namespace player {

class PlayerCreature;

} // namespace player
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::player;

namespace server {
namespace zone {

class ZoneServer;

} // namespace zone
} // namespace server

using namespace server::zone;

#include "engine/core/ManagedObject.h"

#include "server/zone/managers/mission/LairObjectsToSpawnMap.h"

#include "server/zone/objects/scene/Observer.h"

namespace server {
namespace zone {
namespace managers {
namespace mission {

class MissionManager : public Observer {
public:
	MissionManager(ZoneServer* srv);

	void loadLairObjectsToSpawn();

	void handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player);

	void handleMissionAbort(MissionObject* mission, PlayerCreature* player);

	void removeMission(MissionObject* mission, PlayerCreature* player);

	void populateGeneralMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void populateArtisanMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void randomizeSurveyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeGeneralMission(PlayerCreature* player, MissionObject* mission);

	void createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createGeneralMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	bool hasSurveyMission(PlayerCreature* player, const String& spawn);

protected:
	MissionManager(DummyConstructorParameter* param);

	virtual ~MissionManager();

	friend class MissionManagerHelper;
};

} // namespace mission
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::mission;

namespace server {
namespace zone {
namespace managers {
namespace mission {

class MissionManagerImplementation : public ObserverImplementation, public Logger {
protected:
	ManagedWeakReference<ZoneServer* > server;

	LairObjectsToSpawnMap lairObjectTemplatesToSpawn;

public:
	MissionManagerImplementation(ZoneServer* srv);

	MissionManagerImplementation(DummyConstructorParameter* param);

	void loadLairObjectsToSpawn();

	void handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player);

	void handleMissionAbort(MissionObject* mission, PlayerCreature* player);

	void removeMission(MissionObject* mission, PlayerCreature* player);

	void populateGeneralMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void populateArtisanMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void randomizeSurveyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeGeneralMission(PlayerCreature* player, MissionObject* mission);

	void createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createGeneralMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	bool hasSurveyMission(PlayerCreature* player, const String& spawn);

	MissionManager* _this;

	operator const MissionManager*();

	DistributedObjectStub* _getStub();
protected:
	virtual ~MissionManagerImplementation();

	TransactionalObject* clone();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();

	friend class MissionManager;
	friend class TransactionalObjectHandle<MissionManagerImplementation*>;
};

class MissionManagerAdapter : public ObserverAdapter {
public:
	MissionManagerAdapter(MissionManagerImplementation* impl);

	Packet* invokeMethod(sys::uint32 methid, DistributedMethod* method);

	void loadLairObjectsToSpawn();

	void handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player);

	void handleMissionAbort(MissionObject* mission, PlayerCreature* player);

	void removeMission(MissionObject* mission, PlayerCreature* player);

	void populateGeneralMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void populateArtisanMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter);

	void randomizeSurveyMission(PlayerCreature* player, MissionObject* mission);

	void randomizeGeneralMission(PlayerCreature* player, MissionObject* mission);

	void createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	void createGeneralMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player);

	bool hasSurveyMission(PlayerCreature* player, const String& spawn);

protected:
	String _param1_hasSurveyMission__PlayerCreature_String_;
};

class MissionManagerHelper : public DistributedObjectClassHelper, public Singleton<MissionManagerHelper> {
	static MissionManagerHelper* staticInitializer;

public:
	MissionManagerHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<MissionManagerHelper>;
};

} // namespace mission
} // namespace managers
} // namespace zone
} // namespace server

using namespace server::zone::managers::mission;

#endif /*MISSIONMANAGER_H_*/
