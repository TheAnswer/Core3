/*
 *	server/zone/managers/mission/MissionManager.cpp generated by engine3 IDL compiler 0.60
 */

#include "MissionManager.h"

#include "server/zone/objects/mission/MissionObject.h"

#include "server/zone/objects/tangible/terminal/mission/MissionTerminal.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/ZoneServer.h"

/*
 *	MissionManagerStub
 */

MissionManager::MissionManager(ZoneServer* srv) : Observer(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new MissionManagerImplementation(srv));
	ManagedObject::_getImplementation()->_setStub(this);
}

MissionManager::MissionManager(DummyConstructorParameter* param) : Observer(param) {
}

MissionManager::~MissionManager() {
}


void MissionManager::loadLairObjectsToSpawn() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->loadLairObjectsToSpawn();
}

void MissionManager::handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->handleMissionListRequest(missionTerminal, player, counter);
}

void MissionManager::handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->handleMissionAccept(missionTerminal, mission, player);
}

void MissionManager::handleMissionAbort(MissionObject* mission, PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->handleMissionAbort(mission, player);
}

void MissionManager::removeMission(MissionObject* mission, PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(mission);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->removeMission(mission, player);
}

void MissionManager::populateGeneralMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->populateGeneralMissionList(missionTerminal, player, counter);
}

void MissionManager::populateArtisanMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);
		method.addSignedIntParameter(counter);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->populateArtisanMissionList(missionTerminal, player, counter);
}

void MissionManager::randomizeSurveyMission(PlayerCreature* player, MissionObject* mission) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->randomizeSurveyMission(player, mission);
}

void MissionManager::randomizeGeneralMission(PlayerCreature* player, MissionObject* mission) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);
		method.addObjectParameter(mission);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->randomizeGeneralMission(player, mission);
}

void MissionManager::createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->createMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->createSurveyMissionObjectives(mission, missionTerminal, player);
}

void MissionManager::createGeneralMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(mission);
		method.addObjectParameter(missionTerminal);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((MissionManagerImplementation*) _getImplementation())->createGeneralMissionObjectives(mission, missionTerminal, player);
}

bool MissionManager::hasSurveyMission(PlayerCreature* player, const String& spawn) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addObjectParameter(player);
		method.addAsciiParameter(spawn);

		return method.executeWithBooleanReturn();
	} else
		return ((MissionManagerImplementation*) _getImplementation())->hasSurveyMission(player, spawn);
}

/*
 *	MissionManagerImplementation
 */

MissionManagerImplementation::MissionManagerImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


MissionManagerImplementation::~MissionManagerImplementation() {
}


void MissionManagerImplementation::finalize() {
}

void MissionManagerImplementation::_initializeImplementation() {
	_setClassHelper(MissionManagerHelper::instance());

	_serializationHelperMethod();
}

void MissionManagerImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (MissionManager*) stub;
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* MissionManagerImplementation::_getStub() {
	return _this;
}

MissionManagerImplementation::operator const MissionManager*() {
	return _this;
}

TransactionalObject* MissionManagerImplementation::clone() {
	return (TransactionalObject*) new MissionManagerImplementation(*this);
}


void MissionManagerImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void MissionManagerImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void MissionManagerImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void MissionManagerImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void MissionManagerImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void MissionManagerImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void MissionManagerImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void MissionManagerImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("MissionManager");

	addSerializableVariable("server", &server);
	addSerializableVariable("lairObjectTemplatesToSpawn", &lairObjectTemplatesToSpawn);
}

MissionManagerImplementation::MissionManagerImplementation(ZoneServer* srv) {
	_initializeImplementation();
	// server/zone/managers/mission/MissionManager.idl(63):  		server = srv;
	server = srv;
	// server/zone/managers/mission/MissionManager.idl(64):  		Logger.setLoggingName("MissionManager");
	Logger::setLoggingName("MissionManager");
	// server/zone/managers/mission/MissionManager.idl(66):  		lairObjectTemplatesToSpawn.setNoDuplicateInsertPlan();
	(&lairObjectTemplatesToSpawn)->setNoDuplicateInsertPlan();
	// server/zone/managers/mission/MissionManager.idl(68):  		loadLairObjectsToSpawn();
	loadLairObjectsToSpawn();
}

/*
 *	MissionManagerAdapter
 */

MissionManagerAdapter::MissionManagerAdapter(MissionManagerImplementation* obj) : ObserverAdapter(obj) {
}

Packet* MissionManagerAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		loadLairObjectsToSpawn();
		break;
	case 7:
		handleMissionListRequest((MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 8:
		handleMissionAccept((MissionTerminal*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 9:
		handleMissionAbort((MissionObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 10:
		removeMission((MissionObject*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 11:
		populateGeneralMissionList((MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 12:
		populateArtisanMissionList((MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter(), inv->getSignedIntParameter());
		break;
	case 13:
		randomizeSurveyMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 14:
		randomizeGeneralMission((PlayerCreature*) inv->getObjectParameter(), (MissionObject*) inv->getObjectParameter());
		break;
	case 15:
		createMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 16:
		createSurveyMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 17:
		createGeneralMissionObjectives((MissionObject*) inv->getObjectParameter(), (MissionTerminal*) inv->getObjectParameter(), (PlayerCreature*) inv->getObjectParameter());
		break;
	case 18:
		resp->insertBoolean(hasSurveyMission((PlayerCreature*) inv->getObjectParameter(), inv->getAsciiParameter(_param1_hasSurveyMission__PlayerCreature_String_)));
		break;
	default:
		return NULL;
	}

	return resp;
}

void MissionManagerAdapter::loadLairObjectsToSpawn() {
	((MissionManagerImplementation*) impl)->loadLairObjectsToSpawn();
}

void MissionManagerAdapter::handleMissionListRequest(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	((MissionManagerImplementation*) impl)->handleMissionListRequest(missionTerminal, player, counter);
}

void MissionManagerAdapter::handleMissionAccept(MissionTerminal* missionTerminal, MissionObject* mission, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->handleMissionAccept(missionTerminal, mission, player);
}

void MissionManagerAdapter::handleMissionAbort(MissionObject* mission, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->handleMissionAbort(mission, player);
}

void MissionManagerAdapter::removeMission(MissionObject* mission, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->removeMission(mission, player);
}

void MissionManagerAdapter::populateGeneralMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	((MissionManagerImplementation*) impl)->populateGeneralMissionList(missionTerminal, player, counter);
}

void MissionManagerAdapter::populateArtisanMissionList(MissionTerminal* missionTerminal, PlayerCreature* player, int counter) {
	((MissionManagerImplementation*) impl)->populateArtisanMissionList(missionTerminal, player, counter);
}

void MissionManagerAdapter::randomizeSurveyMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeSurveyMission(player, mission);
}

void MissionManagerAdapter::randomizeGeneralMission(PlayerCreature* player, MissionObject* mission) {
	((MissionManagerImplementation*) impl)->randomizeGeneralMission(player, mission);
}

void MissionManagerAdapter::createMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createSurveyMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createSurveyMissionObjectives(mission, missionTerminal, player);
}

void MissionManagerAdapter::createGeneralMissionObjectives(MissionObject* mission, MissionTerminal* missionTerminal, PlayerCreature* player) {
	((MissionManagerImplementation*) impl)->createGeneralMissionObjectives(mission, missionTerminal, player);
}

bool MissionManagerAdapter::hasSurveyMission(PlayerCreature* player, const String& spawn) {
	return ((MissionManagerImplementation*) impl)->hasSurveyMission(player, spawn);
}

/*
 *	MissionManagerHelper
 */

MissionManagerHelper* MissionManagerHelper::staticInitializer = MissionManagerHelper::instance();

MissionManagerHelper::MissionManagerHelper() {
	className = "MissionManager";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void MissionManagerHelper::finalizeHelper() {
	MissionManagerHelper::finalize();
}

DistributedObject* MissionManagerHelper::instantiateObject() {
	return new MissionManager(DummyConstructorParameter::instance());
}

DistributedObjectServant* MissionManagerHelper::instantiateServant() {
	return new MissionManagerImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* MissionManagerHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new MissionManagerAdapter((MissionManagerImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

