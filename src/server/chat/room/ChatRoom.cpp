/*
 *	server/chat/room/ChatRoom.cpp generated by engine3 IDL compiler 0.60
 */

#include "ChatRoom.h"

#include "server/zone/ZoneServer.h"

#include "server/zone/objects/player/PlayerCreature.h"

#include "server/zone/managers/objectcontroller/ObjectController.h"

/*
 *	ChatRoomStub
 */

ChatRoom::ChatRoom() : ManagedObject(DummyConstructorParameter::instance()) {
	ManagedObject::_setImplementation(new ChatRoomImplementation());
	ManagedObject::_getImplementation()->_setStub(this);
}

ChatRoom::ChatRoom(DummyConstructorParameter* param) : ManagedObject(param) {
}

ChatRoom::~ChatRoom() {
}


void ChatRoom::init(ZoneServer* serv, ChatRoom* par, const String& roomName, unsigned int channelID) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 6);
		method.addObjectParameter(serv);
		method.addObjectParameter(par);
		method.addAsciiParameter(roomName);
		method.addUnsignedIntParameter(channelID);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->init(serv, par, roomName, channelID);
}

void ChatRoom::sendTo(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 7);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->sendTo(player);
}

void ChatRoom::sendDestroyTo(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 8);
		method.addObjectParameter(player);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->sendDestroyTo(player);
}

void ChatRoom::addSubRoom(ChatRoom* channel) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 9);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->addSubRoom(channel);
}

void ChatRoom::removeSubRoom(ChatRoom* channel) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 10);
		method.addObjectParameter(channel);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->removeSubRoom(channel);
}

ChatRoom* ChatRoom::getSubRoom(int i) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 11);
		method.addSignedIntParameter(i);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getSubRoom(i);
}

ChatRoom* ChatRoom::getSubRoom(const String& name) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 12);
		method.addAsciiParameter(name);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getSubRoom(name);
}

void ChatRoom::addPlayer(PlayerCreature* player, bool doLock) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 13);
		method.addObjectParameter(player);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->addPlayer(player, doLock);
}

void ChatRoom::removePlayer(PlayerCreature* player, bool doLock) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 14);
		method.addObjectParameter(player);
		method.addBooleanParameter(doLock);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->removePlayer(player, doLock);
}

void ChatRoom::removePlayer(const String& player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 15);
		method.addAsciiParameter(player);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->removePlayer(player);
}

void ChatRoom::broadcastMessage(BaseMessage* msg) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 16);
		method.addObjectParameter(msg);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->broadcastMessage(msg);
}

void ChatRoom::broadcastMessages(Vector<BaseMessage*>* messages) {
	if (isNull()) {
		throw ObjectNotLocalException(this);

	} else
		((ChatRoomImplementation*) _getImplementation())->broadcastMessages(messages);
}

bool ChatRoom::hasPlayer(PlayerCreature* player) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 17);
		method.addObjectParameter(player);

		return method.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->hasPlayer(player);
}

bool ChatRoom::hasPlayer(const String& name) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 18);
		method.addAsciiParameter(name);

		return method.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->hasPlayer(name);
}

void ChatRoom::removeAllPlayers() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 19);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->removeAllPlayers();
}

void ChatRoom::setPrivate() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 20);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->setPrivate();
}

void ChatRoom::setPublic() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 21);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->setPublic();
}

bool ChatRoom::isPublic() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 22);

		return method.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->isPublic();
}

bool ChatRoom::isPrivate() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 23);

		return method.executeWithBooleanReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->isPrivate();
}

PlayerCreature* ChatRoom::getPlayer(int idx) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 24);
		method.addSignedIntParameter(idx);

		return (PlayerCreature*) method.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getPlayer(idx);
}

int ChatRoom::getPlayerSize() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 25);

		return method.executeWithSignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getPlayerSize();
}

void ChatRoom::setName(const String& Name) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 26);
		method.addAsciiParameter(Name);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->setName(Name);
}

String ChatRoom::getName() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 27);

		method.executeWithAsciiReturn(_return_getName);
		return _return_getName;
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getName();
}

String ChatRoom::getFullPath() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 28);

		method.executeWithAsciiReturn(_return_getFullPath);
		return _return_getFullPath;
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getFullPath();
}

String ChatRoom::getOwner() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 29);

		method.executeWithAsciiReturn(_return_getOwner);
		return _return_getOwner;
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getOwner();
}

String ChatRoom::getCreator() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 30);

		method.executeWithAsciiReturn(_return_getCreator);
		return _return_getCreator;
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getCreator();
}

UnicodeString ChatRoom::getTitle() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 31);

		method.executeWithUnicodeReturn(_return_getTitle);
		return _return_getTitle;
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getTitle();
}

String ChatRoom::getServerName() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 32);

		method.executeWithAsciiReturn(_return_getServerName);
		return _return_getServerName;
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getServerName();
}

void ChatRoom::setOwner(const String& Owner) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 33);
		method.addAsciiParameter(Owner);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->setOwner(Owner);
}

void ChatRoom::setCreator(const String& Creator) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 34);
		method.addAsciiParameter(Creator);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->setCreator(Creator);
}

void ChatRoom::setTitle(const String& Title) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 35);
		method.addAsciiParameter(Title);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->setTitle(Title);
}

void ChatRoom::setRoomID(int id) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 36);
		method.addSignedIntParameter(id);

		method.executeWithVoidReturn();
	} else
		((ChatRoomImplementation*) _getImplementation())->setRoomID(id);
}

unsigned int ChatRoom::getRoomID() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 37);

		return method.executeWithUnsignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getRoomID();
}

int ChatRoom::getSubRoomsSize() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 38);

		return method.executeWithSignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getSubRoomsSize();
}

ChatRoom* ChatRoom::getParent() {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 39);

		return (ChatRoom*) method.executeWithObjectReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->getParent();
}

int ChatRoom::compareTo(ChatRoom* obj) {
	if (isNull()) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, 40);
		method.addObjectParameter(obj);

		return method.executeWithSignedIntReturn();
	} else
		return ((ChatRoomImplementation*) _getImplementation())->compareTo(obj);
}

/*
 *	ChatRoomImplementation
 */

ChatRoomImplementation::ChatRoomImplementation(DummyConstructorParameter* param) : ManagedObjectImplementation(param) {
	_initializeImplementation();
}


ChatRoomImplementation::~ChatRoomImplementation() {
}


void ChatRoomImplementation::finalize() {
}

void ChatRoomImplementation::_initializeImplementation() {
	_setClassHelper(ChatRoomHelper::instance());

	_serializationHelperMethod();
}

void ChatRoomImplementation::_setStub(DistributedObjectStub* stub) {
	_this = (ChatRoom*) stub;
	ManagedObjectImplementation::_setStub(stub);
}

DistributedObjectStub* ChatRoomImplementation::_getStub() {
	return _this;
}

ChatRoomImplementation::operator const ChatRoom*() {
	return _this;
}

TransactionalObject* ChatRoomImplementation::clone() {
	return (TransactionalObject*) new ChatRoomImplementation(*this);
}


void ChatRoomImplementation::lock(bool doLock) {
	_this->lock(doLock);
}

void ChatRoomImplementation::lock(ManagedObject* obj) {
	_this->lock(obj);
}

void ChatRoomImplementation::rlock(bool doLock) {
	_this->rlock(doLock);
}

void ChatRoomImplementation::wlock(bool doLock) {
	_this->wlock(doLock);
}

void ChatRoomImplementation::wlock(ManagedObject* obj) {
	_this->wlock(obj);
}

void ChatRoomImplementation::unlock(bool doLock) {
	_this->unlock(doLock);
}

void ChatRoomImplementation::runlock(bool doLock) {
	_this->runlock(doLock);
}

void ChatRoomImplementation::_serializationHelperMethod() {
	ManagedObjectImplementation::_serializationHelperMethod();

	_setClassName("ChatRoom");

	addSerializableVariable("server", &server);
	addSerializableVariable("name", &name);
	addSerializableVariable("fullPath", &fullPath);
	addSerializableVariable("owner", &owner);
	addSerializableVariable("creator", &creator);
	addSerializableVariable("title", &title);
	addSerializableVariable("roomID", &roomID);
	addSerializableVariable("parent", &parent);
	addSerializableVariable("playerList", &playerList);
	addSerializableVariable("subRooms", &subRooms);
	addSerializableVariable("isPublicRoom", &isPublicRoom);
}

ChatRoomImplementation::ChatRoomImplementation() {
	_initializeImplementation();
	// server/chat/room/ChatRoom.idl(79):  		server = null;
	server = NULL;
	// server/chat/room/ChatRoom.idl(81):  		name = "";
	name = "";
	// server/chat/room/ChatRoom.idl(82):  		roomID = 0;
	roomID = 0;
	// server/chat/room/ChatRoom.idl(84):  		owner = "system";
	owner = "system";
	// server/chat/room/ChatRoom.idl(85):  		creator = "system";
	creator = "system";
	// server/chat/room/ChatRoom.idl(86):  		title = "";
	title = "";
	// server/chat/room/ChatRoom.idl(87):  		fullPath = "";
	fullPath = "";
	// server/chat/room/ChatRoom.idl(89):  		parent = null;
	parent = NULL;
	// server/chat/room/ChatRoom.idl(91):  		isPublicRoom = true;
	isPublicRoom = true;
	// server/chat/room/ChatRoom.idl(93):  		subRooms.setNullValue(null);
	(&subRooms)->setNullValue(NULL);
	// server/chat/room/ChatRoom.idl(94):  		subRooms.setNoDuplicateInsertPlan();
	(&subRooms)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl(96):  		playerList.setNoDuplicateInsertPlan();
	(&playerList)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl(97):  		playerList.setNullValue(null);
	(&playerList)->setNullValue(NULL);
}

void ChatRoomImplementation::init(ZoneServer* serv, ChatRoom* par, const String& roomName, unsigned int channelID) {
	// server/chat/room/ChatRoom.idl(101):  		server = serv;
	server = serv;
	// server/chat/room/ChatRoom.idl(103):  		name = roomName;
	name = roomName;
	// server/chat/room/ChatRoom.idl(105):  		roomID = channelID;
	roomID = channelID;
	// server/chat/room/ChatRoom.idl(107):  		parent = par;
	parent = par;
	// server/chat/room/ChatRoom.idl(109):  		owner = "system";
	owner = "system";
	// server/chat/room/ChatRoom.idl(110):  		creator = "system";
	creator = "system";
	// server/chat/room/ChatRoom.idl(111):  		title = "";
	title = "";
	// server/chat/room/ChatRoom.idl(113):  
	if (par == NULL){
	// server/chat/room/ChatRoom.idl(114):  			fullPath = roomName;
	fullPath = roomName;
}

	else {
	// server/chat/room/ChatRoom.idl(116):  			fullPath = par.getFullPath() + "." + roomName;
	fullPath = par->getFullPath() + "." + roomName;
}
	// server/chat/room/ChatRoom.idl(119):  		isPublicRoom = true;
	isPublicRoom = true;
	// server/chat/room/ChatRoom.idl(121):  		subRooms.setNullValue(null);
	(&subRooms)->setNullValue(NULL);
	// server/chat/room/ChatRoom.idl(122):  		subRooms.setNoDuplicateInsertPlan();
	(&subRooms)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl(124):  		playerList.setNoDuplicateInsertPlan();
	(&playerList)->setNoDuplicateInsertPlan();
	// server/chat/room/ChatRoom.idl(125):  		playerList.setNullValue(null);
	(&playerList)->setNullValue(NULL);
}

void ChatRoomImplementation::addSubRoom(ChatRoom* channel) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(132):  		subRooms.put(channel.getName(), channel);
	(&subRooms)->put(channel->getName(), channel);
}

void ChatRoomImplementation::removeSubRoom(ChatRoom* channel) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(136):  		subRooms.drop(channel.getName());
	(&subRooms)->drop(channel->getName());
}

ChatRoom* ChatRoomImplementation::getSubRoom(int i) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(140):  		return subRooms.get(i);
	return (&subRooms)->get(i);
}

ChatRoom* ChatRoomImplementation::getSubRoom(const String& name) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(144):  		return subRooms.get(name);
	return (&subRooms)->get(name);
}

void ChatRoomImplementation::broadcastMessages(Vector<BaseMessage*>* messages) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(162):  
	for (	// server/chat/room/ChatRoom.idl(162):  		for (int i = 0;
	int i = 0;
	i < (&playerList)->size();
 ++i) {
	// server/chat/room/ChatRoom.idl(163):  			PlayerCreature player = playerList.get(i);
	PlayerCreature* player = (&playerList)->get(i);
	// server/chat/room/ChatRoom.idl(165):  
	for (	// server/chat/room/ChatRoom.idl(165):  			for (int j = 0;
	int j = 0;
	j < messages->size();
 ++j) {
	// server/chat/room/ChatRoom.idl(166):  				BaseMessage msg = messages.get(j);
	BaseMessage* msg = messages->get(j);
	// server/chat/room/ChatRoom.idl(167):  				player.sendMessage(msg.clone());
	player->sendMessage(msg->clone());
}
}
	// server/chat/room/ChatRoom.idl(171):  
	for (	// server/chat/room/ChatRoom.idl(171):  		for (int j = 0;
	int j = 0;
	j < messages->size();
 ++j) {
	// server/chat/room/ChatRoom.idl(172):  			BaseMessage msg = messages.get(j);
	BaseMessage* msg = messages->get(j);
	// server/chat/room/ChatRoom.idl(173):  			msg.finalize();
	msg->finalize();
}
	// server/chat/room/ChatRoom.idl(176):  		messages.removeAll();
	messages->removeAll();
}

bool ChatRoomImplementation::hasPlayer(PlayerCreature* player) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(180):  		return playerList.contains(player.getFirstName());
	return (&playerList)->contains(player->getFirstName());
}

bool ChatRoomImplementation::hasPlayer(const String& name) {
	Locker _locker(_this);
	// server/chat/room/ChatRoom.idl(184):  		return playerList.contains(name);
	return (&playerList)->contains(name);
}

void ChatRoomImplementation::setPrivate() {
	// server/chat/room/ChatRoom.idl(190):  		isPublicRoom = false;
	isPublicRoom = false;
}

void ChatRoomImplementation::setPublic() {
	// server/chat/room/ChatRoom.idl(194):  		isPublicRoom = true;
	isPublicRoom = true;
}

bool ChatRoomImplementation::isPublic() {
	// server/chat/room/ChatRoom.idl(198):  		return isPublicRoom == true;
	return isPublicRoom == true;
}

bool ChatRoomImplementation::isPrivate() {
	// server/chat/room/ChatRoom.idl(202):  		return isPublicRoom == false;
	return isPublicRoom == false;
}

PlayerCreature* ChatRoomImplementation::getPlayer(int idx) {
	// server/chat/room/ChatRoom.idl(206):  		return playerList.get(idx);
	return (&playerList)->get(idx);
}

int ChatRoomImplementation::getPlayerSize() {
	// server/chat/room/ChatRoom.idl(210):  		return playerList.size();
	return (&playerList)->size();
}

void ChatRoomImplementation::setName(const String& Name) {
	// server/chat/room/ChatRoom.idl(214):  		name = Name;
	name = Name;
}

String ChatRoomImplementation::getName() {
	// server/chat/room/ChatRoom.idl(218):  		return name;
	return name;
}

String ChatRoomImplementation::getFullPath() {
	// server/chat/room/ChatRoom.idl(222):  		return fullPath;
	return fullPath;
}

String ChatRoomImplementation::getOwner() {
	// server/chat/room/ChatRoom.idl(226):  		return owner;
	return owner;
}

String ChatRoomImplementation::getCreator() {
	// server/chat/room/ChatRoom.idl(230):  		return creator;
	return creator;
}

UnicodeString ChatRoomImplementation::getTitle() {
	// server/chat/room/ChatRoom.idl(234):  		return title;
	return title;
}

void ChatRoomImplementation::setOwner(const String& Owner) {
	// server/chat/room/ChatRoom.idl(240):  		owner = Owner;
	owner = Owner;
}

void ChatRoomImplementation::setCreator(const String& Creator) {
	// server/chat/room/ChatRoom.idl(244):  		creator = Creator;
	creator = Creator;
}

void ChatRoomImplementation::setTitle(const String& Title) {
	// server/chat/room/ChatRoom.idl(248):  		title = Title;
	title = Title;
}

void ChatRoomImplementation::setRoomID(int id) {
	// server/chat/room/ChatRoom.idl(252):  		roomID = id;
	roomID = id;
}

unsigned int ChatRoomImplementation::getRoomID() {
	// server/chat/room/ChatRoom.idl(256):  		return roomID;
	return roomID;
}

int ChatRoomImplementation::getSubRoomsSize() {
	// server/chat/room/ChatRoom.idl(260):  		return subRooms.size();
	return (&subRooms)->size();
}

ChatRoom* ChatRoomImplementation::getParent() {
	// server/chat/room/ChatRoom.idl(264):  		return parent;
	return parent;
}

int ChatRoomImplementation::compareTo(ChatRoom* obj) {
	// server/chat/room/ChatRoom.idl(268):  
	if (roomID < obj->getRoomID())	// server/chat/room/ChatRoom.idl(269):  			return 1;
	return 1;

	else 	// server/chat/room/ChatRoom.idl(270):  
	if (roomID > obj->getRoomID())	// server/chat/room/ChatRoom.idl(271):  			return -1;
	return -1;

	else 	// server/chat/room/ChatRoom.idl(273):  			return 0;
	return 0;
}

/*
 *	ChatRoomAdapter
 */

ChatRoomAdapter::ChatRoomAdapter(ChatRoomImplementation* obj) : ManagedObjectAdapter(obj) {
}

Packet* ChatRoomAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	Packet* resp = new MethodReturnMessage(0);

	switch (methid) {
	case 6:
		init((ZoneServer*) inv->getObjectParameter(), (ChatRoom*) inv->getObjectParameter(), inv->getAsciiParameter(_param2_init__ZoneServer_ChatRoom_String_int_), inv->getUnsignedIntParameter());
		break;
	case 7:
		sendTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 8:
		sendDestroyTo((PlayerCreature*) inv->getObjectParameter());
		break;
	case 9:
		addSubRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 10:
		removeSubRoom((ChatRoom*) inv->getObjectParameter());
		break;
	case 11:
		resp->insertLong(getSubRoom(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 12:
		resp->insertLong(getSubRoom(inv->getAsciiParameter(_param0_getSubRoom__String_))->_getObjectID());
		break;
	case 13:
		addPlayer((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 14:
		removePlayer((PlayerCreature*) inv->getObjectParameter(), inv->getBooleanParameter());
		break;
	case 15:
		removePlayer(inv->getAsciiParameter(_param0_removePlayer__String_));
		break;
	case 16:
		broadcastMessage((BaseMessage*) inv->getObjectParameter());
		break;
	case 17:
		resp->insertBoolean(hasPlayer((PlayerCreature*) inv->getObjectParameter()));
		break;
	case 18:
		resp->insertBoolean(hasPlayer(inv->getAsciiParameter(_param0_hasPlayer__String_)));
		break;
	case 19:
		removeAllPlayers();
		break;
	case 20:
		setPrivate();
		break;
	case 21:
		setPublic();
		break;
	case 22:
		resp->insertBoolean(isPublic());
		break;
	case 23:
		resp->insertBoolean(isPrivate());
		break;
	case 24:
		resp->insertLong(getPlayer(inv->getSignedIntParameter())->_getObjectID());
		break;
	case 25:
		resp->insertSignedInt(getPlayerSize());
		break;
	case 26:
		setName(inv->getAsciiParameter(_param0_setName__String_));
		break;
	case 27:
		resp->insertAscii(getName());
		break;
	case 28:
		resp->insertAscii(getFullPath());
		break;
	case 29:
		resp->insertAscii(getOwner());
		break;
	case 30:
		resp->insertAscii(getCreator());
		break;
	case 31:
		resp->insertUnicode(getTitle());
		break;
	case 32:
		resp->insertAscii(getServerName());
		break;
	case 33:
		setOwner(inv->getAsciiParameter(_param0_setOwner__String_));
		break;
	case 34:
		setCreator(inv->getAsciiParameter(_param0_setCreator__String_));
		break;
	case 35:
		setTitle(inv->getAsciiParameter(_param0_setTitle__String_));
		break;
	case 36:
		setRoomID(inv->getSignedIntParameter());
		break;
	case 37:
		resp->insertInt(getRoomID());
		break;
	case 38:
		resp->insertSignedInt(getSubRoomsSize());
		break;
	case 39:
		resp->insertLong(getParent()->_getObjectID());
		break;
	case 40:
		resp->insertSignedInt(compareTo((ChatRoom*) inv->getObjectParameter()));
		break;
	default:
		return NULL;
	}

	return resp;
}

void ChatRoomAdapter::init(ZoneServer* serv, ChatRoom* par, const String& roomName, unsigned int channelID) {
	((ChatRoomImplementation*) impl)->init(serv, par, roomName, channelID);
}

void ChatRoomAdapter::sendTo(PlayerCreature* player) {
	((ChatRoomImplementation*) impl)->sendTo(player);
}

void ChatRoomAdapter::sendDestroyTo(PlayerCreature* player) {
	((ChatRoomImplementation*) impl)->sendDestroyTo(player);
}

void ChatRoomAdapter::addSubRoom(ChatRoom* channel) {
	((ChatRoomImplementation*) impl)->addSubRoom(channel);
}

void ChatRoomAdapter::removeSubRoom(ChatRoom* channel) {
	((ChatRoomImplementation*) impl)->removeSubRoom(channel);
}

ChatRoom* ChatRoomAdapter::getSubRoom(int i) {
	return ((ChatRoomImplementation*) impl)->getSubRoom(i);
}

ChatRoom* ChatRoomAdapter::getSubRoom(const String& name) {
	return ((ChatRoomImplementation*) impl)->getSubRoom(name);
}

void ChatRoomAdapter::addPlayer(PlayerCreature* player, bool doLock) {
	((ChatRoomImplementation*) impl)->addPlayer(player, doLock);
}

void ChatRoomAdapter::removePlayer(PlayerCreature* player, bool doLock) {
	((ChatRoomImplementation*) impl)->removePlayer(player, doLock);
}

void ChatRoomAdapter::removePlayer(const String& player) {
	((ChatRoomImplementation*) impl)->removePlayer(player);
}

void ChatRoomAdapter::broadcastMessage(BaseMessage* msg) {
	((ChatRoomImplementation*) impl)->broadcastMessage(msg);
}

bool ChatRoomAdapter::hasPlayer(PlayerCreature* player) {
	return ((ChatRoomImplementation*) impl)->hasPlayer(player);
}

bool ChatRoomAdapter::hasPlayer(const String& name) {
	return ((ChatRoomImplementation*) impl)->hasPlayer(name);
}

void ChatRoomAdapter::removeAllPlayers() {
	((ChatRoomImplementation*) impl)->removeAllPlayers();
}

void ChatRoomAdapter::setPrivate() {
	((ChatRoomImplementation*) impl)->setPrivate();
}

void ChatRoomAdapter::setPublic() {
	((ChatRoomImplementation*) impl)->setPublic();
}

bool ChatRoomAdapter::isPublic() {
	return ((ChatRoomImplementation*) impl)->isPublic();
}

bool ChatRoomAdapter::isPrivate() {
	return ((ChatRoomImplementation*) impl)->isPrivate();
}

PlayerCreature* ChatRoomAdapter::getPlayer(int idx) {
	return ((ChatRoomImplementation*) impl)->getPlayer(idx);
}

int ChatRoomAdapter::getPlayerSize() {
	return ((ChatRoomImplementation*) impl)->getPlayerSize();
}

void ChatRoomAdapter::setName(const String& Name) {
	((ChatRoomImplementation*) impl)->setName(Name);
}

String ChatRoomAdapter::getName() {
	return ((ChatRoomImplementation*) impl)->getName();
}

String ChatRoomAdapter::getFullPath() {
	return ((ChatRoomImplementation*) impl)->getFullPath();
}

String ChatRoomAdapter::getOwner() {
	return ((ChatRoomImplementation*) impl)->getOwner();
}

String ChatRoomAdapter::getCreator() {
	return ((ChatRoomImplementation*) impl)->getCreator();
}

UnicodeString ChatRoomAdapter::getTitle() {
	return ((ChatRoomImplementation*) impl)->getTitle();
}

String ChatRoomAdapter::getServerName() {
	return ((ChatRoomImplementation*) impl)->getServerName();
}

void ChatRoomAdapter::setOwner(const String& Owner) {
	((ChatRoomImplementation*) impl)->setOwner(Owner);
}

void ChatRoomAdapter::setCreator(const String& Creator) {
	((ChatRoomImplementation*) impl)->setCreator(Creator);
}

void ChatRoomAdapter::setTitle(const String& Title) {
	((ChatRoomImplementation*) impl)->setTitle(Title);
}

void ChatRoomAdapter::setRoomID(int id) {
	((ChatRoomImplementation*) impl)->setRoomID(id);
}

unsigned int ChatRoomAdapter::getRoomID() {
	return ((ChatRoomImplementation*) impl)->getRoomID();
}

int ChatRoomAdapter::getSubRoomsSize() {
	return ((ChatRoomImplementation*) impl)->getSubRoomsSize();
}

ChatRoom* ChatRoomAdapter::getParent() {
	return ((ChatRoomImplementation*) impl)->getParent();
}

int ChatRoomAdapter::compareTo(ChatRoom* obj) {
	return ((ChatRoomImplementation*) impl)->compareTo(obj);
}

/*
 *	ChatRoomHelper
 */

ChatRoomHelper* ChatRoomHelper::staticInitializer = ChatRoomHelper::instance();

ChatRoomHelper::ChatRoomHelper() {
	className = "ChatRoom";

	DistributedObjectBroker::instance()->registerClass(className, this);
}

void ChatRoomHelper::finalizeHelper() {
	ChatRoomHelper::finalize();
}

DistributedObject* ChatRoomHelper::instantiateObject() {
	return new ChatRoom(DummyConstructorParameter::instance());
}

DistributedObjectServant* ChatRoomHelper::instantiateServant() {
	return new ChatRoomImplementation(DummyConstructorParameter::instance());
}

DistributedObjectAdapter* ChatRoomHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new ChatRoomAdapter((ChatRoomImplementation*) obj->_getImplementation());

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

